(self.webpackChunkapp=self.webpackChunkapp||[]).push([[6626],{6862:st=>{st.exports=V;var qe=null;try{qe=new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0,97,115,109,1,0,0,0,1,13,2,96,0,1,127,96,4,127,127,127,127,1,127,3,7,6,0,1,1,1,1,1,6,6,1,127,1,65,0,11,7,50,6,3,109,117,108,0,1,5,100,105,118,95,115,0,2,5,100,105,118,95,117,0,3,5,114,101,109,95,115,0,4,5,114,101,109,95,117,0,5,8,103,101,116,95,104,105,103,104,0,0,10,191,1,6,4,0,35,0,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,126,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,127,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,128,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,129,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,130,34,4,66,32,135,167,36,0,32,4,167,11])),{}).exports}catch{}function V(X,$,me){this.low=0|X,this.high=0|$,this.unsigned=!!me}function Fe(X){return!0===(X&&X.__isLong__)}Object.defineProperty(V.prototype,"__isLong__",{value:!0}),V.isLong=Fe;var Vt={},Oe={};function vt(X,$){var me,Ee,tt;return $?(tt=0<=(X>>>=0)&&X<256)&&(Ee=Oe[X])?Ee:(me=_e(X,(0|X)<0?-1:0,!0),tt&&(Oe[X]=me),me):(tt=-128<=(X|=0)&&X<128)&&(Ee=Vt[X])?Ee:(me=_e(X,X<0?-1:0,!1),tt&&(Vt[X]=me),me)}function We(X,$){if(isNaN(X))return $?Wt:it;if($){if(X<0)return Wt;if(X>=oe)return rt}else{if(X<=-we)return ot;if(X+1>=we)return Ze}return X<0?We(-X,$).neg():_e(X%J|0,X/J|0,$)}function _e(X,$,me){return new V(X,$,me)}V.fromInt=vt,V.fromNumber=We,V.fromBits=_e;var ze=Math.pow;function xe(X,$,me){if(0===X.length)throw Error("empty string");if("NaN"===X||"Infinity"===X||"+Infinity"===X||"-Infinity"===X)return it;if("number"==typeof $?(me=$,$=!1):$=!!$,(me=me||10)<2||36<me)throw RangeError("radix");var Ee;if((Ee=X.indexOf("-"))>0)throw Error("interior hyphen");if(0===Ee)return xe(X.substring(1),$,me).neg();for(var tt=We(ze(me,8)),je=it,ge=0;ge<X.length;ge+=8){var W=Math.min(8,X.length-ge),Ut=parseInt(X.substring(ge,ge+W),me);if(W<8){var rn=We(ze(me,W));je=je.mul(rn).add(We(Ut))}else je=(je=je.mul(tt)).add(We(Ut))}return je.unsigned=$,je}function M(X,$){return"number"==typeof X?We(X,$):"string"==typeof X?xe(X,$):_e(X.low,X.high,"boolean"==typeof $?$:X.unsigned)}V.fromString=xe,V.fromValue=M;var J=4294967296,oe=J*J,we=oe/2,Ne=vt(1<<24),it=vt(0);V.ZERO=it;var Wt=vt(0,!0);V.UZERO=Wt;var Mt=vt(1);V.ONE=Mt;var ts=vt(1,!0);V.UONE=ts;var Vn=vt(-1);V.NEG_ONE=Vn;var Ze=_e(-1,2147483647,!1);V.MAX_VALUE=Ze;var rt=_e(-1,-1,!0);V.MAX_UNSIGNED_VALUE=rt;var ot=_e(0,-2147483648,!1);V.MIN_VALUE=ot;var ne=V.prototype;ne.toInt=function(){return this.unsigned?this.low>>>0:this.low},ne.toNumber=function(){return this.unsigned?(this.high>>>0)*J+(this.low>>>0):this.high*J+(this.low>>>0)},ne.toString=function($){if(($=$||10)<2||36<$)throw RangeError("radix");if(this.isZero())return"0";if(this.isNegative()){if(this.eq(ot)){var me=We($),Ee=this.div(me),tt=Ee.mul(me).sub(this);return Ee.toString($)+tt.toInt().toString($)}return"-"+this.neg().toString($)}for(var je=We(ze($,6),this.unsigned),ge=this,W="";;){var Ut=ge.div(je),_t=(ge.sub(Ut.mul(je)).toInt()>>>0).toString($);if((ge=Ut).isZero())return _t+W;for(;_t.length<6;)_t="0"+_t;W=""+_t+W}},ne.getHighBits=function(){return this.high},ne.getHighBitsUnsigned=function(){return this.high>>>0},ne.getLowBits=function(){return this.low},ne.getLowBitsUnsigned=function(){return this.low>>>0},ne.getNumBitsAbs=function(){if(this.isNegative())return this.eq(ot)?64:this.neg().getNumBitsAbs();for(var $=0!=this.high?this.high:this.low,me=31;me>0&&!($&1<<me);me--);return 0!=this.high?me+33:me+1},ne.isZero=function(){return 0===this.high&&0===this.low},ne.eqz=ne.isZero,ne.isNegative=function(){return!this.unsigned&&this.high<0},ne.isPositive=function(){return this.unsigned||this.high>=0},ne.isOdd=function(){return 1==(1&this.low)},ne.isEven=function(){return 0==(1&this.low)},ne.equals=function($){return Fe($)||($=M($)),(this.unsigned===$.unsigned||this.high>>>31!=1||$.high>>>31!=1)&&this.high===$.high&&this.low===$.low},ne.eq=ne.equals,ne.notEquals=function($){return!this.eq($)},ne.neq=ne.notEquals,ne.ne=ne.notEquals,ne.lessThan=function($){return this.comp($)<0},ne.lt=ne.lessThan,ne.lessThanOrEqual=function($){return this.comp($)<=0},ne.lte=ne.lessThanOrEqual,ne.le=ne.lessThanOrEqual,ne.greaterThan=function($){return this.comp($)>0},ne.gt=ne.greaterThan,ne.greaterThanOrEqual=function($){return this.comp($)>=0},ne.gte=ne.greaterThanOrEqual,ne.ge=ne.greaterThanOrEqual,ne.compare=function($){if(Fe($)||($=M($)),this.eq($))return 0;var me=this.isNegative(),Ee=$.isNegative();return me&&!Ee?-1:!me&&Ee?1:this.unsigned?$.high>>>0>this.high>>>0||$.high===this.high&&$.low>>>0>this.low>>>0?-1:1:this.sub($).isNegative()?-1:1},ne.comp=ne.compare,ne.negate=function(){return!this.unsigned&&this.eq(ot)?ot:this.not().add(Mt)},ne.neg=ne.negate,ne.add=function($){Fe($)||($=M($));var _t=0,xn=0,at=0,bn=0;return at+=(bn+=(65535&this.low)+(65535&$.low))>>>16,xn+=(at+=(this.low>>>16)+($.low>>>16))>>>16,_t+=(xn+=(65535&this.high)+(65535&$.high))>>>16,_t+=(this.high>>>16)+($.high>>>16),_e((at&=65535)<<16|(bn&=65535),(_t&=65535)<<16|(xn&=65535),this.unsigned)},ne.subtract=function($){return Fe($)||($=M($)),this.add($.neg())},ne.sub=ne.subtract,ne.multiply=function($){if(this.isZero())return it;if(Fe($)||($=M($)),qe)return _e(qe.mul(this.low,this.high,$.low,$.high),qe.get_high(),this.unsigned);if($.isZero())return it;if(this.eq(ot))return $.isOdd()?ot:it;if($.eq(ot))return this.isOdd()?ot:it;if(this.isNegative())return $.isNegative()?this.neg().mul($.neg()):this.neg().mul($).neg();if($.isNegative())return this.mul($.neg()).neg();if(this.lt(Ne)&&$.lt(Ne))return We(this.toNumber()*$.toNumber(),this.unsigned);var tt=65535&this.high,je=this.low>>>16,ge=65535&this.low,Ut=65535&$.high,rn=$.low>>>16,_t=65535&$.low,xn=0,at=0,bn=0,xa=0;return bn+=(xa+=ge*_t)>>>16,at+=(bn+=je*_t)>>>16,bn&=65535,at+=(bn+=ge*rn)>>>16,xn+=(at+=tt*_t)>>>16,at&=65535,xn+=(at+=je*rn)>>>16,at&=65535,xn+=(at+=ge*Ut)>>>16,xn+=(this.high>>>16)*_t+tt*rn+je*Ut+ge*($.high>>>16),_e((bn&=65535)<<16|(xa&=65535),(xn&=65535)<<16|(at&=65535),this.unsigned)},ne.mul=ne.multiply,ne.divide=function($){if(Fe($)||($=M($)),$.isZero())throw Error("division by zero");var Ee,tt,je;if(qe)return this.unsigned||-2147483648!==this.high||-1!==$.low||-1!==$.high?_e((this.unsigned?qe.div_u:qe.div_s)(this.low,this.high,$.low,$.high),qe.get_high(),this.unsigned):this;if(this.isZero())return this.unsigned?Wt:it;if(this.unsigned){if($.unsigned||($=$.toUnsigned()),$.gt(this))return Wt;if($.gt(this.shru(1)))return ts;je=Wt}else{if(this.eq(ot))return $.eq(Mt)||$.eq(Vn)?ot:$.eq(ot)?Mt:(Ee=this.shr(1).div($).shl(1)).eq(it)?$.isNegative()?Mt:Vn:(tt=this.sub($.mul(Ee)),je=Ee.add(tt.div($)));if($.eq(ot))return this.unsigned?Wt:it;if(this.isNegative())return $.isNegative()?this.neg().div($.neg()):this.neg().div($).neg();if($.isNegative())return this.div($.neg()).neg();je=it}for(tt=this;tt.gte($);){Ee=Math.max(1,Math.floor(tt.toNumber()/$.toNumber()));for(var W=Math.ceil(Math.log(Ee)/Math.LN2),Ut=W<=48?1:ze(2,W-48),rn=We(Ee),_t=rn.mul($);_t.isNegative()||_t.gt(tt);)_t=(rn=We(Ee-=Ut,this.unsigned)).mul($);rn.isZero()&&(rn=Mt),je=je.add(rn),tt=tt.sub(_t)}return je},ne.div=ne.divide,ne.modulo=function($){return Fe($)||($=M($)),qe?_e((this.unsigned?qe.rem_u:qe.rem_s)(this.low,this.high,$.low,$.high),qe.get_high(),this.unsigned):this.sub(this.div($).mul($))},ne.mod=ne.modulo,ne.rem=ne.modulo,ne.not=function(){return _e(~this.low,~this.high,this.unsigned)},ne.and=function($){return Fe($)||($=M($)),_e(this.low&$.low,this.high&$.high,this.unsigned)},ne.or=function($){return Fe($)||($=M($)),_e(this.low|$.low,this.high|$.high,this.unsigned)},ne.xor=function($){return Fe($)||($=M($)),_e(this.low^$.low,this.high^$.high,this.unsigned)},ne.shiftLeft=function($){return Fe($)&&($=$.toInt()),0==($&=63)?this:$<32?_e(this.low<<$,this.high<<$|this.low>>>32-$,this.unsigned):_e(0,this.low<<$-32,this.unsigned)},ne.shl=ne.shiftLeft,ne.shiftRight=function($){return Fe($)&&($=$.toInt()),0==($&=63)?this:$<32?_e(this.low>>>$|this.high<<32-$,this.high>>$,this.unsigned):_e(this.high>>$-32,this.high>=0?0:-1,this.unsigned)},ne.shr=ne.shiftRight,ne.shiftRightUnsigned=function($){if(Fe($)&&($=$.toInt()),0==($&=63))return this;var me=this.high;return $<32?_e(this.low>>>$|me<<32-$,me>>>$,this.unsigned):_e(32===$?me:me>>>$-32,0,this.unsigned)},ne.shru=ne.shiftRightUnsigned,ne.shr_u=ne.shiftRightUnsigned,ne.toSigned=function(){return this.unsigned?_e(this.low,this.high,!1):this},ne.toUnsigned=function(){return this.unsigned?this:_e(this.low,this.high,!0)},ne.toBytes=function($){return $?this.toBytesLE():this.toBytesBE()},ne.toBytesLE=function(){var $=this.high,me=this.low;return[255&me,me>>>8&255,me>>>16&255,me>>>24,255&$,$>>>8&255,$>>>16&255,$>>>24]},ne.toBytesBE=function(){var $=this.high,me=this.low;return[$>>>24,$>>>16&255,$>>>8&255,255&$,me>>>24,me>>>16&255,me>>>8&255,255&me]},V.fromBytes=function($,me,Ee){return Ee?V.fromBytesLE($,me):V.fromBytesBE($,me)},V.fromBytesLE=function($,me){return new V($[0]|$[1]<<8|$[2]<<16|$[3]<<24,$[4]|$[5]<<8|$[6]<<16|$[7]<<24,me)},V.fromBytesBE=function($,me){return new V($[4]<<24|$[5]<<16|$[6]<<8|$[7],$[0]<<24|$[1]<<16|$[2]<<8|$[3],me)}},1315:(st,qe,V)=>{var Fe=V(9064),Vt=V(3237),Oe=V(4275),vt=V(3860),We=V(5806),_e=V(4354),ze=V(824);ze.alea=Fe,ze.xor128=Vt,ze.xorwow=Oe,ze.xorshift7=vt,ze.xor4096=We,ze.tychei=_e,st.exports=ze},9064:function(st,qe,V){var Fe;!function(Vt,Oe,vt){function We(M){var ae=this,pe=function xe(){var M=4022871197;return function(pe){pe=String(pe);for(var J=0;J<pe.length;J++){var oe=.02519603282416938*(M+=pe.charCodeAt(J));oe-=M=oe>>>0,M=(oe*=M)>>>0,M+=4294967296*(oe-=M)}return 2.3283064365386963e-10*(M>>>0)}}();ae.next=function(){var J=2091639*ae.s0+2.3283064365386963e-10*ae.c;return ae.s0=ae.s1,ae.s1=ae.s2,ae.s2=J-(ae.c=0|J)},ae.c=1,ae.s0=pe(" "),ae.s1=pe(" "),ae.s2=pe(" "),ae.s0-=pe(M),ae.s0<0&&(ae.s0+=1),ae.s1-=pe(M),ae.s1<0&&(ae.s1+=1),ae.s2-=pe(M),ae.s2<0&&(ae.s2+=1),pe=null}function _e(M,ae){return ae.c=M.c,ae.s0=M.s0,ae.s1=M.s1,ae.s2=M.s2,ae}function ze(M,ae){var pe=new We(M),J=ae&&ae.state,oe=pe.next;return oe.int32=function(){return 4294967296*pe.next()|0},oe.double=function(){return oe()+11102230246251565e-32*(2097152*oe()|0)},oe.quick=oe,J&&("object"==typeof J&&_e(J,pe),oe.state=function(){return _e(pe,{})}),oe}Oe&&Oe.exports?Oe.exports=ze:V.amdD&&V.amdO?void 0!==(Fe=function(){return ze}.call(qe,V,qe,Oe))&&(Oe.exports=Fe):this.alea=ze}(0,st=V.nmd(st))},4354:function(st,qe,V){var Fe;!function(Vt,Oe,vt){function We(xe){var M=this,ae="";M.next=function(){var J=M.b,oe=M.c,we=M.d,Ne=M.a;return J=J<<25^J>>>7^oe,oe=oe-we|0,we=we<<24^we>>>8^Ne,Ne=Ne-J|0,M.b=J=J<<20^J>>>12^oe,M.c=oe=oe-we|0,M.d=we<<16^oe>>>16^Ne,M.a=Ne-J|0},M.a=0,M.b=0,M.c=-1640531527,M.d=1367130551,xe===Math.floor(xe)?(M.a=xe/4294967296|0,M.b=0|xe):ae+=xe;for(var pe=0;pe<ae.length+20;pe++)M.b^=0|ae.charCodeAt(pe),M.next()}function _e(xe,M){return M.a=xe.a,M.b=xe.b,M.c=xe.c,M.d=xe.d,M}function ze(xe,M){var ae=new We(xe),pe=M&&M.state,J=function(){return(ae.next()>>>0)/4294967296};return J.double=function(){do{var Ne=((ae.next()>>>11)+(ae.next()>>>0)/4294967296)/(1<<21)}while(0===Ne);return Ne},J.int32=ae.next,J.quick=J,pe&&("object"==typeof pe&&_e(pe,ae),J.state=function(){return _e(ae,{})}),J}Oe&&Oe.exports?Oe.exports=ze:V.amdD&&V.amdO?void 0!==(Fe=function(){return ze}.call(qe,V,qe,Oe))&&(Oe.exports=Fe):this.tychei=ze}(0,st=V.nmd(st))},3237:function(st,qe,V){var Fe;!function(Vt,Oe,vt){function We(xe){var M=this,ae="";M.x=0,M.y=0,M.z=0,M.w=0,M.next=function(){var J=M.x^M.x<<11;return M.x=M.y,M.y=M.z,M.z=M.w,M.w^=M.w>>>19^J^J>>>8},xe===(0|xe)?M.x=xe:ae+=xe;for(var pe=0;pe<ae.length+64;pe++)M.x^=0|ae.charCodeAt(pe),M.next()}function _e(xe,M){return M.x=xe.x,M.y=xe.y,M.z=xe.z,M.w=xe.w,M}function ze(xe,M){var ae=new We(xe),pe=M&&M.state,J=function(){return(ae.next()>>>0)/4294967296};return J.double=function(){do{var Ne=((ae.next()>>>11)+(ae.next()>>>0)/4294967296)/(1<<21)}while(0===Ne);return Ne},J.int32=ae.next,J.quick=J,pe&&("object"==typeof pe&&_e(pe,ae),J.state=function(){return _e(ae,{})}),J}Oe&&Oe.exports?Oe.exports=ze:V.amdD&&V.amdO?void 0!==(Fe=function(){return ze}.call(qe,V,qe,Oe))&&(Oe.exports=Fe):this.xor128=ze}(0,st=V.nmd(st))},5806:function(st,qe,V){var Fe;!function(Vt,Oe,vt){function We(xe){var M=this;M.next=function(){var we,Ne,pe=M.w,J=M.X,oe=M.i;return M.w=pe=pe+1640531527|0,Ne=J[oe+34&127],we=J[oe=oe+1&127],Ne^=Ne<<13,we^=we<<17,Ne=J[oe]=(Ne^=Ne>>>15)^(we^=we>>>12),M.i=oe,Ne+(pe^pe>>>16)|0},function ae(pe,J){var oe,we,Ne,it,Wt,Mt=[],ts=128;for(J===(0|J)?(we=J,J=null):(J+="\0",we=0,ts=Math.max(ts,J.length)),Ne=0,it=-32;it<ts;++it)J&&(we^=J.charCodeAt((it+32)%J.length)),0===it&&(Wt=we),we^=we<<10,we^=we>>>15,we^=we<<4,we^=we>>>13,it>=0&&(Ne=0==(oe=Mt[127&it]^=we+(Wt=Wt+1640531527|0))?Ne+1:0);for(Ne>=128&&(Mt[127&(J&&J.length||0)]=-1),Ne=127,it=512;it>0;--it)we=Mt[Ne+34&127],oe=Mt[Ne=Ne+1&127],we^=we<<13,oe^=oe<<17,Mt[Ne]=(we^=we>>>15)^(oe^=oe>>>12);pe.w=Wt,pe.X=Mt,pe.i=Ne}(M,xe)}function _e(xe,M){return M.i=xe.i,M.w=xe.w,M.X=xe.X.slice(),M}function ze(xe,M){null==xe&&(xe=+new Date);var ae=new We(xe),pe=M&&M.state,J=function(){return(ae.next()>>>0)/4294967296};return J.double=function(){do{var Ne=((ae.next()>>>11)+(ae.next()>>>0)/4294967296)/(1<<21)}while(0===Ne);return Ne},J.int32=ae.next,J.quick=J,pe&&(pe.X&&_e(pe,ae),J.state=function(){return _e(ae,{})}),J}Oe&&Oe.exports?Oe.exports=ze:V.amdD&&V.amdO?void 0!==(Fe=function(){return ze}.call(qe,V,qe,Oe))&&(Oe.exports=Fe):this.xor4096=ze}(0,st=V.nmd(st))},3860:function(st,qe,V){var Fe;!function(Vt,Oe,vt){function We(xe){var M=this;M.next=function(){var oe,we,pe=M.x,J=M.i;return oe=pe[J],we=(oe^=oe>>>7)^oe<<24,we^=(oe=pe[J+1&7])^oe>>>10,we^=(oe=pe[J+3&7])^oe>>>3,we^=(oe=pe[J+4&7])^oe<<7,oe=pe[J+7&7],pe[J]=we^=(oe^=oe<<13)^oe<<9,M.i=J+1&7,we},function ae(pe,J){var oe,Ne=[];if(J===(0|J))Ne[0]=J;else for(J=""+J,oe=0;oe<J.length;++oe)Ne[7&oe]=Ne[7&oe]<<15^J.charCodeAt(oe)+Ne[oe+1&7]<<13;for(;Ne.length<8;)Ne.push(0);for(oe=0;oe<8&&0===Ne[oe];++oe);for(8==oe&&(Ne[7]=-1),pe.x=Ne,pe.i=0,oe=256;oe>0;--oe)pe.next()}(M,xe)}function _e(xe,M){return M.x=xe.x.slice(),M.i=xe.i,M}function ze(xe,M){null==xe&&(xe=+new Date);var ae=new We(xe),pe=M&&M.state,J=function(){return(ae.next()>>>0)/4294967296};return J.double=function(){do{var Ne=((ae.next()>>>11)+(ae.next()>>>0)/4294967296)/(1<<21)}while(0===Ne);return Ne},J.int32=ae.next,J.quick=J,pe&&(pe.x&&_e(pe,ae),J.state=function(){return _e(ae,{})}),J}Oe&&Oe.exports?Oe.exports=ze:V.amdD&&V.amdO?void 0!==(Fe=function(){return ze}.call(qe,V,qe,Oe))&&(Oe.exports=Fe):this.xorshift7=ze}(0,st=V.nmd(st))},4275:function(st,qe,V){var Fe;!function(Vt,Oe,vt){function We(xe){var M=this,ae="";M.next=function(){var J=M.x^M.x>>>2;return M.x=M.y,M.y=M.z,M.z=M.w,M.w=M.v,(M.d=M.d+362437|0)+(M.v=M.v^M.v<<4^J^J<<1)|0},M.x=0,M.y=0,M.z=0,M.w=0,M.v=0,xe===(0|xe)?M.x=xe:ae+=xe;for(var pe=0;pe<ae.length+64;pe++)M.x^=0|ae.charCodeAt(pe),pe==ae.length&&(M.d=M.x<<10^M.x>>>4),M.next()}function _e(xe,M){return M.x=xe.x,M.y=xe.y,M.z=xe.z,M.w=xe.w,M.v=xe.v,M.d=xe.d,M}function ze(xe,M){var ae=new We(xe),pe=M&&M.state,J=function(){return(ae.next()>>>0)/4294967296};return J.double=function(){do{var Ne=((ae.next()>>>11)+(ae.next()>>>0)/4294967296)/(1<<21)}while(0===Ne);return Ne},J.int32=ae.next,J.quick=J,pe&&("object"==typeof pe&&_e(pe,ae),J.state=function(){return _e(ae,{})}),J}Oe&&Oe.exports?Oe.exports=ze:V.amdD&&V.amdO?void 0!==(Fe=function(){return ze}.call(qe,V,qe,Oe))&&(Oe.exports=Fe):this.xorwow=ze}(0,st=V.nmd(st))},824:function(st,qe,V){var Fe;!function(Vt,Oe,vt){var oe,We=256,M=vt.pow(We,6),ae=vt.pow(2,52),pe=2*ae,J=We-1;function we(Ze,rt,ot){var ne=[],X=Mt(Wt((rt=1==rt?{entropy:!0}:rt||{}).entropy?[Ze,Vn(Oe)]:null==Ze?function ts(){try{var Ze;return oe&&(Ze=oe.randomBytes)?Ze=Ze(We):(Ze=new Uint8Array(We),(Vt.crypto||Vt.msCrypto).getRandomValues(Ze)),Vn(Ze)}catch{var rt=Vt.navigator,ot=rt&&rt.plugins;return[+new Date,Vt,ot,Vt.screen,Vn(Oe)]}}():Ze,3),ne),$=new Ne(ne),me=function(){for(var Ee=$.g(6),tt=M,je=0;Ee<ae;)Ee=(Ee+je)*We,tt*=We,je=$.g(1);for(;Ee>=pe;)Ee/=2,tt/=2,je>>>=1;return(Ee+je)/tt};return me.int32=function(){return 0|$.g(4)},me.quick=function(){return $.g(4)/4294967296},me.double=me,Mt(Vn($.S),Oe),(rt.pass||ot||function(Ee,tt,je,ge){return ge&&(ge.S&&it(ge,$),Ee.state=function(){return it($,{})}),je?(vt.random=Ee,tt):Ee})(me,X,"global"in rt?rt.global:this==vt,rt.state)}function Ne(Ze){var rt,ot=Ze.length,ne=this,X=0,$=ne.i=ne.j=0,me=ne.S=[];for(ot||(Ze=[ot++]);X<We;)me[X]=X++;for(X=0;X<We;X++)me[X]=me[$=J&$+Ze[X%ot]+(rt=me[X])],me[$]=rt;(ne.g=function(Ee){for(var tt,je=0,ge=ne.i,W=ne.j,Ut=ne.S;Ee--;)tt=Ut[ge=J&ge+1],je=je*We+Ut[J&(Ut[ge]=Ut[W=J&W+tt])+(Ut[W]=tt)];return ne.i=ge,ne.j=W,je})(We)}function it(Ze,rt){return rt.i=Ze.i,rt.j=Ze.j,rt.S=Ze.S.slice(),rt}function Wt(Ze,rt){var X,ot=[],ne=typeof Ze;if(rt&&"object"==ne)for(X in Ze)try{ot.push(Wt(Ze[X],rt-1))}catch{}return ot.length?ot:"string"==ne?Ze:Ze+"\0"}function Mt(Ze,rt){for(var ne,ot=Ze+"",X=0;X<ot.length;)rt[J&X]=J&(ne^=19*rt[J&X])+ot.charCodeAt(X++);return Vn(rt)}function Vn(Ze){return String.fromCharCode.apply(0,Ze)}if(Mt(vt.random(),Oe),st.exports){st.exports=we;try{oe=V(5042)}catch{}}else void 0!==(Fe=function(){return we}.call(qe,V,qe,st))&&(st.exports=Fe)}(typeof self<"u"?self:this,[],Math)},6626:(st,qe,V)=>{"use strict";V.r(qe),V.d(qe,{HomePageModule:()=>LX});var Fe={};V.r(Fe),V.d(Fe,{CompositeArrayBuffer:()=>ys,browserFiles:()=>HI,browserHTTPRequest:()=>ZI,concatenateArrayBuffers:()=>Xg,copyModel:()=>mI,decodeWeights:()=>Kg,encodeWeights:()=>Rd,fromMemory:()=>QI,fromMemorySync:()=>Iy,getLoadHandlers:()=>nI,getModelArtifactsForJSON:()=>Od,getModelArtifactsForJSONSync:()=>Qg,getModelArtifactsInfoForJSON:()=>bi,getSaveHandlers:()=>ey,getWeightSpecs:()=>Jg,http:()=>tp,isHTTPScheme:()=>ep,listModels:()=>pI,loadWeights:()=>jI,moveModel:()=>gI,registerLoadRouter:()=>tI,registerSaveRouter:()=>eI,removeModel:()=>fI,weightsLoaderFactory:()=>by,withSaveHandler:()=>JI,withSaveHandlerSync:()=>eN});var Vt={};V.r(Vt),V.d(Vt,{assertParamsValid:()=>ap,computeFlatOffset:()=>up,computeOutShape:()=>ip,getNormalizedAxes:()=>lN,isSliceContinous:()=>lp,maskToAxes:()=>iN,parseSliceParams:()=>Tu,sliceInfo:()=>cp,startForAxis:()=>Oy,startIndicesWithElidedDims:()=>Ry,stopForAxis:()=>Ly,stopIndicesWithElidedDims:()=>Dy,stridesForAxis:()=>Fy,stridesWithElidedDims:()=>_y});var Oe={};V.r(Oe),V.d(Oe,{conv2d:()=>Lx,depthwiseConv2d:()=>T$,matMul:()=>Yp});var vt={};V.r(vt),V.d(vt,{collectGatherOpShapeInfo:()=>$f,computeOutShape:()=>yb,segOpComputeOptimalWindowSize:()=>gb});var We={};V.r(We),V.d(We,{ERF_A1:()=>ff,ERF_A2:()=>mf,ERF_A3:()=>gf,ERF_A4:()=>yf,ERF_A5:()=>xf,ERF_P:()=>pf,PARALLELIZE_THRESHOLD:()=>lf,RowPartitionType:()=>Ps,SELU_SCALE:()=>ec,SELU_SCALEALPHA:()=>Ju,applyActivation:()=>Zu,assertAndGetBroadcastShape:()=>Le,assertAxesAreInnerMostDims:()=>ln,assertParamsConsistent:()=>af,assignToTypedArray:()=>eb,axesAreInnerMostDims:()=>wp,calculateShapes:()=>ro,checkEinsumDimSizes:()=>If,checkPadOnDimRoundingMode:()=>Sn,combineLocations:()=>cx,combineRaggedTensorToTensorShapes:()=>Kx,complexWithEvenIndex:()=>Qx,complexWithOddIndex:()=>Jx,computeConv2DInfo:()=>tn,computeConv3DInfo:()=>br,computeDefaultPad:()=>dp,computeDilation2DInfo:()=>wi,computeOptimalWindowSize:()=>Qu,computeOutAndReduceShapes:()=>nn,computeOutShape:()=>Ls,computePool2DInfo:()=>os,computePool3DInfo:()=>Xs,convertConv2DDataFormat:()=>Zs,decodeEinsumEquation:()=>vf,eitherStridesOrDilationsAreOne:()=>an,expandShapeToKeepDim:()=>Ot,exponent:()=>nb,exponents:()=>tb,fromStringArrayToUint8:()=>xb,fromUint8ToStringArray:()=>Js,getAxesPermutation:()=>kt,getBroadcastDims:()=>Bo,getComplexWithIndex:()=>bf,getEinsumComputePath:()=>Nf,getEinsumPermutation:()=>Sf,getFusedBiasGradient:()=>Xu,getFusedDyActivation:()=>qu,getImageCenter:()=>uf,getInnerMostAxes:()=>Lt,getPermuted:()=>Li,getRaggedRank:()=>Xx,getReductionAxes:()=>jt,getReshaped:()=>Oi,getReshapedPermuted:()=>Pi,getRowPartitionTypesHelper:()=>qx,getSliceBeginCoords:()=>cf,getSliceSize:()=>hf,getSparseFillEmptyRowsIndicesDenseShapeMismatch:()=>ob,getSparseFillEmptyRowsNegativeIndexErrorMessage:()=>ab,getSparseFillEmptyRowsOutOfRangeIndexErrorMessage:()=>ib,getSparseReshapeEmptyTensorZeroOutputDimErrorMessage:()=>cb,getSparseReshapeInputOutputMismatchErrorMessage:()=>db,getSparseReshapeInputOutputMultipleErrorMessage:()=>hb,getSparseReshapeMultipleNegativeOneOutputDimErrorMessage:()=>lb,getSparseReshapeNegativeOutputDimErrorMessage:()=>ub,getSparseSegmentReductionIndicesOutOfRangeErrorMessage:()=>mb,getSparseSegmentReductionNegativeSegmentIdsErrorMessage:()=>Tf,getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage:()=>pb,getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage:()=>fb,getUndoAxesPermutation:()=>Sr,isIdentityPermutation:()=>Cf,log:()=>xS,mergeRealAndImagArrays:()=>Qs,prepareAndValidate:()=>df,prepareSplitSize:()=>kf,segment_util:()=>vt,shouldFuse:()=>Yu,slice_util:()=>Vt,splitRealAndImagArrays:()=>Yx,stridesOrDilationsArePositive:()=>Jr,tupleValuesAreOne:()=>wr,upcastType:()=>Fn,validateDefaultValueShape:()=>Zx,validateInput:()=>Vp,validateUpdateShape:()=>_x,warn:()=>Un});var _e={};V.r(_e),V.d(_e,{json:()=>fD});var ze={};V.r(ze),V.d(ze,{json:()=>mD});var xe={};V.r(xe),V.d(xe,{json:()=>gD});var M={};V.r(M),V.d(M,{json:()=>yD});var ae={};V.r(ae),V.d(ae,{json:()=>xD});var pe={};V.r(pe),V.d(pe,{json:()=>bD});var J={};V.r(J),V.d(J,{json:()=>wD});var oe={};V.r(oe),V.d(oe,{json:()=>vD});var we={};V.r(we),V.d(we,{json:()=>SD});var Ne={};V.r(Ne),V.d(Ne,{json:()=>ID});var it={};V.r(it),V.d(it,{json:()=>ND});var Wt={};V.r(Wt),V.d(Wt,{json:()=>CD});var Mt={};V.r(Mt),V.d(Mt,{json:()=>kD});var ts={};V.r(ts),V.d(ts,{json:()=>TD});var Vn={};V.r(Vn),V.d(Vn,{json:()=>$D});var Ze={};V.r(Ze),V.d(Ze,{json:()=>_D});var rt={};V.r(rt),V.d(rt,{json:()=>ED});var ot={};V.r(ot),V.d(ot,{json:()=>AD});var ne={};V.r(ne),V.d(ne,{json:()=>RD});var X={};V.r(X),V.d(X,{OP_SCOPE_SUFFIX:()=>jg,abs:()=>Ht,acos:()=>zy,acosh:()=>My,add:()=>ee,addN:()=>fN,all:()=>hp,any:()=>$u,argMax:()=>Qr,argMin:()=>By,asin:()=>Vy,asinh:()=>Wy,atan:()=>Uy,atan2:()=>Gy,atanh:()=>Hy,avgPool:()=>_u,avgPool3d:()=>jy,basicLSTMCell:()=>PN,batchNorm:()=>Ii,batchNorm2d:()=>Ky,batchNorm3d:()=>qy,batchNorm4d:()=>Xy,batchToSpaceND:()=>Eu,bincount:()=>Zy,bitwiseAnd:()=>jN,booleanMaskAsync:()=>Kp,broadcastArgs:()=>qN,broadcastTo:()=>Uo,buffer:()=>Me,cast:()=>he,ceil:()=>Yy,clipByValue:()=>On,clone:()=>Ks,complex:()=>fr,concat:()=>Bt,concat1d:()=>Qy,concat2d:()=>Jy,concat3d:()=>ex,concat4d:()=>tx,conv1d:()=>fp,conv2d:()=>vr,conv2dTranspose:()=>gp,conv3d:()=>nx,conv3dTranspose:()=>rx,cos:()=>Au,cosh:()=>yp,cosineWindow:()=>qp,cumprod:()=>Ru,cumsum:()=>xp,denseBincount:()=>bp,depthToSpace:()=>ox,depthwiseConv2d:()=>Ni,diag:()=>yC,dilation2d:()=>ax,div:()=>Ce,divNoNan:()=>ix,dot:()=>lx,dropout:()=>Fx,einsum:()=>Go,elu:()=>Ci,enclosingPowerOfTwo:()=>Ox,ensureShape:()=>kC,equal:()=>bs,erf:()=>ux,euclideanNorm:()=>dx,exp:()=>Hn,expandDims:()=>In,expm1:()=>px,eye:()=>vp,fft:()=>ju,fill:()=>Mo,floor:()=>$i,floorDiv:()=>qd,fused:()=>Oe,gather:()=>_i,gatherND:()=>y$,greater:()=>_n,greaterEqual:()=>Ir,ifft:()=>Di,imag:()=>Du,image:()=>Os,inTopKAsync:()=>v$,irfft:()=>Mp,isFinite:()=>fx,isInf:()=>mx,isNaN:()=>gx,leakyRelu:()=>Fu,less:()=>Ei,lessEqual:()=>eo,linalg:()=>Hx,linspace:()=>XC,localResponseNormalization:()=>yx,log:()=>jn,log1p:()=>Ou,logSigmoid:()=>xx,logSoftmax:()=>Sp,logSumExp:()=>Ip,logicalAnd:()=>Ds,logicalNot:()=>Lu,logicalOr:()=>Np,logicalXor:()=>bx,losses:()=>o2,lowerBound:()=>uk,matMul:()=>Ke,max:()=>Gn,maxPool:()=>zu,maxPool3d:()=>wx,maxPoolWithArgmax:()=>pk,maximum:()=>xs,mean:()=>Rt,meshgrid:()=>mk,min:()=>ki,minimum:()=>to,mirrorPad:()=>vx,mod:()=>Sx,moments:()=>Mu,movingAverage:()=>c$,mul:()=>D,multiRNNCell:()=>vk,multinomial:()=>Ik,neg:()=>wt,norm:()=>Ti,notEqual:()=>jo,oneHot:()=>kp,ones:()=>Kn,onesLike:()=>qn,op:()=>_,outerProduct:()=>$k,pad:()=>Nr,pad1d:()=>Ak,pad2d:()=>Dk,pad3d:()=>Ok,pad4d:()=>Pk,pool:()=>Ix,pow:()=>xr,prelu:()=>Vu,print:()=>ly,prod:()=>Nx,raggedGather:()=>Hk,raggedRange:()=>Kk,raggedTensorToTensor:()=>Xk,rand:()=>Yk,randomGamma:()=>rT,randomNormal:()=>_p,randomStandardNormal:()=>iT,randomUniform:()=>no,randomUniformInt:()=>cT,range:()=>Ko,real:()=>Ai,reciprocal:()=>Cx,relu:()=>Fs,relu6:()=>Ep,reshape:()=>F,reverse:()=>is,reverse1d:()=>yT,reverse2d:()=>bT,reverse3d:()=>vT,reverse4d:()=>IT,rfft:()=>Ku,round:()=>Ap,rsqrt:()=>Rp,scalar:()=>$e,scatterND:()=>d$,searchSorted:()=>Cp,selu:()=>Dp,separableConv2d:()=>Fp,setdiff1dAsync:()=>_T,sigmoid:()=>Rs,sign:()=>kx,signal:()=>r2,sin:()=>Lp,sinh:()=>Pp,slice:()=>Qe,slice1d:()=>Uu,slice2d:()=>zp,slice3d:()=>Gu,slice4d:()=>Ri,softmax:()=>Hu,softplus:()=>Ho,spaceToBatchND:()=>Bu,sparse:()=>a2,sparseToDense:()=>m$,spectral:()=>s2,split:()=>Ln,sqrt:()=>pn,square:()=>dt,squaredDifference:()=>Bp,squeeze:()=>so,stack:()=>Xn,step:()=>qo,stridedSlice:()=>Tx,string:()=>i2,sub:()=>be,sum:()=>ve,tan:()=>$x,tanh:()=>Wo,tensor:()=>At,tensor1d:()=>mn,tensor2d:()=>Fi,tensor3d:()=>Ny,tensor4d:()=>XT,tensor5d:()=>ZT,tensor6d:()=>YT,tensorScatterUpdate:()=>JT,tile:()=>as,topk:()=>Ex,transpose:()=>Je,truncatedNormal:()=>Wp,unique:()=>Ax,unsortedSegmentSum:()=>Up,unstack:()=>ls,upperBound:()=>o$,variable:()=>Rx,where:()=>fn,whereAsync:()=>Dx,zeros:()=>Kt,zerosLike:()=>Ye});var $={};V.r($),V.d($,{addImpl:()=>Ew,bincountImpl:()=>Vm,bincountReduceImpl:()=>Lw,bitwiseAndImpl:()=>Pw,castImpl:()=>_w,ceilImpl:()=>zw,concatImpl:()=>Mw,equalImpl:()=>Ww,expImpl:()=>Gw,expm1Impl:()=>jw,floorImpl:()=>Xw,gatherNdImpl:()=>Zw,gatherV2Impl:()=>Yw,greaterEqualImpl:()=>Jw,greaterImpl:()=>Qw,lessEqualImpl:()=>tv,lessImpl:()=>ev,linSpaceImpl:()=>nv,logImpl:()=>sv,maxImpl:()=>rv,maximumImpl:()=>av,minimumImpl:()=>iv,multiplyImpl:()=>Wm,negImpl:()=>uv,notEqualImpl:()=>cv,prodImpl:()=>fv,raggedGatherImpl:()=>gv,raggedRangeImpl:()=>xv,raggedTensorToTensorImpl:()=>vv,rangeImpl:()=>Sv,rsqrtImpl:()=>Iv,scatterImpl:()=>yo,sigmoidImpl:()=>rO,simpleAbsImpl:()=>Rw,sliceImpl:()=>Ow,sparseFillEmptyRowsImpl:()=>Cv,sparseReshapeImpl:()=>kv,sparseSegmentReductionImpl:()=>qm,sqrtImpl:()=>AM,staticRegexReplaceImpl:()=>Tv,stridedSliceImpl:()=>$v,stringNGramsImpl:()=>_v,stringSplitImpl:()=>Ev,stringToHashBucketFastImpl:()=>Av,subImpl:()=>Kw,tileImpl:()=>Rv,topKImpl:()=>Fv,transposeImpl:()=>Mm,uniqueImpl:()=>Lv});var me=V(6733),Ee=V(8182),tt=V(2133),je=V(9393),ge=V(7170),W=V(8239);class _t{constructor(t,e){this.backend=t,this.dataMover=e,this.data=new WeakMap,this.dataIdsCount=0}get(t){return this.data.has(t)||this.dataMover.moveData(this.backend,t),this.data.get(t)}set(t,e){this.dataIdsCount++,this.data.set(t,e)}has(t){return this.data.has(t)}delete(t){return this.dataIdsCount--,this.data.delete(t)}numDataIds(){return this.dataIdsCount}}class xn{refCount(t){return at("refCount")}incRef(t){return at("incRef")}timerAvailable(){return!0}time(t){return at("time")}read(t){return at("read")}readSync(t){return at("readSync")}readToGPU(t,e){return at("readToGPU")}numDataIds(){return at("numDataIds")}disposeData(t,e){return at("disposeData")}write(t,e,s){return at("write")}move(t,e,s,r,o){return at("move")}createTensorFromGPUData(t,e,s){return at("createTensorFromGPUData")}memory(){return at("memory")}floatPrecision(){return at("floatPrecision")}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}dispose(){return at("dispose")}}function at(n){throw new Error(`'${n}' not yet implemented or not found in the registry. This kernel may not be supported by the tfjs backend you have chosen`)}function bn(n){let t=n.length,e=0;for(;t>0;)e=Math.random()*t|0,t--,ir(n,t,e)}function Ur(n,t,e){return Math.max(n,Math.min(t,e))}function ih(n){return n%2==0?n:n+1}function ir(n,t,e){const s=n[t];n[t]=n[e],n[e]=s}function I(n,t){if(!n)throw new Error("string"==typeof t?t:t())}function Dn(n,t,e=""){I(Xe(n,t),()=>e+` Shapes ${n} and ${t} must match`)}function Co(n){I(null!=n,()=>"The input to the tensor constructor must be a non-null value.")}function G(n){if(0===n.length)return 1;let t=n[0];for(let e=1;e<n.length;e++)t*=n[e];return t}function Xe(n,t){if(n===t)return!0;if(null==n||null==t||n.length!==t.length)return!1;for(let e=0;e<n.length;e++)if(n[e]!==t[e])return!1;return!0}function ko(n){return n%1==0}function lh(n){const t=Math.ceil(Math.sqrt(n));return[t,Math.ceil(n/t)]}function To(n,t){return t<=n.length?n:n+" ".repeat(t-n.length)}function mg(n,t=(r=>0),e,s){return new Promise((r,o)=>{let a=0;const i=()=>{if(n())return void r();a++;const l=t(a);null!=e&&a>=e?o():null!=s?s(i,l):setTimeout(i,l)};i()})}function gg(n,t){let e=1,s=-1;for(let o=0;o<n.length;++o)if(n[o]>=0)e*=n[o];else if(-1===n[o]){if(-1!==s)throw Error(`Shapes can only have 1 implicit size. Found -1 at dim ${s} and dim ${o}`);s=o}else if(n[o]<0)throw Error(`Shapes can not be < 0. Found ${n[o]} at dim ${o}`);if(-1===s){if(t>0&&t!==e)throw Error(`Size(${t}) must match the product of shape ${n}`);return n}if(0===e)throw Error(`Cannot infer the missing size in [${n}] when there are 0 elements`);if(t%e!=0)throw Error(`The implicit shape can't be a fractional number. Got ${t} / ${e}`);const r=n.slice();return r[s]=t/e,r}function Ge(n,t){const e=t.length;return I((n=null==n?t.map((s,r)=>r):[].concat(n)).every(s=>s>=-e&&s<e),()=>`All values in axis param must be in range [-${e}, ${e}) but got axis ${n}`),I(n.every(s=>ko(s)),()=>`All values in axis param must be integers but got axis ${n}`),n.map(s=>s<0?e+s:s)}function lr(n,t){const e=[],s=[],r=null!=t&&Array.isArray(t)&&0===t.length,o=null==t||r?null:Ge(t,n).sort();let a=0;for(let i=0;i<n.length;++i){if(null!=o){if(o[a]===i&&1!==n[i])throw new Error(`Can't squeeze axis ${i} since its dim '${n[i]}' is not 1`);(null==o[a]||o[a]>i)&&1===n[i]&&(e.push(n[i]),s.push(i)),o[a]<=i&&a++}1!==n[i]&&(e.push(n[i]),s.push(i))}return{newShape:e,keptDims:s}}function on(n,t){return Ft(n,t)}function Ft(n,t){let e=null;if(null==n||"float32"===n)e=new Float32Array(t);else if("int32"===n)e=new Int32Array(t);else if("bool"===n)e=new Uint8Array(t);else{if("string"!==n)throw new Error(`Unknown data type ${n}`);e=new Array(t)}return e}function yg(n,t){return!("complex64"===t||"float32"===t&&"complex64"!==n||"int32"===t&&"float32"!==n&&"complex64"!==n||"bool"===t&&"bool"===n)}function cl(n){if("float32"===n||"int32"===n)return 4;if("complex64"===n)return 8;if("bool"===n)return 1;throw new Error(`Unknown dtype ${n}`)}function ba(n){return"string"==typeof n||n instanceof String}function uh(n){return"number"==typeof n}function $o(n){return Array.isArray(n)?$o(n[0]):n instanceof Float32Array?"float32":n instanceof Int32Array||n instanceof Uint8Array||n instanceof Uint8ClampedArray?"int32":uh(n)?"float32":ba(n)?"string":function lS(n){return"boolean"==typeof n}(n)?"bool":"float32"}function ch(n){return!!(n&&n.constructor&&n.call&&n.apply)}function hh(n,t){for(let e=t;e<n;++e)if(n%e==0)return e;return n}function ke(n){const t=n.length;if(t<2)return[];const e=new Array(t-1);e[t-2]=n[t-1];for(let s=t-3;s>=0;--s)e[s]=e[s+1]*n[s+1];return e}function xg(n,t,e,s=!1){const r=new Array;if(1===t.length){const o=t[0]*(s?2:1);for(let a=0;a<o;a++)r[a]=e[n+a]}else{const o=t[0],a=t.slice(1),i=a.reduce((l,u)=>l*u)*(s?2:1);for(let l=0;l<o;l++)r[l]=xg(n+l*i,a,e,s)}return r}function ns(n,t,e=!1){if(0===n.length)return t[0];const s=n.reduce((r,o)=>r*o)*(e?2:1);if(0===s)return[];if(s!==t.length)throw new Error(`[${n}] does not match the input size ${t.length}${e?" for a complex tensor":""}.`);return xg(0,n,t,e)}function dh(n,t){const e=dn(n,t);for(let s=0;s<e.length;s++)e[s]=1;return e}function dn(n,t){if(null==t||"float32"===t||"complex64"===t)return new Float32Array(n);if("int32"===t)return new Int32Array(n);if("bool"===t)return new Uint8Array(n);throw new Error(`Unknown data type ${t}`)}function bg(n,t){const e=n.reduce((s,r)=>s*r,1);if(null==t||"float32"===t)return ns(n,new Float32Array(e));if("int32"===t)return ns(n,new Int32Array(e));if("bool"===t)return ns(n,new Uint8Array(e));throw new Error(`Unknown data type ${t}`)}function Wn(n){n.forEach(t=>{I(Number.isInteger(t)&&t>=0,()=>`Tensor must have a shape comprised of positive integers but got shape [${n}].`)})}function _s(n,t,e){if(0===t)return 0;if(1===t)return n[0];let s=n[n.length-1];for(let r=0;r<n.length-1;++r)s+=e[r]*n[r];return s}function _o(n,t,e){if(0===t)return[];if(1===t)return[n];const s=new Array(t);for(let r=0;r<s.length-1;++r)s[r]=Math.floor(n/e[r]),n-=s[r]*e[r];return s[s.length-1]=n,s}function Gr(n){return n&&n.then&&"function"==typeof n.then}const wg="tfjsflags";class cS{constructor(t){this.global=t,this.flags={},this.flagRegistry={},this.urlFlags={},this.getQueryParams=hS,this.populateURLFlags()}setPlatform(t,e){null!=this.platform&&(z().getBool("IS_TEST")||z().getBool("PROD")||console.warn(`Platform ${this.platformName} has already been set. Overwriting the platform with ${t}.`)),this.platformName=t,this.platform=e}registerFlag(t,e,s){if(this.flagRegistry[t]={evaluationFn:e,setHook:s},null!=this.urlFlags[t]){const r=this.urlFlags[t];z().getBool("IS_TEST")||z().getBool("PROD")||console.warn(`Setting feature override from URL ${t}: ${r}.`),this.set(t,r)}}getAsync(t){var e=this;return(0,W.Z)(function*(){return t in e.flags||(e.flags[t]=yield e.evaluateFlag(t)),e.flags[t]})()}get(t){if(t in this.flags)return this.flags[t];const e=this.evaluateFlag(t);if(Gr(e))throw new Error(`Flag ${t} cannot be synchronously evaluated. Please use getAsync() instead.`);return this.flags[t]=e,this.flags[t]}getNumber(t){return this.get(t)}getBool(t){return this.get(t)}getString(t){return this.get(t)}getFlags(){return this.flags}get features(){return this.flags}set(t,e){if(null==this.flagRegistry[t])throw new Error(`Cannot set flag ${t} as it has not been registered.`);this.flags[t]=e,null!=this.flagRegistry[t].setHook&&this.flagRegistry[t].setHook(e)}evaluateFlag(t){if(null==this.flagRegistry[t])throw new Error(`Cannot evaluate flag '${t}': no evaluation function found.`);return this.flagRegistry[t].evaluationFn()}setFlags(t){this.flags=Object.assign({},t)}reset(){this.flags={},this.urlFlags={},this.populateURLFlags()}populateURLFlags(){if(typeof this.global>"u"||typeof this.global.location>"u"||typeof this.global.location.search>"u")return;const t=this.getQueryParams(this.global.location.search);wg in t&&t[wg].split(",").forEach(s=>{const[r,o]=s.split(":");this.urlFlags[r]=function pS(n,t){const e=t.toLowerCase();return"true"===e||"false"===e?"true"===e:""+ +e===e?+e:t}(0,o)})}}function hS(n){const t={};return n.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g,(e,...s)=>(function dS(n,t,e){n[decodeURIComponent(t)]=decodeURIComponent(e||"")}(t,s[0],s[1]),s.join("="))),t}function z(){return vg}let ph,vg=null;function Sg(){if(null==ph){let n;if(typeof window<"u")n=window;else if(typeof global<"u")n=global;else if(typeof process<"u")n=process;else{if(!(typeof self<"u"))throw new Error("Could not find a global object");n=self}ph=n}return ph}function fh(n,t){const e=function mS(){const n=Sg();return null==n._tfGlobals&&(n._tfGlobals=new Map),n._tfGlobals}();if(e.has(n))return e.get(n);{const s=t();return e.set(n,s),e.get(n)}}const hl="Abs",wa="Acos",va="Acosh",Eo="Add",dl="AddN",pl="ArgMax",fl="ArgMin",Sa="Asin",Ia="Asinh",Na="Atan",Ca="Atanh",ka="Atan2",ml="AvgPool",yh="AvgPoolGrad",gl="AvgPool3D",xh="AvgPool3DGrad",yl="BatchMatMul",xl="BatchToSpaceND",bh="Bincount",bl="BitwiseAnd",wh="BroadcastArgs",Ta="Cast",$a="Ceil",_a="ClipByValue",vh="Complex",wl="ComplexAbs",vl="Concat",Sl="Conv2D",Sh="Conv2DBackpropFilter",Il="Conv2DBackpropInput",Nl="Conv3D",Ih="Conv3DBackpropFilterV2",Nh="Conv3DBackpropInputV2",Ea="Cos",Aa="Cosh",Ch="Cumprod",Cl="Cumsum",kh="CropAndResize",Th="DenseBincount",$h="DepthToSpace",kl="DepthwiseConv2dNative",_h="DepthwiseConv2dNativeBackpropFilter",Eh="DepthwiseConv2dNativeBackpropInput",Ah="Diag",Tl="Dilation2D",Rh="Dilation2DBackpropInput",Dh="Dilation2DBackpropFilter",Ra="RealDiv",Oh="Einsum",Da="Elu",Lh="EluGrad",Fa="Erf",$l="Equal",Oa="Exp",_l="ExpandDims",La="Expm1",zh="Fill",Mh="FlipLeftRight",Pa="Floor",za="FloorDiv",El="FusedBatchNorm",Al="GatherV2",Bh="GatherNd",Rl="Greater",Ma="GreaterEqual",Ba="Identity",Vh="IFFT",Wh="Imag",Va="IsFinite",Wa="IsInf",Ua="IsNan",Dl="LeakyRelu",Fl="Less",Ol="LessEqual",Uh="LinSpace",Ga="Log",Ha="Log1p",Ll="LogicalAnd",Pl="LogicalNot",zl="LogicalOr",Ml="LRN",Gh="LRNGrad",Bl="Max",ja="Maximum",Vl="MaxPool",Hh="MaxPoolGrad",Wl="MaxPool3D",jh="MaxPool3DGrad",Kh="MaxPoolWithArgmax",Ul="Mean",Gl="Min",Ka="Minimum",Hl="MirrorPad",qa="Mod",qh="Multinomial",Xa="Multiply",jl="Neg",Kl="NotEqual",Xh="NonMaxSuppressionV3",Zh="NonMaxSuppressionV4",Yh="NonMaxSuppressionV5",ql="OnesLike",Xl="OneHot",Zl="Pack",Yl="PadV2",Za="Pow",Ql="Prelu",Jl="Prod",Qh="RaggedGather",Jh="RaggedRange",ed="RaggedTensorToTensor",td="Range",nd="Real",Ya="Reciprocal",Qa="Relu",eu="Reshape",tu="ResizeNearestNeighbor",sd="ResizeNearestNeighborGrad",nu="ResizeBilinear",rd="ResizeBilinearGrad",Ja="Relu6",su="Reverse",ei="Round",ti="Rsqrt",od="ScatterNd",ad="TensorScatterUpdate",id="SearchSorted",ru="Select",ni="Selu",ou="Slice",si="Sin",ri="Sinh",oi="Sign",ai="Sigmoid",ii="Softplus",li="Sqrt",au="Sum",iu="SpaceToBatchND",lu="SplitV",uu="Softmax",ld="SparseFillEmptyRows",ud="SparseReshape",cd="SparseSegmentMean",hd="SparseSegmentSum",dd="SparseToDense",ui="SquaredDifference",pd="Square",cu="StaticRegexReplace",fd="StridedSlice",md="StringNGrams",gd="StringSplit",yd="StringToHashBucketFast",ci="Sub",hi="Tan",di="Tanh",pi="Tile",xd="TopK",bd="Transform",Ao="Transpose",wd="Unique",hu="Unpack",du="UnsortedSegmentSum",pu="ZerosLike",fi="Step",vd="FromPixels",Sd="RotateWithOffset",fu="_FusedMatMul",mu="FusedConv2D",gu="FusedDepthwiseConv2D";function Un(...n){z().getBool("IS_TEST")||z().getBool("PROD")||console.warn(...n)}function xS(...n){z().getBool("IS_TEST")||z().getBool("PROD")||console.log(...n)}const Ro=fh("kernelRegistry",()=>new Map),mi=fh("gradRegistry",()=>new Map);function yu(n,t){const e=Cd(n,t);return Ro.get(e)}function Ig(n){return mi.get(n)}function Id(n){const t=Ro.entries(),e=[];for(;;){const{done:s,value:r}=t.next();if(s)break;const[o,a]=r,[i]=o.split("_");i===n&&e.push(a)}return e}function Nd(n){const{kernelName:t,backendName:e}=n,s=Cd(t,e);Ro.has(s)&&Un(`The kernel '${t}' for backend '${e}' is already registered`),Ro.set(s,n)}function bS(n){const{kernelName:t}=n;mi.has(t)&&z().getBool("DEBUG")&&Un(`Overriding the gradient for '${t}'`),mi.set(t,n)}function Cd(n,t){return`${t}_${n}`}function Ng(n){return n instanceof Float32Array||n instanceof Int32Array||n instanceof Uint8Array||n instanceof Uint8ClampedArray}var Cg=V(6862);const Hr=V.n(Cg)()||Cg;function xu(n){return Hr.fromString(n,!0,16)}const kg=xu("c3a5c85c97cb3127"),jr=xu("b492b66fbe98f273"),wn=xu("9ae16a3b2f90404f");function kd(n){return n.xor(n.shru(47))}function Tg(n,t,e){const s=n.slice(t,t+e);return Hr.fromBytes(Array.from(s),!0,!0)}function ft(n,t){return Tg(n,t,8)}function $g(n,t){return Tg(n,t,4)}function Jt(n,t){return 0===t?n:n.shru(t).or(n.shl(64-t))}function ur(n,t,e=xu("9ddfea08eb382d69")){let s=n.xor(t).mul(e);s=s.xor(s.shru(47));let r=t.xor(s).mul(e);return r=r.xor(r.shru(47)),r=r.mul(e),r}function bu(n,t,e,s){return function vS(n,t,e,s,r,o){r=r.add(n),o=Jt(o.add(r).add(s),21);const a=r;return r=(r=r.add(t)).add(e),o=o.add(Jt(r,44)),[r.add(s),o.add(a)]}(ft(n,t),ft(n,t+8),ft(n,t+16),ft(n,t+24),e,s)}function CS(n,t=n.length){const e=Hr.fromNumber(81,!0);if(t<=32)return t<=16?function SS(n,t=n.length){if(t>=8){const e=wn.add(2*t),s=ft(n,0).add(wn),r=ft(n,t-8);return ur(Jt(r,37).mul(e).add(s),Jt(s,25).add(r).mul(e),e)}if(t>=4){const e=wn.add(2*t);return ur($g(n,0).shl(3).add(t),$g(n,t-4),e)}if(t>0){const a=t+(n[t-1]<<2);return kd(wn.mul(n[0]+(n[t>>1]<<8)).xor(kg.mul(a))).mul(wn)}return wn}(n,t):function IS(n,t=n.length){const e=wn.add(2*t),s=ft(n,0).mul(jr),r=ft(n,8),o=ft(n,t-8).mul(e),a=ft(n,t-16).mul(wn);return ur(Jt(s.add(r),43).add(Jt(o,30)).add(a),s.add(Jt(r.add(wn),18)).add(o),e)}(n,t);if(t<=64)return function NS(n,t=n.length){const e=wn.add(2*t),s=ft(n,0).mul(wn),r=ft(n,8),o=ft(n,t-8).mul(e),a=ft(n,t-16).mul(wn),i=Jt(s.add(r),43).add(Jt(o,30)).add(a),l=ur(i,s.add(Jt(r.add(wn),18)).add(o),e),u=ft(n,16).mul(e),c=ft(n,24),h=i.add(ft(n,t-32)).mul(e),d=l.add(ft(n,t-24)).mul(e);return ur(Jt(u.add(c),43).add(Jt(h,30)).add(d),u.add(Jt(c.add(s),18)).add(h),e)}(n,t);let s=e,r=e.mul(jr).add(113),o=kd(r.mul(wn).add(113)).mul(wn),a=[Hr.UZERO,Hr.UZERO],i=[Hr.UZERO,Hr.UZERO];s=s.mul(wn).add(ft(n,0));let l=0;const u=64*(t-1>>6),c=u+(t-1&63)-63;do{s=Jt(s.add(r).add(a[0]).add(ft(n,l+8)),37).mul(jr),r=Jt(r.add(a[1]).add(ft(n,l+48)),42).mul(jr),s=s.xor(i[1]),r=r.add(a[0]).add(ft(n,l+40)),o=Jt(o.add(i[0]),33).mul(jr),a=bu(n,l,a[1].mul(jr),s.add(i[0])),i=bu(n,l+32,o.add(i[1]),r.add(ft(n,l+16))),[o,s]=[s,o],l+=64}while(l!==u);const h=jr.add(o.and(255).shl(1));return l=c,i[0]=i[0].add(t-1&63),a[0]=a[0].add(i[0]),i[0]=i[0].add(a[0]),s=Jt(s.add(r).add(a[0]).add(ft(n,l+8)),37).mul(h),r=Jt(r.add(a[1]).add(ft(n,l+48)),42).mul(h),s=s.xor(i[1].mul(9)),r=r.add(a[0].mul(9).add(ft(n,l+40))),o=Jt(o.add(i[0]),33).mul(h),a=bu(n,l,a[1].mul(h),s.add(i[0])),i=bu(n,l+32,o.add(i[1]),r.add(ft(n,l+16))),[o,s]=[s,o],ur(ur(a[0],i[0],h).add(kd(r).mul(kg)).add(o),ur(a[1],i[1],h).add(s),h)}function cr(n,t){return"string"===t?hr(n):Kr([n],t)}function Kr(n,t){if("string"===t)throw new Error("Cannot convert a string[] to a TypedArray");if(Array.isArray(n)&&(n=qr(n)),z().getBool("DEBUG")&&function oS(n,t){for(let e=0;e<n.length;e++){const s=n[e];if(isNaN(s)||!isFinite(s))throw Error(`A tensor of type ${t} being uploaded contains ${s}.`)}}(n,t),function kS(n,t){return n instanceof Float32Array&&"float32"===t||n instanceof Int32Array&&"int32"===t||n instanceof Uint8Array&&"bool"===t}(n,t))return n;if(null==t||"float32"===t||"complex64"===t)return new Float32Array(n);if("int32"===t)return new Int32Array(n);if("bool"===t){const e=new Uint8Array(n.length);for(let s=0;s<e.length;++s)0!==Math.round(n[s])&&(e[s]=1);return e}throw new Error(`Unknown data type ${t}`)}function Tn(){return z().platform.now()}function hr(n,t="utf-8"){return t=t||"utf-8",z().platform.encode(n,t)}function dr(n,t="utf-8"){return t=t||"utf-8",z().platform.decode(n,t)}function ss(n){return null!=z().platform.isTypedArray?z().platform.isTypedArray(n):Ng(n)}function qr(n,t=[],e=!1){if(null==t&&(t=[]),"boolean"==typeof n||"number"==typeof n||"string"==typeof n||Gr(n)||null==n||ss(n)&&e)t.push(n);else if(Array.isArray(n)||ss(n))for(let s=0;s<n.length;++s)qr(n[s],t,e);else{let s=-1;for(const r of Object.keys(n))/^([1-9]+[0-9]*|0)$/.test(r)&&(s=Math.max(s,Number(r)));for(let r=0;r<=s;r++)qr(n[r],t,e)}return t}class TS{constructor(t,e){this.backendTimer=t,this.logger=e,null==e&&(this.logger=new _S)}profileKernel(t,e,s){let r;const o=()=>{r=s()};let a;const i=Tn();if(this.backendTimer.timerAvailable())a=this.backendTimer.time(o);else{o();for(const u of r)u.dataSync();a=Promise.resolve({kernelMs:Tn()-i})}if(z().getBool("CHECK_COMPUTATION_FOR_ERRORS"))for(let u=0;u<r.length;u++){const c=r[u];c.data().then(h=>{$S(h,c.dtype,t)})}return{kernelName:t,outputs:r,inputs:e,timeMs:a.then(u=>u.kernelMs),extraInfo:a.then(u=>null!=u.getExtraProfileInfo?u.getExtraProfileInfo():"")}}logKernelProfile(t){const{kernelName:e,outputs:s,timeMs:r,inputs:o,extraInfo:a}=t;s.forEach(i=>{Promise.all([i.data(),r,a]).then(l=>{this.logger.logKernelProfile(e,i,l[0],l[1],o,l[2])})})}}function $S(n,t,e){if("float32"!==t)return!1;for(let s=0;s<n.length;s++){const r=n[s];if(isNaN(r)||!isFinite(r))return console.warn(`Found ${r} in the result of '${e}'`),!0}return!1}class _S{logKernelProfile(t,e,s,r,o,a){const i="number"==typeof r?To(`${r}ms`,9):r.error,l=To(t,25),u=e.rank,c=e.size,h=To(e.shape.toString(),14);let d="";for(const p in o){const f=o[p];if(null!=f){const g=f.shape||e.shape,m=g.length;d+=`${p}: ${m}D ${m>0?g:""} `}}console.log(`%c${l}\t%c${i}\t%c${u}D ${h}\t%c${c}\t%c${d}\t%c${a}`,"font-weight:bold","color:red","color:blue","color: orange","color: green","color: steelblue")}}const _g=20,gi=3,Td=7;function RS(n,t,e,s){const r=ke(t),o=function DS(n,t,e,s){const r=G(t),o=s[s.length-1],a=new Array(o).fill(0),i=t.length,l="complex64"===e?xi(n):n;if(i>1)for(let u=0;u<r/o;u++){const c=u*o;for(let h=0;h<o;h++)a[h]=Math.max(a[h],yi(l[c+h],0,e).length)}return a}(n,t,e,r),a=t.length,i=wu(n,t,e,r,o),l=["Tensor"];return s&&(l.push(`  dtype: ${e}`),l.push(`  rank: ${a}`),l.push(`  shape: [${t}]`),l.push("  values:")),l.push(i.map(u=>"    "+u).join("\n")),l.join("\n")}function yi(n,t,e){let s;return s=Array.isArray(n)?`${parseFloat(n[0].toFixed(Td))} + ${parseFloat(n[1].toFixed(Td))}j`:ba(n)?`'${n}'`:"bool"===e?Eg(n):parseFloat(n.toFixed(Td)).toString(),To(s,t)}function Eg(n){return 0===n?"false":"true"}function wu(n,t,e,s,r,o=!0){const a="complex64"===e?2:1,i=t[0],l=t.length;if(0===l)return"complex64"===e?[yi(xi(n)[0],0,e)]:"bool"===e?[Eg(n[0])]:[n[0].toString()];if(1===l){if(i>_g){let y=Array.from(n.slice(0,gi*a)),x=Array.from(n.slice((i-gi)*a,i*a));return"complex64"===e&&(y=xi(y),x=xi(x)),["["+y.map((b,w)=>yi(b,r[w],e)).join(", ")+", ..., "+x.map((b,w)=>yi(b,r[i-gi+w],e)).join(", ")+"]"]}return["["+("complex64"===e?xi(n):Array.from(n)).map((m,y)=>yi(m,r[y],e)).join(", ")+"]"]}const u=t.slice(1),c=s.slice(1),h=s[0]*a,d=[];if(i>_g){for(let g=0;g<gi;g++){const m=g*h;d.push(...wu(n.slice(m,m+h),u,e,c,r,!1))}d.push("...");for(let g=i-gi;g<i;g++){const m=g*h;d.push(...wu(n.slice(m,m+h),u,e,c,r,g===i-1))}}else for(let g=0;g<i;g++){const m=g*h;d.push(...wu(n.slice(m,m+h),u,e,c,r,g===i-1))}const p=2===l?",":"";d[0]="["+(i>0?d[0]+p:"");for(let g=1;g<d.length-1;g++)d[g]=" "+d[g]+p;let f=",\n";for(let g=2;g<l;g++)f+="\n";return d[d.length-1]=" "+d[d.length-1]+"]"+(o?"":f),d}function xi(n){const t=[];for(let e=0;e<n.length;e+=2)t.push([n[e],n[e+1]]);return t}class Gt{constructor(t,e,s){if(this.dtype=e,this.shape=t.slice(),this.size=G(t),null!=s){const r=s.length;I(r===this.size,()=>`Length of values '${r}' does not match the size inferred by the shape '${this.size}'.`)}if("complex64"===e)throw new Error("complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).");this.values=s||Ft(e,this.size),this.strides=ke(t)}set(t,...e){0===e.length&&(e=[0]),I(e.length===this.rank,()=>`The number of provided coordinates (${e.length}) must match the rank (${this.rank})`);const s=this.locToIndex(e);this.values[s]=t}get(...t){0===t.length&&(t=[0]);let e=0;for(const r of t){if(r<0||r>=this.shape[e])throw new Error(`Requested out of range element at ${t}.   Buffer shape=${this.shape}`);e++}let s=t[t.length-1];for(let r=0;r<t.length-1;++r)s+=this.strides[r]*t[r];return this.values[s]}locToIndex(t){if(0===this.rank)return 0;if(1===this.rank)return t[0];let e=t[t.length-1];for(let s=0;s<t.length-1;++s)e+=this.strides[s]*t[s];return e}indexToLoc(t){if(0===this.rank)return[];if(1===this.rank)return[t];const e=new Array(this.shape.length);for(let s=0;s<e.length-1;++s)e[s]=Math.floor(t/this.strides[s]),t-=e[s]*this.strides[s];return e[e.length-1]=t,e}get rank(){return this.shape.length}toTensor(){return gs().makeTensor(this.values,this.shape,this.dtype)}}let gs=null,Do=null,Ag=null;class mt{constructor(t,e,s,r){this.kept=!1,this.isDisposedInternal=!1,this.shape=t.slice(),this.dtype=e||"float32",this.size=G(t),this.strides=ke(t),this.dataId=s,this.id=r,this.rankType=this.rank<5?this.rank.toString():"higher"}get rank(){return this.shape.length}buffer(){var t=this;return(0,W.Z)(function*(){const e=yield t.data();return Do.buffer(t.shape,t.dtype,e)})()}bufferSync(){return Do.buffer(this.shape,this.dtype,this.dataSync())}array(){var t=this;return(0,W.Z)(function*(){const e=yield t.data();return ns(t.shape,e,"complex64"===t.dtype)})()}arraySync(){return ns(this.shape,this.dataSync(),"complex64"===this.dtype)}data(){var t=this;return(0,W.Z)(function*(){t.throwIfDisposed();const e=gs().read(t.dataId);if("string"===t.dtype){const s=yield e;try{return s.map(r=>dr(r))}catch{throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}}return e})()}dataToGPU(t){return this.throwIfDisposed(),gs().readToGPU(this.dataId,t)}dataSync(){this.throwIfDisposed();const t=gs().readSync(this.dataId);if("string"===this.dtype)try{return t.map(e=>dr(e))}catch{throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}return t}bytes(){var t=this;return(0,W.Z)(function*(){t.throwIfDisposed();const e=yield gs().read(t.dataId);return"string"===t.dtype?e:new Uint8Array(e.buffer)})()}dispose(){this.isDisposed||(gs().disposeTensor(this),this.isDisposedInternal=!0)}get isDisposed(){return this.isDisposedInternal}throwIfDisposed(){if(this.isDisposed)throw new Error("Tensor is disposed.")}print(t=!1){return Do.print(this,t)}clone(){return this.throwIfDisposed(),Do.clone(this)}toString(t=!1){return RS(this.dataSync(),this.shape,this.dtype,t)}cast(t){return this.throwIfDisposed(),Do.cast(this,t)}variable(t=!0,e,s){return this.throwIfDisposed(),gs().makeVariable(this,t,e,s)}}function q(){return fh("Tensor",()=>mt)}Object.defineProperty(mt,Symbol.hasInstance,{value:n=>!!n&&null!=n.data&&null!=n.dataSync&&null!=n.throwIfDisposed}),q();class vu extends mt{constructor(t,e,s,r){super(t.shape,t.dtype,t.dataId,r),this.trainable=e,this.name=s}assign(t){if(t.dtype!==this.dtype)throw new Error(`dtype of the new value (${t.dtype}) and previous value (${this.dtype}) must match`);if(!Xe(t.shape,this.shape))throw new Error(`shape of the new value (${t.shape}) and previous value (${this.shape}) must match`);gs().disposeTensor(this),this.dataId=t.dataId,gs().incRef(this,null)}dispose(){gs().disposeVariable(this),this.isDisposedInternal=!0}}Object.defineProperty(vu,Symbol.hasInstance,{value:n=>n instanceof mt&&null!=n.assign&&n.assign instanceof Function});var Rg=function(n){return n.float32="float32",n.int32="int32",n.bool="int32",n.complex64="complex64",n}(Rg||{}),Dg=function(n){return n.float32="float32",n.int32="int32",n.bool="bool",n.complex64="complex64",n}(Dg||{}),Fg=function(n){return n.float32="float32",n.int32="float32",n.bool="float32",n.complex64="complex64",n}(Fg||{}),Og=function(n){return n.float32="complex64",n.int32="complex64",n.bool="complex64",n.complex64="complex64",n}(Og||{});const zS={float32:Fg,int32:Rg,bool:Dg,complex64:Og};function Fn(n,t){if("string"===n||"string"===t){if("string"===n&&"string"===t)return"string";throw new Error(`Can not upcast ${n} with ${t}`)}return zS[n][t]}function $d(n){return Fn(n,"int32")}function Lg(n){return null!=n&&"object"==typeof n&&"texture"in n&&n.texture instanceof WebGLTexture}function Pg(n){return typeof GPUBuffer<"u"&&null!=n&&"object"==typeof n&&"buffer"in n&&n.buffer instanceof GPUBuffer}function Et(n,t){if(n.dtype===t.dtype)return[n,t];const e=Fn(n.dtype,t.dtype);return[n.cast(e),t.cast(e)]}function zg(n){const t=[];return Mg(n,t,new Set),t}function Mg(n,t,e){if(null==n)return;if(n instanceof mt)return void t.push(n);if(!function BS(n){return Array.isArray(n)||"object"==typeof n}(n))return;const s=n;for(const r in s){const o=s[r];e.has(o)||(e.add(o),Mg(o,t,e))}}function _d(n){return null!=n.kernelName}class Bg{constructor(){this.registeredVariables={},this.nextTapeNodeId=0,this.numBytes=0,this.numTensors=0,this.numStringTensors=0,this.numDataBuffers=0,this.gradientDepth=0,this.kernelDepth=0,this.scopeStack=[],this.numDataMovesStack=[],this.nextScopeId=0,this.tensorInfo=new WeakMap,this.profiling=!1,this.activeProfile={newBytes:0,newTensors:0,peakBytes:0,kernels:[],result:null,get kernelNames(){return Array.from(new Set(this.kernels.map(t=>t.name)))}}}dispose(){for(const t in this.registeredVariables)this.registeredVariables[t].dispose()}}let VS=(()=>{class n{constructor(e){this.ENV=e,this.registry={},this.registryFactory={},this.pendingBackendInitId=0,this.state=new Bg}ready(){var e=this;return(0,W.Z)(function*(){if(null!=e.pendingBackendInit)return e.pendingBackendInit.then(()=>{});if(null!=e.backendInstance)return;const s=e.getSortedBackends();for(let r=0;r<s.length;r++){const o=s[r];if(yield e.initializeBackend(o).success)return void(yield e.setBackend(o))}throw new Error("Could not initialize any backends, all backend initializations failed.")})()}get backend(){if(null!=this.pendingBackendInit)throw new Error(`Backend '${this.backendName}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);if(null==this.backendInstance){const{name:e,asyncInit:s}=this.initializeBackendsAndReturnBest();if(s)throw new Error(`The highest priority backend '${e}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);this.setBackend(e)}return this.backendInstance}backendNames(){return Object.keys(this.registryFactory)}findBackend(e){if(!(e in this.registry)){if(!(e in this.registryFactory))return null;{const{asyncInit:s}=this.initializeBackend(e);if(s)return null}}return this.registry[e]}findBackendFactory(e){return e in this.registryFactory?this.registryFactory[e].factory:null}registerBackend(e,s,r=1){return e in this.registryFactory?(Un(`${e} backend was already registered. Reusing existing backend factory.`),!1):(this.registryFactory[e]={factory:s,priority:r},!0)}setBackend(e){var s=this;return(0,W.Z)(function*(){if(null==s.registryFactory[e])throw new Error(`Backend name '${e}' not found in registry`);if(s.backendName=e,null==s.registry[e]){s.backendInstance=null;const{success:r,asyncInit:o}=s.initializeBackend(e);if(!(o?yield r:r))return!1}return s.backendInstance=s.registry[e],s.setupRegisteredKernels(),s.profiler=new TS(s.backendInstance),!0})()}setupRegisteredKernels(){Id(this.backendName).forEach(s=>{null!=s.setupFunc&&s.setupFunc(this.backendInstance)})}disposeRegisteredKernels(e){Id(e).forEach(r=>{null!=r.disposeFunc&&r.disposeFunc(this.registry[e])})}initializeBackend(e){const s=this.registryFactory[e];if(null==s)throw new Error(`Cannot initialize backend ${e}, no registration found.`);try{const r=s.factory();if(!r||r instanceof xn||"function"!=typeof r.then)return this.registry[e]=r,{success:!0,asyncInit:!1};{const o=++this.pendingBackendInitId,a=r.then(i=>!(o<this.pendingBackendInitId||(this.registry[e]=i,this.pendingBackendInit=null,0))).catch(i=>(o<this.pendingBackendInitId||(this.pendingBackendInit=null,Un(`Initialization of backend ${e} failed`),Un(i.stack||i.message)),!1));return this.pendingBackendInit=a,{success:a,asyncInit:!0}}}catch(r){return Un(`Initialization of backend ${e} failed`),Un(r.stack||r.message),{success:!1,asyncInit:!1}}}removeBackend(e){if(!(e in this.registryFactory))throw new Error(`${e} backend not found in registry`);this.backendName===e&&null!=this.pendingBackendInit&&this.pendingBackendInitId++,e in this.registry&&(this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e]),delete this.registryFactory[e],this.backendName===e&&(this.pendingBackendInit=null,this.backendName=null,this.backendInstance=null)}getSortedBackends(){if(0===Object.keys(this.registryFactory).length)throw new Error("No backend found in registry.");return Object.keys(this.registryFactory).sort((e,s)=>this.registryFactory[s].priority-this.registryFactory[e].priority)}initializeBackendsAndReturnBest(){const e=this.getSortedBackends();for(let s=0;s<e.length;s++){const r=e[s],{success:o,asyncInit:a}=this.initializeBackend(r);if(a||o)return{name:r,asyncInit:a}}throw new Error("Could not initialize any backends, all backend initializations failed.")}moveData(e,s){const r=this.state.tensorInfo.get(s),o=r.backend,a=this.readSync(s),i=o.refCount(s);o.disposeData(s,!0),r.backend=e,e.move(s,a,r.shape,r.dtype,i),this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack[this.state.numDataMovesStack.length-1]++}tidy(e,s){let o,r=null;if(null==s){if("function"!=typeof e)throw new Error("Please provide a function to tidy()");s=e}else{if("string"!=typeof e&&!(e instanceof String))throw new Error("When calling with two arguments, the first argument to tidy() must be a string");if("function"!=typeof s)throw new Error("When calling with two arguments, the 2nd argument to tidy() must be a function");r=e}return this.scopedRun(()=>this.startScope(r),()=>this.endScope(o),()=>(o=s(),o instanceof Promise&&console.error("Cannot return a Promise inside of tidy."),o))}scopedRun(e,s,r){e();try{const o=r();return s(),o}catch(o){throw s(),o}}nextTensorId(){return n.nextTensorId++}nextVariableId(){return n.nextVariableId++}clone(e){const s=A.runKernel(Ba,{x:e});return this.addTapeNode(this.state.activeScope.name,{x:e},[s],i=>({x:()=>A.runKernel(Ta,{x:i},{dtype:"float32"})}),[],{}),s}runKernel(e,s,r){if(null==yu(e,this.backendName))throw new Error(`Kernel '${e}' not registered for backend '${this.backendName}'`);return this.runKernelFunc({kernelName:e,inputs:s,attrs:r})}shouldCheckForMemLeaks(){return this.ENV.getBool("IS_TEST")}checkKernelForMemLeak(e,s,r){const o=this.backend.numDataIds();let a=0;r.forEach(u=>{a+="complex64"===u.dtype?3:1});const l=o-s-a-this.state.numDataMovesStack[this.state.numDataMovesStack.length-1];if(l>0)throw new Error(`Backend '${this.backendName}' has an internal memory leak (${l} data ids) after running '${e}'`)}runKernelFunc(e){let s,r=[];const o=this.isTapeOn(),a=this.state.numBytes,i=this.state.numTensors;let l,u;this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack.push(0);const c=_d(e)?e.kernelName:null!=this.state.activeScope?this.state.activeScope.name:"";if(_d(e)){const{kernelName:g,inputs:m,attrs:y}=e,x=yu(g,this.backendName);I(null!=x,()=>`Cannot find registered kernel '${g}' for backend '${this.backendName}'`),l=()=>{const b=this.backend.numDataIds();u=x.kernelFunc({inputs:m,attrs:y,backend:this.backend});const w=Array.isArray(u)?u:[u];this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(g,b,w);const S=w.map(C=>null!=C.rank?C:this.makeTensorFromTensorInfo(C));if(o){const C=this.getTensorsForGradient(g,m,S);r=this.saveTensorsForBackwardMode(C)}return S}}else{const{forwardFunc:g}=e,m=y=>{o&&(r=y.map(x=>this.keep(this.clone(x))))};l=()=>{const y=this.backend.numDataIds();u=this.tidy(()=>g(this.backend,m));const x=Array.isArray(u)?u:[u];return this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(c,y,x),x}}const{inputs:h,attrs:d}=e,p=_d(e)?null:e.backwardsFunc;let f;return this.scopedRun(()=>this.state.kernelDepth++,()=>this.state.kernelDepth--,()=>{this.ENV.getBool("DEBUG")||this.state.profiling?(f=this.profiler.profileKernel(c,h,()=>l()),this.ENV.getBool("DEBUG")&&this.profiler.logKernelProfile(f),s=f.outputs):s=l()}),o&&this.addTapeNode(c,h,s,p,r,d),this.state.profiling&&this.state.activeProfile.kernels.push({name:c,bytesAdded:this.state.numBytes-a,totalBytesSnapshot:this.state.numBytes,tensorsAdded:this.state.numTensors-i,totalTensorsSnapshot:this.state.numTensors,inputShapes:Object.keys(h).map(g=>null!=h[g]?h[g].shape:null),outputShapes:s.map(g=>g.shape),kernelTimeMs:f.timeMs,extraInfo:f.extraInfo}),Array.isArray(u)?s:s[0]}saveTensorsForBackwardMode(e){return e.map(r=>this.keep(this.clone(r)))}getTensorsForGradient(e,s,r){const o=Ig(e);if(null!=o){const a=o.inputsToSave||[],i=o.outputsToSave||[];let l;o.saveAllInputs?(I(Array.isArray(s),()=>"saveAllInputs is true, expected inputs to be an array."),l=Object.keys(s).map(c=>s[c])):l=a.map(c=>s[c]);const u=r.filter((c,h)=>i[h]);return l.concat(u)}return[]}makeTensor(e,s,r,o){if(null==e)throw new Error("Values passed to engine.makeTensor() are null");o=o||this.backend;let a=e;"string"===(r=r||"float32")&&ba(e[0])&&(a=e.map(u=>hr(u)));const i=o.write(a,s,r),l=new mt(s,r,i,this.nextTensorId());if(this.trackTensor(l,o),"string"===r){const u=this.state.tensorInfo.get(i),c=function iS(n){if(null==n)return 0;let t=0;return n.forEach(e=>t+=e.length),t}(a);this.state.numBytes+=c-u.bytes,u.bytes=c}return l}makeTensorFromDataId(e,s,r,o){return this.makeTensorFromTensorInfo({dataId:e,shape:s,dtype:r=r||"float32"},o)}makeTensorFromTensorInfo(e,s){const{dataId:r,shape:o,dtype:a}=e,i=new mt(o,a,r,this.nextTensorId());return this.trackTensor(i,s),i}makeVariable(e,s=!0,r,o){r=r||this.nextVariableId().toString(),null!=o&&o!==e.dtype&&(e=e.cast(o));const a=new vu(e,s,r,this.nextTensorId());if(null!=this.state.registeredVariables[a.name])throw new Error(`Variable with name ${a.name} was already registered`);return this.state.registeredVariables[a.name]=a,this.incRef(a,this.backend),a}trackTensor(e,s){this.state.numTensors++,"string"===e.dtype&&this.state.numStringTensors++;let r=0;"complex64"!==e.dtype&&"string"!==e.dtype&&(r=e.size*cl(e.dtype)),this.state.numBytes+=r,this.state.tensorInfo.has(e.dataId)||(this.state.numDataBuffers++,this.state.tensorInfo.set(e.dataId,{backend:s||this.backend,dtype:e.dtype,shape:e.shape,bytes:r})),e instanceof vu||this.track(e)}incRef(e,s){this.trackTensor(e,s),this.backend.incRef(e.dataId)}removeDataId(e,s){this.state.tensorInfo.has(e)&&this.state.tensorInfo.get(e).backend===s&&(this.state.tensorInfo.delete(e),this.state.numDataBuffers--)}disposeTensor(e){if(!this.state.tensorInfo.has(e.dataId))return;const s=this.state.tensorInfo.get(e.dataId);if(this.state.numTensors--,"string"===e.dtype&&(this.state.numStringTensors--,this.state.numBytes-=s.bytes),"complex64"!==e.dtype&&"string"!==e.dtype){const r=e.size*cl(e.dtype);this.state.numBytes-=r}s.backend.disposeData(e.dataId)&&this.removeDataId(e.dataId,s.backend)}disposeVariables(){for(const e in this.state.registeredVariables)this.disposeVariable(this.state.registeredVariables[e])}disposeVariable(e){this.disposeTensor(e),null!=this.state.registeredVariables[e.name]&&delete this.state.registeredVariables[e.name]}memory(){const e=this.backend.memory();return e.numTensors=this.state.numTensors,e.numDataBuffers=this.state.numDataBuffers,e.numBytes=this.state.numBytes,this.state.numStringTensors>0&&(e.unreliable=!0,null==e.reasons&&(e.reasons=[]),e.reasons.push("Memory usage by string tensors is approximate (2 bytes per character)")),e}profile(e){var s=this;return(0,W.Z)(function*(){s.state.profiling=!0;const r=s.state.numBytes,o=s.state.numTensors;s.state.activeProfile.kernels=[],s.state.activeProfile.result=yield e(),s.state.profiling=!1,s.state.activeProfile.peakBytes=Math.max(...s.state.activeProfile.kernels.map(a=>a.totalBytesSnapshot)),s.state.activeProfile.newBytes=s.state.numBytes-r,s.state.activeProfile.newTensors=s.state.numTensors-o;for(const a of s.state.activeProfile.kernels)a.kernelTimeMs=yield a.kernelTimeMs,a.extraInfo=yield a.extraInfo;return s.state.activeProfile})()}isTapeOn(){return this.state.gradientDepth>0&&0===this.state.kernelDepth}addTapeNode(e,s,r,o,a,i){const l={id:this.state.nextTapeNodeId++,kernelName:e,inputs:s,outputs:r,saved:a},u=Ig(e);null!=u&&(o=u.gradFunc),null!=o&&(l.gradient=c=>(c=c.map((h,d)=>{if(null==h){const p=r[d],f=dn(p.size,p.dtype);return this.makeTensor(f,p.shape,p.dtype)}return h}),o(c.length>1?c:c[0],a,i))),this.state.activeTape.push(l)}keep(e){return e.kept=!0,e}startTape(){0===this.state.gradientDepth&&(this.state.activeTape=[]),this.state.gradientDepth++}endTape(){this.state.gradientDepth--}startScope(e){const s={track:[],name:"unnamed scope",id:this.state.nextScopeId++};e&&(s.name=e),this.state.scopeStack.push(s),this.state.activeScope=s}endScope(e){const s=zg(e),r=new Set(s.map(a=>a.id));for(let a=0;a<this.state.activeScope.track.length;a++){const i=this.state.activeScope.track[a];!i.kept&&!r.has(i.id)&&i.dispose()}const o=this.state.scopeStack.pop();this.state.activeScope=0===this.state.scopeStack.length?null:this.state.scopeStack[this.state.scopeStack.length-1],s.forEach(a=>{!a.kept&&a.scopeId===o.id&&this.track(a)})}gradients(e,s,r,o=!1){if(I(s.length>0,()=>"gradients() received an empty list of xs."),null!=r&&"float32"!==r.dtype)throw new Error(`dy must have 'float32' dtype, but has '${r.dtype}'`);const a=this.scopedRun(()=>this.startTape(),()=>this.endTape(),()=>this.tidy("forward",e));I(a instanceof mt,()=>"The result y returned by f() must be a tensor.");const i=function ES(n,t,e){const s={},r={};for(let l=0;l<t.length;l++)s[t[l].id]=!0;for(let l=0;l<n.length;l++){const u=n[l],c=u.inputs;for(const h in c){const d=c[h];let p=!1;for(let f=0;f<t.length;f++)if(s[d.id]){u.outputs.forEach(g=>s[g.id]=!0),p=!0,r[u.id]=!0;break}if(p)break}}const o={};o[e.id]=!0;const a={};for(let l=n.length-1;l>=0;l--){const u=n[l],c=u.inputs;for(let h=0;h<u.outputs.length;h++)if(o[u.outputs[h].id]){for(const d in c)o[c[d].id]=!0,a[u.id]=!0;break}}const i=[];for(let l=0;l<n.length;l++){const u=n[l];if(r[u.id]&&a[u.id]){const c={};for(const d in u.inputs){const p=u.inputs[d];s[p.id]&&(c[d]=p)}const h=Object.assign({},u);h.inputs=c,h.outputs=u.outputs,i.push(h)}}return i}(this.state.activeTape,s,a);if(!o&&0===i.length&&s.length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.");return this.tidy("backward",()=>{const l={};l[a.id]=null==r?function WS(n){const t=dh(G(n),"float32");return A.makeTensor(t,n,"float32")}(a.shape):r,function AS(n,t,e,s){for(let r=t.length-1;r>=0;r--){const o=t[r],a=[];if(o.outputs.forEach(l=>{const u=n[l.id];a.push(null!=u?u:null)}),null==o.gradient)throw new Error(`Cannot compute gradient: gradient function not found for ${o.kernelName}.`);const i=o.gradient(a);for(const l in o.inputs){if(!(l in i))throw new Error(`Cannot backprop through input ${l}. Available gradients found: ${Object.keys(i)}.`);const u=e(()=>i[l]());if("float32"!==u.dtype)throw new Error(`Error in gradient for op ${o.kernelName}. The gradient of input ${l} must have 'float32' dtype, but has '${u.dtype}'`);const c=o.inputs[l];if(!Xe(u.shape,c.shape))throw new Error(`Error in gradient for op ${o.kernelName}. The gradient of input '${l}' has shape '${u.shape}', which does not match the shape of the input '${c.shape}'`);if(null==n[c.id])n[c.id]=u;else{const h=n[c.id];n[c.id]=s(h,u),h.dispose()}}}}(l,i,c=>this.tidy(c),US);const u=s.map(c=>l[c.id]);return 0===this.state.gradientDepth&&(this.state.activeTape.forEach(c=>{for(const h of c.saved)h.dispose()}),this.state.activeTape=null),{value:a,grads:u}})}customGrad(e){return I(ch(e),()=>"The f passed in customGrad(f) must be a function."),(...s)=>{let r;I(s.every(l=>l instanceof mt),()=>"The args passed in customGrad(f)(x1, x2,...) must all be tensors");const o={};return s.forEach((l,u)=>{o[u]=l}),this.runKernelFunc({forwardFunc:(l,u)=>(r=e(...s,u),I(r.value instanceof mt,()=>"The function f passed in customGrad(f) must return an object where `obj.value` is a tensor"),I(ch(r.gradFunc),()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function."),r.value),backwardsFunc:(l,u)=>{const c=r.gradFunc(l,u),h=Array.isArray(c)?c:[c];I(h.length===s.length,()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...)."),I(h.every(p=>p instanceof mt),()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors.");const d={};return h.forEach((p,f)=>{d[f]=()=>p}),d},inputs:o})}}readSync(e){return this.state.tensorInfo.get(e).backend.readSync(e)}read(e){return this.state.tensorInfo.get(e).backend.read(e)}readToGPU(e,s){return this.state.tensorInfo.get(e).backend.readToGPU(e,s)}time(e){var s=this;return(0,W.Z)(function*(){const r=Tn(),o=yield s.backend.time(e);return o.wallMs=Tn()-r,o})()}track(e){return null!=this.state.activeScope&&(e.scopeId=this.state.activeScope.id,this.state.activeScope.track.push(e)),e}get registeredVariables(){return this.state.registeredVariables}reset(){this.pendingBackendInitId++,this.state.dispose(),this.ENV.reset(),this.state=new Bg;for(const e in this.registry)this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e];this.backendName=null,this.backendInstance=null,this.pendingBackendInit=null}}return n.nextTensorId=0,n.nextVariableId=0,n})();function Vg(){const n=Sg();if(null==n._tfengine){const t=new cS(n);n._tfengine=new VS(t)}return function fS(n){vg=n}(n._tfengine.ENV),function FS(n){gs=n}(()=>n._tfengine),n._tfengine}const A=Vg();function US(n,t){return A.runKernel(Eo,{a:n,b:t})}function Wg(n){if(n||function GS(){return typeof navigator<"u"&&null!=navigator}()){if(n||(n=navigator),"ReactNative"===n.product)return!0;const t=n.userAgent||n.vendor||(typeof window<"u"?window.opera:"");return t?/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(t)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(t.substr(0,4)):n.userAgentData&&n.userAgentData.mobile}return!1}function Ug(){return typeof window<"u"&&null!=window.document||typeof WorkerGlobalScope<"u"}const $n=z();function pr(n,t){let e=n;if(ss(n))return"string"===t?[]:[n.length];if(Lg(n))return[n.height,n.width*(n.channels||"RGBA").length];if(Pg(n))return[n.buffer.size/(null==t?4:cl(t))];if(!Array.isArray(n))return[];const s=[];for(;Array.isArray(e)||ss(e)&&"string"!==t;)s.push(e.length),e=e[0];return Array.isArray(n)&&z().getBool("TENSORLIKE_CHECK_SHAPE_CONSISTENCY")&&Gg(n,s,[]),s}function Gg(n,t,e){if(e=e||[],!Array.isArray(n)&&!ss(n))return void I(0===t.length,()=>`Element arr[${e.join("][")}] is a primitive, but should be an array/TypedArray of ${t[0]} elements`);I(t.length>0,()=>`Element arr[${e.join("][")}] should be a primitive, but is an array of ${n.length} elements`),I(n.length===t[0],()=>`Element arr[${e.join("][")}] should have ${t[0]} elements, but has ${n.length} elements`);const s=t.slice(1);for(let r=0;r<n.length;++r)Gg(n[r],s,e.concat(r))}function Hg(n,t,e,s){if("string_or_numeric"!==n){if(null==n)throw new Error("Expected dtype cannot be null.");if("numeric"!==n&&n!==t||"numeric"===n&&"string"===t)throw new Error(`Argument '${e}' passed to '${s}' must be ${n} tensor, but got ${t} tensor`)}}function N(n,t,e,s="numeric"){if(n instanceof mt)return Hg(s,n.dtype,t,e),n;let r=$o(n);if("string"!==r&&["bool","int32","float32"].indexOf(s)>=0&&(r=s),Hg(s,r,t,e),null==n||!ss(n)&&!Array.isArray(n)&&"number"!=typeof n&&"boolean"!=typeof n&&"string"!=typeof n)throw new Error(`Argument '${t}' passed to '${e}' must be a Tensor or TensorLike, but got '${null==n?"null":n.constructor.name}'`);const o=pr(n,r);!ss(n)&&!Array.isArray(n)&&(n=[n]);const i="string"!==r?Kr(n,r):qr(n,[],!0);return A.makeTensor(i,o,r)}function Su(n,t,e,s="numeric"){if(!Array.isArray(n))throw new Error(`Argument ${t} passed to ${e} must be a \`Tensor[]\` or \`TensorLike[]\``);return n.map((o,a)=>N(o,`${t}[${a}]`,e,s))}$n.registerFlag("DEBUG",()=>!1,n=>{n&&console.warn("Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.")}),$n.registerFlag("IS_BROWSER",()=>Ug()),$n.registerFlag("IS_NODE",()=>typeof process<"u"&&typeof process.versions<"u"&&typeof process.versions.node<"u"),$n.registerFlag("IS_CHROME",()=>typeof navigator<"u"&&null!=navigator&&null!=navigator.userAgent&&/Chrome/.test(navigator.userAgent)&&/Google Inc/.test(navigator.vendor)),$n.registerFlag("IS_SAFARI",()=>typeof navigator<"u"&&null!=navigator&&null!=navigator.userAgent&&/Safari/.test(navigator.userAgent)&&/Apple/.test(navigator.vendor)),$n.registerFlag("PROD",()=>!1),$n.registerFlag("TENSORLIKE_CHECK_SHAPE_CONSISTENCY",()=>$n.getBool("DEBUG")),$n.registerFlag("DEPRECATION_WARNINGS_ENABLED",()=>!0),$n.registerFlag("IS_TEST",()=>!1),$n.registerFlag("CHECK_COMPUTATION_FOR_ERRORS",()=>$n.getBool("DEBUG")),$n.registerFlag("WRAP_TO_IMAGEBITMAP",()=>!1),$n.registerFlag("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU",()=>!1),$n.registerFlag("USE_SETTIMEOUTCUSTOM",()=>!1);const jg="__op";function _(n){const t=Object.keys(n);if(1!==t.length)throw new Error(`Please provide an object with a single key (operation name) mapping to a function. Got an object with ${t.length} keys.`);let e=t[0];const s=n[e];e.endsWith("_")&&(e=e.substring(0,e.length-1)),e+=jg;const r=(...o)=>{A.startScope(e);try{const a=s(...o);return Gr(a)&&console.error("Cannot return a Promise inside of tidy."),A.endScope(a),a}catch(a){throw A.endScope(null),a}};return Object.defineProperty(r,"name",{value:e,configurable:!0}),r}const fr=_({complex_:function HS(n,t){const e=N(n,"real","complex"),s=N(t,"imag","complex");return Dn(e.shape,s.shape,`real and imag shapes, ${e.shape} and ${s.shape}, must match in call to tf.complex().`),A.runKernel(vh,{real:e,imag:s})}});function mr(n,t,e,s){if(null==s)s=$o(n);else if("complex64"===s)throw new Error("Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).");if(Pg(n)||Lg(n)){if("float32"!==s&&"int32"!==s)throw new Error(`Creating tensor from GPU data only supports 'float32'|'int32' dtype, while the dtype is ${s}.`);return A.backend.createTensorFromGPUData(n,t||e,s)}if(!ss(n)&&!Array.isArray(n)&&"number"!=typeof n&&"boolean"!=typeof n&&"string"!=typeof n)throw new Error("values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray");if(null!=t){Wn(t);const r=G(t),o=G(e);I(r===o,()=>`Based on the provided shape, [${t}], the tensor should have ${r} values but has ${o}`);for(let a=0;a<e.length;++a){const l=a!==e.length-1||e[a]!==G(t.slice(a));I(e[a]===t[a]||!l,()=>`Error creating a new Tensor. Inferred shape (${e}) does not match the provided shape (${t}). `)}}return!ss(n)&&!Array.isArray(n)&&(n=[n]),t=t||e,n="string"!==s?Kr(n,s):qr(n,[],!0),A.makeTensor(n,t,s)}function At(n,t,e){return mr(n,t,pr(n,e),e)}const Ad={float32:4,float16:2,int32:4,uint16:2,uint8:1,bool:1,complex64:8};class ys{static join(t){return new ys(t).slice()}constructor(t){if(this.shards=[],this.previousShardIndex=0,null==t||(t instanceof Array||(t=[t]),0===(t=t.map(s=>ss(s)?s.buffer:s)).length))return;this.bufferUniformSize=t[0].byteLength;let e=0;for(let s=0;s<t.length;s++){const r=t[s];s!==t.length-1&&r.byteLength!==this.bufferUniformSize&&(this.bufferUniformSize=void 0);const o=e+r.byteLength;this.shards.push({buffer:r,start:e,end:o}),e=o}0===this.shards.length&&(this.byteLength=0),this.byteLength=this.shards[this.shards.length-1].end}slice(t=0,e=this.byteLength){if(0===this.shards.length)return new ArrayBuffer(0);if(t=isNaN(Number(t))?0:t,e=isNaN(Number(e))?0:e,t=Math.max(0,t),(e=Math.min(this.byteLength,e))<=t)return new ArrayBuffer(0);const s=this.findShardForByte(t);if(-1===s)throw new Error(`Could not find start shard for byte ${t}`);const o=new ArrayBuffer(e-t),a=new Uint8Array(o);let i=0;for(let l=s;l<this.shards.length;l++){const u=this.shards[l],h=t+i-u.start,d=i,f=Math.min(e,u.end)-u.start,g=new Uint8Array(u.buffer,h,f-h);if(a.set(g,d),i+=g.length,e<u.end)break}return o}findShardForByte(t){if(0===this.shards.length||t<0||t>=this.byteLength)return-1;if(null!=this.bufferUniformSize)return this.previousShardIndex=Math.floor(t/this.bufferUniformSize),this.previousShardIndex;function e(r){return t<r.start?-1:t>=r.end?1:0}if(0===e(this.shards[this.previousShardIndex]))return this.previousShardIndex;const s=function jS(n,t){let e=0,s=n.length;for(;e<=s;){const r=Math.floor((s-e)/2)+e,o=t(n[r]);if(0===o)return r;o<0?s=r:e=r+1}return-1}(this.shards,e);return-1===s?-1:(this.previousShardIndex=s,this.previousShardIndex)}}const Iu=4;function Rd(n,t){return Dd.apply(this,arguments)}function Dd(){return Dd=(0,W.Z)(function*(n,t){const e=[],s=[],r=Array.isArray(n)?n.map(a=>a.name):Object.keys(n);for(let a=0;a<r.length;++a){const i=r[a],l=Array.isArray(n)?n[a].tensor:n[i];if("float32"!==l.dtype&&"int32"!==l.dtype&&"bool"!==l.dtype&&"string"!==l.dtype&&"complex64"!==l.dtype)throw new Error(`Unsupported dtype in weight '${i}': ${l.dtype}`);const u={name:i,shape:l.shape,dtype:l.dtype};if("string"===l.dtype){const c=new Promise(function(){var h=(0,W.Z)(function*(d){const p=yield l.bytes(),f=p.reduce((y,x)=>y+x.length,0)+Iu*p.length,g=new Uint8Array(f);let m=0;for(let y=0;y<p.length;y++){const x=p[y],b=new Uint8Array(new Uint32Array([x.length]).buffer);g.set(b,m),m+=Iu,g.set(x,m),m+=x.length}d(g)});return function(d){return h.apply(this,arguments)}}());s.push(c)}else s.push(l.data());null!=t&&(u.group=t),e.push(u)}return{data:KS(yield Promise.all(s)),specs:e}}),Dd.apply(this,arguments)}function Kg(n,t){const e=new ys(n),s={};let r,o=0;for(const a of t){const i=a.name,l=a.dtype,u=a.shape,c=G(u);let h;if("quantization"in a){const d=a.quantization;if("uint8"===d.dtype||"uint16"===d.dtype){if(!("min"in d)||!("scale"in d))throw new Error(`Weight ${a.name} with quantization ${d.dtype} doesn't have corresponding metadata min and scale.`)}else{if("float16"!==d.dtype)throw new Error(`Weight ${a.name} has unknown quantization dtype ${d.dtype}. Supported quantization dtypes are: 'uint8', 'uint16', and 'float16'.`);if("float32"!==l)throw new Error(`Weight ${a.name} is quantized with ${d.dtype} which only supports weights of type float32 not ${l}.`)}const p=Ad[d.dtype],f=e.slice(o,o+c*p),g="uint8"===d.dtype?new Uint8Array(f):new Uint16Array(f);if("float32"===l)if("uint8"===d.dtype||"uint16"===d.dtype){h=new Float32Array(g.length);for(let m=0;m<g.length;m++)h[m]=g[m]*d.scale+d.min}else{if("float16"!==d.dtype)throw new Error(`Unsupported quantization type ${d.dtype} for weight type float32.`);void 0===r&&(r=JS()),h=r(g)}else{if("int32"!==l)throw new Error(`Unsupported dtype in weight '${i}': ${l}`);if("uint8"!==d.dtype&&"uint16"!==d.dtype)throw new Error(`Unsupported quantization type ${d.dtype} for weight type int32.`);h=new Int32Array(g.length);for(let m=0;m<g.length;m++)h[m]=Math.round(g[m]*d.scale+d.min)}o+=c*p}else if("string"===l){const d=G(a.shape);h=[];for(let p=0;p<d;p++){const f=new Uint32Array(e.slice(o,o+Iu))[0];o+=Iu;const g=new Uint8Array(e.slice(o,o+f));h.push(g),o+=f}}else{const d=Ad[l],p=e.slice(o,o+c*d);if("float32"===l)h=new Float32Array(p);else if("int32"===l)h=new Int32Array(p);else if("bool"===l)h=new Uint8Array(p);else{if("complex64"!==l)throw new Error(`Unsupported dtype in weight '${i}': ${l}`);{h=new Float32Array(p);const f=new Float32Array(h.length/2),g=new Float32Array(h.length/2);for(let x=0;x<f.length;x++)f[x]=h[2*x],g[x]=h[2*x+1];const m=At(f,u,"float32"),y=At(g,u,"float32");s[i]=fr(m,y),m.dispose(),y.dispose()}}o+=c*d}"complex64"!==l&&(s[i]=At(h,u,l))}return s}function KS(n){if(null===n)throw new Error(`Invalid input value: ${JSON.stringify(n)}`);let t=0;const e=[];n.forEach(o=>{if(t+=o.byteLength,e.push(o.byteLength===o.buffer.byteLength?o:new o.constructor(o)),!(o instanceof Float32Array||o instanceof Int32Array||o instanceof Uint8Array))throw new Error(`Unsupported TypedArray subtype: ${o.constructor.name}`)});const s=new Uint8Array(t);let r=0;return e.forEach(o=>{s.set(new Uint8Array(o.buffer),r),r+=o.byteLength}),s.buffer}const Fd=typeof Buffer<"u"&&(typeof Blob>"u"||typeof atob>"u"||typeof btoa>"u");function qg(n){return Fd?Buffer.byteLength(n,"utf8"):new Blob([n]).size}function Xg(n){return ys.join(n)}function Zg(n){for(n=n.trim();n.endsWith("/");)n=n.slice(0,n.length-1);const e=n.split("/");return e[e.length-1]}function Yg(n,t){const e={modelTopology:n.modelTopology,format:n.format,generatedBy:n.generatedBy,convertedBy:n.convertedBy,weightsManifest:t};return null!=n.signature&&(e.signature=n.signature),null!=n.userDefinedMetadata&&(e.userDefinedMetadata=n.userDefinedMetadata),null!=n.modelInitializer&&(e.modelInitializer=n.modelInitializer),null!=n.initializerSignature&&(e.initializerSignature=n.initializerSignature),null!=n.trainingConfig&&(e.trainingConfig=n.trainingConfig),e}function Qg(n,t,e){const s={modelTopology:n.modelTopology,format:n.format,generatedBy:n.generatedBy,convertedBy:n.convertedBy};if(null!=n.trainingConfig&&(s.trainingConfig=n.trainingConfig),null!=n.weightsManifest){if(!t)throw new Error("modelJSON has weightsManifest but weightSpecs is null");if(!e)throw new Error("modelJSON has weightsManifest but weightData is null");s.weightSpecs=t,s.weightData=e}return null!=n.signature&&(s.signature=n.signature),null!=n.userDefinedMetadata&&(s.userDefinedMetadata=n.userDefinedMetadata),null!=n.modelInitializer&&(s.modelInitializer=n.modelInitializer),null!=n.initializerSignature&&(s.initializerSignature=n.initializerSignature),s}function Od(n,t){return Ld.apply(this,arguments)}function Ld(){return(Ld=(0,W.Z)(function*(n,t){let e,s;return null!=n.weightsManifest&&([e,s]=yield t(n.weightsManifest)),Qg(n,e,s)})).apply(this,arguments)}function bi(n){if(n.modelTopology instanceof ArrayBuffer)throw new Error("Expected JSON model topology, received ArrayBuffer.");return{dateSaved:new Date,modelTopologyType:"JSON",modelTopologyBytes:null==n.modelTopology?0:qg(JSON.stringify(n.modelTopology)),weightSpecsBytes:null==n.weightSpecs?0:qg(JSON.stringify(n.weightSpecs)),weightDataBytes:null==n.weightData?0:new ys(n.weightData).byteLength}}function Jg(n){const t=[];for(const e of n)t.push(...e.weights);return t}function JS(){const n=function ZS(){const n=e=>{let s=e<<13,r=0;for(;!(8388608&s);)r-=8388608,s<<=1;return s&=-8388609,r+=947912704,s|r},t=new Uint32Array(2048);t[0]=0;for(let e=1;e<1024;e++)t[e]=n(e);for(let e=1024;e<2048;e++)t[e]=939524096+(e-1024<<13);return t}(),t=function YS(){const n=new Uint32Array(64);n[0]=0,n[31]=1199570944,n[32]=2147483648,n[63]=3347054592;for(let t=1;t<31;t++)n[t]=t<<23;for(let t=33;t<63;t++)n[t]=2147483648+(t-32<<23);return n}(),e=function QS(){const n=new Uint32Array(64);for(let t=0;t<64;t++)n[t]=1024;return n[0]=n[32]=0,n}();return s=>{const r=new ArrayBuffer(4*s.length),o=new Uint32Array(r);for(let a=0;a<s.length;a++){const i=s[a];o[a]=n[e[i>>10]+(1023&i)]+t[i>>10]}return new Float32Array(r)}}class Ct{constructor(){this.saveRouters=[],this.loadRouters=[]}static getInstance(){return null==Ct.instance&&(Ct.instance=new Ct),Ct.instance}static registerSaveRouter(t){Ct.getInstance().saveRouters.push(t)}static registerLoadRouter(t){Ct.getInstance().loadRouters.push(t)}static getSaveHandlers(t){return Ct.getHandlers(t,"save")}static getLoadHandlers(t,e){return Ct.getHandlers(t,"load",e)}static getHandlers(t,e,s){const r=[];return("load"===e?Ct.getInstance().loadRouters:Ct.getInstance().saveRouters).forEach(a=>{const i=a(t,s);null!==i&&r.push(i)}),r}}const eI=n=>Ct.registerSaveRouter(n),tI=n=>Ct.registerLoadRouter(n),ey=n=>Ct.getSaveHandlers(n),nI=(n,t)=>Ct.getLoadHandlers(n,t),Nu="tensorflowjs",Xr="models_store",gr="model_info_store";function Md(){if(!z().getBool("IS_BROWSER"))throw new Error("Failed to obtain IndexedDB factory because the current environmentis not a web browser.");const n=typeof window>"u"?self:window,t=n.indexedDB||n.mozIndexedDB||n.webkitIndexedDB||n.msIndexedDB||n.shimIndexedDB;if(null==t)throw new Error("The current browser does not appear to support IndexedDB.");return t}function Bd(n){const t=n.result;t.createObjectStore(Xr,{keyPath:"modelPath"}),t.createObjectStore(gr,{keyPath:"modelPath"})}let Fo=(()=>{class n{constructor(e){if(this.indexedDB=Md(),null==e||!e)throw new Error("For IndexedDB, modelPath must not be null, undefined or empty.");this.modelPath=e}save(e){var s=this;return(0,W.Z)(function*(){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");return s.databaseAction(s.modelPath,e)})()}load(){var e=this;return(0,W.Z)(function*(){return e.databaseAction(e.modelPath)})()}databaseAction(e,s){return new Promise((r,o)=>{const a=this.indexedDB.open(Nu,1);a.onupgradeneeded=()=>Bd(a),a.onsuccess=()=>{const i=a.result;if(null==s){const l=i.transaction(Xr,"readonly"),c=l.objectStore(Xr).get(this.modelPath);c.onsuccess=()=>{if(null==c.result)return i.close(),o(new Error(`Cannot find model with path '${this.modelPath}' in IndexedDB.`));r(c.result.modelArtifacts)},c.onerror=h=>(i.close(),o(c.error)),l.oncomplete=()=>i.close()}else{s.weightData=ys.join(s.weightData);const l=bi(s),u=i.transaction(gr,"readwrite");let h,d,c=u.objectStore(gr);try{h=c.put({modelPath:this.modelPath,modelArtifactsInfo:l})}catch(p){return o(p)}h.onsuccess=()=>{d=i.transaction(Xr,"readwrite");const p=d.objectStore(Xr);let f;try{f=p.put({modelPath:this.modelPath,modelArtifacts:s,modelArtifactsInfo:l})}catch(g){return o(g)}f.onsuccess=()=>r({modelArtifactsInfo:l}),f.onerror=g=>{c=u.objectStore(gr);const m=c.delete(this.modelPath);m.onsuccess=()=>(i.close(),o(f.error)),m.onerror=y=>(i.close(),o(f.error))}},h.onerror=p=>(i.close(),o(h.error)),u.oncomplete=()=>{null==d?i.close():d.oncomplete=()=>i.close()}}},a.onerror=i=>o(a.error)})}}return n.URL_SCHEME="indexeddb://",n})();const ty=n=>z().getBool("IS_BROWSER")&&!Array.isArray(n)&&n.startsWith(Fo.URL_SCHEME)?function sI(n){return new Fo(n)}(n.slice(Fo.URL_SCHEME.length)):null;Ct.registerSaveRouter(ty),Ct.registerLoadRouter(ty);class oI{constructor(){this.indexedDB=Md()}listModels(){var t=this;return(0,W.Z)(function*(){return new Promise((e,s)=>{const r=t.indexedDB.open(Nu,1);r.onupgradeneeded=()=>Bd(r),r.onsuccess=()=>{const o=r.result,a=o.transaction(gr,"readonly"),l=a.objectStore(gr).getAll();l.onsuccess=()=>{const u={};for(const c of l.result)u[c.modelPath]=c.modelArtifactsInfo;e(u)},l.onerror=u=>(o.close(),s(l.error)),a.oncomplete=()=>o.close()},r.onerror=o=>s(r.error)})})()}removeModel(t){var e=this;return(0,W.Z)(function*(){return t=function rI(n){return n.startsWith(Fo.URL_SCHEME)?n.slice(Fo.URL_SCHEME.length):n}(t),new Promise((s,r)=>{const o=e.indexedDB.open(Nu,1);o.onupgradeneeded=()=>Bd(o),o.onsuccess=()=>{const a=o.result,i=a.transaction(gr,"readwrite"),l=i.objectStore(gr),u=l.get(t);let c;u.onsuccess=()=>{if(null==u.result)return a.close(),r(new Error(`Cannot find model with path '${t}' in IndexedDB.`));{const h=l.delete(t),d=()=>{c=a.transaction(Xr,"readwrite");const f=c.objectStore(Xr).delete(t);f.onsuccess=()=>s(u.result.modelArtifactsInfo),f.onerror=g=>r(u.error)};h.onsuccess=d,h.onerror=p=>(d(),a.close(),r(u.error))}},u.onerror=h=>(a.close(),r(u.error)),i.oncomplete=()=>{null==c?a.close():c.oncomplete=()=>a.close()}},o.onerror=a=>r(o.error)})})()}}const Es="/",Zr="tensorflowjs_models",ny="info",aI="model_topology",iI="weight_specs",lI="weight_data",uI="model_metadata";function sy(n){return{info:[Zr,n,ny].join(Es),topology:[Zr,n,aI].join(Es),weightSpecs:[Zr,n,iI].join(Es),weightData:[Zr,n,lI].join(Es),modelMetadata:[Zr,n,uI].join(Es)}}function ry(n){for(const t of Object.values(n))window.localStorage.removeItem(t)}function oy(n){const t=n.split(Es);if(t.length<3)throw new Error(`Invalid key format: ${n}`);return t.slice(1,t.length-1).join(Es)}let Oo=(()=>{class n{constructor(e){if(!z().getBool("IS_BROWSER")||typeof window>"u"||typeof window.localStorage>"u")throw new Error("The current environment does not support local storage.");if(this.LS=window.localStorage,null==e||!e)throw new Error("For local storage, modelPath must not be null, undefined or empty.");this.modelPath=e,this.keys=sy(this.modelPath)}save(e){var s=this;return(0,W.Z)(function*(){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");{const r=JSON.stringify(e.modelTopology),o=JSON.stringify(e.weightSpecs),a=bi(e),i=ys.join(e.weightData);try{return s.LS.setItem(s.keys.info,JSON.stringify(a)),s.LS.setItem(s.keys.topology,r),s.LS.setItem(s.keys.weightSpecs,o),s.LS.setItem(s.keys.weightData,function qS(n){if(Fd)return Buffer.from(n).toString("base64");const t=new Uint8Array(n);let e="";for(let s=0,r=t.length;s<r;s++)e+=String.fromCharCode(t[s]);return btoa(e)}(i)),s.LS.setItem(s.keys.modelMetadata,JSON.stringify({format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,signature:null!=e.signature?e.signature:void 0,userDefinedMetadata:null!=e.userDefinedMetadata?e.userDefinedMetadata:void 0,modelInitializer:null!=e.modelInitializer?e.modelInitializer:void 0,initializerSignature:null!=e.initializerSignature?e.initializerSignature:void 0,trainingConfig:null!=e.trainingConfig?e.trainingConfig:void 0})),{modelArtifactsInfo:a}}catch{throw ry(s.keys),new Error(`Failed to save model '${s.modelPath}' to local storage: size quota being exceeded is a possible cause of this failure: modelTopologyBytes=${a.modelTopologyBytes}, weightSpecsBytes=${a.weightSpecsBytes}, weightDataBytes=${a.weightDataBytes}.`)}}})()}load(){var e=this;return(0,W.Z)(function*(){const s=JSON.parse(e.LS.getItem(e.keys.info));if(null==s)throw new Error(`In local storage, there is no model with name '${e.modelPath}'`);if("JSON"!==s.modelTopologyType)throw new Error("BrowserLocalStorage does not support loading non-JSON model topology yet.");const r={},o=JSON.parse(e.LS.getItem(e.keys.topology));if(null==o)throw new Error(`In local storage, the topology of model '${e.modelPath}' is missing.`);r.modelTopology=o;const a=JSON.parse(e.LS.getItem(e.keys.weightSpecs));if(null==a)throw new Error(`In local storage, the weight specs of model '${e.modelPath}' are missing.`);r.weightSpecs=a;const i=e.LS.getItem(e.keys.modelMetadata);if(null!=i){const u=JSON.parse(i);r.format=u.format,r.generatedBy=u.generatedBy,r.convertedBy=u.convertedBy,null!=u.signature&&(r.signature=u.signature),null!=u.userDefinedMetadata&&(r.userDefinedMetadata=u.userDefinedMetadata),null!=u.modelInitializer&&(r.modelInitializer=u.modelInitializer),null!=u.initializerSignature&&(r.initializerSignature=u.initializerSignature),null!=u.trainingConfig&&(r.trainingConfig=u.trainingConfig)}const l=e.LS.getItem(e.keys.weightData);if(null==l)throw new Error(`In local storage, the binary weight values of model '${e.modelPath}' are missing.`);return r.weightData=function XS(n){if(Fd){const s=Buffer.from(n,"base64");return s.buffer.slice(s.byteOffset,s.byteOffset+s.byteLength)}const t=atob(n),e=new Uint8Array(t.length);for(let s=0;s<t.length;++s)e.set([t.charCodeAt(s)],s);return e.buffer}(l),r})()}}return n.URL_SCHEME="localstorage://",n})();const ay=n=>z().getBool("IS_BROWSER")&&!Array.isArray(n)&&n.startsWith(Oo.URL_SCHEME)?function hI(n){return new Oo(n)}(n.slice(Oo.URL_SCHEME.length)):null;Ct.registerSaveRouter(ay),Ct.registerLoadRouter(ay);class dI{constructor(){I(z().getBool("IS_BROWSER"),()=>"Current environment is not a web browser"),I(typeof window>"u"||typeof window.localStorage<"u",()=>"Current browser does not appear to support localStorage"),this.LS=window.localStorage}listModels(){var t=this;return(0,W.Z)(function*(){const e={},s=Zr+Es,r=Es+ny;for(let o=0;o<t.LS.length;++o){const a=t.LS.key(o);a.startsWith(s)&&a.endsWith(r)&&(e[oy(a)]=JSON.parse(t.LS.getItem(a)))}return e})()}removeModel(t){var e=this;return(0,W.Z)(function*(){const s=sy(t=function cI(n){return n.startsWith(Oo.URL_SCHEME)?n.slice(Oo.URL_SCHEME.length):n}(t));if(null==e.LS.getItem(s.info))throw new Error(`Cannot find model at path '${t}'`);const r=JSON.parse(e.LS.getItem(s.info));return ry(s),r})()}}const Lo="://";class vn{constructor(){this.managers={}}static getInstance(){return null==vn.instance&&(vn.instance=new vn),vn.instance}static registerManager(t,e){I(null!=t,()=>"scheme must not be undefined or null."),t.endsWith(Lo)&&(t=t.slice(0,t.indexOf(Lo))),I(t.length>0,()=>"scheme must not be an empty string.");const s=vn.getInstance();I(null==s.managers[t],()=>`A model store manager is already registered for scheme '${t}'.`),s.managers[t]=e}static getManager(t){const e=vn.getInstance().managers[t];if(null==e)throw new Error(`Cannot find model manager for scheme '${t}'`);return e}static getSchemes(){return Object.keys(vn.getInstance().managers)}}function Cu(n){if(-1===n.indexOf(Lo))throw new Error(`The url string provided does not contain a scheme. Supported schemes are: ${vn.getSchemes().join(",")}`);return{scheme:n.split(Lo)[0],path:n.split(Lo)[1]}}function iy(n,t){return Vd.apply(this,arguments)}function Vd(){return(Vd=(0,W.Z)(function*(n,t,e=!1){I(n!==t,()=>`Old path and new path are the same: '${n}'`);const s=Ct.getLoadHandlers(n);I(s.length>0,()=>`Copying failed because no load handler is found for source URL ${n}.`),I(s.length<2,()=>`Copying failed because more than one (${s.length}) load handlers for source URL ${n}.`);const r=s[0],o=Ct.getSaveHandlers(t);I(o.length>0,()=>`Copying failed because no save handler is found for destination URL ${t}.`),I(o.length<2,()=>`Copying failed because more than one (${s.length}) save handlers for destination URL ${t}.`);const a=o[0],i=Cu(n).scheme,l=Cu(n).path,u=i===Cu(n).scheme,c=yield r.load();e&&u&&(yield vn.getManager(i).removeModel(l));const h=yield a.save(c);return e&&!u&&(yield vn.getManager(i).removeModel(l)),h.modelArtifactsInfo})).apply(this,arguments)}function pI(){return Wd.apply(this,arguments)}function Wd(){return(Wd=(0,W.Z)(function*(){const n=vn.getSchemes(),t={};for(const e of n){const s=yield vn.getManager(e).listModels();for(const r in s)t[e+Lo+r]=s[r]}return t})).apply(this,arguments)}function fI(n){return Ud.apply(this,arguments)}function Ud(){return(Ud=(0,W.Z)(function*(n){const t=Cu(n);return vn.getManager(t.scheme).removeModel(t.path)})).apply(this,arguments)}function mI(n,t){return Gd.apply(this,arguments)}function Gd(){return(Gd=(0,W.Z)(function*(n,t){return iy(n,t,!1)})).apply(this,arguments)}function gI(n,t){return Hd.apply(this,arguments)}function Hd(){return(Hd=(0,W.Z)(function*(n,t){return iy(n,t,!0)})).apply(this,arguments)}class yI{constructor(){this.messageName="setTimeoutCustom",this.functionRefs=[],this.handledMessageCount=0,this.hasEventListener=!1}fetch(t,e){return fetch(t,e)}now(){return performance.now()}encode(t,e){if("utf-8"!==e&&"utf8"!==e)throw new Error(`Browser's encoder only supports utf-8, but got ${e}`);return null==this.textEncoder&&(this.textEncoder=new TextEncoder),this.textEncoder.encode(t)}decode(t,e){return new TextDecoder(e).decode(t)}setTimeoutCustom(t,e){typeof window>"u"||!z().getBool("USE_SETTIMEOUTCUSTOM")?setTimeout(t,e):(this.functionRefs.push(t),setTimeout(()=>{window.postMessage({name:this.messageName,index:this.functionRefs.length-1},"*")},e),this.hasEventListener||(this.hasEventListener=!0,window.addEventListener("message",s=>{s.source===window&&s.data.name===this.messageName&&(s.stopPropagation(),(0,this.functionRefs[s.data.index])(),this.handledMessageCount++,this.handledMessageCount===this.functionRefs.length&&(this.functionRefs=[],this.handledMessageCount=0))},!0)))}isTypedArray(t){return Ng(t)}}if(z().get("IS_BROWSER")){z().setPlatform("browser",new yI);try{vn.registerManager(Oo.URL_SCHEME,new dI)}catch{}try{vn.registerManager(Fo.URL_SCHEME,new oI)}catch{}}let Po;function Me(n,t="float32",e){return t=t||"float32",Wn(n),new Gt(n,t,e)}z().get("IS_NODE")&&!z().get("IS_BROWSER")&&z().setPlatform("node",new class bI{constructor(){this.util=V(8628),this.textEncoder=new this.util.TextEncoder}fetch(t,e){return null!=z().global.fetch?z().global.fetch(t,e):(null==Po&&(Po=V(5410)),Po(t,e))}now(){const t=process.hrtime();return 1e3*t[0]+t[1]/1e6}encode(t,e){if("utf-8"!==e&&"utf8"!==e)throw new Error(`Node built-in encoder only supports utf-8, but got ${e}`);return this.textEncoder.encode(t)}decode(t,e){return 0===t.length?"":new this.util.TextDecoder(e).decode(t)}isTypedArray(t){return this.util.types.isFloat32Array(t)||this.util.types.isInt32Array(t)||this.util.types.isUint8Array(t)||this.util.types.isUint8ClampedArray(t)}});const he=_({cast_:function wI(n,t){const e=N(n,"x","cast");if(!function aS(n){return"bool"===n||"complex64"===n||"float32"===n||"int32"===n||"string"===n}(t))throw new Error(`Failed to cast to unknown dtype ${t}`);if("string"===t&&"string"!==e.dtype||"string"!==t&&"string"===e.dtype)throw new Error("Only strings can be casted to strings");return A.runKernel(Ta,{x:e},{dtype:t})}}),Ks=_({clone_:function vI(n){const e={x:N(n,"x","clone","string_or_numeric")};return A.runKernel(Ba,e)}});function ly(n,t=!1){console.log(n.toString(t))}function jd(){A.disposeVariables()}function As(){return A}function Kd(){return A.memory()}function P(n,t){return A.tidy(n,t)}function Be(n){zg(n).forEach(e=>e.dispose())}function en(n){return A.keep(n)}function uy(n,t,e=1){return A.registerBackend(n,t,e)}Vg(),function OS(n){Do=n}({buffer:Me,cast:he,clone:Ks,print:ly}),function LS(n){Ag=n}(function SI(n){z().getBool("DEPRECATION_WARNINGS_ENABLED")&&console.warn(n+" You can disable deprecation warnings with tf.disableDeprecationWarnings().")});const ee=_({add_:function NI(n,t){let e=N(n,"a","add"),s=N(t,"b","add");return[e,s]=Et(e,s),A.runKernel(Eo,{a:e,b:s})}}),qd=_({floorDiv_:function CI(n,t){let e=N(n,"a","floorDiv"),s=N(t,"b","floorDiv");return[e,s]=Et(e,s),A.runKernel(za,{a:e,b:s})}}),Ce=_({div_:function kI(n,t){let e=N(n,"a","div"),s=N(t,"b","div");return[e,s]=Et(e,s),"int32"===e.dtype&&"int32"===s.dtype?qd(e,s):A.runKernel(Ra,{a:e,b:s},{})}}),D=_({mul_:function TI(n,t){let e=N(n,"a","mul"),s=N(t,"b","mul");return[e,s]=Et(e,s),A.runKernel(Xa,{a:e,b:s})}}),pn=_({sqrt_:function $I(n){const e={x:N(n,"x","sqrt","float32")};return A.runKernel(li,e)}}),dt=_({square_:function _I(n){const t=N(n,"x","square");return A.runKernel("Square",{x:t},{})}}),Ye=_({zerosLike_:function EI(n){const e={x:N(n,"x","zerosLike")};return A.runKernel(pu,e)}});function qs(n){return A.customGrad(n)}function $e(n,t){if((ss(n)&&"string"!==t||Array.isArray(n))&&"complex64"!==t)throw new Error("Error creating a new Scalar: value must be a primitive (number|boolean|string)");if("string"===t&&ss(n)&&!(n instanceof Uint8Array))throw new Error("When making a scalar from encoded string, the value must be `Uint8Array`.");return mr(n,[],[],t)}const RI=new Map,Xd=new Map;class zo{getClassName(){return this.constructor.className}static fromConfig(t,e){return new t(e)}}class rs{constructor(){this.classNameMap={}}static getMap(){return null==rs.instance&&(rs.instance=new rs),rs.instance}static register(t){rs.getMap().classNameMap[t.className]=[t,t.fromConfig]}}function te(n,t,e){I(null!=n.className,()=>"Class being registered does not have the static className property defined."),I("string"==typeof n.className,()=>"className is required to be a string, but got type "+typeof n.className),I(n.className.length>0,()=>"Class being registered has an empty-string as its className, which is disallowed."),typeof t>"u"&&(t="Custom"),typeof e>"u"&&(e=n.className);const r=t+">"+e;return rs.register(n),RI.set(r,n),Xd.set(n,r),n}class yr extends zo{minimize(t,e=!1,s){const{value:r,grads:o}=this.computeGradients(t,s);if(null!=s){const a=s.map(i=>({name:i.name,tensor:o[i.name]}));this.applyGradients(a)}else this.applyGradients(o);return Be(o),e?r:(r.dispose(),null)}get iterations(){return null==this.iterations_&&(this.iterations_=0),this.iterations_}incrementIterations(){this.iterations_=this.iterations+1}computeGradients(t,e){return function AI(n,t){I(ch(n),()=>"The f passed in variableGrads(f) must be a function"),I(null==t||Array.isArray(t)&&t.every(u=>u instanceof vu),()=>"The varList passed in variableGrads(f, varList) must be an array of variables");const e=null!=t;if(!e){t=[];for(const u in A.registeredVariables)t.push(A.registeredVariables[u])}const s=e?t.filter(u=>!u.trainable):null,r=t.length;I((t=t.filter(u=>u.trainable)).length>0,()=>`variableGrads() expects at least one of the input variables to be trainable, but none of the ${r} variables is trainable.`);const{value:a,grads:i}=A.gradients(n,t,null,!0);I(i.some(u=>null!=u),()=>"Cannot find a connection between any variable and the result of the loss function y=f(x). Please make sure the operations that use variables are inside the function f passed to minimize()."),I(0===a.rank,()=>`The f passed in variableGrads(f) must return a scalar, but it returned a rank-${a.rank} tensor`);const l={};return t.forEach((u,c)=>{null!=i[c]&&(l[u.name]=i[c])}),null!=s&&s.forEach(u=>l[u.name]=null),{value:a,grads:l}}(t,e)}dispose(){null!=this.iterations_&&Be(this.iterations_)}saveIterations(){var t=this;return(0,W.Z)(function*(){return null==t.iterations_&&(t.iterations_=0),{name:"iter",tensor:$e(t.iterations_,"int32")}})()}getWeights(){return(0,W.Z)(function*(){throw new Error("getWeights() is not implemented for this optimizer yet.")})()}setWeights(t){var e=this;return(0,W.Z)(function*(){throw new Error(`setWeights() is not implemented for this optimizer class ${e.getClassName()}`)})()}extractIterations(t){var e=this;return(0,W.Z)(function*(){return e.iterations_=(yield t[0].tensor.data())[0],t.slice(1)})()}}Object.defineProperty(yr,Symbol.hasInstance,{value:n=>null!=n.minimize&&null!=n.computeGradients&&null!=n.applyGradients});class cy extends yr{static get className(){return"Adadelta"}constructor(t,e,s=null){super(),this.learningRate=t,this.rho=e,this.epsilon=s,this.accumulatedGrads=[],this.accumulatedUpdates=[],null==s&&(this.epsilon=A.backend.epsilon())}applyGradients(t){(Array.isArray(t)?t.map(s=>s.name):Object.keys(t)).forEach((s,r)=>{const o=A.registeredVariables[s];null==this.accumulatedGrads[r]&&(this.accumulatedGrads[r]={originalName:`${s}/accum_grad`,variable:P(()=>Ye(o).variable(!1))}),null==this.accumulatedUpdates[r]&&(this.accumulatedUpdates[r]={originalName:`${s}/accum_var`,variable:P(()=>Ye(o).variable(!1))});const i=Array.isArray(t)?t[r].tensor:t[s];if(null==i)return;const l=this.accumulatedGrads[r].variable,u=this.accumulatedUpdates[r].variable;P(()=>{const c=ee(D(l,this.rho),D(dt(i),1-this.rho)),h=D(Ce(pn(ee(u,this.epsilon)),pn(ee(l,this.epsilon))),i),d=ee(D(u,this.rho),D(dt(h),1-this.rho));l.assign(c),u.assign(d);const p=ee(D(h,-this.learningRate),o);o.assign(p)})}),this.incrementIterations()}dispose(){null!=this.accumulatedUpdates&&(Be(this.accumulatedGrads.map(t=>t.variable)),Be(this.accumulatedUpdates.map(t=>t.variable)))}getWeights(){var t=this;return(0,W.Z)(function*(){const e=[...t.accumulatedGrads,...t.accumulatedUpdates];return[yield t.saveIterations()].concat(e.map(s=>({name:s.originalName,tensor:s.variable})))})()}setWeights(t){var e=this;return(0,W.Z)(function*(){const s=(t=yield e.extractIterations(t)).length/2;e.accumulatedGrads=t.slice(0,s).map(o=>({originalName:o.name,variable:o.tensor.variable(!1)})),e.accumulatedUpdates=t.slice(s,2*s).map(o=>({originalName:o.name,variable:o.tensor.variable(!1)}))})()}getConfig(){return{learningRate:this.learningRate,rho:this.rho,epsilon:this.epsilon}}static fromConfig(t,e){return new t(e.learningRate,e.rho,e.epsilon)}}function Mo(n,t,e){return Wn(n),e=e||$o(t),A.runKernel(zh,{},{shape:n,value:t,dtype:e})}class hy extends yr{static get className(){return"Adagrad"}constructor(t,e=.1){super(),this.learningRate=t,this.initialAccumulatorValue=e,this.accumulatedGrads=[]}applyGradients(t){(Array.isArray(t)?t.map(s=>s.name):Object.keys(t)).forEach((s,r)=>{const o=A.registeredVariables[s];null==this.accumulatedGrads[r]&&(this.accumulatedGrads[r]={originalName:`${s}/accumulator`,variable:P(()=>Mo(o.shape,this.initialAccumulatorValue).variable(!1))});const a=Array.isArray(t)?t[r].tensor:t[s];if(null==a)return;const i=this.accumulatedGrads[r].variable;P(()=>{const l=ee(i,dt(a));i.assign(l);const u=ee(D(Ce(a,pn(ee(l,A.backend.epsilon()))),-this.learningRate),o);o.assign(u)})}),this.incrementIterations()}dispose(){null!=this.accumulatedGrads&&Be(this.accumulatedGrads.map(t=>t.variable))}getWeights(){var t=this;return(0,W.Z)(function*(){return[yield t.saveIterations()].concat(t.accumulatedGrads.map(e=>({name:e.originalName,tensor:e.variable})))})()}setWeights(t){var e=this;return(0,W.Z)(function*(){t=yield e.extractIterations(t),e.accumulatedGrads=t.map(r=>({originalName:r.name,variable:r.tensor.variable(!1)}))})()}getConfig(){return{learningRate:this.learningRate,initialAccumulatorValue:this.initialAccumulatorValue}}static fromConfig(t,e){return new t(e.learningRate,e.initialAccumulatorValue)}}const xr=_({pow_:function DI(n,t){let e=N(n,"base","pow"),s=N(t,"exp","pow");return[e,s]=Et(e,s),A.runKernel(Za,{a:e,b:s})}}),be=_({sub_:function FI(n,t){let e=N(n,"a","sub"),s=N(t,"b","sub");return[e,s]=Et(e,s),A.runKernel(ci,{a:e,b:s})}});class dy extends yr{static get className(){return"Adam"}constructor(t,e,s,r=null){super(),this.learningRate=t,this.beta1=e,this.beta2=s,this.epsilon=r,this.accumulatedFirstMoment=[],this.accumulatedSecondMoment=[],P(()=>{this.accBeta1=$e(e).variable(),this.accBeta2=$e(s).variable()}),null==r&&(this.epsilon=A.backend.epsilon())}applyGradients(t){const e=Array.isArray(t)?t.map(s=>s.name):Object.keys(t);P(()=>{const s=be(1,this.accBeta1),r=be(1,this.accBeta2);e.forEach((o,a)=>{const i=A.registeredVariables[o];null==this.accumulatedFirstMoment[a]&&(this.accumulatedFirstMoment[a]={originalName:`${o}/m`,variable:P(()=>Ye(i).variable(!1))}),null==this.accumulatedSecondMoment[a]&&(this.accumulatedSecondMoment[a]={originalName:`${o}/v`,variable:P(()=>Ye(i).variable(!1))});const u=Array.isArray(t)?t[a].tensor:t[o];if(null==u)return;const c=this.accumulatedFirstMoment[a].variable,h=this.accumulatedSecondMoment[a].variable,d=ee(D(c,this.beta1),D(u,1-this.beta1)),p=ee(D(h,this.beta2),D(dt(u),1-this.beta2)),f=Ce(d,s),g=Ce(p,r);c.assign(d),h.assign(p);const m=ee(D(Ce(f,ee(pn(g),this.epsilon)),-this.learningRate),i);i.assign(m)}),this.accBeta1.assign(D(this.accBeta1,this.beta1)),this.accBeta2.assign(D(this.accBeta2,this.beta2))}),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.accBeta2.dispose(),null!=this.accumulatedFirstMoment&&Be(this.accumulatedFirstMoment.map(t=>t.variable)),null!=this.accumulatedSecondMoment&&Be(this.accumulatedSecondMoment.map(t=>t.variable))}getWeights(){var t=this;return(0,W.Z)(function*(){const e=[...t.accumulatedFirstMoment,...t.accumulatedSecondMoment];return[yield t.saveIterations()].concat(e.map(s=>({name:s.originalName,tensor:s.variable})))})()}setWeights(t){var e=this;return(0,W.Z)(function*(){t=yield e.extractIterations(t),P(()=>{e.accBeta1.assign(xr(e.beta1,e.iterations_+1)),e.accBeta2.assign(xr(e.beta2,e.iterations_+1))});const s=t.length/2;e.accumulatedFirstMoment=t.slice(0,s).map(o=>({originalName:o.name,variable:o.tensor.variable(!1)})),e.accumulatedSecondMoment=t.slice(s,2*s).map(o=>({originalName:o.name,variable:o.tensor.variable(!1)}))})()}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon}}static fromConfig(t,e){return new t(e.learningRate,e.beta1,e.beta2,e.epsilon)}}const Ht=_({abs_:function OI(n){const t=N(n,"x","abs");return A.runKernel("complex64"===t.dtype?wl:hl,{x:t})}});function Bo(n,t){const e=n.length,s=[];for(let r=0;r<e;r++){const o=e-1-r;(t[t.length-1-r]||1)>1&&1===(n[o]||1)&&s.unshift(o)}return s}function jt(n,t){const e=[];for(let s=0;s<t.length;s++){const r=n[n.length-s-1],o=t.length-s-1;(null==r||1===r&&t[o]>1)&&e.unshift(o)}return e}function Le(n,t){const e=Math.max(n.length,t.length),s=new Array(e);for(let r=0;r<e;r++){let o=n[n.length-r-1];null==o&&(o=1);let a=t[t.length-r-1];if(null==a&&(a=1),1===o)s[e-r-1]=a;else if(1===a)s[e-r-1]=o;else{if(o!==a)throw Error(`Operands could not be broadcast together with shapes ${n} and ${t}.`);s[e-r-1]=o}}return s}const xs=_({maximum_:function LI(n,t){let e=N(n,"a","maximum"),s=N(t,"b","maximum");return[e,s]=Et(e,s),"bool"===e.dtype&&(e=he(e,"int32"),s=he(s,"int32")),Le(e.shape,s.shape),A.runKernel(ja,{a:e,b:s})}});class py extends yr{static get className(){return"Adamax"}constructor(t,e,s,r=null,o=0){super(),this.learningRate=t,this.beta1=e,this.beta2=s,this.epsilon=r,this.decay=o,this.accumulatedFirstMoment=[],this.accumulatedWeightedInfNorm=[],P(()=>{this.iteration=$e(0).variable(),this.accBeta1=$e(e).variable()}),null==r&&(this.epsilon=A.backend.epsilon())}applyGradients(t){const e=Array.isArray(t)?t.map(s=>s.name):Object.keys(t);P(()=>{const s=be(1,this.accBeta1),r=Ce(-this.learningRate,ee(D(this.iteration,this.decay),1));e.forEach((o,a)=>{const i=A.registeredVariables[o];null==this.accumulatedFirstMoment[a]&&(this.accumulatedFirstMoment[a]={originalName:`${o}/m`,variable:Ye(i).variable(!1)}),null==this.accumulatedWeightedInfNorm[a]&&(this.accumulatedWeightedInfNorm[a]={originalName:`${o}/v`,variable:Ye(i).variable(!1)});const u=Array.isArray(t)?t[a].tensor:t[o];if(null==u)return;const c=this.accumulatedFirstMoment[a].variable,h=this.accumulatedWeightedInfNorm[a].variable,d=ee(D(c,this.beta1),D(u,1-this.beta1)),p=D(h,this.beta2),f=Ht(u),g=xs(p,f);c.assign(d),h.assign(g);const m=ee(D(Ce(r,s),Ce(d,ee(g,this.epsilon))),i);i.assign(m)}),this.iteration.assign(ee(this.iteration,1)),this.accBeta1.assign(D(this.accBeta1,this.beta1))}),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.iteration.dispose(),null!=this.accumulatedFirstMoment&&Be(this.accumulatedFirstMoment.map(t=>t.variable)),null!=this.accumulatedWeightedInfNorm&&Be(this.accumulatedWeightedInfNorm.map(t=>t.variable))}getWeights(){return(0,W.Z)(function*(){throw new Error("getWeights() is not implemented for Adamax yet.")})()}setWeights(t){return(0,W.Z)(function*(){throw new Error("setWeights() is not implemented for Adamax yet.")})()}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon,decay:this.decay}}static fromConfig(t,e){return new t(e.learningRate,e.beta1,e.beta2,e.epsilon,e.decay)}}class Zd extends yr{static get className(){return"SGD"}constructor(t){super(),this.learningRate=t,this.setLearningRate(t)}applyGradients(t){(Array.isArray(t)?t.map(s=>s.name):Object.keys(t)).forEach((s,r)=>{const o=Array.isArray(t)?t[r].tensor:t[s];if(null==o)return;const a=A.registeredVariables[s];P(()=>{const i=ee(D(this.c,o),a);a.assign(i)})}),this.incrementIterations()}setLearningRate(t){this.learningRate=t,null!=this.c&&this.c.dispose(),this.c=en($e(-t))}dispose(){this.c.dispose()}getWeights(){var t=this;return(0,W.Z)(function*(){return[yield t.saveIterations()]})()}setWeights(t){var e=this;return(0,W.Z)(function*(){if(0!==(t=yield e.extractIterations(t)).length)throw new Error("SGD optimizer does not have settable weights.")})()}getConfig(){return{learningRate:this.learningRate}}static fromConfig(t,e){return new t(e.learningRate)}}class fy extends Zd{static get className(){return"Momentum"}constructor(t,e,s=!1){super(t),this.learningRate=t,this.momentum=e,this.useNesterov=s,this.accumulations=[],this.m=$e(this.momentum)}applyGradients(t){(Array.isArray(t)?t.map(s=>s.name):Object.keys(t)).forEach((s,r)=>{const o=A.registeredVariables[s];null==this.accumulations[r]&&(this.accumulations[r]={originalName:`${s}/momentum`,variable:P(()=>Ye(o).variable(!1))});const a=this.accumulations[r].variable,i=Array.isArray(t)?t[r].tensor:t[s];null!=i&&P(()=>{let l;const u=ee(D(this.m,a),i);l=ee(D(this.c,this.useNesterov?ee(i,D(u,this.m)):u),o),a.assign(u),o.assign(l)})}),this.incrementIterations()}dispose(){this.m.dispose(),null!=this.accumulations&&Be(this.accumulations.map(t=>t.variable))}setMomentum(t){this.momentum=t}getWeights(){var t=this;return(0,W.Z)(function*(){return[yield t.saveIterations()].concat(t.accumulations.map(e=>({name:e.originalName,tensor:e.variable})))})()}setWeights(t){var e=this;return(0,W.Z)(function*(){t=yield e.extractIterations(t),e.accumulations=t.map(r=>({originalName:r.name,variable:r.tensor.variable(!1)}))})()}getConfig(){return{learningRate:this.learningRate,momentum:this.momentum,useNesterov:this.useNesterov}}static fromConfig(t,e){return new t(e.learningRate,e.momentum,e.useNesterov)}}class my extends yr{static get className(){return"RMSProp"}constructor(t,e=.9,s=0,r=null,o=!1){if(super(),this.learningRate=t,this.decay=e,this.momentum=s,this.epsilon=r,this.accumulatedMeanSquares=[],this.accumulatedMoments=[],this.accumulatedMeanGrads=[],this.centered=o,null==r&&(this.epsilon=A.backend.epsilon()),null==t)throw new Error("learningRate for RMSPropOptimizer must be defined.")}applyGradients(t){(Array.isArray(t)?t.map(s=>s.name):Object.keys(t)).forEach((s,r)=>{const o=A.registeredVariables[s],a=!1;null==this.accumulatedMeanSquares[r]&&(this.accumulatedMeanSquares[r]={originalName:`${s}/rms`,variable:P(()=>Ye(o).variable(a))}),null==this.accumulatedMoments[r]&&(this.accumulatedMoments[r]={originalName:`${s}/momentum`,variable:P(()=>Ye(o).variable(a))}),null==this.accumulatedMeanGrads[r]&&this.centered&&(this.accumulatedMeanGrads[r]={originalName:`${s}/mg`,variable:P(()=>Ye(o).variable(a))});const i=Array.isArray(t)?t[r].tensor:t[s];if(null==i)return;const l=this.accumulatedMeanSquares[r].variable,u=this.accumulatedMoments[r].variable;P(()=>{const c=ee(D(l,this.decay),D(dt(i),1-this.decay));if(this.centered){const h=this.accumulatedMeanGrads[r].variable,d=ee(D(h,this.decay),D(i,1-this.decay)),p=Ce(D(i,this.learningRate),pn(be(c,ee(dt(d),this.epsilon)))),f=ee(D(u,this.momentum),p);l.assign(c),h.assign(d),u.assign(f);const g=be(o,f);o.assign(g)}else{const h=ee(D(l,this.decay),D(dt(i),1-this.decay)),d=ee(D(u,this.momentum),Ce(D(i,this.learningRate),pn(ee(h,this.epsilon))));l.assign(h),u.assign(d);const p=be(o,d);o.assign(p)}})}),this.incrementIterations()}dispose(){null!=this.accumulatedMeanSquares&&Be(this.accumulatedMeanSquares.map(t=>t.variable)),null!=this.accumulatedMeanGrads&&this.centered&&Be(this.accumulatedMeanGrads.map(t=>t.variable)),null!=this.accumulatedMoments&&Be(this.accumulatedMoments.map(t=>t.variable))}getWeights(){var t=this;return(0,W.Z)(function*(){const e=[...t.accumulatedMeanSquares,...t.accumulatedMoments];return t.centered&&e.push(...t.accumulatedMeanGrads),[yield t.saveIterations()].concat(e.map(s=>({name:s.originalName,tensor:s.variable})))})()}setWeights(t){var e=this;return(0,W.Z)(function*(){t=yield e.extractIterations(t);const s=e.centered?t.length/3:t.length/2,r=!1;e.accumulatedMeanSquares=t.slice(0,s).map(o=>({originalName:o.name,variable:o.tensor.variable(r)})),e.accumulatedMoments=t.slice(s,2*s).map(o=>({originalName:o.name,variable:o.tensor.variable(r)})),e.centered&&(e.accumulatedMeanGrads=t.slice(2*s,3*s).map(o=>({originalName:o.name,variable:o.tensor.variable(r)})))})()}getConfig(){return{learningRate:this.learningRate,decay:this.decay,momentum:this.momentum,epsilon:this.epsilon,centered:this.centered}}static fromConfig(t,e){return new t(e.learningRate,e.decay,e.momentum,e.epsilon,e.centered)}}const PI=[cy,hy,dy,py,fy,my,Zd];function gy(n){return new Promise(t=>setTimeout(t)).then(n)}let Yd=(()=>{class n{constructor(e){if(!z().getBool("IS_BROWSER"))throw new Error("browserDownloads() cannot proceed because the current environment is not a browser.");e.startsWith(n.URL_SCHEME)&&(e=e.slice(n.URL_SCHEME.length)),(null==e||0===e.length)&&(e="model"),this.modelJsonFileName=e+".json",this.weightDataFileName=e+".weights.bin"}save(e){var s=this;return(0,W.Z)(function*(){if(typeof document>"u")throw new Error("Browser downloads are not supported in this environment since `document` is not present");const r=ys.join(e.weightData),o=window.URL.createObjectURL(new Blob([r],{type:"application/octet-stream"}));if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserDownloads.save() does not support saving model topology in binary formats yet.");{const i=Yg(e,[{paths:["./"+s.weightDataFileName],weights:e.weightSpecs}]),l=window.URL.createObjectURL(new Blob([JSON.stringify(i)],{type:"application/json"})),u=null==s.modelJsonAnchor?document.createElement("a"):s.modelJsonAnchor;if(u.download=s.modelJsonFileName,u.href=l,yield gy(()=>u.dispatchEvent(new MouseEvent("click"))),null!=e.weightData){const c=null==s.weightDataAnchor?document.createElement("a"):s.weightDataAnchor;c.download=s.weightDataFileName,c.href=o,yield gy(()=>c.dispatchEvent(new MouseEvent("click")))}return{modelArtifactsInfo:bi(e)}}})()}}return n.URL_SCHEME="downloads://",n})();class WI{constructor(t){if(null==t||t.length<1)throw new Error(`When calling browserFiles, at least 1 file is required, but received ${t}`);this.jsonFile=t[0],this.weightsFiles=t.slice(1)}load(){var t=this;return(0,W.Z)(function*(){return new Promise((e,s)=>{const r=new FileReader;r.onload=o=>{const a=JSON.parse(o.target.result),i=a.modelTopology;if(null==i)return void s(new Error(`modelTopology field is missing from file ${t.jsonFile.name}`));if(null==a.weightsManifest)return void s(new Error(`weightManifest field is missing from file ${t.jsonFile.name}`));if(0===t.weightsFiles.length)return void e({modelTopology:i});const u=Od(a,c=>t.loadWeights(c));e(u)},r.onerror=o=>s(`Failed to read model topology and weights manifest JSON from file '${t.jsonFile.name}'. BrowserFiles supports loading Keras-style tf.Model artifacts only.`),r.readAsText(t.jsonFile)})})()}loadWeights(t){const e=[],s=[];for(const a of t)e.push(...a.weights),s.push(...a.paths);const r=this.checkManifestAndWeightFiles(t),o=s.map(a=>this.loadWeightsFile(a,r[a]));return Promise.all(o).then(a=>[e,a])}loadWeightsFile(t,e){return new Promise((s,r)=>{const o=new FileReader;o.onload=a=>{s(a.target.result)},o.onerror=a=>r(`Failed to weights data from file of path '${t}'.`),o.readAsArrayBuffer(e)})}checkManifestAndWeightFiles(t){const e=[],s=this.weightsFiles.map(o=>Zg(o.name)),r={};for(const o of t)o.paths.forEach(a=>{const i=Zg(a);if(-1!==e.indexOf(i))throw new Error(`Duplicate file basename found in weights manifest: '${i}'`);if(e.push(i),-1===s.indexOf(i))throw new Error(`Weight file with basename '${i}' is not provided.`);r[a]=this.weightsFiles[s.indexOf(i)]});if(e.length!==this.weightsFiles.length)throw new Error(`Mismatch in the number of files in weights manifest (${e.length}) and the number of weight files provided (${this.weightsFiles.length}).`);return r}}function HI(n){return new WI(n)}function yy(n,t,e,s){(function a(l){I(null!=l&&Array.isArray(l)&&l.length>0,()=>"promises must be a none empty array")})(n),function i(l,u){I(l>=0&&l<=1,()=>`Progress fraction must be in range [0, 1], but got startFraction ${l}`),I(u>=0&&u<=1,()=>`Progress fraction must be in range [0, 1], but got endFraction ${u}`),I(u>=l,()=>`startFraction must be no more than endFraction, but got startFraction ${l} and endFraction ${u}`)}(e=null==e?0:e,s=null==s?1:s);let r=0;return Promise.all(n.map(l=>(l.then(u=>{const c=e+ ++r/n.length*(s-e);return t(c),u}),l)))}function xy(n,t){return Qd.apply(this,arguments)}function Qd(){return(Qd=(0,W.Z)(function*(n,t){null==t&&(t={});const e=null==t.fetchFunc?z().platform.fetch:t.fetchFunc,s=n.map(h=>e(h,t.requestInit,{isBinary:!0})),i=(null==t.onProgress?yield Promise.all(s):yield yy(s,t.onProgress,0,.5)).map(h=>h.arrayBuffer());return null==t.onProgress?yield Promise.all(i):yield yy(i,t.onProgress,.5,1)})).apply(this,arguments)}function jI(n){return Jd.apply(this,arguments)}function Jd(){return(Jd=(0,W.Z)(function*(n,t="",e,s){return by(a=>xy(a,{requestInit:s}))(n,t,e)})).apply(this,arguments)}function by(n){return function(){var t=(0,W.Z)(function*(e,s="",r){const o=e.map(()=>!1),a={},i=null!=r?r.map(()=>!1):[],l=[];if(e.forEach((f,g)=>{let m=0;f.weights.forEach(y=>{const b=Ad["quantization"in y?y.quantization.dtype:y.dtype]*G(y.shape),w=()=>{o[g]=!0,null==a[g]&&(a[g]=[]),a[g].push({manifestEntry:y,groupOffset:m,sizeBytes:b})};null!=r?r.forEach((S,C)=>{S===y.name&&(w(),i[C]=!0)}):w(),l.push(y.name),m+=b})}),!i.every(f=>f)){const f=r.filter((g,m)=>!i[m]);throw new Error(`Could not find weights in manifest with names: ${f.join(", ")}. \nManifest JSON has weights with names: ${l.join(", ")}.`)}const u=o.reduce((f,g,m)=>(g&&f.push(m),f),[]),c=[];u.forEach(f=>{e[f].paths.forEach(g=>{const m=s+(s.endsWith("/")?"":"/")+g;c.push(m)})});const h=yield n(c),d={};let p=0;return u.forEach(f=>{const g=e[f].paths.length,m=new ys(h.slice(p,p+g));a[f].forEach(x=>{const w=Kg(m.slice(x.groupOffset,x.groupOffset+x.sizeBytes),[x.manifestEntry]);for(const S in w)d[S]=w[S]}),p+=g}),d});return function(e){return t.apply(this,arguments)}}()}Ct.registerSaveRouter(n=>z().getBool("IS_BROWSER")&&!Array.isArray(n)&&n.startsWith(Yd.URL_SCHEME)?function GI(n="model"){return new Yd(n)}(n.slice(Yd.URL_SCHEME.length)):null);let wy=(()=>{class n{constructor(e,s){if(this.DEFAULT_METHOD="POST",null==s&&(s={}),this.weightPathPrefix=s.weightPathPrefix,this.onProgress=s.onProgress,this.weightUrlConverter=s.weightUrlConverter,null!=s.fetchFunc?(I("function"==typeof s.fetchFunc,()=>"Must pass a function that matches the signature of `fetch` (see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)"),this.fetch=s.fetchFunc):this.fetch=z().platform.fetch,I(null!=e&&e.length>0,()=>"URL path for http must not be null, undefined or empty."),Array.isArray(e)&&I(2===e.length,()=>`URL paths for http must have a length of 2, (actual length is ${e.length}).`),this.path=e,null!=s.requestInit&&null!=s.requestInit.body)throw new Error("requestInit is expected to have no pre-existing body, but has one.");this.requestInit=s.requestInit||{}}save(e){var s=this;return(0,W.Z)(function*(){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserHTTPRequest.save() does not support saving model topology in binary formats yet.");const r=Object.assign({method:s.DEFAULT_METHOD},s.requestInit);r.body=new FormData;const a=Yg(e,[{paths:["./model.weights.bin"],weights:e.weightSpecs}]);if(r.body.append("model.json",new Blob([JSON.stringify(a)],{type:"application/json"}),"model.json"),null!=e.weightData){const l=ys.join(e.weightData);r.body.append("model.weights.bin",new Blob([l],{type:"application/octet-stream"}),"model.weights.bin")}const i=yield s.fetch(s.path,r);if(i.ok)return{modelArtifactsInfo:bi(e),responses:[i]};throw new Error(`BrowserHTTPRequest.save() failed due to HTTP response status ${i.status}.`)})()}load(){var e=this;return(0,W.Z)(function*(){const s=yield e.fetch(e.path,e.requestInit);if(!s.ok)throw new Error(`Request to ${e.path} failed with status code ${s.status}. Please verify this URL points to the model JSON of the model to load.`);let r;try{r=yield s.json()}catch{let l=`Failed to parse model JSON of response from ${e.path}.`;throw e.path.endsWith(".pb")?l+=" Your path contains a .pb file extension. Support for .pb models have been removed in TensorFlow.js 1.0 in favor of .json models. You can re-convert your Python TensorFlow model using the TensorFlow.js 1.0 conversion scripts or you can convert your.pb models with the 'pb2json'NPM script in the tensorflow/tfjs-converter repository.":l+=" Please make sure the server is serving valid JSON for this request.",new Error(l)}if(null==r.modelTopology&&null==r.weightsManifest)throw new Error(`The JSON from HTTP path ${e.path} contains neither model topology or manifest for weights.`);return Od(r,i=>e.loadWeights(i))})()}loadWeights(e){var s=this;return(0,W.Z)(function*(){const r=Array.isArray(s.path)?s.path[1]:s.path,[o,a]=function XI(n){const t=n.lastIndexOf("/"),e=n.lastIndexOf("?");return[n.substring(0,t)+"/",e>t?n.substring(e):""]}(r),i=s.weightPathPrefix||o,l=Jg(e),u=[],c=[];for(const d of e)for(const p of d.paths)null!=s.weightUrlConverter?c.push(s.weightUrlConverter(p)):u.push(i+p+a);return s.weightUrlConverter&&u.push(...yield Promise.all(c)),[l,yield xy(u,{requestInit:s.requestInit,fetchFunc:s.fetch,onProgress:s.onProgress})]})()}}return n.URL_SCHEME_REGEX=/^https?:\/\//,n})();function ep(n){return null!=n.match(wy.URL_SCHEME_REGEX)}const vy=(n,t)=>{if(typeof fetch>"u"&&(null==t||null==t.fetchFunc))return null;{let e=!0;if(e=Array.isArray(n)?n.every(s=>ep(s)):ep(n),e)return tp(n,t)}return null};function tp(n,t){return new wy(n,t)}function ZI(n,t){return tp(n,t)}Ct.registerSaveRouter(vy),Ct.registerLoadRouter(vy);class np{constructor(t){this.modelArtifacts=t}load(){return this.modelArtifacts}}class Sy{constructor(t){this.saveHandler=t}save(t){return this.saveHandler(t)}}class YI{constructor(t){t.load&&(this.load=()=>Promise.resolve(t.load())),t.save&&(this.save=e=>Promise.resolve(t.save(e)))}}function QI(n,t,e,s){return new YI(Iy(...arguments))}function Iy(n,t,e,s){return 1===arguments.length?null!=n.modelTopology||null!=n.weightSpecs?new np(n):(console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new np({modelTopology:n})):(console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new np({modelTopology:n,weightSpecs:t,weightData:e,trainingConfig:s}))}function JI(n){return new Sy(n)}function eN(n){return new Sy(n)}function Ny(n,t,e){if(Co(n),null!=t&&3!==t.length)throw new Error("tensor3d() requires shape to have three numbers");const s=pr(n,e);if(3!==s.length&&1!==s.length)throw new Error("tensor3d() requires values to be number[][][] or flat/TypedArray");if(1===s.length&&null==t)throw new Error("tensor3d() requires shape to be provided when `values` are a flat array");return mr(n,t,s,e)}let Yr;const $y=_({fromPixels_:function ky(n,t=3){if(t>4)throw new Error("Cannot construct Tensor with more than 4 channels from pixels.");if(null==n)throw new Error("pixels passed to tf.browser.fromPixels() can not be null");let e=!1,s=!1,r=!1,o=!1,a=!1,i=!1;if(n.data instanceof Uint8Array)e=!0;else if(typeof ImageData<"u"&&n instanceof ImageData)s=!0;else if(typeof HTMLVideoElement<"u"&&n instanceof HTMLVideoElement)r=!0;else if(typeof HTMLImageElement<"u"&&n instanceof HTMLImageElement)o=!0;else if(null!=n.getContext)a=!0;else{if(!(typeof ImageBitmap<"u"&&n instanceof ImageBitmap))throw new Error(`pixels passed to tf.browser.fromPixels() must be either an HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData in browser, or OffscreenCanvas, ImageData in webworker or {data: Uint32Array, width: number, height: number}, but was ${n.constructor.name}`);i=!0}if(null!=yu(vd,A.backendName))return A.runKernel(vd,{pixels:n},{numChannels:t});const[u,c]=r?[n.videoWidth,n.videoHeight]:[n.width,n.height];let h,d;if(a)h=n.getContext("2d").getImageData(0,0,u,c).data;else if(s||e)h=n.data;else if(o||r||i){if(null==Yr)if(typeof document>"u"){if(!(typeof OffscreenCanvas<"u"&&typeof OffscreenCanvasRenderingContext2D<"u"))throw new Error("Cannot parse input in current context. Reason: OffscreenCanvas Context2D rendering is not supported.");Yr=new OffscreenCanvas(1,1).getContext("2d")}else Yr=document.createElement("canvas").getContext("2d",{willReadFrequently:!0});Yr.canvas.width=u,Yr.canvas.height=c,Yr.drawImage(n,0,0,u,c),h=Yr.getImageData(0,0,u,c).data}if(4===t)d=new Int32Array(h);else{const f=u*c;d=new Int32Array(f*t);for(let g=0;g<f;g++)for(let m=0;m<t;++m)d[g*t+m]=h[4*g+m]}return Ny(d,[c,u,t],"int32")}}),op=-2,aN=-1;function ap(n,t,e){const s=n.shape.length;I(s===t.length,()=>`Error in slice${s}D: Length of begin ${t} must match the rank of the array (${s}).`),I(s===e.length,()=>`Error in slice${s}D: Length of size ${e} must match the rank of the array (${s}).`);for(let r=0;r<s;++r)I(t[r]+e[r]<=n.shape[r],()=>`Error in slice${s}D: begin[${r}] + size[${r}] (${t[r]+e[r]}) would overflow input.shape[${r}] (${n.shape[r]})`)}function iN(n){const t=[];let e=0;for(;n>0;)1&n&&t.push(e),n/=2,e++;return t}function ip(n,t,e){const s=[];for(let r=0;r<n.length;r++)s[r]=Math.ceil((t[r]-n[r])/e[r]);return s}function _y(n,t,e,s){const r=[...n];for(let o=r.length;o<s.length;o++)r.push(1);for(let o=0;o<e;o++)0===o?r[t]=1:(r.splice(t,0,1),r.pop());return r}function Ey(n,t,e){return e<=n?e:e-(t-1)}function Ay(n,t){const e=[];for(let s=0;s<n;s++)e.push(t+s);return e}function lN(n,t,e,s,r,o,a,i,l){const u=n.length;let c=new Array(u),h=new Array(u),d=new Array(u);if(t.length&&e>0){const p=t[0],f=e+1;c=Ry(a,p,f,s,n),h=Dy(i,p,f,r,n),d=_y(o,p,f,n)}else for(let p=0;p<u;p++)c[p]=Oy(a,s,o,n,p,l),h[p]=Ly(i,r,o,n,p,l),d[p]=Fy(o,p,l);return{begin:c,end:h,strides:d}}function Ry(n,t,e,s,r){const o=[...r],a=Ay(e,t);for(let i=0;i<o.length;i++)if(a.indexOf(i)>-1)o[i]=0;else{const l=Ey(t,e,i);let u=s[l];n&1<<l&&(u=0),o[i]=u}return o}function Dy(n,t,e,s,r){const o=[...r],a=Ay(e,t);for(let i=0;i<o.length;i++)if(a.indexOf(i)>-1)o[i]=Number.MAX_SAFE_INTEGER;else{const l=Ey(t,e,i);let u=s[l];n&1<<l&&(u=Number.MAX_SAFE_INTEGER),o[i]=u}for(let i=0;i<o.length;i++)o[i]<0&&(o[i]+=r[i]),o[i]=Ur(0,o[i],r[i]);return o}function Fy(n,t,e){let s=n[t];return(e&1<<t||null==s)&&(s=1),s}function Oy(n,t,e,s,r,o){let a=t[r];(n&1<<r||o&1<<r||null==a)&&(a=(e[r]||1)>0?Number.MIN_SAFE_INTEGER:Number.MAX_SAFE_INTEGER);const l=s[r];return a<0&&(a+=l),a=Ur(0,a,l-1),a}function Ly(n,t,e,s,r,o){let a=t[r];const i=e[r]||1;(n&1<<r||o&1<<r||null==a)&&(a=i>0?Number.MAX_SAFE_INTEGER:Number.MIN_SAFE_INTEGER);const l=s[r];return a<0&&(a+=l),a=i>0?Ur(0,a,l):Ur(-1,a,l-1),a}function lp(n,t,e){let s=e.length;for(let r=0;r<e.length;r++)if(e[r]>1){s=r;break}for(let r=s+1;r<e.length;r++)if(t[r]>0||e[r]!==n[r])return!1;return!0}function up(n,t){let e=n.length>0?n[n.length-1]:1;for(let s=0;s<n.length-1;s++)e+=n[s]*t[s];return e}function Tu(n,t,e){let s;const r=n.shape.length;let o;return s="number"==typeof t?[t,...new Array(r-1).fill(0)]:t.length<r?t.concat(new Array(r-t.length).fill(0)):t.slice(),s.forEach(a=>{I(-1!==a,()=>"slice() does not support negative begin indexing.")}),o=null==e?new Array(r).fill(-1):"number"==typeof e?[e,...new Array(r-1).fill(-1)]:e.length<r?e.concat(new Array(r-e.length).fill(-1)):e,o=o.map((a,i)=>a>=0?a:(I(-1===a,()=>`Negative size values should be exactly -1 but got ${a} for the slice() size at index ${i}.`),n.shape[i]-s[i])),[s,o]}function cp(n,t,e,s,r,o,a,i,l){let u;if(null==s?(u=new Array(t.length),u.fill(1)):u=s,null!=a&&a&a-1)throw new Error("Multiple ellipses in slice is not allowed.");let c=!1;const h={dims:u.length,numAddAxisAfterEllipsis:0,begin:t.slice(),end:e.slice(),strides:u.slice(),beginMask:r,endMask:o,ellipsisMask:a,newAxisMask:i,shrinkAxisMask:l};for(let b=0;b<h.dims;b++)c&&1<<b&i&&h.numAddAxisAfterEllipsis++,1<<b&a&&(c=!0);c||(h.ellipsisMask|=1<<h.dims,h.dims++);const d={dims:n.length,beginMask:0,endMask:0,beginValid:!1,endValid:!1};!function uN(n,t){t.beginMask=0,t.endMask=0,t.shrinkAxisMask=0;let e=0;t.beginValid=null!=n.begin,t.endValid=null!=n.end,t.begin=new Array(t.dims),t.end=new Array(t.dims),t.strides=new Array(t.dims),t.finalShapeGatherIndices=[],t.finalShapeGatherIndicesSparse=[],t.inputShapeGatherIndicesSparse=new Array(t.dims);for(let s=0;s<n.dims;s++)if(1<<s&n.ellipsisMask){const r=Math.min(t.dims-(n.dims-s)+1+n.numAddAxisAfterEllipsis,t.dims);for(;e<r;e++)t.begin[e]=0,t.end[e]=0,t.strides[e]=1,t.beginMask|=1<<e,t.endMask|=1<<e,t.finalShapeGatherIndices.push(e),t.finalShapeGatherIndicesSparse.push(-1),t.inputShapeGatherIndicesSparse[e]=s}else if(1<<s&n.newAxisMask)t.finalShapeGatherIndices.push(op),t.finalShapeGatherIndicesSparse.push(-1);else{if(e===t.begin.length)throw Error(`Index out of range using input dim ${e}; input has only ${t.dims} dims, ${t.begin.length}.`);null!=n.begin&&(t.begin[e]=n.begin[s]),null!=n.end&&(t.end[e]=n.end[s]),t.strides[e]=n.strides[s],n.beginMask&1<<s&&(t.beginMask|=1<<e),n.endMask&1<<s&&(t.endMask|=1<<e),n.shrinkAxisMask&1<<s?(t.finalShapeGatherIndices.push(aN),t.finalShapeGatherIndicesSparse.push(-1),t.shrinkAxisMask|=1<<e):(t.finalShapeGatherIndices.push(e),t.finalShapeGatherIndicesSparse.push(s)),t.inputShapeGatherIndicesSparse[e]=s,e++}}(h,d);let p=!0,f=!0,g=!0;const m=[],y=[];for(let b=0;b<n.length;++b){if(0===d.strides[b])throw Error(`strides[${b}] must be non-zero`);const w=!!(d.shrinkAxisMask&1<<b),S=n[b];if(-1===S){m.push(w?1:-1);continue}const C=[d.beginMask&1<<b,d.endMask&1<<b],k=[d.strides[b]>0?0:-1,d.strides[b]>0?S:S-1];if(w&&d.strides[b]<=0)throw Error("only stride 1 allowed on non-range indexing.");g=g&&1===d.strides[b];const T=!!(d.beginMask&1<<b&&d.endMask&1<<b);if(d.beginValid&&d.endValid){if(w){const B=d.begin[b]<0?S+d.begin[b]:d.begin[b];if(d.begin[b]=B,d.end[b]=d.begin[b]+1,B<0||B>=S)throw Error(`slice index ${d.begin[b]} of dimension ${b} out of bounds.`)}else d.begin[b]=Py(d.begin[b],0,d.strides[b],S,C,k),d.end[b]=Py(d.end[b],1,d.strides[b],S,C,k);const L=1===d.strides[b]&&0===d.begin[b]&&d.end[b]===S;p=p&&L,f=f&&(0===b&&1===d.strides[b]||L)}else p=p&&1===d.strides[b]&&T,f=f&&(0===b&&1===d.strides[b]||T);let E,R=!1;if(d.beginValid&&d.endValid?(E=d.end[b]-d.begin[b],R=!0):w?(E=1,R=!0):T&&S>=0&&(E=d.strides[b]<0?-S:S,R=!0),R){let L;L=0===E||E<0!=d.strides[b]<0?0:Math.trunc(E/d.strides[b])+(E%d.strides[b]!=0?1:0),m.push(L)}else m.push(-1)}for(let b=0;b<d.finalShapeGatherIndices.length;++b){const w=d.finalShapeGatherIndices[b];w>=0?y.push(m[w]):w===op&&y.push(1)}return{finalShapeSparse:y.filter((b,w)=>d.finalShapeGatherIndices[w]!==op),finalShape:y,isIdentity:p,sliceDim0:f,isSimpleSlice:g,begin:d.begin,end:d.end,strides:d.strides}}function Py(n,t,e,s,r,o){if(r[t])return e>0?o[t]:o[t+1&1];{const a=n<0?s+n:n;return a<o[0]?o[0]:a>o[1]?o[1]:a}}const zy=_({acos_:function hN(n){const e={x:N(n,"x","acos")};return A.runKernel(wa,e)}}),My=_({acosh_:function dN(n){const e={x:N(n,"x","acosh")};return A.runKernel(va,e)}}),fN=_({addN_:function pN(n){I(Array.isArray(n),()=>"The argument passed to tf.addN() must be a list of tensors"),I(n.length>=1,()=>`Must pass at least one tensor to tf.addN(), but got ${n.length}`);const t=n.map((r,o)=>N(r,`tensors${o}`,"addN")),e=t[0];return t.forEach(r=>{if(r.dtype!==e.dtype)throw new Error("All tensors passed to tf.addN() must have the same dtype")}),t.forEach(r=>{if(!Xe(r.shape,e.shape))throw new Error("All tensors passed to tf.addN() must have the same shape")}),A.runKernel(dl,t)}}),hp=_({all_:function mN(n,t=null,e=!1){const r={x:N(n,"x","all","bool")};return A.runKernel("All",r,{axis:t,keepDims:e})}}),$u=_({any_:function gN(n,t=null,e=!1){const r={x:N(n,"x","any","bool")};return A.runKernel("Any",r,{axis:t,keepDims:e})}}),Qr=_({argMax_:function yN(n,t=0){const s={x:N(n,"x","argMax")};return A.runKernel(pl,s,{axis:t})}}),By=_({argMin_:function xN(n,t=0){const s={x:N(n,"x","argMin")};return A.runKernel(fl,s,{axis:t})}}),Vy=_({asin_:function bN(n){const e={x:N(n,"x","asin")};return A.runKernel(Sa,e)}}),Wy=_({asinh_:function wN(n){const e={x:N(n,"x","asinh")};return A.runKernel(Ia,e)}}),Uy=_({atan_:function vN(n){const e={x:N(n,"x","atan")};return A.runKernel(Na,e)}}),Gy=_({atan2_:function SN(n,t){let e=N(n,"a","atan2"),s=N(t,"b","atan2");return[e,s]=Et(e,s),A.runKernel(ka,{a:e,b:s})}}),Hy=_({atanh_:function IN(n){const e={x:N(n,"x","atanh")};return A.runKernel(Ca,e)}});function wi(n,t,e,s,r="NHWC",o){return tn(n,[...t,n[3]],e,o,s,null,null,Zs(r))}function os(n,t,e,s,r,o,a="channelsLast"){const[i,l]=vi(t);let u;if("channelsLast"===a)u=[i,l,n[3],n[3]];else{if("channelsFirst"!==a)throw new Error(`Unknown dataFormat ${a}`);u=[i,l,n[1],n[1]]}return tn(n,u,e,s,r,o,!1,a)}function Xs(n,t,e,s,r,o,a="NDHWC"){const[i,l,u]=pp(t);let c,h;if("NDHWC"===a)h="channelsLast",c=[i,l,u,n[4],n[4]];else{if("NCDHW"!==a)throw new Error(`Unknown dataFormat ${a}`);h="channelsFirst",c=[i,l,u,n[1],n[1]]}return br(n,c,e,s,r,!1,h,o)}function tn(n,t,e,s,r,o,a=!1,i="channelsLast"){let[l,u,c,h]=[-1,-1,-1,-1];if("channelsLast"===i)[l,u,c,h]=n;else{if("channelsFirst"!==i)throw new Error(`Unknown dataFormat ${i}`);[l,h,u,c]=n}const[d,p,,f]=t,[g,m]=vi(e),[y,x]=vi(s),b=Vo(d,y),w=Vo(p,x),{padInfo:S,outHeight:C,outWidth:k}=function kN(n,t,e,s,r,o,a,i,l){let u,c,h;if("number"==typeof n){u={top:n,bottom:n,left:n,right:n,type:0===n?"VALID":"NUMBER"};const p=function NN(n,t,e,s,r){null==s&&(s=dp(n,t,e));const a=n[1];return[Si((n[0]-t+2*s)/e+1,r),Si((a-t+2*s)/e+1,r)]}([t,e],o,s,n,i);c=p[0],h=p[1]}else if("same"===n){c=Math.ceil(t/s),h=Math.ceil(e/r);const d=Math.max(0,(c-1)*s+o-t),p=Math.max(0,(h-1)*r+a-e),f=Math.floor(d/2),g=d-f,m=Math.floor(p/2);u={top:f,bottom:g,left:m,right:p-m,type:"SAME"}}else if("valid"===n)u={top:0,bottom:0,left:0,right:0,type:"VALID"},c=Math.ceil((t-o+1)/s),h=Math.ceil((e-a+1)/r);else{if("object"!=typeof n)throw Error(`Unknown padding parameter: ${n}`);{const d="channelsLast"===l?n[1][0]:n[2][0],p="channelsLast"===l?n[1][1]:n[2][1],f="channelsLast"===l?n[2][0]:n[3][0],g="channelsLast"===l?n[2][1]:n[3][1];u={top:d,bottom:p,left:f,right:g,type:0===d&&0===p&&0===f&&0===g?"VALID":"EXPLICIT"},c=Si((t-o+d+p)/s+1,i),h=Si((e-a+f+g)/r+1,i)}}return{padInfo:u,outHeight:c,outWidth:h}}(r,u,c,g,m,b,w,o,i),T=a?f*h:f;let E;return"channelsFirst"===i?E=[l,T,C,k]:"channelsLast"===i&&(E=[l,C,k,T]),{batchSize:l,dataFormat:i,inHeight:u,inWidth:c,inChannels:h,outHeight:C,outWidth:k,outChannels:T,padInfo:S,strideHeight:g,strideWidth:m,filterHeight:d,filterWidth:p,effectiveFilterHeight:b,effectiveFilterWidth:w,dilationHeight:y,dilationWidth:x,inShape:n,outShape:E,filterShape:t}}function br(n,t,e,s,r,o=!1,a="channelsLast",i){let[l,u,c,h,d]=[-1,-1,-1,-1,-1];if("channelsLast"===a)[l,u,c,h,d]=n;else{if("channelsFirst"!==a)throw new Error(`Unknown dataFormat ${a}`);[l,d,u,c,h]=n}const[p,f,g,,m]=t,[y,x,b]=pp(e),[w,S,C]=pp(s),k=Vo(p,w),T=Vo(f,S),E=Vo(g,C),{padInfo:R,outDepth:L,outHeight:B,outWidth:U}=function TN(n,t,e,s,r,o,a,i,l,u,c){let h,d,p,f;if("valid"===n&&(n=0),"number"==typeof n){h={top:n,bottom:n,left:n,right:n,front:n,back:n,type:0===n?"VALID":"NUMBER"};const m=function CN(n,t,e,s,r,o){null==r&&(r=dp(n,t[0],s[0]));const a=[0,0,0,e];for(let i=0;i<3;i++)n[i]+2*r>=t[i]&&(a[i]=Si((n[i]-t[i]+2*r)/s[i]+1,o));return a}([t,e,s,1],[i,l,u],1,[r,o,a],n,c);d=m[0],p=m[1],f=m[2]}else{if("same"!==n)throw Error(`Unknown padding parameter: ${n}`);{d=Math.ceil(t/r),p=Math.ceil(e/o),f=Math.ceil(s/a);const g=(d-1)*r+i-t,m=(p-1)*o+l-e,y=(f-1)*a+u-s,x=Math.floor(g/2),b=g-x,w=Math.floor(m/2),S=m-w,C=Math.floor(y/2);h={top:w,bottom:S,left:C,right:y-C,front:x,back:b,type:"SAME"}}}return{padInfo:h,outDepth:d,outHeight:p,outWidth:f}}(r,u,c,h,y,x,b,k,T,E,i),H=o?m*d:m;let j;return"channelsFirst"===a?j=[l,H,L,B,U]:"channelsLast"===a&&(j=[l,L,B,U,H]),{batchSize:l,dataFormat:a,inDepth:u,inHeight:c,inWidth:h,inChannels:d,outDepth:L,outHeight:B,outWidth:U,outChannels:H,padInfo:R,strideDepth:y,strideHeight:x,strideWidth:b,filterDepth:p,filterHeight:f,filterWidth:g,effectiveFilterDepth:k,effectiveFilterHeight:T,effectiveFilterWidth:E,dilationDepth:w,dilationHeight:S,dilationWidth:C,inShape:n,outShape:j,filterShape:t}}function dp(n,t,e,s=1){const r=Vo(t,s);return Math.floor((n[0]*(e-1)-e+r)/2)}function vi(n){return"number"==typeof n?[n,n,n]:2===n.length?[n[0],n[1],1]:n}function pp(n){return"number"==typeof n?[n,n,n]:n}function Vo(n,t){return t<=1?n:n+(n-1)*(t-1)}function Si(n,t){if(!t)return Math.trunc(n);switch(t){case"round":return Math.round(n);case"ceil":return Math.ceil(n);case"floor":return Math.floor(n);default:throw new Error(`Unknown roundingMode ${t}`)}}function wr(n){const[t,e,s]=vi(n);return 1===t&&1===e&&1===s}function an(n,t){return wr(n)||wr(t)}function Jr(n){return vi(n).every(t=>t>0)}function Zs(n){if("NHWC"===n)return"channelsLast";if("NCHW"===n)return"channelsFirst";throw new Error(`Unknown dataFormat ${n}`)}function Sn(n,t,e){if(null!=e){if("string"==typeof t)throw Error(`Error in ${n}: pad must be an integer when using dimRoundingMode ${e} but got pad ${t}.`);if("number"==typeof t)I(ko(t),()=>`Error in ${n}: pad must be an integer when using dimRoundingMode ${e} but got pad ${t}.`);else{if("object"!=typeof t)throw Error(`Error in ${n}: Unknown padding parameter: ${t}`);t.forEach(s=>{s.forEach(r=>{I(ko(r),()=>`Error in ${n}: pad must be an integer when using dimRoundingMode ${e} but got pad ${r}.`)})})}}}const F=_({reshape_:function $N(n,t){const s={x:N(n,"x","reshape","string_or_numeric")};return A.runKernel(eu,s,{shape:t})}}),_u=_({avgPool_:function _N(n,t,e,s,r){const o=N(n,"x","avgPool","float32");I(an(e,1),()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${e} and dilations '1'`);let i=o,l=!1;3===o.rank&&(l=!0,i=F(o,[1,o.shape[0],o.shape[1],o.shape[2]])),I(4===i.rank,()=>`Error in avgPool: x must be rank 4 but got rank ${i.rank}.`),Sn("avgPool",s,r);let h=A.runKernel(ml,{x:i},{filterSize:t,strides:e,pad:s,dimRoundingMode:r});return h=he(h,o.dtype),l?F(h,[h.shape[1],h.shape[2],h.shape[3]]):h}}),jy=_({avgPool3d_:function EN(n,t,e,s,r,o="NDHWC"){const a=N(n,"x","avgPool3d","float32");let i=a,l=!1;4===a.rank&&(l=!0,i=F(a,[1,a.shape[0],a.shape[1],a.shape[2],a.shape[3]])),I(5===i.rank,()=>`Error in avgPool3d: x must be rank 5 but got rank ${i.rank}.`),I("NDHWC"===o,()=>`Error in avgPool3d: Only NDHWC is currently supported, but got dataFormat of ${o}`),I("number"==typeof e&&e>0||Array.isArray(e)&&e[0]>0&&e[1]>0&&e[2]>0,()=>`Error in avgPool3d: Stride must be > 0, but got '${e}'`),Sn("avgPool3d",s,r);let h=A.runKernel(gl,{x:i},{filterSize:t,strides:e,pad:s,dimRoundingMode:r,dataFormat:o});return h=he(h,i.dtype),l?F(h,[h.shape[1],h.shape[2],h.shape[3],h.shape[4]]):h}}),Bt=_({concat_:function AN(n,t=0){I(n.length>=1,()=>"Pass at least one tensor to concat");const e=Su(n,"tensors","concat","string_or_numeric");return"complex64"===e[0].dtype&&e.forEach(o=>{if("complex64"!==o.dtype)throw new Error(`Cannot concatenate complex64 tensors with a tensor\n          with dtype ${o.dtype}. `)}),1===e.length?Ks(e[0]):A.runKernel(vl,e,{axis:t})}}),Ke=_({matMul_:function RN(n,t,e=!1,s=!1){let r=N(n,"a","matMul"),o=N(t,"b","matMul");return[r,o]=Et(r,o),A.runKernel(yl,{a:r,b:o},{transposeA:e,transposeB:s})}}),Rs=_({sigmoid_:function DN(n){const e={x:N(n,"x","sigmoid","float32")};return A.runKernel(ai,e)}}),Qe=_({slice_:function FN(n,t,e){const s=N(n,"x","slice","string_or_numeric");if(0===s.rank)throw new Error("Slicing scalar is not possible");return A.runKernel(ou,{x:s},{begin:t,size:e})}}),Wo=_({tanh_:function ON(n){const e={x:N(n,"x","tanh","float32")};return A.runKernel(di,e)}}),PN=_({basicLSTMCell_:function LN(n,t,e,s,r,o){const a=N(n,"forgetBias","basicLSTMCell"),i=N(t,"lstmKernel","basicLSTMCell"),l=N(e,"lstmBias","basicLSTMCell"),u=N(s,"data","basicLSTMCell"),c=N(r,"c","basicLSTMCell"),h=N(o,"h","basicLSTMCell"),d=Bt([u,h],1),p=Ke(d,i),f=ee(p,l),m=f.shape[1]/4,y=[f.shape[0],m],x=Qe(f,[0,0],y),b=Qe(f,[0,m],y),w=Qe(f,[0,2*m],y),S=Qe(f,[0,3*m],y),C=ee(D(Rs(x),Wo(b)),D(c,Rs(ee(a,w))));return[C,D(Wo(C),Rs(S))]}}),Eu=_({batchToSpaceND_:function zN(n,t,e){const s=N(n,"x","batchToSpaceND"),r=t.reduce((i,l)=>i*l);return I(s.rank>=1+t.length,()=>`input rank is ${s.rank} but should be > than blockShape.length ${t.length}`),I(e.length===t.length,()=>`crops.length is ${e.length} but should be equal to blockShape.length  ${t.length}`),I(s.shape[0]%r==0,()=>`input tensor batch is ${s.shape[0]} but is not divisible by the product of the elements of blockShape ${t.join(" * ")} === ${r}`),A.runKernel(xl,{x:s},{blockShape:t,crops:e})}});function MN(n){let t;return t=0===n.rank||1===n.rank?F(n,[1,1,1,n.size]):2===n.rank?F(n,[1,1,n.shape[0],n.shape[1]]):3===n.rank?F(n,[1,n.shape[0],n.shape[1],n.shape[2]]):n,t}const Ii=_({batchNorm_:function BN(n,t,e,s,r,o){null==o&&(o=.001);const a=N(n,"x","batchNorm"),i=N(t,"mean","batchNorm"),l=N(e,"variance","batchNorm");let u,c;null!=r&&(u=N(r,"scale","batchNorm")),null!=s&&(c=N(s,"offset","batchNorm")),I(i.rank===l.rank,()=>"Batch normalization gradient requires mean and variance to have equal ranks."),I(null==c||i.rank===c.rank,()=>"Batch normalization gradient requires mean and offset to have equal ranks."),I(null==u||i.rank===u.rank,()=>"Batch normalization gradient requires mean and scale to have equal ranks.");const d={x:MN(a),scale:u,offset:c,mean:i,variance:l},f=A.runKernel(El,d,{varianceEpsilon:o});return F(f,a.shape)}}),Ky=_({batchNorm2d_:function VN(n,t,e,s,r,o){const a=N(n,"x","batchNorm"),i=N(t,"mean","batchNorm"),l=N(e,"variance","batchNorm");let u,c;return null!=r&&(u=N(r,"scale","batchNorm")),null!=s&&(c=N(s,"offset","batchNorm")),I(2===a.rank,()=>`Error in batchNorm2D: x must be rank 2 but got rank ${a.rank}.`),I(2===i.rank||1===i.rank,()=>`Error in batchNorm2D: mean must be rank 2 or rank 1 but got rank ${i.rank}.`),I(2===l.rank||1===l.rank,()=>`Error in batchNorm2D: variance must be rank 2 or rank 1 but got rank ${l.rank}.`),null!=u&&I(2===u.rank||1===u.rank,()=>`Error in batchNorm2D: scale must be rank 2 or rank 1 but got rank ${u.rank}.`),null!=c&&I(2===c.rank||1===c.rank,()=>`Error in batchNorm2D: offset must be rank 2 or rank 1 but got rank ${c.rank}.`),Ii(a,i,l,c,u,o)}}),qy=_({batchNorm3d_:function WN(n,t,e,s,r,o){const a=N(n,"x","batchNorm"),i=N(t,"mean","batchNorm"),l=N(e,"variance","batchNorm");let u,c;return null!=r&&(u=N(r,"scale","batchNorm")),null!=s&&(c=N(s,"offset","batchNorm")),I(3===a.rank,()=>`Error in batchNorm3D: x must be rank 3 but got rank ${a.rank}.`),I(3===i.rank||1===i.rank,()=>`Error in batchNorm3D: mean must be rank 3 or rank 1 but got rank ${i.rank}.`),I(3===l.rank||1===l.rank,()=>`Error in batchNorm3D: variance must be rank 3 or rank 1 but got rank ${l.rank}.`),null!=u&&I(3===u.rank||1===u.rank,()=>`Error in batchNorm3D: scale must be rank 3 or rank 1 but got rank ${u.rank}.`),null!=c&&I(3===c.rank||1===c.rank,()=>`Error in batchNorm3D: offset must be rank 3 or rank 1 but got rank ${c.rank}.`),Ii(a,i,l,c,u,o)}}),Xy=_({batchNorm4d_:function UN(n,t,e,s,r,o){const a=N(n,"x","batchNorm"),i=N(t,"mean","batchNorm"),l=N(e,"variance","batchNorm");let u,c;return null!=r&&(u=N(r,"scale","batchNorm")),null!=s&&(c=N(s,"offset","batchNorm")),I(4===a.rank,()=>`Error in batchNorm4D: x must be rank 4 but got rank ${a.rank}.`),I(4===i.rank||1===i.rank,()=>`Error in batchNorm4D: mean must be rank 4 or rank 1 but got rank ${i.rank}.`),I(4===l.rank||1===l.rank,()=>`Error in batchNorm4D: variance must be rank 4 or rank 1 but got rank ${l.rank}.`),null!=u&&I(4===u.rank||1===u.rank,()=>`Error in batchNorm4D: scale must be rank 4 or rank 1 but got rank ${u.rank}.`),null!=c&&I(4===c.rank||1===c.rank,()=>`Error in batchNorm4D: offset must be rank 4 or rank 1 but got rank ${c.rank}.`),Ii(a,i,l,c,u,o)}}),Zy=_({bincount_:function GN(n,t,e){const s=N(n,"x","bincount"),r=N(t,"weights","bincount");return I("int32"===s.dtype,()=>`Error in bincount: input dtype must be int32, but got ${s.dtype}`),I(e>=0,()=>`size must be non-negative, but got ${e}.`),I(r.size===s.size||0===r.size,()=>`Error in bincount: weights must have the same size as input or0-length, but got input shape: ${s.shape}, weights shape: ${r.shape}.`),A.runKernel(bh,{x:s,weights:r},{size:e})}}),jN=_({bitwiseAnd_:function HN(n,t){const e=N(n,"x","bitwiseAnd"),s=N(t,"y","bitwiseAnd");if(!Xe(e.shape,s.shape))throw new Error(`BitwiseAnd: Tensors must have the same shape. x: ${e.shape}, y: ${s.shape}`);if("int32"!==e.dtype||"int32"!==s.dtype)throw new Error(`BitwiseAnd: Only supports 'int32' values in tensor, found type of x: ${e.dtype} and type of y: ${s.dtype}`);return A.runKernel(bl,{a:e,b:s})}}),qN=_({broadcastArgs_:function KN(n,t){const e=N(n,"s0","broadcastArgs","int32"),s=N(t,"s1","broadcastArgs","int32");if(1!==e.rank)throw new Error(`broadcastArgs(): first input must be a vector (rank=1). Has rank ${e.rank}`);if(1!==s.rank)throw new Error(`broadcastArgs(): second input must be a vector (rank=1). Has rank ${s.rank}`);return A.runKernel(wh,{s0:e,s1:s})}}),Uo=_({broadcastTo_:function XN(n,t){let e=N(n,"broadcastTo","x");const s=e.shape;if(Wn(t),t.length<e.rank)throw new Error(`broadcastTo(): shape.length=${t.length} < input.rank=${e.rank}.`);if(t.length>e.rank){const u=e.shape.slice();for(;u.length<t.length;)u.unshift(1);e=F(e,u)}const r=e.shape,o=Array.from(t);for(let u=t.length-1;u>=0;u--)if(r[u]===t[u])o[u]=1;else if(1!==e.shape[u])throw new Error(`broadcastTo(): [${s}] cannot be broadcast to [${t}].`);return 0===o.map((u,c)=>u>1?c:-1).filter(u=>u>=0).length?Ks(e):A.runKernel(pi,{x:e},{reps:o})}}),Yy=_({ceil_:function ZN(n){const e={x:N(n,"x","ceil","float32")};return A.runKernel($a,e)}}),On=_({clipByValue_:function YN(n,t,e){const s=N(n,"x","clipByValue");return I(t<=e,()=>`Error in clip: min (${t}) must be less than or equal to max (${e}).`),t===e?Mo(s.shape,t,s.dtype):A.runKernel(_a,{x:s},{clipValueMin:t,clipValueMax:e})}}),Qy=_({concat1d_:function QN(n){return Bt(n,0)}}),Jy=_({concat2d_:function JN(n,t){return Bt(n,t)}}),ex=_({concat3d_:function eC(n,t){return Bt(n,t)}}),tx=_({concat4d_:function tC(n,t){return Bt(n,t)}}),vr=_({conv2d_:function nC(n,t,e,s,r="NHWC",o=[1,1],a){const i=N(n,"x","conv2d","float32"),l=N(t,"filter","conv2d","float32");let u=i,c=!1;3===i.rank&&(c=!0,u=F(i,[1,i.shape[0],i.shape[1],i.shape[2]])),I(4===u.rank,()=>`Error in conv2d: input must be rank 4, but got rank ${u.rank}.`),I(4===l.rank,()=>`Error in conv2d: filter must be rank 4, but got rank ${l.rank}.`),Sn("conv2d",s,a);const h="NHWC"===r?u.shape[3]:u.shape[1];I(h===l.shape[2],()=>`Error in conv2d: depth of input (${h}) must match input depth for filter ${l.shape[2]}.`),I(an(e,o),()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${e} and dilations '${o}'`),I(Jr(o),()=>"Error in conv2D: Dilated rates should be larger than 0."),I(Jr(e),()=>"Error in conv2D: Strides should be larger than 0.");const f=A.runKernel(Sl,{x:u,filter:l},{strides:e,pad:s,dataFormat:r,dilations:o,dimRoundingMode:a});return c?F(f,[f.shape[1],f.shape[2],f.shape[3]]):f}}),fp=_({conv1d_:function sC(n,t,e,s,r="NWC",o=1,a){const i=N(n,"x","conv1d"),l=N(t,"filter","conv1d");let u=i,c=!1;2===i.rank&&(c=!0,u=F(i,[1,i.shape[0],i.shape[1]])),I(3===u.rank,()=>`Error in conv1d: input must be rank 3, but got rank ${u.rank}.`),I(3===l.rank,()=>`Error in conv1d: filter must be rank 3, but got rank ${l.rank}.`),Sn("conv1d",s,a),I(u.shape[2]===l.shape[1],()=>`Error in conv1d: depth of input (${u.shape[2]}) must match input depth for filter ${l.shape[1]}.`),I(an(e,o),()=>`Error in conv1D: Either stride or dilation must be 1. Got stride ${e} and dilation '${o}'`),I(Jr(o),()=>"Error in conv1D: Dilated rates should be larger than 0."),I(Jr(e),()=>"Error in conv1D: Stride should be larger than 0."),I("NWC"===r,()=>`Error in conv1d: got dataFormat of ${r} but only NWC is currently supported.`);const h=F(l,[1,l.shape[0],l.shape[1],l.shape[2]]),d=F(u,[u.shape[0],1,u.shape[1],u.shape[2]]),m=vr(d,h,[1,e],s,"NHWC",[1,o],a);return F(m,c?[m.shape[2],m.shape[3]]:[m.shape[0],m.shape[2],m.shape[3]])}}),mp=_({conv2DBackpropInput_:function rC(n,t,e,s,r,o="NHWC",a){I(n.length===t.rank,()=>`Length of inShape (${n.length}) and rank of dy (${t.rank}) must match`);let i=n,l=t,u=!1;3===t.rank&&(u=!0,l=F(t,[1,t.shape[0],t.shape[1],t.shape[2]]),i=[1,n[0],n[1],n[2]]),I(4===i.length,()=>`Error in conv2dDerInput: inShape must be length 4, but got length ${i.length}.`),I(4===l.rank,()=>`Error in conv2dDerInput: dy must be rank 4, but got rank ${l.rank}`),I(4===e.rank,()=>`Error in conv2dDerInput: filter must be rank 4, but got rank ${e.rank}`);const c="NHWC"===o?i[3]:i[1],h="NHWC"===o?l.shape[3]:l.shape[1];I(c===e.shape[2],()=>`Error in conv2dDerInput: depth of input (${c}) must match input depth for filter ${e.shape[2]}.`),I(h===e.shape[3],()=>`Error in conv2dDerInput: depth of output (${h}) must match output depth for filter ${e.shape[3]}.`),Sn("conv2dDerInput",r,a);const f=A.runKernel(Il,{dy:l,filter:e},{strides:s,pad:r,dataFormat:o,dimRoundingMode:a,inputShape:i});return u?F(f,[f.shape[1],f.shape[2],f.shape[3]]):f}}),gp=_({conv2dTranspose_:function oC(n,t,e,s,r,o){const a=N(n,"x","conv2dTranspose"),i=N(t,"filter","conv2dTranspose");return mp(e,a,i,s,r,"NHWC",o)}}),nx=_({conv3d_:function aC(n,t,e,s,r="NDHWC",o=[1,1,1]){const a=N(n,"x","conv3d"),i=N(t,"filter","conv3d");let l=a,u=!1;4===a.rank&&(u=!0,l=F(a,[1,a.shape[0],a.shape[1],a.shape[2],a.shape[3]])),I(5===l.rank,()=>`Error in conv3d: input must be rank 5, but got rank ${l.rank}.`),I(5===i.rank,()=>`Error in conv3d: filter must be rank 5, but got rank ${i.rank}.`),I(l.shape[4]===i.shape[3],()=>`Error in conv3d: depth of input (${l.shape[4]}) must match input depth for filter ${i.shape[3]}.`),I(an(e,o),()=>`Error in conv3D: Either strides or dilations must be 1. Got strides ${e} and dilations '${o}'`),I("NDHWC"===r,()=>`Error in conv3d: got dataFormat of ${r} but only NDHWC is currently supported.`),I(Jr(o),()=>"Error in conv3D: Dilated rates should be larger than 0."),I(Jr(e),()=>"Error in conv3D: Strides should be larger than 0.");const d=A.runKernel(Nl,{x:l,filter:i},{strides:e,pad:s,dataFormat:r,dilations:o});return u?F(d,[d.shape[1],d.shape[2],d.shape[3],d.shape[4]]):d}}),sx=_({conv3DBackpropInput_:function iC(n,t,e,s,r){I(n.length===t.rank,()=>`Length of inShape (${n.length}) and rank of dy (${t.rank}) must match`);let o=n,a=t,i=!1;4===t.rank&&(i=!0,a=F(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]]),o=[1,n[0],n[1],n[2],n[3]]);const l=o[4],u=a.shape[4];I(5===o.length,()=>`Error in conv3dDerInput: inShape must be length 5, but got length ${o.length}.`),I(5===a.rank,()=>`Error in conv3dDerInput: dy must be rank 5, but got rank ${a.rank}`),I(5===e.rank,()=>`Error in conv3dDerInput: filter must be rank 5, but got rank ${e.rank}`),I(l===e.shape[3],()=>`Error in conv3dDerInput: depth of input (${l}) must match input depth for filter ${e.shape[3]}.`),I(u===e.shape[4],()=>`Error in conv3dDerInput: depth of output (${u}) must match output depth for filter ${e.shape[4]}.`);const d=A.runKernel(Nh,{dy:a,filter:e},{pad:r,strides:s,inputShape:o});return i?F(d,[d.shape[1],d.shape[2],d.shape[3],d.shape[4]]):d}}),rx=_({conv3dTranspose_:function lC(n,t,e,s,r){const o=N(n,"x","conv3dTranspose"),a=N(t,"filter","conv3dTranspose");return sx(e,o,a,s,r)}}),Au=_({cos_:function uC(n){const e={x:N(n,"x","cos","float32")};return A.runKernel(Ea,e)}}),yp=_({cosh_:function cC(n){const e={x:N(n,"x","cosh","float32")};return A.runKernel(Aa,e)}}),Ru=_({cumprod_:function hC(n,t=0,e=!1,s=!1){const o={x:N(n,"x","cumprod")};return A.runKernel(Ch,o,{axis:t,exclusive:e,reverse:s})}}),xp=_({cumsum_:function dC(n,t=0,e=!1,s=!1){const o={x:N(n,"x","cumsum")};return A.runKernel(Cl,o,{axis:t,exclusive:e,reverse:s})}}),bp=_({denseBincount_:function pC(n,t,e,s=!1){const r=N(n,"x","denseBincount"),o=N(t,"weights","denseBincount");return I("int32"===r.dtype,()=>`Error in denseBincount: input dtype must be int32, but got ${r.dtype}`),I(r.rank<=2,()=>`Error in denseBincount: input must be at most rank 2, but got rank ${r.rank}.`),I(e>=0,()=>`size must be non-negative, but got ${e}.`),I(o.size===r.size||0===o.size,()=>`Error in denseBincount: weights must have the same shape as x or 0-length, but got x shape: ${r.shape}, weights shape: ${o.shape}.`),A.runKernel(Th,{x:r,weights:o},{size:e,binaryOutput:s})}}),ox=_({depthToSpace_:function fC(n,t,e="NHWC"){const s=N(n,"x","depthToSpace","float32"),r="NHWC"===e?s.shape[1]:s.shape[2],o="NHWC"===e?s.shape[2]:s.shape[3],a="NHWC"===e?s.shape[3]:s.shape[1];return I(t>1,()=>`blockSize should be > 1 for depthToSpace, but was: ${t}`),I(r*t>=0,()=>`Negative dimension size caused by overflow when multiplying\n    ${r} and ${t}  for depthToSpace with input shape\n    ${s.shape}`),I(o*t>=0,()=>`Negative dimension size caused by overflow when multiplying\n    ${o} and ${t} for depthToSpace with input shape\n        ${s.shape}`),I(a%(t*t)==0,()=>`Dimension size must be evenly divisible by ${t*t} but is ${a} for depthToSpace with input shape ${s.shape}`),A.runKernel($h,{x:s},{blockSize:t,dataFormat:e})}}),Ni=_({depthwiseConv2d_:function mC(n,t,e,s,r="NHWC",o=[1,1],a){const i=N(n,"x","depthwiseConv2d","float32"),l=N(t,"filter","depthwiseConv2d","float32");let u=i,c=!1;3===i.rank&&(c=!0,u=F(i,[1,i.shape[0],i.shape[1],i.shape[2]])),I(4===u.rank,()=>`Error in depthwiseConv2d: input must be rank 4, but got rank ${u.rank}.`),I(4===l.rank,()=>`Error in depthwiseConv2d: filter must be rank 4, but got rank ${l.rank}.`);const h="NHWC"===r?u.shape[3]:u.shape[1];I(h===l.shape[2],()=>`Error in depthwiseConv2d: number of input channels (${h}) must match the inChannels dimension in filter ${l.shape[2]}.`),Sn("depthwiseConv2d",s,a);const f=A.runKernel(kl,{x:u,filter:l},{strides:e,pad:s,dataFormat:r,dilations:o,dimRoundingMode:a});return c?F(f,[f.shape[1],f.shape[2],f.shape[3]]):f}}),yC=_({diag_:function gC(n){const e={x:N(n,"x","diag")};return A.runKernel(Ah,e)}}),ax=_({dilation2d_:function xC(n,t,e,s,r=[1,1],o="NHWC"){const a=N(n,"x","dilation2d"),i=N(t,"filter","dilation2d");I(3===a.rank||4===a.rank,()=>`Error in dilation2d: input must be rank 3 or 4, but got rank ${a.rank}.`),I(3===i.rank,()=>`Error in dilation2d: filter must be rank 3, but got rank ${i.rank}.`),I("NHWC"===o,()=>`Error in dilation2d: Only NHWC is currently supported, but got dataFormat of ${o}`);let l=a,u=!1;3===a.rank&&(l=F(a,[1,a.shape[0],a.shape[1],a.shape[2]]),u=!0),I(l.shape[3]===i.shape[2],()=>`Error in dilation2d:  input and filter must have the same depth: ${l.shape[3]} vs ${i.shape[2]}`);const d=A.runKernel(Tl,{x:l,filter:i},{strides:e,pad:s,dilations:r});return u?F(d,[d.shape[1],d.shape[2],d.shape[3]]):d}}),bs=_({equal_:function bC(n,t){let e=N(n,"a","equal","string_or_numeric"),s=N(t,"b","equal","string_or_numeric");return[e,s]=Et(e,s),Le(e.shape,s.shape),A.runKernel($l,{a:e,b:s})}}),fn=_({where_:function wC(n,t,e){const s=N(t,"a","where"),r=N(e,"b","where"),o=N(n,"condition","where","bool"),a=Le(Le(o.shape,s.shape),r.shape),i=Uo(o,a),l=Uo(s,a),u=Uo(r,a);return A.runKernel(ru,{condition:i,t:l,e:u})}}),ix=_({divNoNan_:function vC(n,t){let e=N(n,"a","div"),s=N(t,"b","div");[e,s]=Et(e,s);const r=Ce(e,s),o=Ye(r),a=bs(s,o);return fn(a,o,r)}}),lx=_({dot_:function SC(n,t){const e=N(n,"t1","dot"),s=N(t,"t2","dot");I(!(1!==e.rank&&2!==e.rank||1!==s.rank&&2!==s.rank),()=>`Error in dot: inputs must all be rank 1 or 2, but got ranks ${e.rank} and ${s.rank}.`);const r=1===e.rank?e.size:e.shape[1],o=1===s.rank?s.size:s.shape[0];if(I(r===o,()=>`Error in dot: inner dimensions of inputs must match, but got ${r} and ${o}.`),1===e.rank&&1===s.rank){const a=F(e,[1,-1]),i=F(s,[-1,1]),l=Ke(a,i);return F(l,[])}if(1===e.rank&&2===s.rank){const a=F(e,[1,-1]),i=F(s,[s.shape[0],s.shape[1]]),l=Ke(a,i);return F(l,[l.size])}if(2===e.rank&&1===s.rank){const a=F(s,[-1,1]),i=Ke(e,a);return F(i,[i.size])}{const a=F(s,[s.shape[0],s.shape[1]]);return Ke(e,a)}}}),Go=_({einsum_:function IC(n,...t){const e=t.map((r,o)=>N(r,`tensors${o}`,"einsum"));return A.runKernel(Oh,e,{equation:n})}}),Ci=_({elu_:function NC(n){const e={x:N(n,"x","elu","float32")};return A.runKernel(Da,e)}}),kC=_({ensureShape_:function CC(n,t){const e=N(n,"x","ensureShape","string_or_numeric");if(!function rS(n,t){if(n===t)return!0;if(null==n||null==t||n.length!==t.length)return!1;for(let e=0;e<n.length;e++)if(null!==n[e]&&null!==t[e]&&n[e]!==t[e])return!1;return!0}(e.shape,t))throw new Error(`EnsureShape: Shape of tensor ${e.shape} is not compatible with expected shape ${t}`);return n}}),ux=_({erf_:function TC(n){let t=N(n,"x","erf");return I("int32"===t.dtype||"float32"===t.dtype,()=>"Input dtype must be `int32` or `float32`."),"int32"===t.dtype&&(t=he(t,"float32")),A.runKernel(Fa,{x:t})}});function wp(n,t){for(let e=0;e<n.length;++e)if(n[n.length-e-1]!==t-1-e)return!1;return!0}function cx(n,t,e){const s=n.length+t.length,r=[];let o=0,a=0;for(let i=0;i<s;i++)-1===e.indexOf(i)?r.push(n[o++]):r.push(t[a++]);return r}function nn(n,t){const e=[],s=n.length;for(let o=0;o<s;o++)-1===t.indexOf(o)&&e.push(n[o]);return[e,t.map(o=>n[o])]}function Ot(n,t){return cx(n,t.map(s=>1),t)}function ln(n,t,e){I(wp(t,e),()=>`${n} supports only inner-most axes for now. Got axes ${t} and rank-${e} input.`)}function kt(n,t){if(wp(n,t))return null;const e=[];for(let s=0;s<t;++s)-1===n.indexOf(s)&&e.push(s);return n.forEach(s=>e.push(s)),e}function Sr(n){return n.map((t,e)=>[e,t]).sort((t,e)=>t[1]-e[1]).map(t=>t[0])}function Lt(n,t){const e=[];for(let s=t-n;s<t;++s)e.push(s);return e}const Gn=_({max_:function $C(n,t=null,e=!1){const r={x:N(n,"x","max")};return A.runKernel(Bl,r,{reductionIndices:t,keepDims:e})}}),ki=_({min_:function _C(n,t=null,e=!1){const r={x:N(n,"x","min")};return A.runKernel(Gl,r,{axis:t,keepDims:e})}}),ve=_({sum_:function EC(n,t=null,e=!1){let s=N(n,"x","sum");return"bool"===s.dtype&&(s=he(s,"int32")),A.runKernel(au,{x:s},{axis:t,keepDims:e})}});function hx(n,t,e=null){if(0===n.rank)return Ht(n);if(1!==n.rank&&null===e)return hx(F(n,[-1]),t,e);if(1===n.rank||"number"==typeof e||Array.isArray(e)&&1===e.length){if(1===t)return ve(Ht(n),e);if(t===1/0)return Gn(Ht(n),e);if(t===-1/0)return ki(Ht(n),e);if("euclidean"===t||2===t)return pn(ve(xr(Ht(n),$e(2,"int32")),e));throw new Error(`Error in norm: invalid ord value: ${t}`)}if(Array.isArray(e)&&2===e.length){if(1===t)return Gn(ve(Ht(n),e[0]),e[1]-1);if(t===1/0)return Gn(ve(Ht(n),e[1]),e[0]);if(t===-1/0)return ki(ve(Ht(n),e[1]),e[0]);if("fro"===t||"euclidean"===t)return pn(ve(dt(n),e));throw new Error(`Error in norm: invalid ord value: ${t}`)}throw new Error(`Error in norm: invalid axis: ${e}`)}const Ti=_({norm_:function AC(n,t="euclidean",e=null,s=!1){const r=hx(n=N(n,"x","norm"),t,e);let o=r.shape;if(s){const a=Ge(e,n.shape);o=Ot(r.shape,a)}return F(r,o)}}),dx=_({euclideanNorm_:function RC(n,t=null,e=!1){return Ti(n,"euclidean",t,e)}}),Hn=_({exp_:function DC(n){const e={x:N(n,"x","exp")};return A.runKernel(Oa,e)}}),In=_({expandDims_:function FC(n,t=0){const e=N(n,"x","expandDims","string_or_numeric");return I(t<=e.rank,()=>"Axis must be <= rank of the tensor"),A.runKernel(_l,{input:e},{dim:t})}}),px=_({expm1_:function OC(n){const e={x:N(n,"x","expm1")};return A.runKernel(La,e)}}),as=_({tile_:function LC(n,t){const e=N(n,"x","tile","string_or_numeric");return I(e.rank===t.length,()=>`Error in transpose: rank of input ${e.rank} must match length of reps ${t}.`),A.runKernel(pi,{x:e},{reps:t})}}),vp=_({eye_:function PC(n,t,e,s="float32"){null==t&&(t=n);const r=Me([n,t],s),o=n<=t?n:t;for(let i=0;i<o;++i)r.set(1,i,i);const a=F(r.toTensor(),[n,t]);if(null==e)return a;if(1===e.length)return as(In(a,0),[e[0],1,1]);if(2===e.length)return as(In(In(a,0),0),[e[0],e[1],1,1]);if(3===e.length)return as(In(In(In(a,0),0),0),[e[0],e[1],e[2],1,1]);throw new Error(`eye() currently supports only 1D and 2D batchShapes, but received ${e.length}D.`)}}),$i=_({floor_:function zC(n){const e={x:N(n,"x","floor","float32")};return A.runKernel(Pa,e)}}),_i=_({gather_:function MC(n,t,e=0,s=0){const r=N(n,"x","gather"),o=N(t,"indices","gather","int32");return A.runKernel(Al,{x:r,indices:o},{axis:e,batchDims:s})}}),_n=_({greater_:function BC(n,t){let e=N(n,"a","greater","string_or_numeric"),s=N(t,"b","greater","string_or_numeric");return[e,s]=Et(e,s),Le(e.shape,s.shape),A.runKernel(Rl,{a:e,b:s})}}),Ir=_({greaterEqual_:function VC(n,t){let e=N(n,"a","greaterEqual","string_or_numeric"),s=N(t,"b","greaterEqual","string_or_numeric");return[e,s]=Et(e,s),Le(e.shape,s.shape),A.runKernel(Ma,{a:e,b:s})}}),Du=_({imag_:function WC(n){const e={input:N(n,"input","imag")};return A.runKernel(Wh,e)}}),fx=_({isFinite_:function UC(n){const e={x:N(n,"x","isFinite")};return A.runKernel(Va,e)}}),mx=_({isInf_:function GC(n){const e={x:N(n,"x","isInf")};return A.runKernel(Wa,e)}}),gx=_({isNaN_:function HC(n){const e={x:N(n,"x","isNaN")};return A.runKernel(Ua,e)}}),Fu=_({leakyRelu_:function jC(n,t=.2){const s={x:N(n,"x","leakyRelu")};return A.runKernel(Dl,s,{alpha:t})}}),Ei=_({less_:function KC(n,t){let e=N(n,"a","less","string_or_numeric"),s=N(t,"b","less","string_or_numeric");return[e,s]=Et(e,s),Le(e.shape,s.shape),A.runKernel(Fl,{a:e,b:s})}}),eo=_({lessEqual_:function qC(n,t){let e=N(n,"a","lessEqual","string_or_numeric"),s=N(t,"b","lessEqual","string_or_numeric");return[e,s]=Et(e,s),Le(e.shape,s.shape),A.runKernel(Ol,{a:e,b:s})}});function XC(n,t,e){if(e<=0)throw new Error("The number of values should be positive.");return A.runKernel(Uh,{},{start:n,stop:t,num:e})}const yx=_({localResponseNormalization_:function ZC(n,t=5,e=1,s=1,r=.5){const o=N(n,"x","localResponseNormalization");I(4===o.rank||3===o.rank,()=>`Error in localResponseNormalization: x must be rank 3 or 4 but got\n               rank ${o.rank}.`),I(ko(t),()=>`Error in localResponseNormalization: depthRadius must be an integer but got depthRadius ${t}.`);let a=o,i=!1;3===o.rank&&(i=!0,a=F(o,[1,o.shape[0],o.shape[1],o.shape[2]]));const c=A.runKernel(Ml,{x:a},{depthRadius:t,bias:e,alpha:s,beta:r});return i?F(c,[c.shape[1],c.shape[2],c.shape[3]]):c}}),jn=_({log_:function YC(n){const e={x:N(n,"x","log","float32")};return A.runKernel(Ga,e)}}),Ou=_({log1p_:function QC(n){const e={x:N(n,"x","log1p")};return A.runKernel(Ha,e)}}),wt=_({neg_:function JC(n){const e={x:N(n,"x","neg")};return A.runKernel(jl,e)}}),Ho=_({softplus_:function ek(n){const e={x:N(n,"x","softplus")};return A.runKernel(ii,e)}}),xx=_({logSigmoid_:function tk(n){const t=N(n,"x","logSigmoid");return qs(s=>({value:wt(Ho(wt(s))),gradFunc:a=>D(a,Rs(wt(s)))}))(t)}}),Sp=_({logSoftmax_:function nk(n,t=-1){const e=N(n,"logits","logSoftmax");if(-1===t&&(t=e.rank-1),t!==e.rank-1)throw Error(`Log Softmax along a non-last dimension is not yet supported. Logits was rank ${e.rank} and axis was ${t}`);return qs((r,o)=>{const i=Gn(r,t,!0),l=be(r,i),u=be(he(l,"float32"),jn(ve(Hn(l),t,!0)));return o([u]),{value:u,gradFunc:(h,d)=>{const[p]=d,g=Hn(p);return be(h,D(ve(h,t,!0),g))}}})(e)}}),Ip=_({logSumExp_:function sk(n,t=null,e=!1){const s=N(n,"x","logSumExp"),r=Ge(t,s.shape),o=Gn(s,r,!0),a=be(s,o),i=Hn(a),l=ve(i,r),u=jn(l),c=ee(F(o,u.shape),u);if(e){const h=Ot(c.shape,r);return F(c,h)}return c}}),Ds=_({logicalAnd_:function rk(n,t){const e=N(n,"a","logicalAnd","bool"),s=N(t,"b","logicalAnd","bool");return Le(e.shape,s.shape),A.runKernel(Ll,{a:e,b:s})}}),Lu=_({logicalNot_:function ok(n){const e={x:N(n,"x","logicalNot","bool")};return A.runKernel(Pl,e)}}),Np=_({logicalOr_:function ak(n,t){const e=N(n,"a","logicalOr","bool"),s=N(t,"b","logicalOr","bool");return Le(e.shape,s.shape),A.runKernel(zl,{a:e,b:s})}}),bx=_({logicalXor_:function ik(n,t){const e=N(n,"a","logicalXor","bool"),s=N(t,"b","logicalXor","bool");return Le(e.shape,s.shape),Ds(Np(n,t),Lu(Ds(n,t)))}}),Pu=2147483648,Cp=_({searchSorted_:function lk(n,t,e="left"){const s=N(n,"sortedSequence","searchSorted"),r=N(t,"values","searchSorted"),a=r.shape[r.shape.length-1],i=F(s,[-1,s.shape[s.shape.length-1]]),l=F(r,[-1,a]);if(i.rank<2)throw new Error("Sorted input argument must be at least 2-dimensional");if(i.shape[0]!==l.shape[0])throw new Error("Leading dimension of 'sortedSequence' and 'values' must match.");if(G(l.shape)>=Pu)throw new Error(`values tensor size must less than ${Pu}`);if(i.shape[1]>=Pu)throw new Error(`trailing dim_size must less than ${Pu} for int32 output type, was ${i.shape[1]}`);return A.runKernel(id,{sortedSequence:i,values:l},{side:e})}});function uk(n,t){return Cp(n,t,"left")}const zu=_({maxPool_:function ck(n,t,e,s,r){const o=N(n,"x","maxPool");let i=o,l=!1;3===o.rank&&(l=!0,i=F(o,[1,o.shape[0],o.shape[1],o.shape[2]])),I(4===i.rank,()=>`Error in maxPool: input must be rank 4 but got rank ${i.rank}.`),I(an(e,1),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${e} and dilations '1'`),Sn("maxPool",s,r);const h=A.runKernel(Vl,{x:i},{filterSize:t,strides:e,pad:s,dimRoundingMode:r});return l?F(h,[h.shape[1],h.shape[2],h.shape[3]]):h}}),wx=_({maxPool3d_:function hk(n,t=[1,1,1],e,s,r,o="NDHWC"){const a=N(n,"x","maxPool3d");let i=a,l=!1;4===a.rank&&(l=!0,i=F(a,[1,a.shape[0],a.shape[1],a.shape[2],a.shape[3]])),I(5===i.rank,()=>`Error in maxPool3d: x must be rank 5 but got rank ${i.rank}.`),I("NDHWC"===o,()=>`Error in maxPool3d: Only NDHWC is currently supported, but got dataFormat of ${o}`),Sn("maxPool3d",s,r);const h=A.runKernel(Wl,{x:i},{filterSize:t,strides:e,pad:s,dimRoundingMode:r,dataFormat:o});return l?F(h,[h.shape[1],h.shape[2],h.shape[3],h.shape[4]]):h}}),pk=_({maxPoolWithArgmax_:function dk(n,t,e,s,r=!1){const a={x:N(n,"x","maxPoolWithArgmax")},l=A.runKernel(Kh,a,{filterSize:t,strides:e,pad:s,includeBatchInIndex:r});return{result:l[0],indexes:l[1]}}}),Rt=_({mean_:function fk(n,t=null,e=!1){const r={x:N(n,"x","mean")};return A.runKernel(Ul,r,{axis:t,keepDims:e})}});function Kt(n,t="float32"){if(Wn(n),"complex64"===t){const s=Kt(n,"float32"),r=Kt(n,"float32");return fr(s,r)}const e=dn(G(n),t);return A.makeTensor(e,n,t)}function Kn(n,t="float32"){if(Wn(n),"complex64"===t){const s=Kn(n,"float32"),r=Kt(n,"float32");return fr(s,r)}const e=dh(G(n),t);return A.makeTensor(e,n,t)}function mk(n,t,{indexing:e="xy"}={}){if("xy"!==e&&"ij"!==e)throw new TypeError(`${e} is not a valid third argument to meshgrid`);if(void 0===n)return[];let s=N(n,"x","meshgrid",n instanceof mt?n.dtype:"float32");if(void 0===t)return[s];let r=N(t,"y","meshgrid",t instanceof mt?t.dtype:"float32");const o=G(s.shape),a=G(r.shape);return"xy"===e?(s=F(s,[1,-1]),r=F(r,[-1,1]),[Ke(Kn([a,1],s.dtype),s),Ke(r,Kn([1,o],r.dtype))]):(s=F(s,[-1,1]),r=F(r,[1,-1]),[Ke(s,Kn([1,a],s.dtype)),Ke(Kn([o,1],r.dtype),r)])}const to=_({minimum_:function gk(n,t){let e=N(n,"a","minimum"),s=N(t,"b","minimum");return[e,s]=Et(e,s),"bool"===e.dtype&&(e=he(e,"int32"),s=he(s,"int32")),Le(e.shape,s.shape),A.runKernel(Ka,{a:e,b:s})}}),vx=_({mirrorPad_:function yk(n,t,e){I("reflect"===e||"symmetric"===e,()=>`Invalid mode. Mode must be either reflect or symmetric. Got ${e}.`);const s=N(n,"x","mirrorPad");if(0===s.rank)throw new Error("mirrorPad(scalar) is not defined. Pass non-scalar to mirrorPad");I(t.length===s.rank,()=>`Padding doesn't match input. Must be ${s.rank}. Got ${t.length}.`);const r="reflect"===e?1:0;for(let i=0;i<s.rank;i++)I(2===t[i].length,()=>"Invalid number of paddings. Must be length of 2 each."),I(t[i][0]>=0&&t[i][0]<=s.shape[i]-r&&t[i][1]>=0&&t[i][1]<=s.shape[i]-r,()=>`Padding in dimension ${i} cannot be greater than or equal to ${s.shape[i]-r} or less than 0 for input of shape ${s.shape}`);return A.runKernel(Hl,{x:s},{paddings:t,mode:e})}}),Sx=_({mod_:function xk(n,t){let e=N(n,"a","mod"),s=N(t,"b","mod");return[e,s]=Et(e,s),A.runKernel(qa,{a:e,b:s})}}),Mu=_({moments_:function bk(n,t=null,e=!1){const s=Ge(t,(n=N(n,"x","moments")).shape),r=Rt(n,s,e);let o=r.shape;e||(o=Ot(r.shape,s));const a=dt(be(he(n,"float32"),F(r,o)));return{mean:r,variance:Rt(a,s,e)}}}),vk=_({multiRNNCell_:function wk(n,t,e,s){const r=N(t,"data","multiRNNCell"),o=Su(e,"c","multiRNNCell"),a=Su(s,"h","multiRNNCell");let i=r;const l=[];for(let h=0;h<n.length;h++){const d=n[h](i,o[h],a[h]);l.push(d[0]),l.push(d[1]),i=d[1]}const u=[],c=[];for(let h=0;h<l.length;h+=2)u.push(l[h]),c.push(l[h+1]);return[u,c]}}),Ik=_({multinomial_:function Sk(n,t,e,s=!1){const r=N(n,"logits","multinomial"),o=r.size,a=r.rank;if(o<2)throw new Error(`Error in multinomial: you need at least 2 outcomes, but got ${o}.`);if(a>2)throw new Error(`Rank of probabilities must be 1 or 2, but is ${a}`);e=e||Math.random();const l={logits:1===a?F(r,[1,-1]):r},c=A.runKernel(qh,l,{numSamples:t,seed:e,normalized:s});return 1===a?F(c,[c.size]):c}}),jo=_({notEqual_:function Nk(n,t){let e=N(n,"a","notEqual","string_or_numeric"),s=N(t,"b","notEqual","string_or_numeric");return[e,s]=Et(e,s),Le(e.shape,s.shape),A.runKernel(Kl,{a:e,b:s})}}),kp=_({oneHot_:function Ck(n,t,e=1,s=0,r="int32"){if(t<2)throw new Error(`Error in oneHot: depth must be >=2, but it is ${t}`);const a={indices:N(n,"indices","oneHot","int32")};return A.runKernel(Xl,a,{dtype:r,depth:t,onValue:e,offValue:s})}}),qn=_({onesLike_:function kk(n){const e={x:N(n,"x","onesLike")};return A.runKernel(ql,e)}}),$k=_({outerProduct_:function Tk(n,t){const e=N(n,"v1","outerProduct"),s=N(t,"v2","outerProduct");I(1===e.rank&&1===s.rank,()=>`Error in outerProduct: inputs must be rank 1, but got ranks ${e.rank} and ${s.rank}.`);const r=F(e,[-1,1]),o=F(s,[1,-1]);return Ke(r,o)}}),Nr=_({pad_:function _k(n,t,e=0){const s=N(n,"x","pad");if(0===s.rank)throw new Error("pad(scalar) is not defined. Pass non-scalar to pad");return A.runKernel(Yl,{x:s},{paddings:t,constantValue:e})}}),Ak=_({pad1d_:function Ek(n,t,e=0){return I(2===t.length,()=>"Invalid number of paddings. Must be length of 2."),Nr(n,[t],e)}}),Dk=_({pad2d_:function Rk(n,t,e=0){return I(2===t.length&&2===t[0].length&&2===t[1].length,()=>"Invalid number of paddings. Must be length of 2 each."),Nr(n,t,e)}}),Ok=_({pad3d_:function Fk(n,t,e=0){return I(3===t.length&&2===t[0].length&&2===t[1].length&&2===t[2].length,()=>"Invalid number of paddings. Must be length of 2 each."),Nr(n,t,e)}}),Pk=_({pad4d_:function Lk(n,t,e=0){return I(4===t.length&&2===t[0].length&&2===t[1].length&&2===t[2].length&&2===t[3].length,()=>"Invalid number of paddings. Must be length of 2 each."),Nr(n,t,e)}}),Bu=_({spaceToBatchND_:function zk(n,t,e){const s=N(n,"x","spaceToBatchND");return I(s.rank>=1+t.length,()=>`input rank ${s.rank} should be > than [blockShape] ${t.length}`),I(e.length===t.length,()=>`paddings.shape[0] ${e.length} must be equal to [blockShape] ${t.length}`),I(s.shape.reduce((a,i,l)=>l>0&&l<=t.length?a&&(i+e[l-1][0]+e[l-1][1])%t[l-1]==0:a,!0),()=>`input spatial dimensions ${s.shape.slice(1)} with paddings ${e.toString()} must be divisible by blockShapes ${t.toString()}`),A.runKernel(iu,{x:s},{blockShape:t,paddings:e})}}),Ix=_({pool_:function Mk(n,t,e,s,r,o,a){null==r&&(r=[1,1]),null==o&&(o=1),0===s&&(s="valid");const i=N(n,"x","maxPool");let l=i,u=!1;3===i.rank&&(u=!0,l=F(i,[1,i.shape[0],i.shape[1],i.shape[2]])),I(an(o,r),()=>`Error in pool: Either strides or dilations must be 1. Got strides ${o} and dilations '${r}'`);const c=os(l.shape,t,o,r,s),h=[c.dilationHeight,c.dilationWidth];let d;d="same"===s?function Vk(n,t){const s=n.map((a,i)=>a+(a-1)*(t[i]-1)).map(a=>a-1),r=s.map(a=>Math.floor(a/2)),o=s.map((a,i)=>a-r[i]);return s.map((a,i)=>[r[i],o[i]])}([c.filterHeight,c.filterWidth],h):[[0,0],[0,0]];const p=1===h[0]&&1===h[1],[f,g]=function Bk(n,t,e){const s=e.map(c=>c[0]),r=e.map(c=>c[1]),o=n.concat(s,r),a=t.map((c,h)=>(c-o[h]%c)%c),i=r.map((c,h)=>c+a[h]),l=t.map((c,h)=>[s[h],i[h]]),u=t.map((c,h)=>[0,a[h]]);return[l,u]}([c.inHeight,c.inWidth],h,d),m=p?s:"valid",y=p?l:Bu(l,h,f),b=("avg"===e?()=>_u(y,t,o,m,a):()=>zu(y,t,o,m,a))(),w=p?b:Eu(b,h,g);return u?F(w,[w.shape[1],w.shape[2],w.shape[3]]):w}}),Vu=_({prelu_:function Wk(n,t){const e=N(n,"x","prelu"),s=N(t,"alpha","prelu");return A.runKernel(Ql,{x:e,alpha:s})}}),Nx=_({prod_:function Uk(n,t=null,e=!1){let s=N(n,"x","prod");return"bool"===s.dtype&&(s=he(s,"int32")),A.runKernel(Jl,{x:s},{axis:t,keepDims:e})}}),Hk=_({raggedGather_:function Gk(n,t,e,s){const r=n.map((c,h)=>N(c,`tensors${h}`,"raggedGather","int32")),o=N(t,"paramsDenseValues","raggedGather"),a=N(e,"indices","raggedGather","int32"),u=A.runKernel(Qh,{paramsNestedSplits:r,paramsDenseValues:o,indices:a},{outputRaggedRank:s});return{outputNestedSplits:u.slice(0,u.length-1),outputDenseValues:u[u.length-1]}}}),Kk=_({raggedRange_:function jk(n,t,e){const s=N(n,"starts","raggedRange"),r=N(t,"limits","raggedRange",s.dtype),o=N(e,"deltas","raggedRange",s.dtype),i=A.runKernel(Jh,{starts:s,limits:r,deltas:o});return{rtNestedSplits:i[0],rtDenseValues:i[1]}}}),Xk=_({raggedTensorToTensor_:function qk(n,t,e,s,r){const o=N(n,"shape","raggedTensorToTensor","int32"),a=N(t,"values","raggedTensorToTensor"),i=N(e,"defaultValue","raggedTensorToTensor",a.dtype),l=s.map((h,d)=>N(h,`tensors${d}`,"raggedTensorToTensor","int32"));return A.runKernel(ed,{shape:o,values:a,defaultValue:i,rowPartitionTensors:l},{rowPartitionTypes:r})}}),Yk=_({rand_:function Zk(n,t,e){Wn(n);const s=G(n);let r=null;if(null==e||"float32"===e)r=new Float32Array(s);else if("int32"===e)r=new Int32Array(s);else{if("bool"!==e)throw new Error(`Unknown data type ${e}`);r=new Uint8Array(s)}for(let o=0;o<s;o++)r[o]=t();return A.makeTensor(r,n,e)}});var Wu=V(1315);class Tp{constructor(t,e,s,r,o){this.mean=t,this.stdDev=e,this.dtype=s,this.nextVal=NaN,this.truncated=r,this.truncated&&(this.upper=this.mean+2*this.stdDev,this.lower=this.mean-2*this.stdDev);const a=o||Math.random();this.random=Wu.alea(a.toString())}nextValue(){if(!isNaN(this.nextVal)){const r=this.nextVal;return this.nextVal=NaN,r}let t,e,s=!1;for(;!s;){let r,o,a;do{r=2*this.random()-1,o=2*this.random()-1,a=r*r+o*o}while(a>=1||0===a);const i=Math.sqrt(-2*Math.log(a)/a);t=this.mean+this.stdDev*r*i,e=this.mean+this.stdDev*o*i,(!this.truncated||this.isValidTruncated(t))&&(s=!0)}return(!this.truncated||this.isValidTruncated(e))&&(this.nextVal=this.convertValue(e)),this.convertValue(t)}convertValue(t){return null==this.dtype||"float32"===this.dtype?t:Math.round(t)}isValidTruncated(t){return t<=this.upper&&t>=this.lower}}class Qk{constructor(t,e,s,r){this.alpha=t,this.beta=1/e,this.dtype=s;const o=r||Math.random();this.randu=Wu.alea(o.toString()),this.randn=new Tp(0,1,s,!1,this.randu()),this.d=t<1?t+2/3:t-1/3,this.c=1/Math.sqrt(9*this.d)}nextValue(){let t,e,s,r,o,a;for(;;){do{r=this.randn.nextValue(),a=1+this.c*r}while(a<=0);if(a*=a*a,t=r*r,e=1-.331*t*t,s=.5*t+this.d*(1-a+Math.log(a)),o=this.randu(),o<e||Math.log(o)<s)break}return a*=1/this.beta*this.d,this.alpha<1&&(a*=Math.pow(this.randu(),1/this.alpha)),this.convertValue(a)}convertValue(t){return"float32"===this.dtype?t:Math.round(t)}}class Jk{constructor(t=0,e=1,s,r){if(this.canReturnFloat=()=>null==this.dtype||"float32"===this.dtype,this.min=t,this.range=e-t,this.dtype=s,null==r&&(r=Math.random()),"number"==typeof r&&(r=r.toString()),!this.canReturnFloat()&&this.range<=1)throw new Error(`The difference between ${t} - ${e} <= 1 and dtype is not float`);this.random=Wu.alea(r)}convertValue(t){return this.canReturnFloat()?t:Math.round(t)}nextValue(){return this.convertValue(this.min+this.range*this.random())}}const rT=_({randomGamma_:function sT(n,t,e=1,s="float32",r){if(Wn(n),null==e&&(e=1),null==s&&(s="float32"),"float32"!==s&&"int32"!==s)throw new Error(`Unsupported data type ${s}`);const o=new Qk(t,e,s,r),a=Me(n,s);for(let i=0;i<a.values.length;i++)a.values[i]=o.nextValue();return a.toTensor()}}),_p=_({randomNormal_:function oT(n,t=0,e=1,s,r){if(Wn(n),null!=s&&"bool"===s)throw new Error(`Unsupported data type ${s}`);const o=new Tp(t,e,s,!1,r),a=Me(n,s);for(let i=0;i<a.values.length;i++)a.values[i]=o.nextValue();return a.toTensor()}}),iT=_({randomStandardNormal_:function aT(n,t,e){if(null!=t&&"bool"===t)throw new Error(`Unsupported data type ${t}`);return _p(n,0,1,t,e)}}),no=_({randomUniform_:function lT(n,t=0,e=1,s="float32",r){Wn(n);const o=Me(n,s),a=new Jk(t,e,null,r);for(let i=0;i<o.values.length;i++)o.values[i]=a.nextValue();return o.toTensor()}}),cT=_({randomUniformInt_:function uT(n,t,e,s){return no(n,t,e,"int32",s)}});function Ko(n,t,e=1,s="float32"){if(0===e)throw new Error("Cannot have a step of zero");return A.runKernel(td,{},{start:n,stop:t,step:e,dtype:s})}const Ai=_({real_:function hT(n){const e={input:N(n,"input","real")};return A.runKernel(nd,e)}}),Cx=_({reciprocal_:function dT(n){const e={x:N(n,"x","reciprocal")};return A.runKernel(Ya,e)}}),Fs=_({relu_:function pT(n){const e={x:N(n,"x","relu")};return A.runKernel(Qa,e)}}),Ep=_({relu6_:function fT(n){const e={x:N(n,"x","relu6")};return A.runKernel(Ja,e)}}),is=_({reverse_:function mT(n,t){const s={x:N(n,"x","reverse")};return A.runKernel(su,s,{dims:t})}}),yT=_({reverse1d_:function gT(n){const t=N(n,"x","reverse");return I(1===t.rank,()=>`Error in reverse1D: x must be rank 1 but got rank ${t.rank}.`),is(t,0)}}),bT=_({reverse2d_:function xT(n,t){const e=N(n,"x","reverse");return I(2===e.rank,()=>`Error in reverse2D: x must be rank 2 but got rank ${e.rank}.`),is(e,t)}}),vT=_({reverse3d_:function wT(n,t){const e=N(n,"x","reverse");return I(3===e.rank,()=>`Error in reverse3D: x must be rank 3 but got rank ${e.rank}.`),is(e,t)}}),IT=_({reverse4d_:function ST(n,t){const e=N(n,"x","reverse");return I(4===e.rank,()=>`Error in reverse4D: x must be rank 4 but got rank ${e.rank}.`),is(e,t)}}),Ap=_({round_:function NT(n){const e={x:N(n,"x","round")};return A.runKernel(ei,e)}}),Rp=_({rsqrt_:function CT(n){const e={x:N(n,"x","rsqrt","float32")};return A.runKernel(ti,e)}}),Dp=_({selu_:function kT(n){const e={x:N(n,"x","selu")};return A.runKernel(ni,e)}}),Fp=_({separableConv2d_:function TT(n,t,e,s,r,o=[1,1],a="NHWC"){const i=N(n,"x","separableConv2d"),l=N(t,"depthwiseFilter","separableConv2d"),u=N(e,"pointwiseFilter","separableConv2d");let c=i,h=!1;if(3===i.rank&&(h=!0,c=F(i,[1,i.shape[0],i.shape[1],i.shape[2]])),"NCHW"===a)throw new Error("separableConv2d currently does not support dataFormat NCHW; only NHWC is supported");I(4===c.rank,()=>`Error in separableConv2d: input must be rank 4, but got rank ${c.rank}.`),I(4===l.rank,()=>`Error in separableConv2d: depthwise filter must be rank 4, but got rank ${l.rank}.`),I(4===u.rank,()=>`Error in separableConv2d: pointwise filter must be rank 4, but got rank ${l.rank}.`),I(1===u.shape[0],()=>`Error in separableConv2d: the first dimension of pointwise filter  must be 1, but got ${u.shape[0]}.`),I(1===u.shape[1],()=>`Error in separableConv2d: the second dimension of pointwise filter must be 1, but got ${u.shape[1]}.`);const d=l.shape[2],p=l.shape[3];I(u.shape[2]===d*p,()=>`Error in separableConv2d: the third dimension of pointwise filter must be ${d*p}, but got ${u.shape[2]}.`);const f=Ni(c,l,s,r,a,o),m=vr(f,u,1,"valid",a);return h?F(m,[m.shape[1],m.shape[2],m.shape[3]]):m}});function Op(){return(Op=(0,W.Z)(function*(n,t){const e=N(n,"x","setdiff1d"),s=N(t,"y","setdiff1d");I(e.dtype===s.dtype,()=>`x and y should have the same dtype, but got x (${e.dtype}) and y (${s.dtype}).`),I(1===e.rank,()=>`x should be 1D tensor, but got x (${e.shape}).`),I(1===s.rank,()=>`y should be 1D tensor, but got y (${s.shape}).`);const r=yield e.data(),o=yield s.data(),a=new Set(o);let i=0;for(let c=0;c<r.length;c++)a.has(r[c])||i++;const l=new Gt([i],e.dtype),u=new Gt([i],"int32");for(let c=0,h=0;c<r.length;c++)a.has(r[c])||(l.values[h]=r[c],u.values[h]=c,h++);return[l.toTensor(),u.toTensor()]})).apply(this,arguments)}const _T=function $T(n,t){return Op.apply(this,arguments)},kx=_({sign_:function ET(n){const e={x:N(n,"x","sign")};return A.runKernel(oi,e)}}),Lp=_({sin_:function AT(n){const e={x:N(n,"x","sin","float32")};return A.runKernel(si,e)}}),Pp=_({sinh_:function RT(n){const e={x:N(n,"x","sinh")};return A.runKernel(ri,e)}}),Uu=_({slice1d_:function DT(n,t,e){const s=N(n,"x","slice1d");return I(1===s.rank,()=>`slice1d expects a rank-1 tensor, but got a rank-${s.rank} tensor`),Qe(s,[t],[e])}}),zp=_({slice2d_:function FT(n,t,e){const s=N(n,"x","slice2d");return I(2===s.rank,()=>`slice2d expects a rank-2 tensor, but got a rank-${s.rank} tensor`),Qe(s,t,e)}}),Gu=_({slice3d_:function OT(n,t,e){const s=N(n,"x","slice3d");return I(3===s.rank,()=>`slice3d expects a rank-3 tensor, but got a rank-${s.rank} tensor`),Qe(s,t,e)}}),Ri=_({slice4d_:function LT(n,t,e){const s=N(n,"x","slice4d");return I(4===s.rank,()=>`slice4d expects a rank-4 tensor, but got a rank-${s.rank} tensor`),Qe(s,t,e)}}),Hu=_({softmax_:function PT(n,t=-1){const e=N(n,"logits","softmax","float32");if(-1===t&&(t=e.rank-1),t!==e.rank-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${e.rank} and dim was ${t}`);return A.runKernel(uu,{logits:e},{dim:t})}}),ju=_({fft_:function zT(n){return I("complex64"===n.dtype,()=>`The dtype for tf.spectral.fft() must be complex64 but got ${n.dtype}.`),A.runKernel("FFT",{input:n})}}),Di=_({ifft_:function MT(n){return I("complex64"===n.dtype,()=>`The dtype for tf.spectral.ifft() must be complex64 but got ${n.dtype}.`),A.runKernel(Vh,{input:n})}}),Mp=_({irfft_:function BT(n){const t=n.shape[n.shape.length-1],e=n.size/t;let s;if(t<=2){const r=F(n,[e,t]);s=Di(r)}else{const r=[e,2*(t-1)],o=F(Ai(n),[e,t]),a=F(Du(n),[e,t]),i=is(Qe(o,[0,1],[e,t-2]),1),l=D(is(Qe(a,[0,1],[e,t-2]),1),$e(-1)),u=Bt([o,i],1),c=Bt([a,l],1),h=F(fr(u,c),[r[0],r[1]]);s=Di(h)}if(s=Ai(s),3===n.rank&&0!==n.shape[0]){const r=s,o=n.shape[0];s=F(s,[o,s.shape[0]/o,s.shape[1]]),r.dispose()}return s}}),Ln=_({split_:function VT(n,t,e=0){const r={x:N(n,"x","split")};return A.runKernel(lu,r,{numOrSizeSplits:t,axis:e})}}),Ku=_({rfft_:function WT(n,t){I("float32"===n.dtype,()=>`The dtype for rfft() must be real value but got ${n.dtype}`);let e=n.shape[n.shape.length-1];const s=n.size/e;let r;if(null!=t&&t<e){const f=n.shape.map(m=>0),g=n.shape.map(m=>m);g[n.shape.length-1]=t,r=Qe(n,f,g),e=t}else if(null!=t&&t>e){const f=n.shape.map(g=>g);f[n.shape.length-1]=t-e,r=Bt([n,Kt(f)],n.shape.length-1),e=t}else r=n;const o=Ye(r),a=F(fr(r,o),[s,e]),i=ju(a),l=Math.floor(e/2)+1,u=Ai(i),c=Du(i),h=Ln(u,[l,e-l],u.shape.length-1),d=Ln(c,[l,e-l],c.shape.length-1),p=r.shape.slice();return p[r.shape.length-1]=l,F(fr(h[0],d[0]),p)}}),Bp=_({squaredDifference_:function UT(n,t){let e=N(n,"a","squaredDifference"),s=N(t,"b","squaredDifference");return[e,s]=Et(e,s),Le(e.shape,s.shape),A.runKernel(ui,{a:e,b:s},{})}}),so=_({squeeze_:function GT(n,t){const e=N(n,"x","squeeze","string_or_numeric");return F(e,lr(e.shape,t).newShape)}}),Xn=_({stack_:function HT(n,t=0){const e=Su(n,"tensors","stack","string_or_numeric");return I(e.length>=1,()=>"Pass at least one tensor to tf.stack"),e.length>0&&I(t<=e[0].rank,()=>"Axis must be <= rank of the tensor"),A.runKernel(Zl,e,{axis:t})}}),qo=_({step_:function jT(n,t=0){const s={x:N(n,"x","step")};return A.runKernel(fi,s,{alpha:t})}}),Tx=_({stridedSlice_:function KT(n,t,e,s,r=0,o=0,a=0,i=0,l=0){const c={x:N(n,"x","stridedSlice","string_or_numeric")};return A.runKernel(fd,c,{begin:t,end:e,strides:s,beginMask:r,endMask:o,ellipsisMask:a,newAxisMask:i,shrinkAxisMask:l})}}),$x=_({tan_:function qT(n){const e={x:N(n,"x","tan","float32")};return A.runKernel(hi,e)}});function mn(n,t){Co(n);const e=pr(n,t);if(1!==e.length)throw new Error("tensor1d() requires values to be a flat/TypedArray");return mr(n,null,e,t)}function Fi(n,t,e){if(Co(n),null!=t&&2!==t.length)throw new Error("tensor2d() requires shape to have two numbers");const s=pr(n,e);if(2!==s.length&&1!==s.length)throw new Error("tensor2d() requires values to be number[][] or flat/TypedArray");if(1===s.length&&null==t)throw new Error("tensor2d() requires shape to be provided when `values` are a flat/TypedArray");return mr(n,t,s,e)}function XT(n,t,e){if(Co(n),null!=t&&4!==t.length)throw new Error("tensor4d() requires shape to have four numbers");const s=pr(n,e);if(4!==s.length&&1!==s.length)throw new Error("tensor4d() requires values to be number[][][][] or flat/TypedArray");if(1===s.length&&null==t)throw new Error("tensor4d() requires shape to be provided when `values` are a flat array");return mr(n,t,s,e)}function ZT(n,t,e){if(Co(n),null!=t&&5!==t.length)throw new Error("tensor5d() requires shape to have five numbers");const s=pr(n,e);if(5!==s.length&&1!==s.length)throw new Error("tensor5d() requires values to be number[][][][][] or flat/TypedArray");if(1===s.length&&null==t)throw new Error("tensor5d() requires shape to be provided when `values` are a flat array");return mr(n,t,s,e)}function YT(n,t,e){if(Co(n),null!=t&&6!==t.length)throw new Error("tensor6d() requires shape to have six numbers");const s=pr(n,e);if(6!==s.length&&1!==s.length)throw new Error("tensor6d() requires values to be number[][][][][][] or flat/TypedArray");if(1===s.length&&null==t)throw new Error("tensor6d() requires shape to be provided when `values` are a flat array");return mr(n,t=t||s,s,e)}function _x(n,t,e){const s=t.rank>1?t.shape[t.rank-1]:1,r=t.rank>1?t.rank-1:1,o=`Must have updates.shape = indices.shape[:batchDim] + shape[sliceDim:], got updates.shape: ${e.shape}, indices.shape: ${t.shape}, shape: ${n}, sliceDim: ${s}, and batchDim: ${r}.`;if(e.rank<r)throw new Error(o+` update.rank < ${r}. `);if(n.length<s+(e.rank-r))throw new Error(o+` Output shape length < ${s+(e.rank-r)}`);if(e.rank!==r+n.length-s)throw new Error(o+" update.rank != "+(r+n.length-s));for(let a=0;a<r;++a)if(e.shape[a]!==t.shape[a])throw new Error(o+` updates.shape[${a}] (${e.shape[a]}) != indices.shape[${a}] (${t.shape[a]}).`);for(let a=0;a<e.rank-r;++a)if(e.shape[a+r]!==n[a+s])throw new Error(o+` updates.shape[${a+r}] (${e.shape[a+r]}) != shape[${a+r}] (${n[a+r]})`)}function Vp(n,t,e){if(t.rank<1)throw new Error(`tf.scatterND() expects the indices to be rank 1 or higher, but the rank was ${t.rank}.`);if(n.rank<1)throw new Error(`tf.scatterND() expects the updates to be rank 1 or higher, but the rank was ${n.rank}.`);if("int32"!==t.dtype)throw new Error(`The dtype of 'indices' should be int32, but got dtype: ${t.dtype}`);if(e.length<1)throw new Error(`Output rank must be greater or equal to 1, but got shape: ${e}`);if(0===e.length){if(0===t.size)throw new Error(`Indices specified for empty output. indices shape: ${t.shape}`);if(0===n.size)throw new Error(`Updates specified for empty output. updates shape: ${n.shape}`)}_x(e,t,n)}function ro(n,t,e){const s=t.shape.length,r=s>1?t.shape[s-1]:1,o=e.length;let a=1;for(let h=r;h<o;++h)a*=e[h];const i=r<1?1:r;return{sliceRank:r,numUpdates:G(t.shape)/i,sliceSize:a,strides:[...ke(e.slice(0,r)),1],outputSize:G(e)}}const JT=_({tensorScatterUpdate_:function QT(n,t,e){const s=N(n,"tensor","tensorScatterupdate"),r=N(t,"indices","tensorScatterupdate","int32"),o=N(e,"updates","tensorScatterupdate");if(Vp(o,r,s.shape),s.dtype!==o.dtype)throw new Error(`tensor and updates must have the same dtype, instead they are ${s.dtype} and ${o.dtype}.`);return A.runKernel(ad,{tensor:s,indices:r,updates:o},{})}}),Ex=_({topk_:function e$(n,t=1,e=!0){const s=N(n,"x","topk");if(0===s.rank)throw new Error("topk() expects the input to be of rank 1 or higher");const r=s.shape[s.shape.length-1];if(t<0)throw new Error(`'k' passed to topk() must be >= 0 but got ${t}`);if(t>r)throw new Error(`'k' passed to topk() must be <= the last dimension (${r}) but got ${t}`);const o={x:s},a={k:t,sorted:e},[i,l]=A.runKernel(xd,o,a);return{values:i,indices:l}}}),Wp=_({truncatedNormal_:function t$(n,t=0,e=1,s,r){if(Wn(n),null!=s&&"bool"===s)throw new Error("Unsupported data type $ { dtype }");const o=new Tp(t,e,s,!0,r),a=Me(n,s);for(let i=0;i<a.values.length;i++)a.values[i]=o.nextValue();return a.toTensor()}}),Ax=_({unique_:function n$(n,t=0){const e=N(n,"x","unique","string_or_numeric");I(e.rank>0,()=>"The input tensor must be at least 1D");const s={x:e},r={axis:t},[o,a]=A.runKernel(wd,s,r);return{values:o,indices:a}}}),Up=_({unsortedSegmentSum_:function s$(n,t,e){const s=N(n,"x","unsortedSegmentSum"),r=N(t,"segmentIds","unsortedSegmentSum","int32");return I(ko(e),()=>"numSegments must be of dtype int"),A.runKernel(du,{x:s,segmentIds:r},{numSegments:e})}}),ls=_({unstack_:function r$(n,t=0){const e=N(n,"x","unstack","string_or_numeric");return I(t>=-e.shape.length&&t<e.shape.length,()=>`Axis = ${t} is not in [-${e.shape.length}, ${e.shape.length})`),A.runKernel(hu,{value:e},{axis:t})}});function o$(n,t){return Cp(n,t,"right")}function Rx(n,t=!0,e,s){return A.makeVariable(n,t,e,s)}function Gp(n,t){const e=[];for(let o=0;o<t.length;o++)t[o]&&e.push(o);const s=Me(n,"int32"),r=Me([e.length,n.length],"int32");for(let o=0;o<e.length;o++){const a=s.indexToLoc(e[o]);r.values.set(a,o*n.length)}return r.toTensor()}function Hp(){return(Hp=(0,W.Z)(function*(n){const t=N(n,"condition","whereAsync","bool"),e=yield t.data(),s=Gp(t.shape,e);return n!==t&&t.dispose(),s})).apply(this,arguments)}const Dx=function a$(n){return Hp.apply(this,arguments)};function jp(){return(jp=(0,W.Z)(function*(n,t,e){const s=N(n,"tensor","boolMask"),r=N(t,"mask","boolMask","bool"),o=null==e?0:e,a=r.rank,i=s.shape;I(a>0,()=>"mask cannot be scalar"),Dn(i.slice(o,o+a),r.shape,"mask's shape must match the first K dimensions of tensor's shape,");let l=1;for(let g=o;g<o+a;g++)l*=i[g];const u=i.slice(0,o).concat([l],i.slice(o+a)),c=F(s,u),h=F(r,[-1]),d=yield Dx(h),p=so(d,[1]),f=_i(c,p,o);return n!==s&&s.dispose(),t!==r&&r.dispose(),p.dispose(),c.dispose(),h.dispose(),d.dispose(),f})).apply(this,arguments)}const Kp=function i$(n,t,e){return jp.apply(this,arguments)},Je=_({transpose_:function l$(n,t,e){const s=N(n,"x","transpose");if(null==t&&(t=s.shape.map((a,i)=>i).reverse()),I(s.rank===t.length,()=>`Error in transpose: rank of input ${s.rank} must match length of perm ${t}.`),t.forEach(a=>{I(a>=0&&a<s.rank,()=>`All entries in 'perm' must be between 0 and ${s.rank-1} but got ${t}`)}),s.rank<=1)return s.clone();const r={x:s},o={perm:t};return"complex64"===s.dtype?P(()=>{let a=Ai(s),i=Du(s);return a=A.runKernel(Ao,{x:a},o),i=A.runKernel(Ao,{x:i},o),e&&(i=wt(i)),fr(a,i)}):A.runKernel(Ao,r,o)}}),c$=_({movingAverage_:function u$(n,t,e,s,r=!0){const o=N(n,"v","movingAverage"),a=N(t,"x","movingAverage"),i=N(e,"decay","movingAverage");(function MS(n,t){I(n.dtype===t.dtype,()=>`The dtypes of the first(${n.dtype}) and second(${t.dtype}) input must match`)})(o,a),I(Xe(o.shape,a.shape),()=>"Shape mismatch in v and x");const l=$e(1),u=be(l,i);let c=D(be(a,o),u);if(r){I(null!=s,()=>"When using zeroDebias: true, step is required.");const h=N(s,"step","movingAverage");c=Ce(c,be(l,xr(i,h)))}return ee(o,c)}}),d$=_({scatterND_:function h$(n,t,e){Wn(e);const s=N(n,"indices","scatterND","int32"),r=N(t,"updates","scatterND");return Vp(r,s,e),A.runKernel(od,{indices:s,updates:r},{shape:e})}}),m$=_({sparseToDense_:function f$(n,t,e,s=0){Wn(e);const r=N(n,"sparseIndices","sparseToDense","int32"),o=N(t,"sparseValues","sparseToDense","string_or_numeric"),a=N(s,"defaultValue","sparseToDense",o.dtype);return function p$(n,t,e,s){if("int32"!==n.dtype)throw new Error(`tf.sparseToDense() expects the indices to be int32 type, but the dtype was ${n.dtype}.`);if(n.rank>2)throw new Error(`sparseIndices should be a scalar, vector, or matrix, but got shape ${n.shape}.`);const r=n.rank>0?n.shape[0]:1,o=n.rank>1?n.shape[1]:1;if(e.length!==o)throw new Error(`outputShape has incorrect number of elements:, ${e.length}, should be: ${o}.`);if(0!==t.rank&&(1!==t.rank||t.size!==r))throw new Error(`sparseValues has incorrect shape ${t.shape}, should be [] or [${r}]`);if(t.dtype!==s.dtype)throw new Error("sparseValues.dtype must match defaultValues.dtype")}(r,o,e,a),A.runKernel(dd,{sparseIndices:r,sparseValues:o,defaultValue:a},{outputShape:e})}}),y$=_({gatherND_:function g$(n,t){const e=N(t,"indices","gatherND","int32"),r={params:N(n,"x","gatherND","string_or_numeric"),indices:e};return A.runKernel(Bh,r)}}),Fx=_({dropout_:function b$(n,t,e,s){const r=N(n,"x","dropout");if(I("float32"===r.dtype,()=>`x has to be a floating point tensor since it's going to be scaled, but got a ${r.dtype} tensor instead.`),I(t>=0&&t<1,()=>`rate must be a float in the range [0, 1), but got ${t}.`),0===t)return n instanceof mt?r.clone():r;const o=function x$(n,t){if(null==t)return n.shape.slice();if(Xe(n.shape,t))return t;if(n.shape.length===t.length){const e=[];for(let s=0;s<n.shape.length;s++)e.push(null==t[s]&&null!=n.shape[s]?n.shape[s]:t[s]);return e}return t}(r,e),a=1-t,i=Ce($i(ee(no(o,0,1,"float32",s),a)),a);return D(r,i)}});function Ox(n){return Math.floor(Math.pow(2,Math.ceil(Math.log(n)/Math.log(2))))}function qp(n,t,e){const s=1-n%2,r=new Float32Array(n);for(let o=0;o<n;++o){const a=2*Math.PI*o/(n+s-1);r[o]=t-e*Math.cos(a)}return mn(r,"float32")}function Xp(){return(Xp=(0,W.Z)(function*(n,t,e=1){const s=N(n,"predictions","inTopK"),r=N(t,"targets","inTopK");I(s.rank>1,()=>`inTopK() expects the predictions to be of rank 2 or higher, but got ${s.rank}`),I(s.rank-1===r.rank,()=>`predictions rank should be 1 larger than targets rank, but got predictions rank ${s.rank} and targets rank ${r.rank}`),Dn(s.shape.slice(0,s.shape.length-1),r.shape,"predictions's shape should be align with the targets' shape, except the last dimension.");const o=s.shape[s.shape.length-1];I(e>0&&e<=o,()=>`'k' passed to inTopK() must be > 0 && <= the predictions last dimension (${o}), but got ${e}`);const a=yield s.data(),i=yield r.data(),[l,u]=[a.length/o,o],c=on("bool",l);for(let h=0;h<l;h++){const d=h*u,p=a.subarray(d,d+u),f=[];for(let g=0;g<p.length;g++)f.push({value:p[g],index:g});f.sort((g,m)=>m.value-g.value),c[h]=0;for(let g=0;g<e;g++)if(f[g].index===i[h]){c[h]=1;break}}return n!==s&&s.dispose(),t!==r&&r.dispose(),At(c,r.shape,"bool")})).apply(this,arguments)}const v$=function w$(n,t){return Xp.apply(this,arguments)},Zp=_({conv2DBackpropFilter_:function S$(n,t,e,s,r,o="NHWC",a){let i=n;3===n.rank&&(i=F(n,[1,n.shape[0],n.shape[1],n.shape[2]]));let l=t;3===l.rank&&(l=F(t,[1,t.shape[0],t.shape[1],t.shape[2]])),I(4===i.rank,()=>`Error in conv2dDerFilter: input must be rank 4, but got shape ${i.shape}.`),I(4===l.rank,()=>`Error in conv2dDerFilter: dy must be rank 4, but got shape ${l.shape}.`),I(4===e.length,()=>`Error in conv2dDerFilter: filterShape must be length 4, but got ${e}.`);const u="NHWC"===o?i.shape[3]:i.shape[1],c="NHWC"===o?l.shape[3]:l.shape[1];return I(u===e[2],()=>`Error in conv2dDerFilter: depth of input ${u}) must match input depth in filter (${e[2]}.`),I(c===e[3],()=>`Error in conv2dDerFilter: depth of dy (${c}) must match output depth for filter (${e[3]}).`),Sn("conv2dDerFilter",r,a),A.runKernel(Sh,{x:i,dy:l},{strides:s,pad:r,dataFormat:o,dimRoundingMode:a,filterShape:e})}});function qu(n,t,e){if(null==e||"linear"===e)return n;if("relu"===e)return D(n,qo(t));throw new Error(`Cannot compute gradient for fused activation ${e}.`)}function Xu(n,t){let e=t;const s=jt(n.shape,t.shape);return s.length>0&&(e=ve(e,s)),F(e,n.shape)}function Zu(n,t,e,s){if("linear"===t)return n;if("relu"===t)return Fs(n);if("elu"===t)return Ci(n);if("relu6"===t)return Ep(n);if("prelu"===t)return Vu(n,e);if("leakyrelu"===t)return Fu(n,s);if("sigmoid"===t)return Rs(n);throw new Error(`Unknown fused activation ${t}.`)}const Yu=(n,t)=>!(n>0)||"linear"===t,Lx=_({fusedConv2d_:function I$({x:n,filter:t,strides:e,pad:s,dataFormat:r="NHWC",dilations:o=[1,1],dimRoundingMode:a,bias:i,activation:l="linear",preluActivationWeights:u,leakyreluAlpha:c}){if(!1===Yu(A.state.gradientDepth,l=l||"linear")){I("NHWC"===r,()=>`Error in fused conv2d: got dataFormat of ${r} but only NHWC is currently supported for the case of gradient depth is 0 and the activation is not linear.`);let C=vr(n,t,e,s,r,o,a);return null!=i&&(C=ee(C,i)),Zu(C,l,u,c)}const h=N(n,"x","conv2d","float32"),d=N(t,"filter","conv2d","float32");let p=h,f=!1;3===h.rank&&(f=!0,p=F(h,[1,h.shape[0],h.shape[1],h.shape[2]])),I(4===p.rank,()=>`Error in fused conv2d: input must be rank 4, but got rank ${p.rank}.`),I(4===d.rank,()=>`Error in fused conv2d: filter must be rank 4, but got rank ${d.rank}.`),Sn("fused conv2d",s,a);const g="NHWC"===r?p.shape[3]:p.shape[1];I(d.shape[2]===g,()=>`Error in conv2d: depth of input (${g}) must match input depth for filter ${d.shape[2]}.`),I(an(e,o),()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${e} and dilations '${o}'`);const m=tn(p.shape,d.shape,e,o,s,a);let y,x;if(null!=i&&(y=N(i,"bias","fused conv2d"),[y]=Et(y,h),"NHWC"===r?Le(m.outShape,y.shape):(I(y.shape.length<=1,()=>`Error in fused conv2d: only supports scalar or 1-D Tensor bias for NCHW format but got the bias of rank-${y.shape.length}.`),I(0===y.shape.length||y.shape[0]===m.outChannels||1===y.shape[0],()=>`Error in fused conv2d: bias shape (${y.shape}) is not compatible with the number of output channels (${m.outChannels})`))),null!=u){const C=u.shape;if(I(C.length<=1||3===C.length,()=>`Error in fused conv2d: only supports scalar, 1-D Tensor or 3-D Tensor PReLU activation weights but got a tensor of rank-${C.length}.`),1===C.length)I(1===C[0]||C[0]===m.outChannels,()=>`Error in fused conv2d: PReLU activation weights (${C}) is not compatible with the number of output channels (${m.outChannels}).`);else if(3===C.length)try{Le(C,m.outShape)}catch{throw Error(`Error in fused conv2d: PReLU activation weights (${C}) is not compatible with the output shape of the conv2d (${m.outShape}).`)}x=N(u,"prelu weights","fused conv2d")}const b=(C,k)=>{I("NHWC"===r,()=>`Error in gradient of fused conv2D: got dataFormat of ${r} but only NHWC is currently supported.`);const[T,E,R,L]=k,B=qu(C,R,l);I(wr(o),()=>`Error in gradient of fused conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${o}'`);const j=[mp(E.shape,B,T,e,s),Zp(E,B,T.shape,e,s)];if(null!=L){const Z=Xu(L,B);j.push(Z)}return j},w={x:p,filter:d,bias:y,preluActivationWeights:x},S={strides:e,pad:s,dataFormat:r,dilations:o,dimRoundingMode:a,activation:l,leakyreluAlpha:c};return null==i?qs((k,T,E)=>{let R=A.runKernel(mu,w,S);return E([T,k,R]),f&&(R=F(R,[R.shape[1],R.shape[2],R.shape[3]])),{value:R,gradFunc:b}})(p,d):qs((k,T,E,R)=>{let L=A.runKernel(mu,w,S);return R([T,k,L,E]),f&&(L=F(L,[L.shape[1],L.shape[2],L.shape[3]])),{value:L,gradFunc:b}})(p,d,y)}}),Px=_({depthwiseConv2dNativeBackpropFilter_:function N$(n,t,e,s,r,o=[1,1],a){let i=n;3===n.rank&&(i=F(n,[1,n.shape[0],n.shape[1],n.shape[2]]));let l=t;return 3===l.rank&&(l=F(t,[1,t.shape[0],t.shape[1],t.shape[2]])),A.runKernel(_h,{x:i,dy:l},{strides:s,pad:r,dimRoundingMode:a,dilations:o,filterShape:e})}}),zx=_({depthwiseConv2dNativeBackpropInput_:function C$(n,t,e,s,r,o=[1,1],a){let i=t,l=!1;3===t.rank&&(l=!0,i=F(t,[1,t.shape[0],t.shape[1],t.shape[2]]));const h=A.runKernel(Eh,{dy:i,filter:e},{strides:s,pad:r,dimRoundingMode:a,dilations:o,inputShape:n});return l?F(h,[h.shape[1],h.shape[2],h.shape[3]]):h}}),T$=_({fusedDepthwiseConv2d_:function k$({x:n,filter:t,strides:e,pad:s,dataFormat:r="NHWC",dilations:o=[1,1],dimRoundingMode:a,bias:i,activation:l="linear",preluActivationWeights:u,leakyreluAlpha:c}){if(!1===Yu(A.state.gradientDepth,l)){let S=Ni(n,t,e,s,r,o,a);return null!=i&&(S=ee(S,i)),Zu(S,l,u,c)}const h=N(n,"x","depthwiseConv2d","float32"),d=N(t,"filter","depthwiseConv2d","float32");let p=h,f=!1;3===h.rank&&(f=!0,p=F(h,[1,h.shape[0],h.shape[1],h.shape[2]])),I(4===p.rank,()=>`Error in fused depthwiseConv2d: input must be rank 4, but got rank ${p.rank}.`),I(4===d.rank,()=>`Error in fused depthwiseConv2d: filter must be rank 4, but got rank ${d.rank}.`),I(p.shape[3]===d.shape[2],()=>`Error in fused depthwiseConv2d: number of input channels (${p.shape[3]}) must match the inChannels dimension in filter ${d.shape[2]}.`),null==o&&(o=[1,1]),I(an(e,o),()=>`Error in fused depthwiseConv2d: Either strides or dilations must be 1. Got strides ${e} and dilations '${o}'`),Sn("fused depthwiseConv2d",s,a);const g=tn(p.shape,d.shape,e,o,s,a,!0);let m,y;null!=i&&(m=N(i,"bias","fused conv2d"),[m]=Et(m,h),Le(g.outShape,m.shape)),null!=u&&(y=N(u,"prelu weights","fused depthwiseConv2d"));const x=(S,C)=>{I(wr(o),()=>`Error in gradient of fused depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '${o}'`);const[k,T,E,R]=C,L=qu(S,E,l),B=zx(T.shape,L,k,e,s,o,a),U=Px(T,L,k.shape,e,s,o,a);return null!=R?[B,U,Xu(m,L)]:[B,U]},b={x:p,filter:d,bias:m,preluActivationWeights:y},w={strides:e,pad:s,dataFormat:r,dilations:o,dimRoundingMode:a,activation:l,leakyreluAlpha:c};return null==i?qs((C,k,T)=>{let E=A.runKernel(gu,b,w);return T([k,C,E]),f&&(E=F(E,[E.shape[1],E.shape[2],E.shape[3]])),{value:E,gradFunc:x}})(p,d):qs((C,k,T,E)=>{let R=A.runKernel(gu,b,w);return E([k,C,R,T]),f&&(R=F(R,[R.shape[1],R.shape[2],R.shape[3]])),{value:R,gradFunc:x}})(p,d,m)}}),Yp=_({fusedMatMul_:function $$({a:n,b:t,transposeA:e=!1,transposeB:s=!1,bias:r,activation:o="linear",preluActivationWeights:a,leakyreluAlpha:i=.2}){if(!1===Yu(A.state.gradientDepth,o)){let L=Ke(n,t,e,s);return null!=r&&(L=ee(L,r)),Zu(L,o,a,i)}let l=N(n,"a","fused matMul"),u=N(t,"b","fused matMul");[l,u]=Et(l,u);const c=e?l.shape[l.rank-2]:l.shape[l.rank-1],h=s?u.shape[u.rank-1]:u.shape[u.rank-2],d=e?l.shape[l.rank-1]:l.shape[l.rank-2],p=s?u.shape[u.rank-2]:u.shape[u.rank-1],f=l.shape.slice(0,-2),g=u.shape.slice(0,-2),m=G(f),y=G(g);I(c===h,()=>`Error in fused matMul: inner shapes (${c}) and (${h}) of Tensors with shapes ${l.shape} and ${u.shape} and transposeA=${e} and transposeB=${s} must match.`);const b=Le(l.shape.slice(0,-2),u.shape.slice(0,-2)).concat([d,p]),w=F(l,e?[m,c,d]:[m,d,c]),S=F(u,s?[y,p,h]:[y,h,p]);let C,k;null!=r&&(C=N(r,"bias","fused matMul"),[C]=Et(C,l),Le(b,C.shape)),null!=a&&(k=N(a,"prelu weights","fused matMul"));const T=(L,B)=>{const[U,H,j,Z]=B,Y=qu(F(L,j.shape),j,o);let K,Q;return e||s?!e&&s?(K=Ke(Y,H,!1,!1),Q=Ke(Y,U,!0,!1)):e&&!s?(K=Ke(H,Y,!1,!0),Q=Ke(U,Y,!1,!1)):(K=Ke(H,Y,!0,!0),Q=Ke(Y,U,!0,!0)):(K=Ke(Y,H,!1,!0),Q=Ke(U,Y,!0,!1)),null!=r?[K,Q,Xu(Z,Y)]:[K,Q]},E={a:w,b:S,bias:C,preluActivationWeights:k},R={transposeA:e,transposeB:s,activation:o,leakyreluAlpha:i};return null==r?qs((B,U,H)=>{const j=A.runKernel(fu,E,R);return H([B,U,j]),{value:F(j,b),gradFunc:T}})(w,S):qs((B,U,H,j)=>{const Z=A.runKernel(fu,E,R);return j([B,U,Z,H]),{value:F(Z,b),gradFunc:T}})(w,S,C)}}),E$=_({hammingWindow_:function _$(n){return qp(n,.54,.46)}}),Mx=_({hannWindow_:function A$(n){return qp(n,.5,.5)}}),Bx=_({frame_:function R$(n,t,e,s=!1,r=0){let o=0;const a=[];for(;o+t<=n.size;)a.push(Qe(n,o,t)),o+=e;if(s)for(;o<n.size;){const i=o+t-n.size,l=Bt([Qe(n,o,t-i),Mo([i],r)]);a.push(l),o+=e}return 0===a.length?Fi([],[0,t]):F(Bt(a),[a.length,t])}}),F$=_({stft_:function D$(n,t,e,s,r=Mx){null==s&&(s=Ox(t));const o=Bx(n,t,e),a=D(o,r(t));return Ku(a,s)}}),L$=_({cropAndResize_:function O$(n,t,e,s,r="bilinear",o=0){const a=N(n,"image","cropAndResize"),i=N(t,"boxes","cropAndResize","float32"),l=N(e,"boxInd","cropAndResize","int32"),u=i.shape[0];return I(4===a.rank,()=>`Error in cropAndResize: image must be rank 4,but got rank ${a.rank}.`),I(2===i.rank&&4===i.shape[1],()=>`Error in cropAndResize: boxes must be have size [${u},4] but had shape ${i.shape}.`),I(1===l.rank&&l.shape[0]===u,()=>`Error in cropAndResize: boxInd must be have size [${u}] but had shape ${i.shape}.`),I(2===s.length,()=>`Error in cropAndResize: cropSize must be of length 2, but got length ${s.length}.`),I(s[0]>=1&&s[1]>=1,()=>`cropSize must be atleast [1,1], but was ${s}`),I("bilinear"===r||"nearest"===r,()=>`method must be bilinear or nearest, but was ${r}`),A.runKernel(kh,{image:a,boxes:i,boxInd:l},{method:r,extrapolationValue:o,cropSize:s})}}),z$=_({flipLeftRight_:function P$(n){const t=N(n,"image","flipLeftRight","float32");return I(4===t.rank,()=>`Error in flipLeftRight: image must be rank 4,but got rank ${t.rank}.`),A.runKernel(Mh,{image:t},{})}}),B$=_({grayscaleToRGB_:function M$(n){const t=N(n,"image","grayscaleToRGB"),e=t.rank-1,s=t.shape[e];I(t.rank>=2,()=>`Error in grayscaleToRGB: images must be at least rank 2, but got rank ${t.rank}.`),I(1===s,()=>`Error in grayscaleToRGB: last dimension of a grayscale image should be size 1, but got size ${s}.`);const r=new Array(t.rank);return r.fill(1,0,e),r[e]=3,as(t,r)}}),W$=_({rgbToGrayscale_:function V$(n){const t=N(n,"image","RGBToGrayscale"),s=t.shape[t.rank-1];I(t.rank>=2,()=>`Error in RGBToGrayscale: images must be at least rank 2, but got rank ${t.rank}.`),I(3===s,()=>`Error in RGBToGrayscale: last dimension of an RGB image should be size 3, but got size ${s}.`);const r=t.dtype,o=he(t,"float32"),a=mn([.2989,.587,.114]);let i;switch(t.rank){case 2:i=Go("ij,j->i",o,a);break;case 3:i=Go("ijk,k->ij",o,a);break;case 4:i=Go("ijkl,l->ijk",o,a);break;case 5:i=Go("ijklm,m->ijkl",o,a);break;case 6:i=Go("ijklmn,n->ijklm",o,a);break;default:throw new Error("Not a valid tensor rank.")}return i=In(i,-1),he(i,r)}}),G$=_({rotateWithOffset_:function U$(n,t,e=0,s=.5){const r=N(n,"image","rotateWithOffset","float32");return I(4===r.rank,()=>`Error in rotateWithOffset: image must be rank 4,but got rank ${r.rank}.`),A.runKernel(Sd,{image:r},{radians:t,fillValue:e,center:s})}});function Xo(n,t,e,s,r,o){null==s&&(s=.5),null==r&&(r=Number.NEGATIVE_INFINITY),null==o&&(o=0);const a=n.shape[0];return e=Math.min(e,a),I(0<=s&&s<=1,()=>`iouThreshold must be in [0, 1], but was '${s}'`),I(2===n.rank,()=>`boxes must be a 2D tensor, but was of rank '${n.rank}'`),I(4===n.shape[1],()=>`boxes must have 4 columns, but 2nd dimension was ${n.shape[1]}`),I(1===t.rank,()=>"scores must be a 1D tensor"),I(t.shape[0]===a,()=>`scores has incompatible shape with boxes. Expected ${a}, but was ${t.shape[0]}`),I(0<=o&&o<=1,()=>`softNmsSigma must be in [0, 1], but was '${o}'`),{maxOutputSize:e,iouThreshold:s,scoreThreshold:r,softNmsSigma:o}}const j$=_({nonMaxSuppression_:function H$(n,t,e,s=.5,r=Number.NEGATIVE_INFINITY){const o=N(n,"boxes","nonMaxSuppression","float32"),a=N(t,"scores","nonMaxSuppression","float32"),i=Xo(o,a,e,s,r);return A.runKernel(Xh,{boxes:o,scores:a},{maxOutputSize:e=i.maxOutputSize,iouThreshold:s=i.iouThreshold,scoreThreshold:r=i.scoreThreshold})}});function K$(n,t,e){const s=function q$(n,t,e){return function Z$(n,t,e){let s=0,r=n.length,o=0,a=!1;for(;s<r;){o=s+(r-s>>>1);const i=e(t,n[o]);i>0?s=o+1:(r=o,a=!i)}return a?s:-s-1}(n,t,e||X$)}(n,t,e);n.splice(s<0?-(s+1):s,0,t)}function X$(n,t){return n>t?1:n<t?-1:0}function Qp(n,t,e,s,r){return nf(n,t,e,s,r,0)}function Jp(n,t,e,s,r,o){return nf(n,t,e,s,r,0,!1,o,!0)}function ef(n,t,e,s,r,o){return nf(n,t,e,s,r,o,!0)}function nf(n,t,e,s,r,o,a=!1,i=!1,l=!1){const u=[];for(let m=0;m<t.length;m++)t[m]>r&&u.push({score:t[m],boxIndex:m,suppressBeginIndex:0});u.sort(Vx);const c=o>0?-.5/o:0,h=[],d=[];for(;h.length<e&&u.length>0;){const m=u.pop(),{score:y,boxIndex:x,suppressBeginIndex:b}=m;if(y<r)break;let w=!1;for(let S=h.length-1;S>=b;--S){const C=Y$(n,x,h[S]);if(C>=s){w=!0;break}if(m.score=m.score*Q$(s,c,C),m.score<=r)break}m.suppressBeginIndex=h.length,w||(m.score===y?(h.push(x),d.push(m.score)):m.score>r&&K$(u,m,Vx))}const p=h.length,f=e-p;i&&f>0&&(h.push(...new Array(f).fill(0)),d.push(...new Array(f).fill(0)));const g={selectedIndices:h};return a&&(g.selectedScores=d),l&&(g.validOutputs=p),g}function Y$(n,t,e){const s=n.subarray(4*t,4*t+4),r=n.subarray(4*e,4*e+4),o=Math.min(s[0],s[2]),a=Math.min(s[1],s[3]),i=Math.max(s[0],s[2]),l=Math.max(s[1],s[3]),u=Math.min(r[0],r[2]),c=Math.min(r[1],r[3]),h=Math.max(r[0],r[2]),d=Math.max(r[1],r[3]),p=(i-o)*(l-a),f=(h-u)*(d-c);if(p<=0||f<=0)return 0;const g=Math.max(o,u),m=Math.max(a,c),y=Math.min(i,h),x=Math.min(l,d),b=Math.max(y-g,0)*Math.max(x-m,0);return b/(p+f-b)}function Q$(n,t,e){const s=Math.exp(t*e*e);return e<=n?s:0}function Vx(n,t){return n.score-t.score||n.score===t.score&&t.boxIndex-n.boxIndex}function sf(){return(sf=(0,W.Z)(function*(n,t,e,s=.5,r=Number.NEGATIVE_INFINITY){const o=N(n,"boxes","nonMaxSuppressionAsync"),a=N(t,"scores","nonMaxSuppressionAsync"),i=Xo(o,a,e,s,r);e=i.maxOutputSize,s=i.iouThreshold,r=i.scoreThreshold;const l=yield Promise.all([o.data(),a.data()]),u=l[0],c=l[1],{selectedIndices:h}=Qp(u,c,e,s,r);return o!==n&&o.dispose(),a!==t&&a.dispose(),mn(h,"int32")})).apply(this,arguments)}const n_=_({nonMaxSuppressionWithScore_:function t_(n,t,e,s=.5,r=Number.NEGATIVE_INFINITY,o=0){const a=N(n,"boxes","nonMaxSuppression"),i=N(t,"scores","nonMaxSuppression"),l=Xo(a,i,e,s,r,o),h=A.runKernel(Yh,{boxes:a,scores:i},{maxOutputSize:e=l.maxOutputSize,iouThreshold:s=l.iouThreshold,scoreThreshold:r=l.scoreThreshold,softNmsSigma:o=l.softNmsSigma});return{selectedIndices:h[0],selectedScores:h[1]}}});function rf(){return(rf=(0,W.Z)(function*(n,t,e,s=.5,r=Number.NEGATIVE_INFINITY,o=0){const a=N(n,"boxes","nonMaxSuppressionAsync"),i=N(t,"scores","nonMaxSuppressionAsync"),l=Xo(a,i,e,s,r,o);e=l.maxOutputSize,s=l.iouThreshold,r=l.scoreThreshold,o=l.softNmsSigma;const u=yield Promise.all([a.data(),i.data()]),c=u[0],h=u[1],{selectedIndices:d,selectedScores:p}=ef(c,h,e,s,r,o);return a!==n&&a.dispose(),i!==t&&i.dispose(),{selectedIndices:mn(d,"int32"),selectedScores:mn(p)}})).apply(this,arguments)}const a_=_({nonMaxSuppressionPadded_:function o_(n,t,e,s=.5,r=Number.NEGATIVE_INFINITY,o=!1){const a=N(n,"boxes","nonMaxSuppression"),i=N(t,"scores","nonMaxSuppression"),l=Xo(a,i,e,s,r,null),f=A.runKernel(Zh,{boxes:a,scores:i},{maxOutputSize:l.maxOutputSize,iouThreshold:l.iouThreshold,scoreThreshold:l.scoreThreshold,padToMaxOutputSize:o});return{selectedIndices:f[0],validOutputs:f[1]}}});function of(){return(of=(0,W.Z)(function*(n,t,e,s=.5,r=Number.NEGATIVE_INFINITY,o=!1){const a=N(n,"boxes","nonMaxSuppressionAsync"),i=N(t,"scores","nonMaxSuppressionAsync"),l=Xo(a,i,e,s,r,null),u=l.maxOutputSize,c=l.iouThreshold,h=l.scoreThreshold,[d,p]=yield Promise.all([a.data(),i.data()]),{selectedIndices:f,validOutputs:g}=Jp(d,p,u,c,h,o);return a!==n&&a.dispose(),i!==t&&i.dispose(),{selectedIndices:mn(f,"int32"),validOutputs:$e(g,"int32")}})).apply(this,arguments)}const Wx=_({resizeBilinear_:function u_(n,t,e=!1,s=!1){const r=N(n,"images","resizeBilinear");I(3===r.rank||4===r.rank,()=>`Error in resizeBilinear: x must be rank 3 or 4, but got rank ${r.rank}.`),I(2===t.length,()=>`Error in resizeBilinear: new shape must 2D, but got shape ${t}.`),I(!1===s||!1===e,()=>"Error in resizeBilinear: If halfPixelCenters is true, alignCorners must be false.");let o=r,a=!1;3===r.rank&&(a=!0,o=F(r,[1,r.shape[0],r.shape[1],r.shape[2]]));const[]=t,u=A.runKernel(nu,{images:o},{alignCorners:e,halfPixelCenters:s,size:t});return a?F(u,[u.shape[1],u.shape[2],u.shape[3]]):u}}),Ux=_({resizeNearestNeighbor_:function c_(n,t,e=!1,s=!1){const r=N(n,"images","resizeNearestNeighbor");I(3===r.rank||4===r.rank,()=>`Error in resizeNearestNeighbor: x must be rank 3 or 4, but got rank ${r.rank}.`),I(2===t.length,()=>`Error in resizeNearestNeighbor: new shape must 2D, but got shape ${t}.`),I("float32"===r.dtype||"int32"===r.dtype,()=>"`images` must have `int32` or `float32` as dtype"),I(!1===s||!1===e,()=>"Error in resizeNearestNeighbor: If halfPixelCenters is true, alignCorners must be false.");let o=r,a=!1;3===r.rank&&(a=!0,o=F(r,[1,r.shape[0],r.shape[1],r.shape[2]]));const[]=t,u=A.runKernel(tu,{images:o},{alignCorners:e,halfPixelCenters:s,size:t});return a?F(u,[u.shape[1],u.shape[2],u.shape[3]]):u}}),p_=_({threshold_:function h_(n,t="binary",e=!1,s=.5){const r=N(n,"image","threshold"),l=r.shape[0]*r.shape[1];let c,h,d,p,u=D(mn([s]),255);if(I(3===r.rank,()=>`Error in threshold: image must be rank 3,but got rank ${r.rank}.`),I(3===r.shape[2]||1===r.shape[2],()=>`Error in threshold: image color channel must be equal to 3 or 1but got ${r.shape[2]}.`),I("int32"===r.dtype||"float32"===r.dtype,()=>`Error in dtype: image dtype must be int32 or float32,but got dtype ${r.dtype}.`),I("otsu"===t||"binary"===t,()=>`Method must be binary or otsu, but was ${t}`),3===r.shape[2]){[c,h,d]=Ln(r,[1,1,1],-1);const m=D(c,.2989),y=D(h,.587),x=D(d,.114);p=ee(ee(m,y),x)}else p=n;"otsu"===t&&(u=function d_(n,t){let o,a,i,l,u,c,e=mn([-1]),s=mn([0]),r=mn([0]);for(let h=0;h<n.size-1;h++){o=Qe(n,0,h+1),a=Qe(n,h+1),u=Ce(ve(o),t),c=Ce(ve(a),t);const d=ve(D(o,Ko(0,o.size)));i=Ce(d,ve(o));const p=Mo(a.shape,o.size),f=ee(Ko(0,a.size),p),g=D(a,f);l=Ce(ve(g),ve(a));const m=be(i,l),y=be(i,l),x=D(u,c);r=D(D(x,m),y);const b=_n(r,s);s=fn(b,r,s),e=fn(b,mn([h]),e)}return e}(Zy(he(Ap(p),"int32"),At([]),256),l));const f=e?eo(p,u):_n(p,u);return he(D(f,255),"int32")}}),m_=_({transform_:function f_(n,t,e="nearest",s="constant",r=0,o){const a=N(n,"image","transform","float32"),i=N(t,"transforms","transform","float32");return I(4===a.rank,()=>`Error in transform: image must be rank 4,but got rank ${a.rank}.`),I(2===i.rank&&(i.shape[0]===a.shape[0]||1===i.shape[0])&&8===i.shape[1],()=>"Error in transform: Input transform should be batch x 8 or 1 x 8"),I(null==o||2===o.length,()=>`Error in transform: outputShape must be [height, width] or null, but got ${o}.`),A.runKernel(bd,{image:a,transforms:i},{interpolation:e,fillMode:s,fillValue:r,outputShape:o})}}),y_=_({bandPart_:function g_(n,t,e){const s=N(n,"a","bandPart");I(s.rank>=2,()=>`bandPart(): Rank must be at least 2, got ${s.rank}.`);const r=s.shape,[o,a]=s.shape.slice(-2);let i,l;"number"==typeof t?(I(t%1==0,()=>`bandPart(): numLower must be an integer, got ${t}.`),I(t<=o,()=>`bandPart(): numLower (${t}) must not be greater than the number of rows (${o}).`),i=N(t<0?o:t,"numLower","bandPart")):(I("int32"===t.dtype,()=>"bandPart(): numLower's dtype must be an int32."),i=fn(Ei(t,0),o,to(t,o))),"number"==typeof e?(I(e%1==0,()=>`bandPart(): numUpper must be an integer, got ${e}.`),I(e<=a,()=>`bandPart(): numUpper (${e}) must not be greater than the number of columns (${a}).`),l=N(e<0?a:e,"numUpper","bandPart")):(I("int32"===e.dtype,()=>"bandPart(): numUpper's dtype must be an int32."),l=fn(Ei(e,0),a,to(e,a)));const u=F(Ko(0,o,1,"int32"),[-1,1]),c=Ko(0,a,1,"int32"),h=be(u,c),d=Ds(eo(h,i),Ir(h,wt(l))),p=Kt([o,a],s.dtype);return F(Xn(ls(F(s,[-1,o,a])).map(f=>fn(d,f,p))),r)}}),b_=_({gramSchmidt_:function x_(n){let t;if(Array.isArray(n)){t=!1,I(null!=n&&n.length>0,()=>"Gram-Schmidt process: input must not be null, undefined, or empty");const r=n[0].shape[0];for(let o=1;o<n.length;++o)I(n[o].shape[0]===r,()=>`Gram-Schmidt: Non-unique lengths found in the input vectors: (${n[o].shape[0]} vs. ${r})`)}else t=!0,n=Ln(n,n.shape[0],0).map(r=>so(r,[0]));I(n.length<=n[0].shape[0],()=>`Gram-Schmidt: Number of vectors (${n.length}) exceeds number of dimensions (${n[0].shape[0]}).`);const e=[],s=n;for(let r=0;r<n.length;++r)e.push(A.tidy(()=>{let o=s[r];if(r>0)for(let a=0;a<r;++a){const i=D(ve(D(e[a],o)),e[a]);o=be(o,i)}return Ce(o,Ti(o,"euclidean"))}));return t?Xn(e,0):e}});function Gx(n,t=!1){return A.tidy(()=>{I(2===n.shape.length,()=>`qr2d() requires a 2D Tensor, but got a ${n.shape.length}D Tensor.`);const e=n.shape[0],s=n.shape[1];let r=vp(e),o=Ks(n);const a=Fi([[1]],[1,1]);let i=Ks(a);const l=e>=s?s:e;for(let u=0;u<l;++u){const c=o,h=i,d=r;[i,o,r]=A.tidy(()=>{const p=Qe(o,[u,u],[e-u,1]),f=Ti(p),g=Qe(o,[u,u],[1,1]),m=fn(_n(g,0),Fi([[-1]]),Fi([[1]])),y=be(g,D(m,f)),x=Ce(p,y);i=1===x.shape[0]?Ks(a):Bt([a,Qe(x,[1,0],[x.shape[0]-1,x.shape[1]])],0);const b=wt(Ce(Ke(m,y),f)),w=Qe(o,[u,0],[e-u,s]),S=D(b,i),C=Je(i);if(0===u)o=be(w,Ke(S,Ke(C,w)));else{const E=be(w,Ke(S,Ke(C,w)));o=Bt([Qe(o,[0,0],[u,s]),E],0)}const k=Je(S),T=Qe(r,[0,u],[e,r.shape[1]-u]);if(0===u)r=be(T,Ke(Ke(T,i),k));else{const E=be(T,Ke(Ke(T,i),k));r=Bt([Qe(r,[0,0],[e,u]),E],1)}return[i,o,r]}),Be([c,h,d])}return!t&&e>s&&(r=Qe(r,[0,0],[e,s]),o=Qe(o,[0,0],[s,s])),[r,o]})}const v_=_({qr_:function w_(n,t=!1){if(I(n.rank>=2,()=>`qr() requires input tensor to have a rank >= 2, but got rank ${n.rank}`),2===n.rank)return Gx(n,t);{const e=n.shape.slice(0,n.shape.length-2).reduce((l,u)=>l*u),s=ls(F(n,[e,n.shape[n.shape.length-2],n.shape[n.shape.length-1]]),0),r=[],o=[];return s.forEach(l=>{const[u,c]=Gx(l,t);r.push(u),o.push(c)}),[F(Xn(r,0),n.shape),F(Xn(o,0),n.shape)]}}});var Pn=function(n){return n[n.NONE=0]="NONE",n[n.MEAN=1]="MEAN",n[n.SUM=2]="SUM",n[n.SUM_BY_NONZERO_WEIGHTS=3]="SUM_BY_NONZERO_WEIGHTS",n}(Pn||{});const Ys=_({computeWeightedLoss_:function S_(n,t,e=Pn.SUM_BY_NONZERO_WEIGHTS){const s=N(n,"losses","computeWeightedLoss");let r=null;null!=t&&(r=N(t,"weights","computeWeightedLoss"));const o=null==r?s:D(s,r);if(e===Pn.NONE)return o;if(e===Pn.SUM)return ve(o);if(e===Pn.MEAN){if(null==r)return Rt(o);{const a=s.size/r.size,i=Ce(ve(o),ve(r));return a>1?Ce(i,$e(a)):i}}if(e===Pn.SUM_BY_NONZERO_WEIGHTS){if(null==r)return Ce(ve(o),$e(s.size));{const a=D(r,Kn(s.shape)),i=he(ve(jo(a,$e(0))),"float32");return Ce(ve(o),i)}}throw Error(`Unknown reduction: ${e}`)}}),N_=_({absoluteDifference_:function I_(n,t,e,s=Pn.SUM_BY_NONZERO_WEIGHTS){const r=N(n,"labels","absoluteDifference"),o=N(t,"predictions","absoluteDifference");let a=null;null!=e&&(a=N(e,"weights","absoluteDifference")),Dn(r.shape,o.shape,"Error in absoluteDifference: ");const i=Ht(be(r,o));return Ys(i,a,s)}}),k_=_({cosineDistance_:function C_(n,t,e,s,r=Pn.SUM_BY_NONZERO_WEIGHTS){const o=N(n,"labels","cosineDistance"),a=N(t,"predictions","cosineDistance");let i=null;null!=s&&(i=N(s,"weights","cosineDistance")),Dn(o.shape,a.shape,"Error in cosineDistance: ");const l=$e(1),u=be(l,ve(D(o,a),e,!0));return Ys(u,i,r)}}),$_=_({hingeLoss_:function T_(n,t,e,s=Pn.SUM_BY_NONZERO_WEIGHTS){let r=N(n,"labels","hingeLoss");const o=N(t,"predictions","hingeLoss");let a=null;null!=e&&(a=N(e,"weights","hingeLoss")),Dn(r.shape,o.shape,"Error in hingeLoss: ");const i=$e(1);r=be(D($e(2),r),i);const l=Fs(be(i,D(r,o)));return Ys(l,a,s)}}),E_=_({huberLoss_:function __(n,t,e,s=1,r=Pn.SUM_BY_NONZERO_WEIGHTS){const o=N(n,"labels","huberLoss"),a=N(t,"predictions","huberLoss");let i=null;null!=e&&(i=N(e,"weights","huberLoss")),Dn(o.shape,a.shape,"Error in huberLoss: ");const l=$e(s),u=Ht(be(a,o)),c=to(u,l),h=be(u,c),d=ee(D($e(.5),dt(c)),D(l,h));return Ys(d,i,r)}}),R_=_({logLoss_:function A_(n,t,e,s=1e-7,r=Pn.SUM_BY_NONZERO_WEIGHTS){const o=N(n,"labels","logLoss"),a=N(t,"predictions","logLoss");let i=null;null!=e&&(i=N(e,"weights","logLoss")),Dn(o.shape,a.shape,"Error in logLoss: ");const l=$e(1),u=$e(s),c=wt(D(o,jn(ee(a,u)))),h=D(be(l,o),jn(ee(be(l,a),u))),d=be(c,h);return Ys(d,i,r)}}),F_=_({meanSquaredError_:function D_(n,t,e,s=Pn.SUM_BY_NONZERO_WEIGHTS){const r=N(n,"labels","meanSquaredError"),o=N(t,"predictions","meanSquaredError");let a=null;null!=e&&(a=N(e,"weights","meanSquaredError")),Dn(r.shape,o.shape,"Error in meanSquaredError: ");const i=Bp(r,o);return Ys(i,a,s)}}),P_=_({sigmoidCrossEntropy_:function L_(n,t,e,s=0,r=Pn.SUM_BY_NONZERO_WEIGHTS){let o=N(n,"multiClassLabels","sigmoidCrossEntropy");const a=N(t,"logits","sigmoidCrossEntropy");let i=null;if(null!=e&&(i=N(e,"weights","sigmoidCrossEntropy")),Dn(o.shape,a.shape,"Error in sigmoidCrossEntropy: "),s>0){const u=$e(s),c=$e(1),h=$e(.5);o=ee(D(o,be(c,u)),D(h,u))}const l=function O_(n,t){const e=N(n,"labels","sigmoidCrossEntropyWithLogits"),s=N(t,"logits","sigmoidCrossEntropyWithLogits");Dn(e.shape,s.shape,"Error in sigmoidCrossEntropyWithLogits: ");const r=Fs(s),o=D(s,e),a=Ou(Hn(wt(Ht(s))));return ee(be(r,o),a)}(o,a);return Ys(l,i,r)}}),B_=_({softmaxCrossEntropy_:function M_(n,t,e,s=0,r=Pn.SUM_BY_NONZERO_WEIGHTS){let o=N(n,"onehotLabels","softmaxCrossEntropy");const a=N(t,"logits","softmaxCrossEntropy");let i=null;if(null!=e&&(i=N(e,"weights","softmaxCrossEntropy")),Dn(o.shape,a.shape,"Error in softmaxCrossEntropy: "),s>0){const u=$e(s),c=$e(1),h=$e(o.shape[1]);o=ee(D(o,be(c,u)),Ce(u,h))}const l=function z_(n,t,e=-1){if(-1===e&&(e=t.rank-1),e!==t.rank-1)throw Error(`Softmax cross entropy along a non-last dimension is not yet supported. Labels / logits was rank ${t.rank} and dim was ${e}`);return qs((r,o,a)=>{const l=Ip(o,[e],!0),u=be(he(o,"float32"),l);a([r,u]);const c=wt(D(u,r));return{value:ve(c,[e]),gradFunc:(p,f)=>{const[g,m]=f,y=Ot(p.shape,[e]);return[D(F(p,y),be(he(g,"float32"),Hn(m))),D(F(p,y),be(Hn(m),he(g,"float32")))]}}})(n,t)}(o,a);return Ys(l,i,r)}}),s2={fft:ju,ifft:Di,rfft:Ku,irfft:Mp},r2={hammingWindow:E$,hannWindow:Mx,frame:Bx,stft:F$},Os={flipLeftRight:z$,grayscaleToRGB:B$,resizeNearestNeighbor:Ux,resizeBilinear:Wx,rgbToGrayscale:W$,rotateWithOffset:G$,cropAndResize:L$,nonMaxSuppression:j$,nonMaxSuppressionAsync:function J$(n,t,e){return sf.apply(this,arguments)},nonMaxSuppressionWithScore:n_,nonMaxSuppressionWithScoreAsync:function s_(n,t,e){return rf.apply(this,arguments)},nonMaxSuppressionPadded:a_,nonMaxSuppressionPaddedAsync:function i_(n,t,e){return of.apply(this,arguments)},threshold:p_,transform:m_},Hx={bandPart:y_,gramSchmidt:b_,qr:v_},o2={absoluteDifference:N_,computeWeightedLoss:Ys,cosineDistance:k_,hingeLoss:$_,huberLoss:E_,logLoss:R_,meanSquaredError:F_,sigmoidCrossEntropy:P_,softmaxCrossEntropy:B_},a2={sparseFillEmptyRows:_({sparseFillEmptyRows_:function V_(n,t,e,s){const r=N(n,"indices","sparseFillEmptyRows","int32"),o=N(t,"values","sparseFillEmptyRows"),a=N(e,"denseShape","sparseFillEmptyRows","int32"),i=N(s,"defaultValue","sparseFillEmptyRows",o.dtype);if(2!==r.rank)throw new Error(`Indices should be Tensor2D but received shape\n        ${r.shape}`);if(1!==o.rank)throw new Error(`Values should be Tensor1D but received shape ${o.shape}`);if(1!==a.rank)throw new Error(`Dense shape should be Tensor1D but received shape ${a.shape}`);if(0!==i.rank)throw new Error(`Default value should be a scalar but received shape ${i.shape}`);const u=A.runKernel(ld,{indices:r,values:o,denseShape:a,defaultValue:i});return{outputIndices:u[0],outputValues:u[1],emptyRowIndicator:u[2],reverseIndexMap:u[3]}}}),sparseReshape:_({sparseReshape_:function U_(n,t,e){const s=N(n,"inputIndices","sparseReshape","int32"),r=N(t,"inputShape","sparseReshape","int32"),o=N(e,"newShape","sparseReshape","int32");if(2!==s.rank)throw new Error(`Input indices should be Tensor2D but received shape\n        ${s.shape}`);if(1!==r.rank)throw new Error(`Input shape should be Tensor1D but received shape ${r.shape}`);if(1!==o.rank)throw new Error(`New shape should be Tensor1D but received shape ${o.shape}`);const i=A.runKernel(ud,{inputIndices:s,inputShape:r,newShape:o});return{outputIndices:i[0],outputShape:i[1]}}}),sparseSegmentMean:_({sparseSegmentMean_:function H_(n,t,e){const s=N(n,"data","sparseSegmentMean"),r=N(t,"indices","sparseSegmentMean","int32"),o=N(e,"segmentIds","sparseSegmentMean","int32");if(s.rank<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==r.rank)throw new Error(`Indices should be Tensor1D but received shape\n          ${r.shape}`);if(1!==o.rank)throw new Error(`Segment ids should be Tensor1D but received shape\n          ${o.shape}`);return A.runKernel(cd,{data:s,indices:r,segmentIds:o})}}),sparseSegmentSum:_({sparseSegmentSum_:function K_(n,t,e){const s=N(n,"data","sparseSegmentSum"),r=N(t,"indices","sparseSegmentSum","int32"),o=N(e,"segmentIds","sparseSegmentSum","int32");if(s.rank<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==r.rank)throw new Error(`Indices should be Tensor1D but received shape\n         ${r.shape}`);if(1!==o.rank)throw new Error(`Segment ids should be Tensor1D but received shape\n         ${o.shape}`);return A.runKernel(hd,{data:s,indices:r,segmentIds:o})}})},i2={stringNGrams:_({stringNGrams_:function X_(n,t,e,s,r,o,a,i){const l=N(n,"data","stringNGrams","string");if("string"!==l.dtype)throw new Error("Data must be of datatype string");if(1!==l.shape.length)throw new Error(`Data must be a vector, saw: ${l.shape}`);const u=N(t,"dataSplits","stringNGrams");if("int32"!==u.dtype)throw new Error("Data splits must be of datatype int32");const d=A.runKernel(md,{data:l,dataSplits:u},{separator:e,nGramWidths:s,leftPad:r,rightPad:o,padWidth:a,preserveShortSequences:i});return{nGrams:d[0],nGramsSplits:d[1]}}}),stringSplit:_({stringSplit_:function Y_(n,t,e=!0){const s=N(n,"input","stringSplit","string"),r=N(t,"delimiter","stringSplit","string");if(1!==s.rank)throw new Error(`Input should be Tensor1D but received shape ${s.shape}`);if(0!==r.rank)throw new Error(`Delimiter should be a scalar but received shape ${r.shape}`);const i=A.runKernel(gd,{input:s,delimiter:r},{skipEmpty:e});return{indices:i[0],values:i[1],shape:i[2]}}}),stringToHashBucketFast:_({stringToHashBucketFast_:function J_(n,t){const e=N(n,"input","stringToHashBucketFast","string"),s={numBuckets:t};if(t<=0)throw new Error("Number of buckets must be at least 1");return A.runKernel(yd,{input:e},s)}}),staticRegexReplace:_({staticRegexReplace_:function t2(n,t,e,s=!0){const r=N(n,"input","staticRegexReplace","string");return A.runKernel(cu,{x:r},{pattern:t,rewrite:e,replaceGlobal:s})}})},Zo=class l2{static sgd(t){return new Zd(t)}static momentum(t,e,s=!1){return new fy(t,e,s)}static rmsprop(t,e=.9,s=0,r=null,o=!1){return new my(t,e,s,r,o)}static adam(t=.001,e=.9,s=.999,r=null){return new dy(t,e,s,r)}static adadelta(t=.001,e=.95,s=null){return new cy(t,e,s)}static adamax(t=.002,e=.9,s=.999,r=null,o=0){return new py(t,e,s,r,o)}static adagrad(t,e=.1){return new hy(t,e)}},u2=typeof requestAnimationFrame<"u"?requestAnimationFrame:typeof setImmediate<"u"?setImmediate:n=>n();function jx(){return new Promise(n=>u2(()=>n()))}function af(n,t){const e=n[0].length;n.forEach((r,o)=>{I(r.length===e,()=>`Error in concat${e}D: rank of tensors[${o}] must be the same as the rank of the rest (${e})`)}),I(t>=0&&t<e,()=>`Error in concat${e}D: axis must be between 0 and ${e-1}.`);const s=n[0];n.forEach((r,o)=>{for(let a=0;a<e;a++)I(a===t||r[a]===s[a],()=>`Error in concat${e}D: Shape of tensors[${o}] (${r}) does not match the shape of the rest (${s}) along the non-concatenated axis ${o}.`)})}function Ls(n,t){const e=n[0].slice();for(let s=1;s<n.length;s++)e[t]+=n[s][t];return e}var Ps=function(n){return n[n.FIRST_DIM_SIZE=0]="FIRST_DIM_SIZE",n[n.VALUE_ROWIDS=1]="VALUE_ROWIDS",n[n.ROW_LENGTHS=2]="ROW_LENGTHS",n[n.ROW_SPLITS=3]="ROW_SPLITS",n[n.ROW_LIMITS=4]="ROW_LIMITS",n[n.ROW_STARTS=5]="ROW_STARTS",n}(Ps||{});function Kx(n,t,e){let s=new Array;if(null==e&&null==t)return s;if(null==t)for(;s.length<n+e.length;)s.push(-1);else s=t.slice();if(null==e)return s;if(n+e.length!==s.length)throw new Error(`rt input.shape and shape=${t} are incompatible: rt input.rank = ${n+e.length}, but shape.rank = ${s.length}`);for(let r=1;r<e.length;++r){const o=e[r],a=s[s.length-e.length+r],i=s[a];if(o>=0)if(i>=0){if(i!==o)throw new Error(`rt input.shape and shape=${t} are incompatible: rt input.shape[${r+n}] = ${o} but shape[${r+n}] = ${i}`)}else s[a]=o}return s}function qx(n){const t={FIRST_DIM_SIZE:Ps.FIRST_DIM_SIZE,VALUE_ROWIDS:Ps.VALUE_ROWIDS,ROW_LENGTHS:Ps.ROW_LENGTHS,ROW_SPLITS:Ps.ROW_SPLITS,ROW_LIMITS:Ps.ROW_LIMITS,ROW_STARTS:Ps.ROW_STARTS},e=[];for(const s of n){if(!(s in t))break;e.push(t[s])}return e}function Xx(n){return 0===n.length?0:n[0]===Ps.FIRST_DIM_SIZE?n.length-1:n.length}function Zx(n,t){if(null==n||null==t)return;const e=n.length,s=t.length;if(e>=s)throw new Error(`defaultValue.shape=${n} and ragged tensor flatValues.shape=${t}, are incompatible: defaultValue.rank = ${e} must be less than ragged tensor input flatValues.rank = ${s})`);for(let r=0;r<Math.min(e,s-1);++r){const o=n[r],a=t[r+1];if(o>=0&&a>=0&&1!==o&&o!==a)throw new Error(`defaultValue.shape=${n}, and ragged tensor input flatValues.shape=${t} are incompatible: defaultValue.shape[${r-n.length}] = ${o} but ragged tensor input.flatValues.shape[${r-n.length}] = ${a}`)}}const lf=30;function Qu(n){return n<=lf?n:hh(n,Math.floor(Math.sqrt(n)))}function uf(n,t,e){return[e*("number"==typeof n?n:n[0]),t*("number"==typeof n?n:n[1])]}function Oi(n,t,e,s=!0){let r=[];if(s)r=r.concat(t.slice(0)),r.push(n[0]/e),r=r.concat(n.slice(1));else{r=r.concat(n[0]);const o=t.length;for(let a=0;a<o;++a)r=r.concat([n[a+1]/t[a],t[a]]);r=r.concat(n.slice(o+1))}return r}function Li(n,t,e=!0){const s=[];if(e){s.push(t);for(let r=t+1;r<n;++r)r<=2*t?(s.push(r),s.push(r-(t+1))):s.push(r)}else{const r=[],o=[];for(let a=1;a<n;++a)a>=2*t+1||a%2==1?o.push(a):r.push(a);s.push(...r),s.push(0),s.push(...o)}return s}function Pi(n,t,e,s=!0){const r=[];r.push(s?n[0]/e:n[0]*e);for(let o=1;o<n.length;++o)r.push(o<=t.length?s?t[o-1]*n[o]:n[o]/t[o-1]:n[o]);return r}function cf(n,t){const e=[0];for(let s=0;s<t;++s)e.push(n[s][0]);return e}function hf(n,t,e){const s=n.slice(0,1);for(let r=0;r<e;++r)s.push(n[r+1]-t[r][0]-t[r][1]);return s}function df(n,t){const e=n.shape.length,s=t.shape.length;if(e<1)throw new Error(`tf.gatherND() expects the input to be rank 1 or higher, but the rank was ${e}.`);if(s<1)throw new Error(`tf.gatherND() expects the indices to be rank 1 or higher, but the rank was ${s}.`);if("int32"!==t.dtype)throw new Error(`tf.gatherND() expects the indices to be int32 type, but the dtype was ${t.dtype}.`);if(t.shape[s-1]>e)throw new Error(`index innermost dimension length must be <= tensor rank; saw: ${t.shape[s-1]} vs. ${e}`);if(0===G(n.shape))throw new Error(`Requested more than 0 entries, but input is empty. Input shape: ${n.shape}.`);const r=t.shape,o=r[r.length-1];let a=1;for(let h=0;h<r.length-1;++h)a*=r[h];const i=n.shape,l=r.slice();l.pop();let u=1;for(let h=o;h<e;++h)u*=i[h],l.push(i[h]);const c=[...ke(n.shape).map(h=>h/u),1].slice(0,o);return[l,a,u,c]}const Ju=1.7580993408473768,ec=1.0507009873554805,pf=.3275911,ff=.254829592,mf=-.284496736,gf=1.421413741,yf=-1.453152027,xf=1.061405429;function Qs(n,t){if(n.length!==t.length)throw new Error(`Cannot merge real and imag arrays of different lengths. real:${n.length}, imag: ${t.length}.`);const e=new Float32Array(2*n.length);for(let s=0;s<e.length;s+=2)e[s]=n[s/2],e[s+1]=t[s/2];return e}function Yx(n){const t=new Float32Array(n.length/2),e=new Float32Array(n.length/2);for(let s=0;s<n.length;s+=2)t[s/2]=n[s],e[s/2]=n[s+1];return{real:t,imag:e}}function Qx(n){const t=Math.ceil(n.length/4),e=new Float32Array(t),s=new Float32Array(t);for(let r=0;r<n.length;r+=4)e[Math.floor(r/4)]=n[r],s[Math.floor(r/4)]=n[r+1];return{real:e,imag:s}}function Jx(n){const t=Math.floor(n.length/4),e=new Float32Array(t),s=new Float32Array(t);for(let r=2;r<n.length;r+=4)e[Math.floor(r/4)]=n[r],s[Math.floor(r/4)]=n[r+1];return{real:e,imag:s}}function bf(n,t){return{real:n[2*t],imag:n[2*t+1]}}function eb(n,t,e,s){n[2*s]=t,n[2*s+1]=e}function tb(n,t){const e=new Float32Array(n/2),s=new Float32Array(n/2);for(let r=0;r<Math.ceil(n/2);r++){const o=(t?2:-2)*Math.PI*(r/n);e[r]=Math.cos(o),s[r]=Math.sin(o)}return{real:e,imag:s}}function nb(n,t,e){const s=(e?2:-2)*Math.PI*(n/t);return{real:Math.cos(s),imag:Math.sin(s)}}const wf="->",c2=/->/g,sb=",",rb="...";function vf(n,t){const e=((n=n.replace(/\s/g,"")).length-n.replace(c2,"").length)/wf.length;if(e<1)throw new Error("Equations without an arrow are not supported.");if(e>1)throw new Error(`Equation must contain exactly one arrow ("${wf}").`);const[s,r]=n.split(wf);I(-1===s.indexOf(rb),()=>`The ellipsis notation ("${rb}") is not supported yet.`);const o=s.split(sb),a=o.length;if(t!==a)throw new Error(`Expected ${a} input tensors, received ${t}`);if(a>2)throw new Error("Support for more than 2 input tensors is not implemented yet.");const i=[];for(let d=0;d<r.length;++d){const p=r[d];if(!o.some(f=>-1!==f.indexOf(p)))throw new Error(`Output subscripts contain the label ${p} not present in the input subscripts.`);-1===i.indexOf(p)&&i.push(p)}for(let d=0;d<s.length;++d){const p=s[d];-1===i.indexOf(p)&&p!==sb&&i.push(p)}const l=new Array(o.length);for(let d=0;d<a;++d){if(new Set(o[d].split("")).size!==o[d].length)throw new Error(`Found duplicate axes in input component ${o[d]}. Support for duplicate axes in input is not implemented yet.`);l[d]=[];for(let p=0;p<o[d].length;++p)l[d].push(i.indexOf(o[d][p]))}const u=i.length,h=[];for(let d=r.length;d<u;++d)h.push(d);return{allDims:i,summedDims:h,idDims:l}}function Sf(n,t){let e=new Array(n);e.fill(-1);for(let r=0;r<t.length;++r)e[t[r]]=r;const s=[];for(let r=0;r<n;++r)-1===e[r]&&s.push(r);return e=e.filter(r=>-1!==r),{permutationIndices:e,expandDims:s}}function If(n,t,e){const s=new Array(n);for(let r=0;r<e.length;++r){const o=e[r].shape;for(let a=0;a<t[r].length;++a)void 0===s[t[r][a]]?s[t[r][a]]=o[a]:I(s[t[r][a]]===o[a],()=>`Expected dimension ${s[t[r][a]]} at axis ${a} of input shaped ${JSON.stringify(o)}, but got dimension ${o[a]}`)}}function Nf(n,t){const e=n,s=[];let r=0;0===n.length&&e.push(-1),r=n.length+1;for(let a=0;a<r;++a)s.push([]);const o=[];for(let a=0;a<e.length;++a){const l=h2(t,e[a]);for(const u of l)-1===o.indexOf(u)&&(s[a].push(u),o.push(u))}return{path:e,steps:s}}function Cf(n){return n.every((t,e)=>t===e)}function h2(n,t){const e=[];for(let s=0;s<n.length;++s)(0===n[s].length||-1!==n[s].indexOf(t)||-1===t)&&e.push(s);return e}function kf(n,t,e=0){let s=[];if("number"==typeof t)I(n.shape[e]%t==0,()=>"Number of splits must evenly divide the axis."),s=new Array(t).fill(n.shape[e]/t);else{I(t.reduce((a,i)=>(-1===i&&(a+=1),a),0)<=1,()=>"There should be only one negative value in split array.");const o=t.indexOf(-1);if(-1!==o){const a=t.reduce((i,l)=>l>0?i+l:i);t[o]=n.shape[e]-a}I(n.shape[e]===t.reduce((a,i)=>a+i),()=>"The sum of sizes must match the size of the axis dimension."),s=t}return s}function ob(n){return`Received SparseTensor with denseShape[0] = 0 but\n  indices.shape[0] = ${n}`}function ab(n,t){return`indices(${n}, 0) is invalid: ${t} < 0`}function ib(n,t,e){return`indices(${n}, 0) is invalid: ${t} >= ${e}`}function lb(n,t){return`only one output dimension may be -1, not both ${n} and ${t}`}function ub(n,t){return`size ${n} must be non-negative, not ${t}`}function cb(){return"reshape cannot infer the missing input size for an empty tensor unless all specified input sizes are non-zero"}function hb(n,t){return`Input to reshape is a SparseTensor with ${G(n)}\n  dense values, but the requested shape requires a multiple of ${G(t)}. inputShape=${n} outputShape= ${t}`}function db(n,t){return`Input to reshape is a tensor with ${G(n)} dense values, but the requested shape has ${G(t)}. inputShape=${n} outputShape=${t}`}function Tf(){return"segment ids must be >= 0"}function pb(){return"segment ids are not increasing"}function fb(n,t){return`Segment id ${n} out of range [0, ${t}), possibly because segmentIds input is not sorted.`}function mb(n,t,e){return`Bad: indices[${n}] == ${t} out of range [0, ${e})`}function gb(n,t){let s,e=!1;for(n<=lf?(s=n,e=!0):s=hh(n,Math.floor(Math.sqrt(n)));!e;)s>t||s===n?e=!0:s=hh(n,s+1);return s}function yb(n,t,e){const s=[],r=n.length;for(let o=0;o<r;o++)s.push(o!==t?n[o]:e);return s}function $f(n,t,e,s){const r=t.shape.length,o=n.shape.length;if(0!==s&&(s<-r||s>r))throw new Error(`Expect batchDims in the range of [-${r}, ${r}], but got ${s}`);if(s<0&&(s+=r),s>o)throw new Error(`batchDims (${s}) must be less than rank(x) (\n    ${o}).`);if(e<s)throw new Error(`batchDims (${s}) must be less than or equal to axis (${e}).`);for(let h=0;h<s;++h)if(n.shape[h]!==t.shape[h])throw new Error(`x.shape[${h}]: ${n.shape[h]} should be equal to indices.shape[${h}]: ${t.shape[h]}.`);const a=n.shape[e],i=[];let l=1,u=1,c=1;for(let h=0;h<s;++h)i.push(n.shape[h]),l*=n.shape[h];for(let h=s;h<e;h++)i.push(n.shape[h]),u*=n.shape[h];for(let h=s;h<r;h++)i.push(t.shape[h]);for(let h=e+1;h<o;h++)i.push(n.shape[h]),c*=n.shape[h];return{batchSize:l,sliceSize:c,outerSize:u,dimSize:a,outputShape:i}}function Js(n){try{return n.map(t=>dr(t))}catch(t){throw new Error(`Failed to decode encoded string bytes into utf-8, error: ${t}`)}}function xb(n){return n.map(t=>hr(t))}!function zI(){for(const n of PI)te(n)}();const bb={kernelName:hl,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>D(n,qo(he(e,"float32"),-1))}}},d2={kernelName:wa,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>{const s=dt(he(e,"float32")),r=pn(be($e(1),s));return wt(Ce(n,r))}}}},p2={kernelName:va,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>{const s=pn(be(dt(he(e,"float32")),1));return Ce(n,s)}}}},f2={kernelName:Eo,inputsToSave:["a","b"],gradFunc:(n,t)=>{const[e,s]=t,r=Le(e.shape,s.shape);return{a:()=>{let i=n;const l=jt(e.shape,r);return l.length>0&&(i=ve(i,l)),F(i,e.shape)},b:()=>{let i=n;const l=jt(s.shape,r);return l.length>0&&(i=ve(i,l)),F(i,s.shape)}}}},m2={kernelName:dl,saveAllInputs:!0,gradFunc:(n,t)=>{const e={};return t.forEach((s,r)=>{e[r]=()=>n.clone()}),e}},g2={kernelName:pl,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>Ye(e)}}},y2={kernelName:fl,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>Ye(e)}}},x2={kernelName:Sa,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>Ce(n,pn(be($e(1),dt(he(e,"float32")))))}}},b2={kernelName:Ia,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>{const s=pn(ee($e(1),dt(he(e,"float32"))));return Ce(n,s)}}}},w2={kernelName:ka,inputsToSave:["a","b"],gradFunc:(n,t)=>{const[e,s]=t,r=Le(e.shape,s.shape);return{a:()=>{const i=ee(dt(e),dt(s));let l=D(n,Ce(s,i));const u=jt(e.shape,r);return u.length>0&&(l=ve(l,u)),F(l,e.shape)},b:()=>{const i=ee(dt(e),dt(s));let l=wt(D(n,Ce(e,i)));const u=jt(s.shape,r);return u.length>0&&(l=ve(l,u)),F(l,s.shape)}}}},v2={kernelName:Na,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>Ce(n,ee(dt(he(e,"float32")),1))}}},S2={kernelName:Ca,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>Ce(n,be($e(1),dt(he(e,"float32"))))}}},N2=_({avgPool3dGrad_:function I2(n,t,e,s,r,o){const a=N(n,"dy","avgPool3dGrad"),i=N(t,"input","avgPool3dGrad");let l=a,u=i,c=!1;4===i.rank&&(c=!0,l=F(a,[1,a.shape[0],a.shape[1],a.shape[2],a.shape[3]]),u=F(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]])),I(5===l.rank,()=>`Error in avgPool3dGrad: dy must be rank 5 but got rank ${l.rank}.`),I(5===u.rank,()=>`Error in avgPool3dGrad: input must be rank 5 but got rank ${u.rank}.`),Sn("avgPool3dGrad",r,o);const p=A.runKernel(xh,{dy:l,input:u},{filterSize:e,strides:s,pad:r,dimRoundingMode:o});return c?F(p,[p.shape[1],p.shape[2],p.shape[3],p.shape[4]]):p}}),C2={kernelName:gl,inputsToSave:["x"],gradFunc:(n,t,e)=>{const[s]=t,{filterSize:r,strides:o,pad:a,dimRoundingMode:i}=e;return{x:()=>N2(n,s,r,o,a,i)}}},T2=_({avgPoolGrad_:function k2(n,t,e,s,r){const o=N(n,"dy","avgPoolGrad"),a=N(t,"input","avgPoolGrad");I(a.rank===o.rank,()=>`Rank of input (${a.rank}) does not match rank of dy (${o.rank})`);let i=a,l=o,u=!1;3===a.rank&&(u=!0,i=F(a,[1,a.shape[0],a.shape[1],a.shape[2]]),l=F(o,[1,o.shape[0],o.shape[1],o.shape[2]])),I(4===l.rank,()=>`Error in avgPoolGrad: dy must be rank 4 but got rank ${l.rank}.`),I(4===i.rank,()=>`Error in avgPoolGrad: input must be rank 4 but got rank ${i.rank}.`);const d=A.runKernel(yh,{dy:l,input:i},{filterSize:e,strides:s,pad:r});return u?F(d,[d.shape[1],d.shape[2],d.shape[3]]):d}}),$2={kernelName:ml,inputsToSave:["x"],gradFunc:(n,t,e)=>{const[s]=t,{filterSize:r,strides:o,pad:a}=e;return{x:()=>T2(n,s,r,o,a)}}},_2={kernelName:yl,inputsToSave:["a","b"],gradFunc:(n,t,e)=>{const[s,r]=t,{transposeA:o,transposeB:a}=e;return o||a?!o&&a?{a:()=>Ke(n,r,!1,!1),b:()=>Ke(n,s,!0,!1)}:o&&!a?{a:()=>Ke(r,n,!1,!0),b:()=>Ke(s,n,!1,!1)}:{a:()=>Ke(r,n,!0,!0),b:()=>Ke(n,s,!0,!0)}:{a:()=>Ke(n,r,!1,!0),b:()=>Ke(s,n,!0,!1)}}},E2={kernelName:xl,gradFunc:(n,t,e)=>{const{blockShape:s,crops:r}=e;return{x:()=>Bu(n,s,r)}}},A2={kernelName:"BroadcastTo",gradFunc:(n,t,e)=>{const r=e.inputShape,o=e.shape,a=Array.from(o);for(let l=r.length-1;l>=0;l--)if(r[l]===o[l])a[l]=1;else if(1!==r[l])throw new Error(`broadcastTo(): [${r}] cannot be broadcast to [${o}].`);const i=[];for(let l=0;l<a.length;l++)a[l]>1&&i.push(l);return{x:()=>ve(n,i,!0)}}},R2={kernelName:Ta,gradFunc:n=>({x:()=>n.clone()})},D2={kernelName:$a,gradFunc:n=>({x:()=>Ye(n)})},F2={kernelName:_a,inputsToSave:["x"],gradFunc:(n,t,e)=>{const[s]=t,{clipValueMin:r,clipValueMax:o}=e;return{x:()=>fn(Ds(Ir(s,r),eo(s,o)),n,Ye(n))}}},O2={kernelName:wl,inputsToSave:["x"],gradFunc:bb.gradFunc},L2={kernelName:vl,saveAllInputs:!0,gradFunc:(n,t,e)=>{const s=t.map(l=>l.shape),{axis:r}=e,o=Ge(r,t[0].shape)[0],a=s.map(l=>l[o]);return Ln(n,a,o).map(l=>()=>l)}},P2={kernelName:Sl,inputsToSave:["x","filter"],gradFunc:(n,t,e)=>{const[s,r]=t,{dilations:o,strides:a,pad:i,dataFormat:l}=e;return I(wr(o),()=>`Error in gradient of conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${o}'`),{x:()=>mp(s.shape,n,r,a,i,l),filter:()=>Zp(s,n,r.shape,a,i,l)}}},z2={kernelName:Il,inputsToSave:["dy","filter"],gradFunc:(n,t,e)=>{const[s,r]=t,{strides:o,pad:a,dataFormat:i,dimRoundingMode:l}=e;return{dy:()=>vr(n,r,o,a,i,1,l),filter:()=>Zp(n,s,r.shape,o,a,i,l)}}},B2=_({conv3DBackpropFilter_:function M2(n,t,e,s,r){let o=n;4===n.rank&&(o=F(n,[1,n.shape[0],n.shape[1],n.shape[2],n.shape[3]]));let a=t;return 4===a.rank&&(a=F(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]])),I(5===o.rank,()=>`Error in conv3dDerFilter: input must be rank 5, but got shape ${o.shape}.`),I(5===a.rank,()=>`Error in conv3dDerFilter: dy must be rank 5, but got shape ${a.shape}.`),I(5===e.length,()=>`Error in conv3dDerFilter: filterShape must be length 5, but got ${e}.`),I(o.shape[4]===e[3],()=>`Error in conv3dDerFilter: depth of input ${o.shape[4]}) must match input depth in filter (${e[3]}.`),I(a.shape[4]===e[4],()=>`Error in conv3dDerFilter: depth of dy (${a.shape[4]}) must match output depth for filter (${e[4]}).`),A.runKernel(Ih,{x:o,dy:a},{strides:s,pad:r,filterShape:e})}}),V2={kernelName:Nl,inputsToSave:["x","filter"],gradFunc:(n,t,e)=>{const{dilations:s,strides:r,pad:o}=e;I(wr(s),()=>`Error in gradient of conv3D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${s}'`);const[a,i]=t;return{x:()=>sx(a.shape,n,i,r,o),filter:()=>B2(a,n,i.shape,r,o)}}},W2={kernelName:Ea,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>D(wt(Lp(he(e,"float32"))),n)}}},U2={kernelName:Aa,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>D(Pp(he(e,"float32")),n)}}},G2={kernelName:Cl,inputsToSave:["x"],gradFunc:(n,t,e)=>{const[s]=t,{axis:r,exclusive:o,reverse:a}=e;return{x:()=>{const i=kt([r],s.rank);let l=xp(n,r,o,!a);return null!=i&&(l=Je(l,i)),l}}}},H2={kernelName:kl,inputsToSave:["x","filter"],gradFunc:(n,t,e)=>{const{dilations:s,strides:r,pad:o,dimRoundingMode:a}=e,i=null==s?[1,1]:s;I(wr(i),()=>`Error in gradient of depthwiseConv2dNative: dilation rates greater than 1 are not yet supported. Got dilations '${i}'`);const[l,u]=t;return I(4===l.rank,()=>`Error in gradient of depthwiseConv2dNative: input must be rank 4, but got rank ${l.rank}.`),I(4===u.rank,()=>`Error in gradient of depthwiseConv2dNative: filter must be rank 4, but got rank ${u.rank}.`),I(l.shape[3]===u.shape[2],()=>`Error in gradient of depthwiseConv2d: number of input channels (${l.shape[3]}) must match the inChannels dimension in filter ${u.shape[2]}.`),I(an(r,i),()=>`Error in gradient of depthwiseConv2d: Either strides or dilations must be  1. Got strides ${r} and dilations '${i}'.`),Sn("depthwiseConv2d",o,a),{x:()=>zx(l.shape,n,u,r,o,i,a),filter:()=>Px(l,n,u.shape,r,o,i,a)}}},j2={kernelName:Tl,inputsToSave:["x","filter"],gradFunc:(n,t,e)=>{const[s,r]=t,o={x:s,filter:r,dy:n},a={x:s,filter:r,dy:n};return{x:()=>A.runKernel(Rh,o,e),filter:()=>A.runKernel(Dh,a,e)}}},K2={kernelName:Da,outputsToSave:[!0],gradFunc:(n,t)=>{const[e]=t,s={dy:n,y:e};return{x:()=>A.runKernel(Lh,s)}}},q2={kernelName:Fa,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t,s=D(Hn(wt(dt(e))),2/Math.sqrt(Math.PI));return{x:()=>D(n,s)}}},X2={kernelName:Oa,outputsToSave:[!0],gradFunc:(n,t)=>{const[e]=t;return{x:()=>D(n,e)}}},Z2={kernelName:_l,inputsToSave:["input"],gradFunc:(n,t)=>{const[e]=t;return{input:()=>F(n,e.shape)}}},Y2={kernelName:La,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>D(n,Hn(e))}}},Q2={kernelName:Pa,gradFunc:n=>({x:()=>Ye(n)})},J2={kernelName:za,inputsToSave:["a","b"],gradFunc:(n,t)=>{const[e,s]=t,r=Le(e.shape,s.shape);return{a:()=>{const i=Ce(n,he(s,"float32")),l=jt(e.shape,r);return l.length>0?F(ve(i,l),e.shape):i},b:()=>{let i=D(n,he(e,"float32"));const l=jt(s.shape,r);l.length>0&&(i=F(ve(i,l),s.shape));const u=dt(s);return wt(Ce(i,he(u,"float32")))}}}},eE={kernelName:El,inputsToSave:["x","mean","variance","scale"],gradFunc:(n,t,e)=>{const{varianceEpsilon:s}=e,[r,o,a,i]=t,l=null==i?$e(1):i,u=jt(o.shape,r.shape),c=[];if(1===o.rank){for(let w=0;w<r.shape.length-1;++w)c.push(r.shape[w]);c.push(1)}const h=be(r,o),d=D(n,l),p=Rp(ee(a,$e(s))),f=D(D(D(p,p),p),$e(-.5));return{x:()=>F(D(D(n,1===o.rank?as(F(p,[1,1,1,o.shape[0]]),c):p),l),r.shape),mean:()=>{let w=D(D(p,$e(-1)),d);return 1===o.rank&&(w=ve(w,u)),F(w,o.shape)},variance:()=>{let w=D(D(f,h),d);return 1===o.rank&&(w=ve(w,u)),F(w,o.shape)},scale:()=>{const w=D(h,p);let S=D(n,w);return 1===o.rank&&(S=ve(S,u)),F(S,o.shape)},offset:()=>{let w=n;return 1===o.rank&&(w=ve(w,u)),F(w,o.shape)}}}},tE={kernelName:Al,inputsToSave:["x","indices"],gradFunc:(n,t,e)=>{const[s,r]=t,{axis:o}=e,a=Ge(o,s.shape)[0];return{x:()=>{const l=s.shape,u=r.size,c=l.slice(0,a),h=c.length,d=l.slice(o,l.length).slice(1),p=d.length,f=wb(0,h),g=wb(h+1,h+1+p),m=vb([c,[u],d]),y=F(n,m),x=F(r,[u]),b=vb([[h],f,g]),w=Je(y,b);let S=Up(w,x,s.shape[a]);const C=Sr(b);return S=Je(S,C),S},indices:()=>r}}};function wb(n,t){const e=[];for(let s=n;s<t;++s)e.push(s);return e}function vb(n){const t=[];for(let e=0;e<n.length;++e)for(let s=0;s<n[e].length;++s)t.push(n[e][s]);return t}const nE={kernelName:Ma,inputsToSave:["a","b"],gradFunc:(n,t)=>{const[e,s]=t;return{a:()=>Ye(e),b:()=>Ye(s)}}},sE={kernelName:Ba,gradFunc:n=>({x:()=>he(n,"float32")})},rE={kernelName:Va,gradFunc:n=>({x:()=>Ye(n)})},oE={kernelName:Wa,gradFunc:n=>({x:()=>Ye(n)})},aE={kernelName:Ua,gradFunc:n=>({x:()=>Ye(n)})},iE={kernelName:Dl,inputsToSave:["x"],gradFunc:(n,t,e)=>{const[s]=t,{alpha:r}=e,o=_n(s,0);return{x:()=>fn(o,n,D(n,r))}}},lE={kernelName:Ha,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>Ce(n,ee(e,1))}}},uE={kernelName:Ga,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>Ce(n,he(e,"float32"))}}},cE={kernelName:"LogSoftmax",inputsToSave:[],outputsToSave:[!0],gradFunc:(n,t,e)=>{const[s]=t,{axis:r}=e;return{logits:()=>{const a=Hn(s);return be(n,D(ve(n,r,!0),a))}}}},dE=_({localResponseNormalizationBackprop_:function hE(n,t,e,s=5,r=1,o=1,a=.5){return A.runKernel(Gh,{x:n,y:t,dy:e},{depthRadius:s,bias:r,alpha:o,beta:a})}}),pE={kernelName:Ml,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(n,t,e)=>{const[s,r]=t,{depthRadius:o,bias:a,alpha:i,beta:l}=e;return{x:()=>dE(s,r,n,o,a,i,l)}}};function Sb(n,t,e,s){return t.rank<e.rank&&(t=F(t,Ot(t.shape,s))),n.rank<e.rank&&(n=F(n,Ot(n.shape,s))),{x:()=>D(n,he(bs(e,t),n.dtype))}}const Ib={kernelName:Bl,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(n,t,e)=>{const s=e,{reductionIndices:r}=s,o=t[0],l=Sb(n,t[1],o,Ge(r,o.shape));return{x:()=>l.x()}}},fE={kernelName:ja,inputsToSave:["a","b"],gradFunc:(n,t)=>{const[e,s]=t;return{a:()=>D(n,he(Ir(e,s),"float32")),b:()=>D(n,he(Ei(e,s),"float32"))}}},gE=_({maxPool3dGrad_:function mE(n,t,e,s,r,o,a){const i=N(n,"dy","maxPool3dGrad"),l=N(t,"input","maxPool3dGrad"),u=N(e,"output","maxPool3dGrad");let c=i,h=l,d=u,p=!1;4===l.rank&&(p=!0,c=F(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]]),h=F(l,[1,l.shape[0],l.shape[1],l.shape[2],l.shape[3]]),d=F(u,[1,u.shape[0],u.shape[1],u.shape[2],u.shape[3]])),I(5===c.rank,()=>`Error in maxPool3dGrad: dy must be rank 5 but got rank ${c.rank}.`),I(5===h.rank,()=>`Error in maxPool3dGrad: input must be rank 5 but got rank ${h.rank}.`),I(5===d.rank,()=>`Error in maxPool3dGrad: output must be rank 5 but got rank ${d.rank}.`),Sn("maxPool3dGrad",o,a);const m=A.runKernel(jh,{dy:c,input:h,output:d},{filterSize:s,strides:r,pad:o,dimRoundingMode:a});return p?F(m,[m.shape[1],m.shape[2],m.shape[3],m.shape[4]]):m}}),yE={kernelName:Wl,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(n,t,e)=>{const[s,r]=t,{filterSize:o,strides:a,pad:i,dimRoundingMode:l}=e;return{x:()=>gE(n,s,r,o,a,i,l)}}},bE=_({maxPoolGrad_:function xE(n,t,e,s,r,o,a){const i=N(n,"dy","maxPoolGrad"),l=N(t,"input","maxPoolGrad"),u=N(e,"output","maxPoolGrad");return I(l.rank===i.rank,()=>`Rank of input (${l.rank}) does not match rank of dy (${i.rank})`),I(4===i.rank,()=>`Error in maxPoolGrad: dy must be rank 4 but got rank ${i.rank}.`),I(4===l.rank,()=>`Error in maxPoolGrad: input must be rank 4 but got rank ${l.rank}.`),Sn("maxPoolGrad",o,a),A.runKernel(Hh,{dy:i,input:l,output:u},{filterSize:s,strides:r,pad:o,dimRoundingMode:a})}}),Nb={kernelName:Yl,inputsToSave:["x"],gradFunc:(n,t,e)=>{const s=t[0],{paddings:r}=e,o=r.map(a=>a[0]);return{x:()=>Qe(n,o,s.shape)}}};const Cb={kernelName:iu,gradFunc:(n,t,e)=>{const{blockShape:s,paddings:r}=e;return{x:()=>Eu(n,s,r)}}},kb={kernelName:lu,gradFunc:(n,t,e)=>{const{axis:s}=e;return{x:()=>Bt(n,s)}}},mA=[bb,d2,p2,f2,m2,g2,y2,x2,b2,w2,v2,S2,C2,$2,_2,E2,A2,R2,D2,F2,O2,L2,z2,P2,V2,W2,U2,G2,H2,j2,{kernelName:Ra,inputsToSave:["a","b"],gradFunc:(n,t)=>{const[e,s]=t,r=Le(e.shape,s.shape);return{a:()=>{const i=Ce(n,he(s,"float32")),l=jt(e.shape,r);return l.length>0?F(ve(i,l),e.shape):i},b:()=>{let i=D(n,he(e,"float32"));const l=jt(s.shape,r);l.length>0&&(i=F(ve(i,l),s.shape));const u=dt(s);return wt(Ce(i,he(u,"float32")))}}}},K2,q2,X2,Z2,Y2,J2,Q2,eE,tE,nE,sE,rE,oE,aE,iE,lE,uE,cE,pE,Ib,Ib,fE,yE,{kernelName:Vl,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(n,t,e)=>{const[s,r]=t,{filterSize:o,strides:a,pad:i}=e;return{x:()=>bE(n,s,r,o,a,i)}}},{kernelName:Ul,inputsToSave:["x"],gradFunc:(n,t,e)=>{const[s]=t,{axis:r}=e,o=Ge(r,s.shape),l=G(nn(s.shape,o)[1]);return{x:()=>{const c=s.shape.slice();o.forEach(p=>{c[p]=1});const h=F(n,c);return Ce(D(h,Kn(s.shape,"float32")),l)}}}},{kernelName:Gl,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(n,t,e)=>{const s=e,{axis:r}=s,[o,a]=t,l=Sb(n,a,o,Ge(r,o.shape));return{x:()=>l.x()}}},{kernelName:Ka,inputsToSave:["a","b"],gradFunc:(n,t)=>{const[e,s]=t;return{a:()=>D(n,he(eo(e,s),"float32")),b:()=>D(n,he(_n(e,s),"float32"))}}},{kernelName:Hl,inputsToSave:["x"],gradFunc:(n,t,e)=>{const s=t[0],{paddings:r}=e,o=r.map(a=>a[0]);return{x:()=>Qe(n,o,s.shape)}}},{kernelName:qa,inputsToSave:["a","b"],gradFunc:(n,t)=>{const[e,s]=t,r=Le(e.shape,s.shape);return{a:()=>{const i=jt(e.shape,r);return i.length>0?F(ve(n,i),e.shape):n},b:()=>{const i=D(n,wt($i(Ce(e,s)))),l=jt(s.shape,r);return l.length>0?F(ve(i,l),s.shape):i}}}},{kernelName:Xa,inputsToSave:["a","b"],gradFunc:(n,t)=>{const[e,s]=t,r=Le(e.shape,s.shape);return{a:()=>{const i=D(n,he(s,"float32")),l=jt(e.shape,r);return l.length>0?F(ve(i,l),e.shape):i},b:()=>{const i=D(n,he(e,"float32")),l=jt(s.shape,r);return l.length>0?F(ve(i,l),s.shape):i}}}},{kernelName:jl,gradFunc:n=>({x:()=>wt(n)})},{kernelName:Xl,inputsToSave:["indices"],gradFunc:(n,t)=>{const e=t[0];return{indices:()=>Kt(e.shape,"float32")}}},{kernelName:ql,gradFunc:n=>({x:()=>Ye(n)})},{kernelName:Zl,saveAllInputs:!0,gradFunc:(n,t,e)=>{const{axis:s}=e;return ls(n,s).map(o=>()=>o)}},Nb,Nb,{kernelName:Za,inputsToSave:["a","b"],outputsToSave:[!0],gradFunc:(n,t)=>{const[e,s,r]=t,o=e,a=s,i=Le(o.shape,a.shape);return{a:()=>{const c=he(a,"float32");let h=D(n,D(c,xr(o,be(c,$e(1)))));const d=jt(o.shape,i);return d.length>0&&(h=ve(h,d)),F(h,o.shape)},b:()=>{const c=_n(o,0),h=fn(c,jn(o),Ye(o));let d=D(n,D(r,h));const p=jt(a.shape,i);return p.length>0&&(d=ve(d,p)),F(d,a.shape)}}}},{kernelName:Ql,inputsToSave:["x","alpha"],gradFunc:(n,t)=>{const[e,s]=t,r=_n(e,0);return{x:()=>fn(r,n,D(n,s)),alpha:()=>{let o=fn(r,Ye(n),D(n,e));const a=jt(s.shape,n.shape);return a.length>0&&(o=ve(o,a)),F(o,s.shape)}}}},{kernelName:Jl,inputsToSave:["x"],gradFunc:(n,t,e)=>{const[s]=t,{axis:r}=e;let o=[];return o=null==r?s.shape.map((a,i)=>i):"number"==typeof r?[r]:r,{x:()=>function FE(n,t,e){const s=n.shape.length,r=s-e.length,o=kt(e,s);let a=n;null!=o&&(a=Je(n,o));const i=a.shape.slice(),u=i.splice(s-e.length,e.length).reduce((d,p)=>d*p,1);i.push(u);let h=function DE(n,t,e){const s=n.shape.slice();s[e]=1;const r=F(t,s),o=Ru(n,e,!0,!1),a=Ru(n,e,!0,!0),i=D(o,a);return D(r,i)}(a.reshape(i),t,r);if(h=h.reshape(a.shape),null!=o){const d=Sr(o);h=Je(h,d)}return h}(s,n,o)}}},{kernelName:Ya,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>Ce(n,wt(dt(e)))}}},{kernelName:Ja,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t,s=D(eo(e,6),qo(e));return{x:()=>D(n,he(s,"float32"))}}},{kernelName:Qa,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>D(n,he(qo(e),"float32"))}}},{kernelName:eu,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>F(n,e.shape)}}},{kernelName:nu,inputsToSave:["images"],gradFunc:(n,t,e)=>{const[s]=t,r={dy:n,images:s};return{images:()=>A.runKernel(rd,r,e)}}},{kernelName:tu,inputsToSave:["images"],gradFunc:(n,t,e)=>{const[s]=t,r={dy:n,images:s};return{images:()=>A.runKernel(sd,r,e)}}},{kernelName:su,gradFunc:(n,t,e)=>{const{dims:s}=e,r=Ge(s,n.shape);return{x:()=>is(n,r)}}},{kernelName:ei,gradFunc:n=>({x:()=>Ye(n)})},{kernelName:ti,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>wt(Ce(n,D(xr(e,1.5),2)))}}},{kernelName:ru,inputsToSave:["condition"],gradFunc:(n,t)=>{const[e]=t;return{condition:()=>he(Ye(e),"float32"),t:()=>D(n,he(e,n.dtype)),e:()=>D(n,he(Lu(e),n.dtype))}}},{kernelName:ni,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>{const s=_n(e,$e(0)),r=$e(Ju),o=$e(ec),a=D(n,o),i=D(D(n,r),Hn(he(e,"float32")));return fn(s,a,i)}}}},{kernelName:ai,outputsToSave:[!0],gradFunc:(n,t)=>{const[e]=t;return{x:()=>D(n,D(e,be($e(1),e)))}}},{kernelName:oi,gradFunc:n=>({x:()=>Ye(n)})},{kernelName:si,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>D(Au(he(e,"float32")),n)}}},{kernelName:ri,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>D(yp(he(e,"float32")),n)}}},{kernelName:ou,inputsToSave:["x"],gradFunc:(n,t,e)=>{const[s]=t,{begin:r,size:o}=e,a=s.shape,[i,l]=Tu(s,r,o),u=[];for(let c=0;c<n.rank;c++)u.push([i[c],a[c]-i[c]-l[c]]);return{x:()=>Nr(n,u)}}},{kernelName:uu,outputsToSave:[!0],gradFunc:(n,t,e)=>{const[s]=t,{dim:r}=e,a=D(n,s);return{logits:()=>be(a,D(ve(a,[r],!0),s))}}},{kernelName:ii,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>D(n,Rs(e))}}},Cb,Cb,kb,kb,{kernelName:li,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>Ce(n,D(pn(he(e,"float32")),2))}}},{kernelName:ui,inputsToSave:["a","b"],gradFunc:(n,t)=>{const[e,s]=t,r=$e(2);return{a:()=>D(n,D(r,be(e,s))),b:()=>D(n,D(r,be(s,e)))}}},{kernelName:pd,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>D(n,D(he(e,"float32"),2))}}},{kernelName:fi,gradFunc:n=>({x:()=>Ye(n)})},{kernelName:ci,inputsToSave:["a","b"],gradFunc:(n,t)=>{const[e,s]=t,r=Le(e.shape,s.shape);return{a:()=>{let i=n;const l=jt(e.shape,r);return l.length>0&&(i=ve(i,l)),F(i,e.shape)},b:()=>{let i=n;const l=jt(s.shape,r);return l.length>0&&(i=ve(i,l)),F(wt(i),s.shape)}}}},{kernelName:au,inputsToSave:["x"],gradFunc:(n,t,e)=>{const[s]=t,r=s.shape.slice(),{axis:o}=e;Ge(o,s.shape).forEach(u=>{r[u]=1});const i=F(n,r),l=D(i,Kn(s.shape,"float32"));return{x:()=>l}}},{kernelName:hi,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>Ce(n,dt(Au(e)))}}},{kernelName:di,outputsToSave:[!0],gradFunc:(n,t)=>{const[e]=t;return{x:()=>D(be($e(1),dt(e)),n)}}},{kernelName:pi,inputsToSave:["x"],gradFunc:(n,t,e)=>{const[s]=t,{reps:r}=e;return{x:()=>{let a=Ye(s);if(1===s.rank)for(let i=0;i<r[0];++i)a=ee(a,Qe(n,[i*s.shape[0]],[s.shape[0]]));else if(2===s.rank)for(let i=0;i<r[0];++i)for(let l=0;l<r[1];++l)a=ee(a,Qe(n,[i*s.shape[0],l*s.shape[1]],[s.shape[0],s.shape[1]]));else if(3===s.rank)for(let i=0;i<r[0];++i)for(let l=0;l<r[1];++l)for(let u=0;u<r[2];++u)a=ee(a,Qe(n,[i*s.shape[0],l*s.shape[1],u*s.shape[2]],[s.shape[0],s.shape[1],s.shape[2]]));else{if(4!==s.rank)throw new Error(`Gradient for tile operation is not implemented for rank-${s.rank} tensors yet.`);for(let i=0;i<r[0];++i)for(let l=0;l<r[1];++l)for(let u=0;u<r[2];++u)for(let c=0;c<r[3];++c)a=ee(a,Qe(n,[i*s.shape[0],l*s.shape[1],u*s.shape[2],c*s.shape[3]],[s.shape[0],s.shape[1],s.shape[2],s.shape[3]]))}return a}}}},{kernelName:Ao,gradFunc:(n,t,e)=>{const s=e,{perm:r}=s,o=Sr(r);return{x:()=>Je(n,o)}}},{kernelName:hu,gradFunc:(n,t,e)=>{const s=e,{axis:r}=s;return{value:()=>Xn(n,r)}}},{kernelName:du,inputsToSave:["segmentIds"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>function pA(n,t){const e=xs(t,Ye(t)),s=_i(n,e);let r=Ir(t,$e(0,"int32"));const o=s.rank-r.rank;for(let i=0;i<o;++i)r=In(r,i+1);r=Ds(r,Kn(s.shape,"bool"));const a=Ye(s);return fn(r,s,a)}(n,e)}}},{kernelName:pu,gradFunc:n=>({x:()=>Ye(n)})}];for(const n of mA)bS(n);q().prototype.abs=function(){return this.throwIfDisposed(),Ht(this)},q().prototype.acos=function(){return this.throwIfDisposed(),zy(this)},q().prototype.acosh=function(){return this.throwIfDisposed(),My(this)},q().prototype.add=function(n){return this.throwIfDisposed(),ee(this,n)},q().prototype.all=function(n,t){return this.throwIfDisposed(),hp(this,n,t)},q().prototype.any=function(n,t){return this.throwIfDisposed(),$u(this,n,t)},q().prototype.argMax=function(n){return this.throwIfDisposed(),Qr(this,n)},q().prototype.argMin=function(n){return this.throwIfDisposed(),By(this,n)},q().prototype.asScalar=function(){return this.throwIfDisposed(),I(1===this.size,()=>"The array must have only 1 element."),F(this,[])},q().prototype.asType=function(n){return this.throwIfDisposed(),he(this,n)},q().prototype.as1D=function(){return this.throwIfDisposed(),F(this,[this.size])},q().prototype.as2D=function(n,t){return this.throwIfDisposed(),F(this,[n,t])},q().prototype.as3D=function(n,t,e){return this.throwIfDisposed(),F(this,[n,t,e])},q().prototype.as4D=function(n,t,e,s){return this.throwIfDisposed(),F(this,[n,t,e,s])},q().prototype.as5D=function(n,t,e,s,r){return this.throwIfDisposed(),F(this,[n,t,e,s,r])},q().prototype.asin=function(){return this.throwIfDisposed(),Vy(this)},q().prototype.asinh=function(){return this.throwIfDisposed(),Wy(this)},q().prototype.atan=function(){return this.throwIfDisposed(),Uy(this)},q().prototype.atan2=function(n){return this.throwIfDisposed(),Gy(this,n)},q().prototype.atanh=function(){return this.throwIfDisposed(),Hy(this)},q().prototype.avgPool=function(n,t,e,s){return this.throwIfDisposed(),_u(this,n,t,e,s)},q().prototype.batchToSpaceND=function(n,t){return this.throwIfDisposed(),Eu(this,n,t)},q().prototype.batchNorm=function(n,t,e,s,r){return this.throwIfDisposed(),Ii(this,n,t,e,s,r)},q().prototype.broadcastTo=function(n){return this.throwIfDisposed(),Uo(this,n)},q().prototype.cast=function(n){return this.throwIfDisposed(),he(this,n)},q().prototype.ceil=function(){return this.throwIfDisposed(),Yy(this)},q().prototype.clipByValue=function(n,t){return this.throwIfDisposed(),On(this,n,t)},q().prototype.concat=function(n,t){return this.throwIfDisposed(),n instanceof mt&&(n=[n]),Bt([this,...n],t)},q().prototype.conv1d=function(n,t,e,s,r,o){return this.throwIfDisposed(),fp(this,n,t,e,s,r,o)},q().prototype.conv2dTranspose=function(n,t,e,s,r){return this.throwIfDisposed(),gp(this,n,t,e,s,r)},q().prototype.conv2d=function(n,t,e,s,r,o){return this.throwIfDisposed(),vr(this,n,t,e,s,r,o)},q().prototype.cos=function(){return this.throwIfDisposed(),Au(this)},q().prototype.cosh=function(){return this.throwIfDisposed(),yp(this)},q().prototype.cumprod=function(n,t,e){return this.throwIfDisposed(),Ru(this,n,t,e)},q().prototype.cumsum=function(n,t,e){return this.throwIfDisposed(),xp(this,n,t,e)},q().prototype.depthToSpace=function(n,t){return this.throwIfDisposed(),ox(this,n,t)},q().prototype.depthwiseConv2d=function(n,t,e,s,r,o){return this.throwIfDisposed(),Ni(this,n,t,e,s,r,o)},q().prototype.dilation2d=function(n,t,e,s,r){return this.throwIfDisposed(),ax(this,n,t,e,s,r)},q().prototype.divNoNan=function(n){return this.throwIfDisposed(),ix(this,n)},q().prototype.div=function(n){return this.throwIfDisposed(),Ce(this,n)},q().prototype.dot=function(n){return this.throwIfDisposed(),lx(this,n)},q().prototype.elu=function(){return this.throwIfDisposed(),Ci(this)},q().prototype.equal=function(n){return this.throwIfDisposed(),bs(this,n)},q().prototype.erf=function(){return this.throwIfDisposed(),ux(this)},q().prototype.euclideanNorm=function(n,t){return this.throwIfDisposed(),dx(this,n,t)},q().prototype.exp=function(){return this.throwIfDisposed(),Hn(this)},q().prototype.expandDims=function(n){return this.throwIfDisposed(),In(this,n)},q().prototype.expm1=function(){return this.throwIfDisposed(),px(this)},q().prototype.fft=function(){return this.throwIfDisposed(),ju(this)},q().prototype.flatten=function(){return this.throwIfDisposed(),F(this,[this.size])},q().prototype.floor=function(){return this.throwIfDisposed(),$i(this)},q().prototype.floorDiv=function(n){return this.throwIfDisposed(),qd(this,n)},q().prototype.gather=function(n,t,e){return this.throwIfDisposed(),_i(this,n,t,e)},q().prototype.greaterEqual=function(n){return this.throwIfDisposed(),Ir(this,n)},q().prototype.greater=function(n){return this.throwIfDisposed(),_n(this,n)},q().prototype.ifft=function(){return this.throwIfDisposed(),Di(this)},q().prototype.irfft=function(){return this.throwIfDisposed(),Mp(this)},q().prototype.isFinite=function(){return this.throwIfDisposed(),fx(this)},q().prototype.isInf=function(){return this.throwIfDisposed(),mx(this)},q().prototype.isNaN=function(){return this.throwIfDisposed(),gx(this)},q().prototype.leakyRelu=function(n){return this.throwIfDisposed(),Fu(this,n)},q().prototype.lessEqual=function(n){return this.throwIfDisposed(),eo(this,n)},q().prototype.less=function(n){return this.throwIfDisposed(),Ei(this,n)},q().prototype.localResponseNormalization=function(n,t,e,s){return this.throwIfDisposed(),yx(this,n,t,e,s)},q().prototype.logSigmoid=function(){return this.throwIfDisposed(),xx(this)},q().prototype.logSoftmax=function(n){return this.throwIfDisposed(),Sp(this,n)},q().prototype.logSumExp=function(n,t){return this.throwIfDisposed(),Ip(this,n,t)},q().prototype.log=function(){return this.throwIfDisposed(),jn(this)},q().prototype.log1p=function(){return this.throwIfDisposed(),Ou(this)},q().prototype.logicalAnd=function(n){return this.throwIfDisposed(),Ds(this,n)},q().prototype.logicalNot=function(){return this.throwIfDisposed(),Lu(this)},q().prototype.logicalOr=function(n){return this.throwIfDisposed(),Np(this,n)},q().prototype.logicalXor=function(n){return this.throwIfDisposed(),bx(this,n)},q().prototype.matMul=function(n,t,e){return this.throwIfDisposed(),Ke(this,n,t,e)},q().prototype.maxPool=function(n,t,e,s){return this.throwIfDisposed(),zu(this,n,t,e,s)},q().prototype.max=function(n,t){return this.throwIfDisposed(),Gn(this,n,t)},q().prototype.maximum=function(n){return this.throwIfDisposed(),xs(this,n)},q().prototype.mean=function(n,t){return this.throwIfDisposed(),Rt(this,n,t)},q().prototype.min=function(n,t){return this.throwIfDisposed(),ki(this,n,t)},q().prototype.minimum=function(n){return this.throwIfDisposed(),to(this,n)},q().prototype.mirrorPad=function(n,t){return this.throwIfDisposed(),vx(this,n,t)},q().prototype.mod=function(n){return this.throwIfDisposed(),Sx(this,n)},q().prototype.mul=function(n){return this.throwIfDisposed(),D(this,n)},q().prototype.neg=function(){return this.throwIfDisposed(),wt(this)},q().prototype.norm=function(n,t,e){return this.throwIfDisposed(),Ti(this,n,t,e)},q().prototype.notEqual=function(n){return this.throwIfDisposed(),jo(this,n)},q().prototype.oneHot=function(n,t=1,e=0){return this.throwIfDisposed(),kp(this,n,t,e)},q().prototype.onesLike=function(){return this.throwIfDisposed(),qn(this)},q().prototype.pad=function(n,t){return this.throwIfDisposed(),Nr(this,n,t)},q().prototype.pool=function(n,t,e,s,r,o){return this.throwIfDisposed(),Ix(this,n,t,e,s,r,o)},q().prototype.pow=function(n){return this.throwIfDisposed(),xr(this,n)},q().prototype.prelu=function(n){return this.throwIfDisposed(),Vu(this,n)},q().prototype.prod=function(n,t){return this.throwIfDisposed(),Nx(this,n,t)},q().prototype.reciprocal=function(){return this.throwIfDisposed(),Cx(this)},q().prototype.relu=function(){return this.throwIfDisposed(),Fs(this)},q().prototype.relu6=function(){return this.throwIfDisposed(),Ep(this)},q().prototype.reshapeAs=function(n){return this.throwIfDisposed(),F(this,n.shape)},q().prototype.reshape=function(n){return this.throwIfDisposed(),F(this,n)},q().prototype.resizeBilinear=function(n,t,e){return this.throwIfDisposed(),Wx(this,n,t,e)},q().prototype.resizeNearestNeighbor=function(n,t,e){return this.throwIfDisposed(),Ux(this,n,t,e)},q().prototype.reverse=function(n){return this.throwIfDisposed(),is(this,n)},q().prototype.rfft=function(){return this.throwIfDisposed(),Ku(this)},q().prototype.round=function(){return this.throwIfDisposed(),Ap(this)},q().prototype.rsqrt=function(){return this.throwIfDisposed(),Rp(this)},q().prototype.selu=function(){return this.throwIfDisposed(),Dp(this)},q().prototype.separableConv2d=function(n,t,e,s,r,o){return this.throwIfDisposed(),Fp(this,n,t,e,s,r,o)},q().prototype.sigmoid=function(){return this.throwIfDisposed(),Rs(this)},q().prototype.sign=function(){return this.throwIfDisposed(),kx(this)},q().prototype.sin=function(){return this.throwIfDisposed(),Lp(this)},q().prototype.sinh=function(){return this.throwIfDisposed(),Pp(this)},q().prototype.slice=function(n,t){return this.throwIfDisposed(),Qe(this,n,t)},q().prototype.softmax=function(n){return this.throwIfDisposed(),Hu(this,n)},q().prototype.softplus=function(){return this.throwIfDisposed(),Ho(this)},q().prototype.spaceToBatchND=function(n,t){return this.throwIfDisposed(),Bu(this,n,t)},q().prototype.split=function(n,t){return this.throwIfDisposed(),Ln(this,n,t)},q().prototype.sqrt=function(){return this.throwIfDisposed(),pn(this)},q().prototype.square=function(){return this.throwIfDisposed(),dt(this)},q().prototype.squaredDifference=function(n){return this.throwIfDisposed(),Bp(this,n)},q().prototype.squeeze=function(n){return this.throwIfDisposed(),so(this,n)},q().prototype.stack=function(n,t){this.throwIfDisposed();const e=n instanceof mt?[this,n]:[this,...n];return Xn(e,t)},q().prototype.step=function(n){return this.throwIfDisposed(),qo(this,n)},q().prototype.stridedSlice=function(n,t,e,s,r,o,a,i){return this.throwIfDisposed(),Tx(this,n,t,e,s,r,o,a,i)},q().prototype.sub=function(n){return this.throwIfDisposed(),be(this,n)},q().prototype.sum=function(n,t){return this.throwIfDisposed(),ve(this,n,t)},q().prototype.tan=function(){return this.throwIfDisposed(),$x(this)},q().prototype.tanh=function(){return this.throwIfDisposed(),Wo(this)},q().prototype.tile=function(n){return this.throwIfDisposed(),as(this,n)},q().prototype.toBool=function(){return this.throwIfDisposed(),he(this,"bool")},q().prototype.toFloat=function(){return this.throwIfDisposed(),he(this,"float32")},q().prototype.toInt=function(){return this.throwIfDisposed(),he(this,"int32")},q().prototype.topk=function(n,t){return this.throwIfDisposed(),Ex(this,n,t)},q().prototype.transpose=function(n){return this.throwIfDisposed(),Je(this,n)},q().prototype.unique=function(n){return this.throwIfDisposed(),Ax(this,n)},q().prototype.unsortedSegmentSum=function(n,t){return this.throwIfDisposed(),Up(this,n,t)},q().prototype.unstack=function(n){return this.throwIfDisposed(),ls(this,n)},q().prototype.where=function(n,t){return this.throwIfDisposed(),fn(n,this,t)},q().prototype.zerosLike=function(){return this.throwIfDisposed(),Ye(this)};class zs extends Error{constructor(t){super(t),Object.setPrototypeOf(this,zs.prototype)}}class us extends Error{constructor(t){super(t),Object.setPrototypeOf(this,us.prototype)}}class O extends Error{constructor(t){super(t),Object.setPrototypeOf(this,O.prototype)}}class Pe extends Error{constructor(t){super(t),Object.setPrototypeOf(this,Pe.prototype)}}class _f extends Error{constructor(t){super(t),Object.setPrototypeOf(this,_f.prototype)}}class $b{constructor(t){this.maxEntries=t||100,this.cache=new Map}get(t){let e;return this.cache.has(t)&&(e=this.cache.get(t),this.cache.delete(t),this.cache.set(t,e)),e}put(t,e){if(this.cache.has(t))this.cache.delete(t);else if(this.cache.size>=this.maxEntries){const s=this.cache.keys().next().value;this.cache.delete(s)}this.cache.set(t,e)}getMaxEntries(){return this.maxEntries}setMaxEntries(t){if(t<0)throw new Error(`The maxEntries of LRU caches must be at least 0, but got ${t}.`);if(this.maxEntries>t)for(let e=0;e<this.maxEntries-t;e++){const s=this.cache.keys().next().value;this.cache.delete(s)}this.maxEntries=t}}function oo(n,t){if(Array.isArray(n)){let e=[];for(let s=0;s<t;s++)e=e.concat(n);return e}{const e=new Array(t);return e.fill(n),e}}function Zn(n,t){if(!n)throw new _f(t)}function _b(n,t){let e=0;for(const s of n)s===t&&e++;return e}function En(n){return 1===n.length?n[0]:n}function gt(n){return Array.isArray(n)?n:[n]}function er(n){const e=n.replace(/(.)([A-Z][a-z0-9]+)/g,"$1_$2").replace(/([a-z])([A-Z])/g,"$1_$2").toLowerCase();return"_"!==e[0]?e:"private"+e}function ao(n){return n.length<=1||-1===n.indexOf("_")?n:n.replace(/[_]+(\w|$)/g,(t,e)=>e.toUpperCase())}let cs={};function Ef(n){if(null==n)return null;const t={};return t.className=n.getClassName(),t.config=n.getConfig(),t}function Af(n){if(null!=n&&"object"==typeof n)if(Array.isArray(n))n.forEach(t=>Af(t));else{const t=Object.keys(n);for(const e of t){const s=n[e];null!=s&&"object"==typeof s&&(Array.isArray(s)||"ndarray"!==s.type||"number"!=typeof s.value?Af(s):n[e]=s.value)}}}function zi(n,t={},e={},s="object",r=!1){if("string"==typeof n){let a;if(n in e)a=e[n];else if(n in cs)a=cs[n];else if(a=t[n],null==a)throw new O(`Unknown ${s}: ${n}. This may be due to one of the following reasons:\n1. The ${s} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.\n2. The custom ${s} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);return a}{const o=n;if(null==o.className||null==o.config)throw new O(`${s}: Improper config format: ${JSON.stringify(o)}.\n'className' and 'config' must set.`);const a=o.className;let i,l;if(a in e?[i,l]=e[a]:a in cs?[i,l]=cs.className:a in t&&([i,l]=t[a]),null==i)throw new O(`Unknown ${s}: ${a}. This may be due to one of the following reasons:\n1. The ${s} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.\n2. The custom ${s} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);if(null!=l){const u={};for(const p of Object.keys(cs))u[p]=cs[p];for(const p of Object.keys(e))u[p]=e[p];o.config.customObjects=u;const h=Object.assign({},cs);for(const p of Object.keys(e))cs[p]=e[p];Af(o.config);const d=l(i,o.config,e,r);return cs=Object.assign({},h),d}{const u=Object.assign({},cs);for(const h of Object.keys(e))cs[h]=e[h];const c=new i(o.config);return cs=Object.assign({},u),c}}}function tc(n,t){return-1*function gA(n,t){return n<t?-1:n>t?1:0}(n,t)}function Cr(n){if(null==n)return n;const t=[];for(const e of n)-1===t.indexOf(e)&&t.push(e);return t}function yA(n){if(null==n)throw new O(`Invalid value in obj: ${JSON.stringify(n)}`);for(const t in n)if(n.hasOwnProperty(t))return!1;return!0}function lo(n,t,e){if(null!=e&&n.indexOf(e)<0)throw new O(`${e} is not a valid ${t}.  Valid values are ${n} or null/undefined.`)}function Rf(n,t,e=0,s=1/0){return Zn(e>=0),Zn(s>=e),Array.isArray(n)&&n.length>=e&&n.length<=s&&n.every(r=>typeof r===t)}function sn(n,t){Array.isArray(n)?(I(n.length>0,()=>`${t} is unexpectedly an empty array.`),n.forEach((e,s)=>sn(e,`element ${s+1} of ${t}`))):I(Number.isInteger(n)&&n>0,()=>`Expected ${t} to be a positive integer, but got ${Eb(n)}.`)}function Eb(n){return null===n?"null":Array.isArray(n)?"["+n.map(t=>Eb(t)).join(",")+"]":"string"==typeof n?`"${n}"`:`${n}`}function Ab(n){return"relu"===n?"relu":"linear"===n?"linear":"elu"===n?"elu":null}let bA=0;function Rb(){return bA++}const nc={};function sc(n=""){return n in nc||(nc[n]=0),nc[n]+=1,n+nc[n].toString()}const wA=["channelsFirst","channelsLast"],vA=["nearest","bilinear"],SA=["valid","same","causal"],IA=["max","avg"],NA=["sum","mul","concat","ave"],Yo=new Map;function Pt(n){lo(wA,"DataFormat",n)}function Yn(n){lo(SA,"PaddingMode",n)}function Db(n){lo(IA,"PoolMode",n)}const Mi=[];function uo(n,t){Mi.push(n);try{const e=t();return Mi.pop(),e}catch(e){throw Mi.pop(),e}}function Ob(n){if(!Pb(n))throw new Error("Not a valid tensor name: '"+n+"'");return function kA(){return 0===Mi.length?"":Mi.join("/")+"/"}()+n}function Lb(n){if(!Pb(n))throw new Error("Not a valid tensor name: '"+n+"'");Yo.has(n)||Yo.set(n,0);const t=Yo.get(n);if(Yo.set(n,Yo.get(n)+1),t>0){const e=`${n}_${t}`;return Yo.set(e,1),e}return n}const TA=new RegExp(/^[A-Za-z0-9][-A-Za-z0-9\._\/]*$/);function Pb(n){return!!n.match(TA)}function $A(n){return n===parseInt(n.toString(),10)}function kr(n,t,e){null==t&&(t=0),null==e&&(e=n.length);let s=1;for(let r=t;r<e;++r)s*=n[r];return s}function Qo(n){if(0===n.length)return Number.NaN;let t=Number.POSITIVE_INFINITY;for(let e=0;e<n.length;e++){const s=n[e];s<t&&(t=s)}return t}function Tr(n){if(0===n.length)return Number.NaN;let t=Number.NEGATIVE_INFINITY;for(let e=0;e<n.length;e++){const s=n[e];s>t&&(t=s)}return t}function ws(n,t){if(t<n)throw new O(`end (${t}) < begin (${n}) is forbidden.`);const e=[];for(let s=n;s<t;++s)e.push(s);return e}let rc;function qt(){return null==rc&&(rc=function II(){return A.backend}().epsilon()),rc}function Ms(n,t){return he(n,t)}function Bi(n,t=-1){const e=n.shape.slice();return t<0&&(t=e.length+t+1),e.splice(t,0,1),F(n,e)}function co(n,t,e){return P(()=>{switch(n.rank){case 1:return Uu(n,t,e);case 2:return zp(n,[t,0],[e,n.shape[1]]);case 3:return Gu(n,[t,0,0],[e,n.shape[1],n.shape[2]]);case 4:return Ri(n,[t,0,0,0],[e,n.shape[1],n.shape[2],n.shape[3]]);case 5:return Qe(n,[t,0,0,0,0],[e,n.shape[1],n.shape[2],n.shape[3],n.shape[4]]);case 6:return Qe(n,[t,0,0,0,0,0],[e,n.shape[1],n.shape[2],n.shape[3],n.shape[4],n.shape[5]]);default:throw new O(`sliceAlongFirstAxis() received an unsupported tensor rank: ${n.rank}`)}})}function Df(n,t,e){return P(()=>{switch(n.rank){case 1:return Uu(n,t,e);case 2:return zp(n,[0,t],[n.shape[0],e]);case 3:return Gu(n,[0,0,t],[n.shape[0],n.shape[1],e]);case 4:return Ri(n,[0,0,0,t],[n.shape[0],n.shape[1],n.shape[2],e]);default:throw new O(`sliceAlongLastAxis() received an unsupported tensor rank: ${n.rank}`)}})}function oc(n,t,e,s){return P(()=>{switch(n.rank){case 1:return Uu(n,t,e);case 2:switch(s){case 1:return co(n,t,e);case 2:return Df(n,t,e);default:throw new O(`The axis is not within the rank of the tensor ${s}`)}case 3:switch(s){case 1:return co(n,t,e);case 2:return Gu(n,[0,t,0],[n.shape[0],e,n.shape[2]]);case 3:return Df(n,t,e);default:throw new O(`The axis is not within the rank of the tensor ${s}`)}case 4:switch(s){case 1:return co(n,t,e);case 2:return Ri(n,[0,t,0,0],[n.shape[0],e,n.shape[2],n.shape[3]]);case 3:return Ri(n,[0,0,t,0],[n.shape[0],n.shape[1],e,n.shape[3]]);case 4:return Df(n,t,e);default:throw new O(`The axis is not within the rank of the tensor ${s}`)}default:throw new O(`sliceAlongLastAxis() received an unsupported tensor rank: ${n.rank}`)}})}function Ff(n,t=-1){let e;return t<0&&(e=n[0].rank,t=0!==e?e:0),t===n[0].rank&&(t=-1),Bt(n,t)}function Mb(n,t){switch(n.rank){case 1:return Qy([n,t]);case 2:return Jy([n,t],0);case 3:return ex([n,t],0);case 4:return tx([n,t],0);default:throw new O(`concatAlongFirstAxis() received an unsupported tensor rank: ${n.rank}`)}}function Of(n,t){if(Array.isArray(t)||(t=[t]),n.rank!==t.length)throw new O(`The length of input n (${t.length}) does not match the number of dimensions in input x (${n.rank})`);return as(n,t)}function ac(n,t=0,e=1,s,r){return _p(n,t,e,s,r)}function Bs(n,t,e,s){if(n.rank<2||t.rank<2)throw new Pe(`dot requires both inputs to be rank >= 2 but got x shape = ${n.shape} and y shape = ${t.shape}`);if(t.rank>=3&&n.shape.slice(-1)[0]!==t.shape.slice(-2)[0])throw new Pe(`If rank y >= 3, then the second last dim of y must equal the last dim of x but got x shape = ${n.shape} and  y shape = ${t.shape}`);if(2===n.rank&&2===t.rank)return Yp({a:n,b:t,transposeA:!1,transposeB:!1,bias:s?Lf(n.rank,s,"channelsLast"):null,activation:e});{const r=n.shape.slice(),o=r.pop();n=F(n,[-1,o]);const a=t.shape.slice(),i=a.pop(),l=a.pop(),u=[...a,i],c=Array.from({length:t.rank},(f,g)=>0===g?t.rank-2:g<=t.rank-2?g-1:g);t=F(Je(t,c),[l,-1]);const h=[...r,...u];return F(Yp({a:n,b:t,transposeA:!1,transposeB:!1,bias:s?Lf(n.rank,s,"channelsLast"):null,activation:e}),h)}}function Bb(n,t,e){return P(()=>(t=Array.isArray(t)?mn(t,"int32"):he(t,"int32"),_i(n,t,e)))}function Vi(n){return D(n,n)}function Lf(n,t,e){const s=t.shape;if(1!==t.rank&&t.rank!==n)throw new O(`Unexpected bias dimensions: ${t.rank}; expected it to be 1 or ${n}`);if(5===n){if("channelsFirst"===e)return F(t,1===s.length?[1,s[0],1,1,1]:[1,s[3],s[0],s[1],s[2]]);if("channelsLast"===e)return F(t,1===s.length?[1,1,1,1,s[0]]:[1].concat(s))}else if(4===n){if("channelsFirst"===e)return F(t,1===s.length?[1,s[0],1,1]:[1,s[2],s[0],s[1]]);if("channelsLast"===e)return F(t,1===s.length?[1,1,1,s[0]]:[1].concat(s))}else if(3===n){if("channelsFirst"===e)return F(t,1===s.length?[1,s[0],1]:[1,s[1],s[0]]);if("channelsLast"===e)return F(t,1===s.length?[1,1,s[0]]:[1].concat(s))}else if(n<3)return t;throw new O(`Unsupported input rank by biasAdd: ${t.rank}`)}function Ss(n,t,e){return P(()=>(null==e&&(e="channelsLast"),Pt(e),ee(n,Lf(n.rank,t,e))))}function Vb(n,t,e,s){return P(()=>Fx(n,t,e,s))}function Wi(n,t,e=!1){return e?n():t()}const PA=["fanIn","fanOut","fanAvg"],zA=["normal","uniform","truncatedNormal"];class hs extends zo{fromConfigUsesCustomObjects(){return!1}getConfig(){return{}}}te((()=>{class n extends hs{apply(e,s){return Kt(e,s)}}return n.className="Zeros",n})());let Wb=(()=>{class n extends hs{apply(e,s){return Kn(e,s)}}return n.className="Ones",n})();te(Wb),te((()=>{class n extends hs{constructor(e){if(super(),"object"!=typeof e)throw new O(`Expected argument of type ConstantConfig but got ${e}`);if(void 0===e.value)throw new O(`config must have value set but got ${e}`);this.value=e.value}apply(e,s){return P(()=>D($e(this.value),Kn(e,s)))}getConfig(){return{value:this.value}}}return n.className="Constant",n})()),te((()=>{class n extends hs{constructor(e){super(),this.DEFAULT_MINVAL=-.05,this.DEFAULT_MAXVAL=.05,this.minval=e.minval||this.DEFAULT_MINVAL,this.maxval=e.maxval||this.DEFAULT_MAXVAL,this.seed=e.seed}apply(e,s){return no(e,this.minval,this.maxval,s,this.seed)}getConfig(){return{minval:this.minval,maxval:this.maxval,seed:this.seed}}}return n.className="RandomUniform",n})()),te((()=>{class n extends hs{constructor(e){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=e.mean||this.DEFAULT_MEAN,this.stddev=e.stddev||this.DEFAULT_STDDEV,this.seed=e.seed}apply(e,s){if("float32"!==(s=s||"float32")&&"int32"!==s)throw new Pe(`randomNormal does not support dType ${s}.`);return ac(e,this.mean,this.stddev,s,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}}return n.className="RandomNormal",n})()),te((()=>{class n extends hs{constructor(e){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=e.mean||this.DEFAULT_MEAN,this.stddev=e.stddev||this.DEFAULT_STDDEV,this.seed=e.seed}apply(e,s){if("float32"!==(s=s||"float32")&&"int32"!==s)throw new Pe(`truncatedNormal does not support dType ${s}.`);return Wp(e,this.mean,this.stddev,s,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}}return n.className="TruncatedNormal",n})()),te((()=>{class n extends hs{constructor(e){super(),this.gain=null!=e.gain?e.gain:1}apply(e,s){return P(()=>{if(2!==e.length||e[0]!==e[1])throw new O("Identity matrix initializer can only be used for 2D square matrices.");return D(this.gain,vp(e[0]))})}getConfig(){return{gain:this.gain}}}return n.className="Identity",n})());let Qn=(()=>{class n extends hs{constructor(e){if(super(),e.scale<0)throw new O(`scale must be a positive float. Got: ${e.scale}`);this.scale=null==e.scale?1:e.scale,this.mode=null==e.mode?"fanIn":e.mode,function MA(n){lo(PA,"FanMode",n)}(this.mode),this.distribution=null==e.distribution?"normal":e.distribution,function BA(n){lo(zA,"Distribution",n)}(this.distribution),this.seed=e.seed}apply(e,s){const r=function VA(n,t="channelsLast"){let e,s;if(Pt(t),2===n.length)e=n[0],s=n[1];else if(-1!==[3,4,5].indexOf(n.length)){if("channelsFirst"===t){const r=kr(n,2);e=n[1]*r,s=n[0]*r}else if("channelsLast"===t){const r=kr(n,0,n.length-2);e=n[n.length-2]*r,s=n[n.length-1]*r}}else{const r=kr(n);e=Math.sqrt(r),s=Math.sqrt(r)}return[e,s]}(e),o=r[0],a=r[1];let i=this.scale;if(i/="fanIn"===this.mode?Math.max(1,o):"fanOut"===this.mode?Math.max(1,a):Math.max(1,(o+a)/2),"normal"===this.distribution){const l=Math.sqrt(i);if("float32"!==(s=s||"float32")&&"int32"!==s)throw new Pe(`${this.getClassName()} does not support dType ${s}.`);return Wp(e,0,l,s,this.seed)}{const l=Math.sqrt(3*i);return no(e,-l,l,s,this.seed)}}getConfig(){return{scale:this.scale,mode:this.mode,distribution:this.distribution,seed:this.seed}}}return n.className="VarianceScaling",n})();te(Qn);let Ub=(()=>{class n extends Qn{constructor(e){super({scale:1,mode:"fanAvg",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return Qn.className}}return n.className="GlorotUniform",n})();te(Ub);let Gb=(()=>{class n extends Qn{constructor(e){super({scale:1,mode:"fanAvg",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return Qn.className}}return n.className="GlorotNormal",n})();te(Gb);let Hb=(()=>{class n extends Qn{constructor(e){super({scale:2,mode:"fanIn",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return Qn.className}}return n.className="HeNormal",n})();te(Hb);let jb=(()=>{class n extends Qn{constructor(e){super({scale:2,mode:"fanIn",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return Qn.className}}return n.className="HeUniform",n})();te(jb);let Kb=(()=>{class n extends Qn{constructor(e){super({scale:1,mode:"fanIn",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return Qn.className}}return n.className="LeCunNormal",n})();te(Kb);let qb=(()=>{class n extends Qn{constructor(e){super({scale:1,mode:"fanIn",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return Qn.className}}return n.className="LeCunUniform",n})();te(qb),te((()=>{class n extends hs{constructor(e){super(),this.DEFAULT_GAIN=1,this.ELEMENTS_WARN_SLOW=2e3,this.gain=null==e.gain?this.DEFAULT_GAIN:e.gain,this.seed=e.seed}apply(e,s){return P(()=>{if(e.length<2)throw new Pe("Shape must be at least 2D.");if("int32"!==s&&"float32"!==s&&void 0!==s)throw new TypeError(`Unsupported data type ${s}.`);const r=G(e.slice(0,-1)),o=e[e.length-1],a=r*o;a>this.ELEMENTS_WARN_SLOW&&console.warn(`Orthogonal initializer is being called on a matrix with more than ${this.ELEMENTS_WARN_SLOW} (${a}) elements: Slowness may result.`);const l=ac([Math.max(o,r),Math.min(o,r)],0,1,s,this.seed),u=Hx.qr(l,!1);let c=u[0];const d=u[1].flatten().stridedSlice([0],[Math.min(o,r)*Math.min(o,r)],[Math.min(o,r)+1]);return c=D(c,d.sign()),r<o&&(c=c.transpose()),D($e(this.gain),c.reshape(e))})}getConfig(){return{gain:this.gain,seed:this.seed}}}return n.className="Orthogonal",n})());const Xb={constant:"Constant",glorotNormal:"GlorotNormal",glorotUniform:"GlorotUniform",heNormal:"HeNormal",heUniform:"HeUniform",identity:"Identity",leCunNormal:"LeCunNormal",leCunUniform:"LeCunUniform",ones:"Ones",orthogonal:"Orthogonal",randomNormal:"RandomNormal",randomUniform:"RandomUniform",truncatedNormal:"TruncatedNormal",varianceScaling:"VarianceScaling",zeros:"Zeros"};function Zb(n,t={}){return zi(n,rs.getMap().classNameMap,t,"initializer")}function Tt(n){return Ef(n)}function St(n){if("string"==typeof n){const t=n in Xb?Xb[n]:n;if("GlorotNormal"===t)return new Gb;if("GlorotUniform"===t)return new Ub;if("HeNormal"===t)return new Hb;if("HeUniform"===t)return new jb;if("LeCunNormal"===t)return new Kb;if("LeCunUniform"===t)return new qb;{const e={};return e.className=t,e.config={},Zb(e)}}return n instanceof hs?n:Zb(n)}function Pf(n){return Array.isArray(n)&&Array.isArray(n[0])}function ic(n){return 0===n.length?[]:Array.isArray(n[0])?n:[n]}function De(n){let t;if(Array.isArray(n)){if(1!==n.length)throw new O(`Expected Tensor length to be 1; got ${n.length}`);t=n[0]}else t=n;return t}function nt(n){if(Array.isArray(n)&&Array.isArray(n[0])){if(1===n.length)return n[0];throw new O(`Expected exactly 1 Shape; got ${n.length}`)}return n}function lc(n){let t=0;for(const e of n)t+=0===e.shape.length?1:e.shape.reduce((s,r)=>s*r);return t}const Yb="Variable";class Vs{constructor(t,e="float32",s=Yb,r=!0,o=null){this.dtype=null==e?"float32":e,this.shape=t.shape,this.id=Rb(),this.originalName=Ob(s=null==s?Yb:s),this.name=Lb(this.originalName),this.trainable_=r,this.constraint=o,this.val=Rx(t,this.trainable_,this.name,this.dtype)}read(){return this.assertNotDisposed(),this.val}write(t){return this.assertNotDisposed(),function WA(n,t){if(n.shape.toString()!==t.shape.toString())throw new Error("Shape mismatch: "+JSON.stringify(n.shape)+" vs. "+JSON.stringify(t.shape))}(this.val,t),this.val.id!==t.id&&(this.val.assign(t),null!=this.constraint&&this.val.assign(this.constraint.apply(this.val))),this}dispose(){this.assertNotDisposed(),this.val.dispose()}assertNotDisposed(){if(this.val.isDisposed)throw new Error(`LayersVariable ${this.name} is already disposed.`)}get trainable(){return this.trainable_}set trainable(t){this.trainable_=t,this.val.trainable=t}}function zf(n){return n.map(t=>t.read())}function Mf(n){n.forEach(t=>{t[0].write(t[1])})}class Xt{constructor(t){this.dtype=t.dtype,this.shape=t.shape,this.ndim=null!=t.shape?t.shape.length:t.ndim,this.maxNDim=t.maxNDim,this.minNDim=t.minNDim,this.axes=t.axes||{}}}class Ws{constructor(t,e,s,r,o,a,i){this.dtype=t,this.shape=e,this.sourceLayer=s,this.inputs=r,this.callArgs=o,this.outputTensorIndex=i,this.id=Rb(),null!=a&&(this.originalName=Ob(a),this.name=Lb(this.originalName)),this.rank=e.length}}let UA=0;class uc{constructor(t,e){this.callArgs=e,this.id=UA++,this.outboundLayer=t.outboundLayer,this.inboundLayers=t.inboundLayers,this.nodeIndices=t.nodeIndices,this.tensorIndices=t.tensorIndices,this.inputTensors=t.inputTensors,this.outputTensors=t.outputTensors,this.inputMasks=t.inputMasks,this.outputMasks=t.outputMasks,this.inputShapes=t.inputShapes,this.outputShapes=t.outputShapes;for(const s of t.inboundLayers)null!=s&&s.outboundNodes.push(this);t.outboundLayer.inboundNodes.push(this)}getConfig(){const t=[];for(const e of this.inboundLayers)t.push(null!=e?e.name:null);return{outboundLayer:this.outboundLayer?this.outboundLayer.name:null,inboundLayers:t,nodeIndices:this.nodeIndices,tensorIndices:this.tensorIndices}}}let GA=0;class He extends zo{constructor(t={}){super(),this._callHook=null,this._addedWeightNames=[],this._stateful=!1,this.id=GA++,this.activityRegularizer=null,this.inputSpec=null,this.supportsMasking=!1,this._trainableWeights=[],this._nonTrainableWeights=[],this._losses=[],this._updates=[],this._built=!1,this.inboundNodes=[],this.outboundNodes=[];let e=t.name;if(!e){const s=this.getClassName();e=er(s)+"_"+sc(s)}if(this.name=e,this.trainable_=null==t.trainable||t.trainable,null!=t.inputShape||null!=t.batchInputShape){let s;if(null!=t.batchInputShape)s=t.batchInputShape;else if(null!=t.inputShape){let o=null;null!=t.batchSize&&(o=t.batchSize),s=[o].concat(t.inputShape)}this.batchInputShape=s;let r=t.dtype;null==r&&(r=t.inputDType),null==r&&(r="float32"),this.dtype=r}this.initialWeights=null!=t.weights?t.weights:null,this._refCount=null,this.fastWeightInitDuringBuild=!1}static nodeKey(t,e){return t.name+"_ib-"+e.toString()}getNodeAtIndex(t,e){if(0===this.inboundNodes.length)throw new us(`The layer has never been called and thus has no defined ${e}.`);if(this.inboundNodes.length<=t)throw new O(`Asked to get ${e} at node ${t}, but the layer has only ${this.inboundNodes.length} inbound nodes.`);return this.inboundNodes[t]}getInputAt(t){return En(this.getNodeAtIndex(t,"input").inputTensors)}getOutputAt(t){return En(this.getNodeAtIndex(t,"output").outputTensors)}get input(){if(this.inboundNodes.length>1)throw new zs(`Layer ${this.name} has multiple inbound nodes, hence the notion of "layer input" is ill-defined. Use \`getInputAt(nodeIndex)\` instead.`);if(0===this.inboundNodes.length)throw new zs(`Layer ${this.name} is not connected, no input to return.`);return En(this.getNodeAtIndex(0,"input").inputTensors)}get output(){if(0===this.inboundNodes.length)throw new zs(`Layer ${this.name} has no inbound nodes.`);if(this.inboundNodes.length>1)throw new zs(`Layer ${this.name} has multiple inbound nodes, hence the notion of "layer output" is ill-defined. Use \`getOutputAt(nodeIndex)\` instead.`);return En(this.getNodeAtIndex(0,"output").outputTensors)}get losses(){return this._losses}calculateLosses(){return this.losses.map(t=>t())}get updates(){return this._updates}get built(){return this._built}set built(t){this._built=t}get trainable(){return this.trainable_}set trainable(t){this._trainableWeights.forEach(e=>e.trainable=t),this.trainable_=t}get trainableWeights(){return this.trainable_?this._trainableWeights.filter(t=>t.trainable):[]}set trainableWeights(t){this._trainableWeights=t}get nonTrainableWeights(){return this.trainable?this._trainableWeights.filter(t=>!t.trainable).concat(this._nonTrainableWeights):this._trainableWeights.concat(this._nonTrainableWeights)}set nonTrainableWeights(t){this._nonTrainableWeights=t}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}get stateful(){return this._stateful}resetStates(){if(!this.stateful)throw new Error("Cannot call the resetStates() method of a non-stateful Layer object.")}assertInputCompatibility(t){if(t=gt(t),null==this.inputSpec||0===this.inputSpec.length)return;const e=gt(this.inputSpec);if(t.length!==e.length)throw new O(`Layer ${this.name} expects ${e.length} inputs, but it received ${t.length} input tensors. Input received: ${t}`);for(let s=0;s<t.length;s++){const r=t[s],o=e[s];if(null==o)continue;const a=r.rank;if(null!=o.ndim&&a!==o.ndim)throw new O(`Input ${s} is incompatible with layer ${this.name}: expected ndim=${o.ndim}, found ndim=${a}`);if(null!=o.maxNDim&&a>o.maxNDim)throw new O(`Input ${s} is incompatible with layer ${this.name}: expected max_ndim=${o.maxNDim}, found ndim=${a}`);if(null!=o.minNDim&&a<o.minNDim)throw new O(`Input ${s} is incompatible with layer ${this.name}: expected min_ndim=${o.minNDim}, found ndim=${a}.`);if(null!=o.dtype&&r.dtype!==o.dtype)throw new O(`Input ${s} is incompatible with layer ${this.name} : expected dtype=${o.dtype}, found dtype=${r.dtype}.`);if(o.axes){const i=r.shape;for(const l in o.axes){const u=Number(l),c=o.axes[l];if(null!=c&&-1===[c,null].indexOf(u>=0?i[u]:i[i.length+u]))throw new O(`Input ${s} is incompatible with layer ${this.name}: expected axis ${u} of input shape to have value ${c} but got shape ${i}.`)}}if(null!=o.shape)for(let i=0;i<o.shape.length;++i){const l=o.shape[i],u=r.shape[i];if(null!=l&&null!=u&&l!==u)throw new O(`Input ${s} is incompatible with layer ${this.name}: expected shape=${o.shape}, found shape=${r.shape}.`)}}}call(t,e){return t}invokeCallHook(t,e){null!=this._callHook&&this._callHook(t,e)}setCallHook(t){this._callHook=t}clearCallHook(){this._callHook=null}apply(t,e){e=e||{},this.assertNotDisposed();const s=gt(t);let r=!0;for(const a of s)if(!(a instanceof Ws)){r=!1;break}let o=!0;for(const a of s)if(a instanceof Ws){o=!1;break}if(r===o)throw new O("Arguments to apply() must be all SymbolicTensors or all Tensors");return uo(this.name,()=>{if(!this.built){this.assertInputCompatibility(t);const a=[];for(const i of gt(t))a.push(i.shape);this.build(En(a)),this.built=!0,this.initialWeights&&this.setWeights(this.initialWeights),null===this._refCount&&o&&(this._refCount=1)}if(this.assertInputCompatibility(t),o){let a=this.call(t,e);const i=gt(a),l=[];for(let u of i)-1!==s.indexOf(u)&&(u=u.clone()),l.push(u);if(a=En(l),null!=this.activityRegularizer)throw new Pe("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return a}{const a=function HA(n){n=gt(n);const t=[];for(const e of n)t.push(e.shape);return En(t)}(t),i=this.computeOutputShape(a);let l;const u="float32";if(this.warnOnIncompatibleInputShape(Array.isArray(t)?a[0]:a),l=null!=i&&i.length>0&&Array.isArray(i[0])?i.map((c,h)=>new Ws(u,c,this,gt(t),e,this.name,h)):new Ws(u,i,this,gt(t),e,this.name),this.addInboundNode(t,l,null,null,a,i,e),this._refCount++,null!=this.activityRegularizer)throw new Pe("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return l}})}warnOnIncompatibleInputShape(t){if(null!=this.batchInputShape)if(t.length!==this.batchInputShape.length)console.warn(`The rank of the input tensor provided (shape: ${JSON.stringify(t)}) does not match that of the batchInputShape (${JSON.stringify(this.batchInputShape)}) of the layer ${this.name}`);else{let e=!1;this.batchInputShape.forEach((s,r)=>{null!=s&&null!=t[r]&&t[r]!==s&&(e=!0)}),e&&console.warn(`The shape of the input tensor (${JSON.stringify(t)}) does not match the expectation of layer ${this.name}: ${JSON.stringify(this.batchInputShape)}`)}}get outputShape(){if(null==this.inboundNodes||0===this.inboundNodes.length)throw new zs(`The layer ${this.name} has never been called and thus has no defined output shape.`);const t=[];for(const e of this.inboundNodes){const s=JSON.stringify(e.outputShapes);-1===t.indexOf(s)&&t.push(s)}if(1===t.length){const e=this.inboundNodes[0].outputShapes;return Array.isArray(e)&&Array.isArray(e[0])&&1===e.length?e[0]:e}throw new zs(`The layer ${this.name} has multiple inbound nodes with different output shapes. Hence the notion of "output shape" is ill-defined for the layer.`)}countParams(){if(!this.built)throw new us(`You tried to call countParams() on ${this.name}, but the layer is not built yet. Build it first by calling build(batchInputShape).`);return lc(this.weights)}build(t){this.built=!0}getWeights(t=!1){return zf(t?this.trainableWeights:this.weights)}setWeights(t){P(()=>{const e=this.weights;if(e.length!==t.length)throw new O(`You called setWeights(weights) on layer "${this.name}" with a weight list of length ${t.length}, but the layer was expecting ${e.length} weights. Provided weights: ${t}...`);if(0===e.length)return;const s=[],r=zf(e);for(let o=0;o<r.length;++o){const a=r[o],i=e[o],l=t[o];if(!Xe(a.shape,l.shape))throw new O(`Layer weight shape ${a.shape} not compatible with provided weight shape ${l.shape}`);s.push([i,l])}Mf(s)})}addWeight(t,e,s,r,o,a,i,l){if(-1!==this._addedWeightNames.indexOf(t))throw new O(`Duplicate weight name ${t} for layer ${this.name}`);this._addedWeightNames.push(t),null==s&&(s="float32"),this.fastWeightInitDuringBuild&&(r=null!=l?l():St("zeros"));const u=r.apply(e,s),c=new Vs(u,s,t,a,i);return u.dispose(),null!=o&&this.addLoss(()=>o.apply(c.read())),null==a&&(a=!0),a?this._trainableWeights.push(c):this._nonTrainableWeights.push(c),c}setFastWeightInitDuringBuild(t){this.fastWeightInitDuringBuild=t}addLoss(t){null==t||Array.isArray(t)&&0===t.length||(t=gt(t),null!=this._losses&&this.losses.push(...t))}computeOutputShape(t){return t}computeMask(t,e){if(!this.supportsMasking){if(null!=e){if(!Array.isArray(e))throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`);e.forEach(s=>{if(null!=s)throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`)})}return null}return e}addInboundNode(t,e,s,r,o,a,i=null){const l=gt(t);e=gt(e),s=gt(s),r=gt(r),o=ic(o),a=ic(a);const u=[],c=[],h=[];for(const d of l)u.push(d.sourceLayer),c.push(d.nodeIndex),h.push(d.tensorIndex);new uc({outboundLayer:this,inboundLayers:u,nodeIndices:c,tensorIndices:h,inputTensors:l,outputTensors:e,inputMasks:s,outputMasks:r,inputShapes:o,outputShapes:a},i);for(let d=0;d<e.length;d++)e[d].sourceLayer=this,e[d].nodeIndex=this.inboundNodes.length-1,e[d].tensorIndex=d}getConfig(){const t={name:this.name,trainable:this.trainable};return null!=this.batchInputShape&&(t.batchInputShape=this.batchInputShape),null!=this.dtype&&(t.dtype=this.dtype),t}disposeWeights(){return this.weights.forEach(t=>t.dispose()),this.weights.length}assertNotDisposed(){if(0===this._refCount)throw new Error(`Layer '${this.name}' is already disposed.`)}dispose(){if(!this.built)throw new Error(`Cannot dispose Layer ${this.name} because it has not been built yet.`);if(null===this._refCount)throw new Error(`Cannot dispose Layer ${this.name} because it has not been used yet.`);this.assertNotDisposed();let t=0;return 0==--this._refCount&&(t=this.disposeWeights()),{refCountAfterDispose:this._refCount,numDisposedVariables:t}}}function Qb(n,t,e){if((null==t||null!=e&&e>0)&&(t=n.sourceLayer,e=n.nodeIndex),0===t.inboundNodes.length)return[n];{const s=t.inboundNodes[e];if(0===s.inboundLayers.length)return s.inputTensors;{const r=[];for(let o=0;o<s.inboundLayers.length;o++){const u=Qb(s.inputTensors[o],s.inboundLayers[o],s.nodeIndices[o]);for(const c of u)-1===r.indexOf(c)&&r.push(c)}return r}}}let cc=(()=>{class n extends He{constructor(e){if(super({dtype:e.dtype,name:null!=e.name?e.name:sc("input").toString()}),null==e.batchSize&&(e.batchSize=null),null==e.sparse&&(e.sparse=!1),this.trainable=!1,this.built=!0,this.sparse=e.sparse,null!=e.inputShape&&null!=e.batchInputShape)throw new O("Only provide the inputShape OR batchInputShape argument to inputLayer, not both at the same time.");let s=e.batchInputShape;if(null==s){if(null==e.inputShape)throw new O("An InputLayer should be passed either a `batchInputShape` or an `inputShape`.");s=[e.batchSize].concat(e.inputShape)}else if(null!=e.batchSize)throw new O("Cannot specify batchSize if batchInputShape is specified when creating an InputLayer.");const r=e.dtype||"float32";this.batchInputShape=s,this.dtype=r,this.inputSpec=[{shape:s}];const o=new Ws(this.dtype,this.batchInputShape,this,[],{},this.name);o.nodeIndex=0,o.tensorIndex=0,new uc({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:[o],outputTensors:[o],inputMasks:[null],outputMasks:[null],inputShapes:[s],outputShapes:[s]})}apply(e,s){throw new O(`Cannot pass any input to an InputLayer's apply() method. InputLayer name: ${this.name}`)}dispose(){return{refCountAfterDispose:this._refCount,numDisposedVariables:0}}getConfig(){return{batchInputShape:this.batchInputShape,dtype:this.dtype,sparse:this.sparse,name:this.name}}}return n.className="InputLayer",n})();te(cc);class $r{constructor(t){if(this.id2Value={},this.id2Mask={},this.name2Id={},t instanceof $r)for(const e in t.id2Value)this.id2Value[e]=t.id2Value[e],e in t.id2Mask&&(this.id2Mask[e]=t.id2Mask[e]);else{if(null==t)return;for(const e of t)this.add(e.key,e.value)}}add(t,e,s){if(null!=this.id2Value[t.id])throw new O(`Duplicate key: name=${t.name}, id=${t.id}`);return this.id2Value[t.id]=function qA(n,t){if(null==n.dtype||n.dtype===t.dtype)return t;try{return he(t,n.dtype)}catch{throw new O(`The dtype of the feed (${t.dtype}) can not be cast to the dtype of the key '${n.name}' (${n.dtype}).`)}}(t,e),this.name2Id[t.name]=t.id,null!=s&&(this.id2Mask[t.id]=s),this}addFeed(t){this.add(t.key,t.value)}hasKey(t){return null!=this.id2Value[t.id]}names(){return Object.keys(this.name2Id)}getValue(t){if(t instanceof Ws){if(null==this.id2Value[t.id])throw new O(`Nonexistent key: ${t.name}`);return this.id2Value[t.id]}{const e=this.name2Id[t];if(null==e)throw new O(`Feed dict has no SymbolicTensor name: ${t}`);return this.id2Value[e]}}getMask(t){if(t instanceof Ws){if(null==this.id2Value[t.id])throw new O(`Nonexistent key: ${t.name}`);return this.id2Mask[t.id]}{const e=this.name2Id[t];if(null==e)throw new O(`Feed dict has no SymbolicTensor name: ${t}`);return this.id2Mask[e]}}disposeMasks(){null!=this.id2Mask&&Be(this.id2Mask)}}const hc=new $b,dc=new $b;function Ui(n,t,e,s){const r=null!=e&&e.training,o=Array.isArray(n),a=o?n:[n],i=a.map(f=>f.name),l=[],u=t.names();for(const f of i)-1!==u.indexOf(f)?l.push(t.getValue(f)):l.push(null);null!=s&&(s.maxNumTensors=-1/0,s.minNumTensors=1/0);const c=i.join(",")+"|"+t.names().sort().join(",");let d,h=hc.get(c);if(null==h){const f=function ZA(n,t){I(null!=n&&n.length>0,()=>"Expected at least one fetch, got none");let e=[],s={};if(1===n.length){const r=Jb(n[0],t);e=r.sorted,s=r.recipientMap}else{const r=new Set;for(const o of n){const{sorted:a,recipientMap:i}=Jb(o,t);for(const l of a)r.has(l.name)||(e.push(l),r.add(l.name));for(const l in i)null==s[l]&&(s[l]=new Set),i[l].forEach(u=>s[l].add(u))}}return{sorted:e,recipientCounts:YA(s)}}(a,t);h=f.sorted,d=f.recipientCounts,hc.put(c,h),dc.put(c,d)}d={},r||Object.assign(d,dc.get(c));const p=new $r(t);for(let f=0;f<h.length;++f){if(null!=s){const E=Kd().numTensors;E>s.maxNumTensors&&(s.maxNumTensors=E),E<s.minNumTensors&&(s.minNumTensors=E)}const g=h[f],m=g.sourceLayer;if(m instanceof cc)continue;const y=[],x=[],b=[];let w=!1;for(const E of g.inputs){const R=p.getValue(E),L=p.getMask(E);y.push(R),x.push(L),null!=L&&(w=!0),r||(d[E.name]--,0===d[E.name]&&!t.hasKey(E)&&-1===i.indexOf(E.name)&&!R.isDisposed&&!0!==E.sourceLayer.stateful&&b.push(R))}w&&((e=e||{}).mask=x[0]);const S=gt(m.apply(y,e));let C=null;m.supportsMasking&&(C=m.computeMask(y,x));const k=QA(g),T=Array.isArray(k)?k:[k];for(let E=0;E<T.length;++E){p.hasKey(T[E])||p.add(T[E],S[E],Array.isArray(C)?C[0]:C);const R=i.indexOf(T[E].name);-1!==R&&(l[R]=S[E])}r||Be(b)}return p.disposeMasks(),o?l:l[0]}function YA(n){const t={};for(const e in n)t[e]=n[e].size;return t}function Jb(n,t){const e=new Set,s=[],r={};for(const i of t.names())e.add(i);const o=[],a=[];for(o.push(n);o.length>0;){const i=o[o.length-1];if(e.has(i.name)){o.pop();continue}const l=a[a.length-1]===o.length-1;if(0===i.inputs.length||l)o.pop(),s.push(i),e.add(i.name),l&&a.pop();else{a.push(o.length-1);for(const u of i.inputs)null==r[u.name]&&(r[u.name]=new Set),r[u.name].add(i.name),!e.has(u.name)&&o.push(u)}}return{sorted:s,recipientMap:r}}function QA(n){let t;if(1===n.sourceLayer.inboundNodes.length)t=n.sourceLayer.output;else{let e=null;for(let s=0;s<n.sourceLayer.inboundNodes.length;++s)for(const r of n.sourceLayer.inboundNodes[s].outputTensors)if(r.id===n.id){e=s;break}t=n.sourceLayer.getOutputAt(e)}return t}function Bf(n,t){return P(()=>pn(ve(D(n,n),t,!0)))}z().registerFlag("TOPOLOGICAL_SORT_CACHE_MAX_ENTRIES",()=>100,function XA(n){null!=hc&&hc.setMaxEntries(n),null!=dc&&dc.setMaxEntries(n)});class Gi extends zo{getConfig(){return{}}}te((()=>{class n extends Gi{constructor(e){super(),this.defaultMaxValue=2,this.defaultAxis=0,this.maxValue=null!=e.maxValue?e.maxValue:this.defaultMaxValue,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return P(()=>{const s=Bf(e,this.axis),r=On(s,0,this.maxValue);return D(e,Ce(r,ee(qt(),s)))})}getConfig(){return{maxValue:this.maxValue,axis:this.axis}}}return n.className="MaxNorm",n})()),te((()=>{class n extends Gi{constructor(e){super(),this.defaultAxis=0,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return P(()=>Ce(e,ee(qt(),Bf(e,this.axis))))}getConfig(){return{axis:this.axis}}}return n.className="UnitNorm",n})()),te((()=>{class n extends Gi{apply(e){return Fs(e)}}return n.className="NonNeg",n})()),te((()=>{class n extends Gi{constructor(e){super(),this.defaultMinValue=0,this.defaultMaxValue=1,this.defaultRate=1,this.defaultAxis=0,this.minValue=null!=e.minValue?e.minValue:this.defaultMinValue,this.maxValue=null!=e.maxValue?e.maxValue:this.defaultMaxValue,this.rate=null!=e.rate?e.rate:this.defaultRate,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return P(()=>{const s=Bf(e,this.axis),r=ee(D(this.rate,On(s,this.minValue,this.maxValue)),D(1-this.rate,s));return D(e,Ce(r,ee(qt(),s)))})}getConfig(){return{minValue:this.minValue,maxValue:this.maxValue,rate:this.rate,axis:this.axis}}}return n.className="MinMaxNorm",n})());const e0={maxNorm:"MaxNorm",minMaxNorm:"MinMaxNorm",nonNeg:"NonNeg",unitNorm:"UnitNorm"};function Zt(n){return Ef(n)}function t0(n,t={}){return zi(n,rs.getMap().classNameMap,t,"constraint")}function Yt(n){return null==n?null:"string"==typeof n?t0({className:n in e0?e0[n]:n,config:{}}):n instanceof Gi?n:t0(n)}function _r(n){return Vf.apply(this,arguments)}function Vf(){return(Vf=(0,W.Z)(function*(n){if(null==n)return;const t=[],e=[],s=[];for(const r in n){const o=n[r];if("number"!=typeof o){const a=o;t.push(a.data()),e.push(r),s.push(a)}}if(t.length>0){const r=yield Promise.all(t);for(let o=0;o<r.length;++o)n[e[o]]=r[o][0];Be(s)}})).apply(this,arguments)}function n0(n){if(null!=n)for(const t in n){const e=n[t];"number"!=typeof e&&e.dispose()}}class Jo{constructor(){this.validationData=null}setParams(t){this.params=t}onEpochBegin(t,e){return(0,W.Z)(function*(){})()}onEpochEnd(t,e){return(0,W.Z)(function*(){})()}onBatchBegin(t,e){return(0,W.Z)(function*(){})()}onBatchEnd(t,e){return(0,W.Z)(function*(){})()}onTrainBegin(t){return(0,W.Z)(function*(){})()}onTrainEnd(t){return(0,W.Z)(function*(){})()}setModel(t){}}class tR{constructor(t,e=10){null==t&&(t=[]),this.callbacks=t,this.queueLength=e}append(t){this.callbacks.push(t)}setParams(t){for(const e of this.callbacks)e.setParams(t)}setModel(t){for(const e of this.callbacks)e.setModel(t)}onEpochBegin(t,e){var s=this;return(0,W.Z)(function*(){null==e&&(e={});for(const r of s.callbacks)yield r.onEpochBegin(t,e)})()}onEpochEnd(t,e){var s=this;return(0,W.Z)(function*(){null==e&&(e={});for(const r of s.callbacks)yield r.onEpochEnd(t,e)})()}onBatchBegin(t,e){var s=this;return(0,W.Z)(function*(){null==e&&(e={});for(const r of s.callbacks)yield r.onBatchBegin(t,e)})()}onBatchEnd(t,e){var s=this;return(0,W.Z)(function*(){null==e&&(e={});for(const r of s.callbacks)yield r.onBatchEnd(t,e)})()}onTrainBegin(t){var e=this;return(0,W.Z)(function*(){null==t&&(t={});for(const s of e.callbacks)yield s.onTrainBegin(t)})()}onTrainEnd(t){var e=this;return(0,W.Z)(function*(){null==t&&(t={});for(const s of e.callbacks)yield s.onTrainEnd(t)})()}}class nR extends Jo{constructor(){super()}onEpochBegin(t){var e=this;return(0,W.Z)(function*(){e.seen=0,e.totals={}})()}onBatchEnd(t,e){var s=this;return(0,W.Z)(function*(){null==e&&(e={});const r=null==e.size?0:e.size;s.seen+=r;for(const o in e){const a=e[o];if("number"==typeof a)s.totals.hasOwnProperty(o)||(s.totals[o]=0),s.totals[o]=s.totals[o]+a*r;else{let i;o in s.totals?i=s.totals[o]:s.totals[o]=0;const l=P(()=>ee(s.totals[o],D(a,r)));s.totals[o]=l,null!=i&&i.dispose()}}})()}onEpochEnd(t,e){var s=this;return(0,W.Z)(function*(){if(null!=e)for(const r of s.params.metrics)null!=s.totals[r]&&("number"==typeof s.totals[r]?e[r]=s.totals[r]/s.seen:P(()=>{const o=D(Ce(1,s.seen),s.totals[r]);e[r]=o,s.totals[r].dispose(),en(e[r])}))})()}}class sR extends Jo{onTrainBegin(t){var e=this;return(0,W.Z)(function*(){e.epoch=[],e.history={}})()}onEpochEnd(t,e){var s=this;return(0,W.Z)(function*(){null==e&&(e={}),s.epoch.push(t);for(const r in e)null==s.history[r]&&(s.history[r]=[]),s.history[r].push(e[r])})()}syncData(){var t=this;return(0,W.Z)(function*(){const e=[],s=[],r=[];for(const a in t.history){const i=t.history[a];for(let l=0;l<i.length;++l)"number"!=typeof i[l]&&(e.push(i[l].data()),s.push(a),r.push(l))}const o=yield Promise.all(e);for(let a=0;a<o.length;++a)t.history[s[a]][r[a]].dispose(),t.history[s[a]][r[a]]=o[a][0]})()}}class rR extends Jo{constructor(t,e){if(super(),this.currentEpoch=0,this.nowFunc=t.nowFunc,this.nextFrameFunc=t.nextFrameFunc||jx,this.yieldEvery=e||"auto","auto"===this.yieldEvery&&(this.yieldEvery=125),"never"===this.yieldEvery&&null!=t.onYield)throw new Error("yieldEvery is `never` but you provided an `onYield` callback. Either change `yieldEvery` or remove the callback");uh(this.yieldEvery)&&(this.maybeWait=function xA(n,t,e){let r,s=null!=e?e():Tn();return(...a)=>{const i=null!=e?e():Tn();return i-s<t||(s=i,r=n(...a)),r}}(this.maybeWait.bind(this),this.yieldEvery,this.nowFunc)),this.trainBegin=t.onTrainBegin,this.trainEnd=t.onTrainEnd,this.epochBegin=t.onEpochBegin,this.epochEnd=t.onEpochEnd,this.batchBegin=t.onBatchBegin,this.batchEnd=t.onBatchEnd,this.yield=t.onYield}maybeWait(t,e,s){var r=this;return(0,W.Z)(function*(){const o=[];null!=r.yield&&(yield _r(s),o.push(r.yield(t,e,s))),o.push(r.nextFrameFunc()),yield Promise.all(o)})()}onEpochBegin(t,e){var s=this;return(0,W.Z)(function*(){s.currentEpoch=t,null!=s.epochBegin&&(yield _r(e),yield s.epochBegin(t,e))})()}onEpochEnd(t,e){var s=this;return(0,W.Z)(function*(){const r=[];null!=s.epochEnd&&(yield _r(e),r.push(s.epochEnd(t,e))),"epoch"===s.yieldEvery&&r.push(s.nextFrameFunc()),yield Promise.all(r)})()}onBatchBegin(t,e){var s=this;return(0,W.Z)(function*(){null!=s.batchBegin&&(yield _r(e),yield s.batchBegin(t,e))})()}onBatchEnd(t,e){var s=this;return(0,W.Z)(function*(){const r=[];null!=s.batchEnd&&(yield _r(e),r.push(s.batchEnd(t,e))),"batch"===s.yieldEvery?r.push(s.nextFrameFunc()):uh(s.yieldEvery)&&r.push(s.maybeWait(s.currentEpoch,t,e)),yield Promise.all(r)})()}onTrainBegin(t){var e=this;return(0,W.Z)(function*(){null!=e.trainBegin&&(yield _r(t),yield e.trainBegin(t))})()}onTrainEnd(t){var e=this;return(0,W.Z)(function*(){null!=e.trainEnd&&(yield _r(t),yield e.trainEnd(t))})()}}function s0(n,t){return null==n&&(n={}),n instanceof Jo?[n]:Array.isArray(n)&&n[0]instanceof Jo?n:gt(n).map(s=>new rR(s,t))}let oR=(()=>{class n{constructor(){}static registerCallbackConstructor(e,s){I(e>=0&&Number.isInteger(e),()=>`Verbosity level is expected to be an integer >= 0, but got ${e}`),n.checkForDuplicate(s),null==n.constructors[e]&&(n.constructors[e]=[]),n.constructors[e].push(s)}static checkForDuplicate(e){for(const s in n.constructors)n.constructors[+s].forEach(o=>{if(o===e)throw new O("Duplicate callback constructor.")})}static clear(){n.constructors={}}static createCallbacks(e){const s=[];for(const r in n.constructors){const o=+r;e>=o&&s.push(...n.constructors[o])}return s.map(r=>new r)}}return n.constructors={},n})();function r0(n,t,e,s,r,o,a,i,l){const u=new sR,c=[new nR,...oR.createCallbacks(t)];null!=n&&c.push(...n),c.push(u);const h=new tR(c);return h.setParams({epochs:e,initialEpoch:s,samples:r,steps:o,batchSize:a,verbose:t,doValidation:i,metrics:l}),{callbackList:h,history:u}}function tr(n,t={},e=!1){return zi(n,rs.getMap().classNameMap,t,"layer",e)}function pc(n,t){return P(()=>{"float32"!==n.dtype&&(n=he(n,"float32"));const e=ve(Vi(n),t,!0),s=Mo(e.shape,qt()),r=pn(xs(e,s));return Ce(n,r)})}function fc(n,t){return P(()=>Rt(Vi(be(t,n)),-1))}function Wf(n,t){return P(()=>Rt(Ht(be(t,n)),-1))}function Uf(n,t){return P(()=>{const e=be(n,t),s=On(Ht(n),qt(),Number.MAX_VALUE),r=Ht(Ce(e,s));return D(100,Rt(r,-1))})}function Hi(n,t,e=!1){return P(()=>{if(e)t=Hu(t);else{const s=ve(t,t.shape.length-1,!0);t=Ce(t,s)}return t=On(t,qt(),1-qt()),wt(ve(D(he(n,"float32"),jn(t)),t.shape.length-1))})}function mc(n,t,e=!1){return P(()=>{const s=he($i(function RA(n){const t=[kr(n.shape)];return F(n,t)}(n)),"int32"),r=(t=On(t,qt(),1-qt())).shape;return Hi(F(kp(s,r[r.length-1]),r),t,e)})}function gc(n,t){return P(()=>{let e;return e=On(t,qt(),1-qt()),e=jn(Ce(e,be(1,e))),Rt(function hR(n,t){if(!Xe(n.shape,t.shape))throw new O(`logits and labels must have the same shape, but got shapes ${JSON.stringify(n.shape)} and ${JSON.stringify(t.shape)}`);return P(()=>{const e=Fs(t),s=wt(Ht(t));return ee(be(e,D(t,n)),Ou(Hn(s)))})}(n,e),-1)})}function o0(n,t){return P(()=>{const e=pc(n,-1),s=pc(t,-1),r=D(e,s);return wt(ve(r,-1))})}const yc={meanSquaredError:fc,meanAbsoluteError:Wf,meanAbsolutePercentageError:Uf,meanSquaredLogarithmicError:function aR(n,t){return P(()=>{const e=On(t,qt(),Number.MAX_VALUE),s=jn(ee(1,e)),r=On(n,qt(),Number.MAX_VALUE),o=jn(ee(1,r));return Rt(Vi(be(s,o)),-1)})},squaredHinge:function iR(n,t){return P(()=>{const e=xs(0,be(1,D(n,t)));return Rt(Vi(e),-1)})},hinge:function lR(n,t){return P(()=>{const e=xs(0,be(1,D(n,t)));return Rt(e,-1)})},categoricalHinge:function uR(n,t){return P(()=>{const e=ve(D(n,t),-1),s=Gn(D(be(1,n),t),-1);return xs(0,ee(1,be(s,e)))})},logcosh:function cR(n,t){return P(()=>{const e=Math.log(2),s=be(t,n),r=be(ee(s,Ho(D(-2,s))),e);return Rt(r,-1)})},categoricalCrossentropy:Hi,sparseCategoricalCrossentropy:mc,binaryCrossentropy:gc,kullbackLeiblerDivergence:function dR(n,t){return P(()=>{const e=On(n,qt(),1),s=On(t,qt(),1);return ve(D(n,jn(Ce(e,s))),-1)})},poisson:function pR(n,t){return P(()=>{const e=jn(ee(qt(),t));return Rt(be(t,D(n,e)),-1)})},cosineProximity:o0};function Gf(n){if("string"==typeof n){if(n in yc)return yc[n];let t=`Unknown loss ${n}`;throw n.toLowerCase().includes("softmaxcrossentropy")&&(t=`Unknown loss ${n}. Use "categoricalCrossentropy" as the string name for tf.losses.softmaxCrossEntropy`),new O(t)}return n}function a0(n,t){return P(()=>{const e=D(.5,qn(t)),s=Ms(_n(t,e),n.dtype);return Rt(bs(n,s),-1)})}function l0(n,t){return P(()=>Ms(bs(Qr(n,-1),Qr(t,-1)),"float32"))}function yR(n,t){return gc(n,t)}function xR(n,t){return n.rank===t.rank&&(n=so(n,[n.rank-1])),(t=Qr(t,-1)).dtype!==n.dtype&&(t=he(t,n.dtype)),he(bs(n,t),"float32")}const c0=Hi,h0=mc,xc={binaryAccuracy:a0,categoricalAccuracy:l0,precision:function gR(n,t){return P(()=>{const e=function u0(n,t){return P(()=>he(ve(Ds(bs(n,1),bs(t,1))),"float32"))}(n,t),s=function mR(n,t){return P(()=>he(ve(Ds(bs(n,0),bs(t,1))),"float32"))}(n,t),r=ee(e,s);return he(fn(_n(r,0),Ce(e,r),0),"float32")})},categoricalCrossentropy:c0,sparseCategoricalCrossentropy:h0,mse:fc,MSE:fc,mae:Wf,MAE:Wf,mape:Uf,MAPE:Uf,cosine:o0};function kR(n){if("string"==typeof n&&n in xc)return xc[n];if("string"!=typeof n&&null!=n)return n;throw new O(`Unknown metric ${n}`)}function bc(n){if(Zn(null!==n,`Unknown LossOrMetricFn ${n}`),"string"==typeof n)return n;{let t;for(const e of Object.keys(yc))if(yc[e]===n){t=e;break}if(void 0!==t)return t;for(const e of Object.keys(xc))if(xc[e]===n){t=e;break}return void 0!==t?t:n.name}}function p0(n,t,e=!1){if(null==n||"object"!=typeof n||Object.getPrototypeOf(n)!==Object.prototype||!Hf(n))throw new Error("User-defined metadata is expected to be a JSON object, but is not.");if(e){const s=JSON.stringify(n);s.length>1048576&&console.warn(`User-defined metadata of model "${t}" is too large in size (length=${s.length} when serialized). It is not recommended to store such large objects in user-defined metadata. Please make sure its serialized length is <= 1048576.`)}}function Hf(n){if(null===n)return!0;if("object"==typeof n){if(Object.getPrototypeOf(n)===Object.prototype){const t=Object.keys(n);for(const e of t)if("string"!=typeof e||!Hf(n[e]))return!1;return!0}if(Array.isArray(n)){for(const t of n)if(!Hf(t))return!1;return!0}return!1}{const t=typeof n;return"string"===t||"number"===t||"boolean"===t}}function wc(n,t,e=console.log){let s="";for(let r=0;r<n.length;++r)r>0&&(s=s.slice(0,s.length-1)+" "),s+=n[r],s=s.slice(0,t[r]),s+=" ".repeat(t[r]-s.length);e(s)}function AR(n,t,e){let s,r;try{r=n.inboundNodes.map(l=>JSON.stringify(l.inputShapes)).join(",")}catch{r="multiple"}try{s=JSON.stringify(n.outputShape)}catch{s="multiple"}wc([`${n.name} (${n.getClassName()})`,r,s,n.countParams().toString()],t,e)}function RR(n,t,e,s){let r,o;try{o=n.inboundNodes.map(h=>JSON.stringify(h.inputShapes)).join(",")}catch{o="multiple"}try{r=JSON.stringify(n.outputShape)}catch{r="multiple"}const a=[];for(const h of n.inboundNodes)if(!(null!=e&&e.length>0&&-1===e.indexOf(h)))for(let d=0;d<h.inboundLayers.length;++d)a.push(`${h.inboundLayers[d].name}[${h.nodeIndices[d]}][${h.tensorIndices[d]}]`);const i=n.name,l=n.getClassName(),u=0===a.length?"":a[0];wc([`${i} (${l})`,o,r,n.countParams().toString(),u],t,s);for(let h=1;h<a.length;++h)wc(["","","","",a[h]],t,s)}function f0(n,t,e){return("inboundNodes"===n||"outputLayers"===n||"inputLayers"===n)&&0===t&&"string"==typeof e}function jf(n,t){if(null===n)return null;if("string"==typeof n)return ao(n);if("number"==typeof n||"boolean"==typeof n)return n;if(n instanceof Array){const e=[],s=n.length;for(let r=0;r<s;++r){const o=n[r];f0(t,r,o)?e.push(o):e.push(jf(o,t))}return e}{const e={};for(const s of Object.keys(n)){const r=n[s];if("name"===s&&"string"==typeof r)e[s]=r;else{const o=ao(s);e[o]=jf(r,o)}}return e}}function Kf(n,t){if(null==n)return null;if("string"==typeof n)return er(n);if("number"==typeof n||"boolean"==typeof n)return n;if(n instanceof Array){const e=[],s=n.length;for(let r=0;r<s;++r){const o=n[r];f0(t,r,o)?e.push(o):e.push(Kf(o,t))}return e}{const e={};for(const s of Object.keys(n)){const r=n[s];e[er(s)]="name"!==s&&"className"!==s||"string"!=typeof r?Kf(r,s):r}return e}}class Is extends He{constructor(t){if(super({}),this.containerNodes=new Set,this.name=t.name,null==this.name){const x=this.getClassName().toLowerCase();this.name=sc(x)}if(this.supportsMasking=!1,this.trainable_=!0,this.inputs=Array.isArray(t.inputs)?t.inputs.slice():[t.inputs],this.outputs=Array.isArray(t.outputs)?t.outputs.slice():[t.outputs],Cr(this.inputs).length!==this.inputs.length)throw new O(`The list of inputs passed to the model is redundant. All inputs should only appear once. Found: ${this.inputs.map(x=>x.name)}`);Cr(this.outputs).length!==this.outputs.length&&console.warn(`The list of outputs passed to the model is redundant. All outputs should only appear once. Found: ${this.outputs.map(x=>x.name)}`),this.inputLayers=[],this.inputLayersNodeIndices=[],this.inputLayersTensorIndices=[],this.outputLayers=[],this.outputLayersNodeIndices=[],this.outputLayersTensorIndices=[],this.layers=[],this.internalContainerRefs=[];for(const x of this.outputs){const w=x.nodeIndex,S=x.tensorIndex;this.outputLayers.push(x.sourceLayer),this.outputLayersNodeIndices.push(w),this.outputLayersTensorIndices.push(S)}for(const x of this.inputs){const b=x.sourceLayer,w=x.nodeIndex,S=x.tensorIndex;Zn(0===w,"input layer has >1 nodes"),Zn(0===S,"input layer has >1 tensors"),this.inputLayers.push(b),this.inputLayersNodeIndices.push(w),this.inputLayersTensorIndices.push(S)}this.inputNames=[],this.outputNames=[],this.feedInputShapes=[],this.feedInputNames=[],this.feedOutputNames=[];for(let x=0;x<this.inputLayers.length;x++){const b=this.inputLayers[x];if(!(b instanceof cc))throw new TypeError(`Input layers to a LayersModel must be InputLayer objects. Received inputs: ${t.inputs}. Input ${x} (0-based) originates from layer type ${b.getClassName()}.`);this.inputNames.push(b.name),this.feedInputShapes.push(b.batchInputShape),this.feedInputNames.push(b.name)}for(const x of this.outputLayers)this.outputNames.push(x.name);this.internalInputShapes=this.inputs.map(x=>x.shape),this.internalOutputShapes=this.outputs.map(x=>x.shape);const e={},s={},r={},o={},a={},i=[],l=(x,b,w,S,C,k)=>{(null==S||null==C||null==k)&&(S=x.sourceLayer,C=x.nodeIndex,k=x.tensorIndex);const T=S.inboundNodes[C];if(-1!==w.indexOf(T))throw new us(`The tensor ${x.name} at layer "${S.name}" is part of a cycle.`);if(-1!==b.indexOf(T))return;this.containerNodes.add(Is.nodeKey(S,C)),S.id in a||(a[S.id]=Object.keys(a).length),-1===w.indexOf(T)&&w.push(T);const E=T.inboundLayers.length;for(let R=0;R<E;R++)l(T.inputTensors[R],b,w,T.inboundLayers[R],T.nodeIndices[R],T.tensorIndices[R]);for(b.push(T);w.indexOf(T)>=0;)w.splice(w.indexOf(T),1);i.push(T)},u=[],c=[];for(const x of this.outputs)l(x,u,c);const h=i.slice().reverse();for(const x of h){s[x.id]=x,x.id in e||(e[x.id]=0);let b=e[x.id];b=Math.max(b,null==r[x.outboundLayer.id]?0:r[x.outboundLayer.id]),r[x.outboundLayer.id]=b,o[x.outboundLayer.id]=x.outboundLayer,e[x.id]=b;for(let S=0;S<x.inboundLayers.length;S++){const T=x.inboundLayers[S].inboundNodes[x.nodeIndices[S]];e[T.id]=Math.max(b+1,null==e[T.id]?0:e[T.id]),s[T.id]=T}}const d={};for(const x in e){const b=e[x];b in d||(d[b]=[]),d[b].push(s[x])}const p={};for(const x in r){const b=r[x];b in p||(p[b]=[]),p[b].push(o[x])}let f=Object.keys(p).map(x=>parseInt(x,10)).sort(tc);this.layers=[];for(const x of f){const b=p[x];b.sort((w,S)=>{const C=a[w.id],k=a[S.id];return C<k?-1:C>k?1:0});for(const w of b)w instanceof Is&&this.internalContainerRefs.push(w),this.layers.push(w)}this.layersByDepth=p,f=Object.keys(d).map(x=>parseInt(x,10)).sort(tc);const g=this.inputs.slice(),m=[];for(const x of f)for(const b of d[x]){const w=b.outboundLayer;if(null!=w){for(const S of b.inputTensors)if(-1===g.indexOf(S))throw new us(`Graph disconnected: cannot obtain value for tensor ${S} at layer "${w.name}". The following previous layers were accessed without issue: ${m}`);for(const S of b.outputTensors)g.push(S);m.push(w.name)}}this.nodesByDepth=d;const y=this.layers.map(x=>x.name);for(const x of y){const b=y.filter(w=>w===x).length;if(1!==b)throw new us(`The name "${x}" is used ${b} times in the model. All layer names should be unique. Layer names: `+JSON.stringify(y))}this.outboundNodes=[],this.inboundNodes=[],new uc({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:this.inputs.map(x=>null),outputMasks:this.outputs.map(x=>null),inputShapes:this.inputs.map(x=>x.shape),outputShapes:this.outputs.map(x=>x.shape)}),this.built=!0,this._refCount=1}assertNotDisposed(){if(0===this._refCount)throw new Error(`Container '${this.name}' is already disposed.`)}dispose(){this.assertNotDisposed();const t={refCountAfterDispose:null,numDisposedVariables:0};if(0==--this._refCount){for(const e of this.layers)t.numDisposedVariables+=e.dispose().numDisposedVariables;for(const e of this.internalContainerRefs)t.numDisposedVariables+=e.dispose().numDisposedVariables}return t.refCountAfterDispose=this._refCount,t}get trainable(){return this.trainable_}set trainable(t){this.layers.forEach(e=>{e._trainableWeights.forEach(s=>s.trainable=t)}),this.trainable_=t}get trainableWeights(){if(this._trainableWeights.length>0)throw new O("Container instance unexpectedly contains _trainableWeights.The trainable weights of a Container are a union of the trainable weights of its consituent Layers. Its own _trainableWeights must remain an empty Array.");if(!this.trainable)return[];let t=[];for(const e of this.layers)t=t.concat(e.trainableWeights);return t}get nonTrainableWeights(){const t=[];for(const e of this.layers)t.push(...e.nonTrainableWeights);if(!this.trainable){const e=[];for(const s of this.layers)e.push(...s.trainableWeights);return e.concat(t)}return t}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}loadWeights(t,e=!0){const s={};let r=0;const o=Object.keys(t)[0].split("/"),a=!isNaN(parseInt(o[o.length-1],10));for(const l of this.layers)for(const[u,c]of l.weights.entries()){const h=a?`${c.name.split("/").slice(0,-1).join("/")+"/"}${u}`:c.originalName;if(null!=s[h])throw new O(`Duplicate weight name: ${h}`);s[h]=c,r++}const i=[];for(const l in t){let u=l;if(null==s[l]){const c=l.split("/");u=c.slice(0,-2).concat([c[c.length-1]]).join("/")}if(null!=s[u])i.push([s[u],t[l]]);else if(e)throw new O(`Provided weight data has no target variable: ${l}`);delete s[u]}if(e){const l=[];for(const u in s)l.push(u);if(l.length>0)throw new O(`${l.length} of ${r} weights are not set: ${l}`)}Mf(i)}updatedConfig(){const t=this.getConfig(),e={};return e.className=this.getClassName(),e.config=t,e.kerasVersion="tfjs-layers 4.10.0",e.backend="TensorFlow.js",e}toJSON(t,e=!0){const s=Kf(this.updatedConfig());return e?JSON.stringify(s):s}call(t,e){return P(()=>{t=gt(t);const s=new $r;for(let r=0;r<this.inputs.length;++r)s.add(this.inputs[r],t[r]);return Ui(this.outputs,s,e)})}computeMask(t,e){return P(()=>{let s;return t=gt(t),s=null==e?oo(null,t.length):gt(e),this.runInternalGraph(t,s)[1]})}computeOutputShape(t){const e=ic(t);if(e.length!==this.inputLayers.length)throw new O(`Invalid inputShape argument ${t}: model has ${this.inputLayers.length} tensor inputs.`);const s={};for(let i=0;i<e.length;i++)s[this.inputLayers[i].name+"_0_0"]=e[i];const r=Object.keys(this.nodesByDepth).map(i=>parseInt(i,10)).sort(tc);if(r.length>1)for(const i of r){const l=this.nodesByDepth[i];for(const u of l){const c=u.outboundLayer;if(-1!==this.inputLayers.map(g=>g.id).indexOf(c.id))continue;const h=[];for(let g=0;g<u.inboundLayers.length;g++)h.push(s[`${u.inboundLayers[g].name}_${u.nodeIndices[g]}_${u.tensorIndices[g]}`]);const p=ic(c.computeOutputShape(En(h))),f=c.inboundNodes.indexOf(u);for(let g=0;g<p.length;g++)s[`${c.name}_${f}_${g}`]=p[g]}}const o=[],a=[];for(let i=0;i<this.outputLayers.length;i++)a.push(`${this.outputLayers[i].name}_${this.outputLayersNodeIndices[i]}_${this.outputLayersTensorIndices[i]}`);for(let i=0;i<a.length;i++){const l=a[i];Zn(l in s),o.push(s[l])}return En(o)}runInternalGraph(t,e){null==e&&(e=oo(null,t.length));const s={};for(let l=0;l<this.inputs.length;++l)s[this.inputs[l].id]=[t[l],e[l]];const r=Object.keys(this.nodesByDepth).map(l=>parseInt(l,10)).sort(tc);for(const l of r){const u=this.nodesByDepth[l];for(const c of u){const h=c.outboundLayer,d=c.inputTensors,p=c.outputTensors,f=new Array;for(const g of d)g.id in s&&f.push(s[g.id]);if(f.length===d.length){let m,y,x,b,g={};if(null!=c.callArgs&&(g=c.callArgs),1===f.length){const[w,S]=f[0];null==g.mask&&(g.mask=S),x=gt(h.call(w,g)),b=gt(h.computeMask(w,S)),m=[w],y=[S]}else m=f.map(w=>w[0]),y=f.map(w=>w[1]),null==g.mask&&(g.mask=y),x=gt(h.call(m,g)),b=gt(h.computeMask(m,y));if(h.activityRegularizer)throw new Pe("LayersModel invocation with concrete Tensor value(s) in the presence of activity regularizer(s) is not supported yet.");for(let w=0;w<p.length;++w)s[p[w].id]=[x[w],b[w]]}}}const o=[],a=[],i=[];for(const l of this.outputs){Zn(l.id in s,`Could not compute output ${l.name} : ${l.id}`);const[u,c]=s[l.id];i.push(u.shape),o.push(u),a.push(c)}return[o,a,i]}buildNodeConversionMap(t){const e={};let s;for(const r of this.layers){s=r instanceof Is?1:0;for(let o=0;o<r.inboundNodes.length;o++){const a=Is.nodeKey(r,o);this.containerNodes.has(a)&&(e[a]=s,s+=1)}}return e}getLayer(t,e){if(null!=e)return this.findLayer(e);if(null==t)throw new O("Provide either a layer name or layer index");if("number"==typeof t)return this.findLayer(t);for(const s of this.layers)if(s.name===t)return s;throw new O(`No such layer: ${t}`)}findLayer(t){if(this.layers.length<=t)throw new O(`Was asked to retrieve layer at index ${t}, but model only has ${this.layers.length} layer(s).`);return this.layers[t]}calculateLosses(){return P(()=>{const t=[];for(const e of this.layers)for(let s=0;s<e.inboundNodes.length;++s){const r=Is.nodeKey(e,s);this.containerNodes.has(r)&&t.push(...e.calculateLosses())}return t})}getConfig(){const t={name:this.name},e=this.buildNodeConversionMap(this.layers),s=[];for(const a of this.layers){const i=a.getClassName(),l=a.getConfig(),u=[];for(let h=0;h<a.inboundNodes.length;h++){const d=a.inboundNodes[h],p=Is.nodeKey(a,h);let f={};if(this.containerNodes.has(p)){if(d.callArgs)try{JSON.stringify(d.callArgs),f=d.callArgs}catch{console.warn(`Layer ${a.name} was passed non-serializable keyword arguments: ${d.callArgs}. They will not be included in the serialized model (and thus will be missing at deserialization time).`),f={}}if(d.inboundLayers.length>0){const g=[];for(let m=0;m<d.inboundLayers.length;m++){const y=d.inboundLayers[m],b=d.tensorIndices[m];let S=e[Is.nodeKey(y,d.nodeIndices[m])];null==S&&(S=0),g.push([y.name,S,b,f])}u.push(g)}}}const c={};c.name=a.name,c.className=i,c.config=l,c.inboundNodes=u,s.push(c)}t.layers=s;const r=[];for(let a=0;a<this.inputLayers.length;a++){const i=this.inputLayers[a],u=Is.nodeKey(i,this.inputLayersNodeIndices[a]);if(!this.containerNodes.has(u))continue;let c=e[u];null==c&&(c=0),r.push([i.name,c,this.inputLayersTensorIndices[a]])}t.inputLayers=r;const o=[];for(let a=0;a<this.outputLayers.length;a++){const i=this.outputLayers[a],u=Is.nodeKey(i,this.outputLayersNodeIndices[a]);if(!this.containerNodes.has(u))continue;let c=e[u];null==c&&(c=0),o.push([i.name,c,this.outputLayersTensorIndices[a]])}return t.outputLayers=o,t}static fromConfig(t,e,s={},r=!1){const o={},a={};function i(m,y){m.name in a?a[m.name].push(y):a[m.name]=[y]}function l(m,y){const x=[];let b;for(const w of y){const S=w[0],C=w[1],k=w[2];if(b=null==w[3]?{}:w[3],!(S in o))return void i(m,y);const T=o[S];if(T.inboundNodes.length<=C)return void i(m,y);x.push(T.inboundNodes[C].outputTensors[k])}x.length>0&&m.apply(En(x),b)}function u(m){const y=m.name,x=tr(m,null!=e.customObjects?e.customObjects:{});x.setFastWeightInitDuringBuild(r),o[y]=x,m.inboundNodes.forEach(w=>{if(!(w instanceof Array))throw new O(`Corrupted configuration, expected array for nodeData: ${w}`);i(x,w)})}const c=e.name,h=e.layers;for(const m of h)u(m);for(;!yA(a);)for(const m of h){const y=o[m.name];if(y.name in a){const x=a[y.name];delete a[y.name];for(const b of x)l(y,b)}}const d=[],p=[],f=e.inputLayers;for(const m of f){const y=m[0],x=m[1],b=m[2];Zn(y in o),d.push(o[y].inboundNodes[x].outputTensors[b])}const g=e.outputLayers;for(const m of g){const y=m[0],x=m[1],b=m[2];Zn(y in o),p.push(o[y].inboundNodes[x].outputTensors[b])}return new t({inputs:d,outputs:p,name:c})}get stateful(){if(this._stateful)throw new O("Container instance unexpectedly has _stateful = true. The statefulness of a Container is determined by the Layers it contains. Its _stateful property must remain the default false.");for(const t of this.layers)if(t.stateful)return!0;return!1}resetStates(){P(()=>{this.layers.forEach(t=>{t.stateful&&t.resetStates()})})}}function g0(n,t){return function m0(n,t,e){const s=t.length;if(null==n||Array.isArray(n)&&0===n.length)return t.map(r=>null);if(1===s)return Array.isArray(n)&&1===n.length?n:"object"==typeof n&&t[0]in n?[n[t[0]]]:[n];if(Array.isArray(n)){if(n.length!==s)throw new Error(`Provided ${e} is an array of ${n.length} element(s), but the model has ${s} outputs. Make sure a set of weights is provided for each model output.`);return n}if("object"==typeof n&&Object.keys(n).length>0&&"object"==typeof n[Object.keys(n)[0]]){const r=[];return t.forEach(o=>{r.push(o in n?n[o]:null)}),r}throw new Error(`The model has multiple (${s}) outputs, so ${e} must be either an array with ${s} elements or an object with ${t} keys. Provided ${e} not understood: ${JSON.stringify(n)}`)}(n,t,"classWeight")}function y0(n,t,e,s){return Xf.apply(this,arguments)}function Xf(){return(Xf=(0,W.Z)(function*(n,t,e,s){if(null!=t||null!=s)throw new Error("Support sampleWeight is not implemented yet");if(null!=e){const r=P(()=>{if(1===n.shape.length)return Ks(n);if(2===n.shape.length){if(n.shape[1]>1)return Qr(n,1);if(1===n.shape[1])return F(n,[n.shape[0]]);throw new Error(`Encountered unexpected last-dimension size (${n.shape[1]}) during handling of class weights. The size is expected to be >= 1.`)}throw new Error(`Unexpected rank of target (y) tensor (${n.rank}) during handling of class weights. The rank is expected to be 1 or 2.`)}),o=Array.from(yield r.data());Be(r);const a=[];return o.forEach(i=>{if(null==e[i])throw new Error(`classWeight must contain all classes in the training data. The class ${i} exists in the data but not in classWeight`);a.push(e[i])}),mn(a,"float32")}return null})).apply(this,arguments)}function DR(n,t){return D(n,t)}function x0(n,t){let e,s;e=t.xs,s=t.ys,I(null!=e&&null!=s,()=>`A Dataset iterator for fitDataset() is expected to generate objects of the form \`{xs: xVal, ys: yVal}\`, where the two values may be \`tf.Tensor\`, an array of Tensors, or a map of string to Tensor.  The provided Dataset instead generates ${t}`);const o=b0("input",n.inputNames,e),a=b0("output",n.outputNames,s),i=o[0].shape[0];I(o.length===n.inputs.length,()=>`LayersModel has ${n.inputs.length} inputs, but the dataset provides ${o.length} inputs.  (Expected input keys: ${JSON.stringify(n.inputNames)})`),I(a.length===n.outputs.length,()=>`LayersModel has ${n.outputs.length} outputs, but the dataset provides ${a.length} outputs.  (Expected output keys: ${JSON.stringify(n.outputNames)})`);for(let l=0;l<o.length;l++)I(o[l].shape[0]===i,()=>`Batch size mismatch: input ${n.inputNames[l]} has ${o[l].shape[0]}; expected  ${i} based on input ${n.inputNames[0]}.`);for(let l=0;l<a.length;l++)I(a[l].shape[0]===i,()=>`Batch size mismatch: output ${n.outputNames[l]} has ${a[l].shape[0]}; expected  ${i} based on input ${n.inputNames[0]}.`);return{xs:o,ys:a}}function b0(n,t,e){if(e instanceof mt)return[e];if(Array.isArray(e))return I(e.length===t.length,()=>`Received an array of ${e.length} Tensors, but expected ${t.length} to match the ${n} keys ${t}.`),e;{const s=[];for(const r of t){if(null==e[r])throw new O(`The feature data generated by the dataset lacks the required ${n} key '${r}'.`);s.push(e[r])}return s}}function Zf(){return(Zf=(0,W.Z)(function*(n,t,e){const s=null!=e.batchesPerEpoch;if(I(null!=n.optimizer,()=>"You must compile a model before training/testing. Use LayersModel.compile(modelCompileConfig)."),I(null!=e,()=>"For fitDataset(), the 2nd argument (config) is required, but it is not provided in this call."),I(null!=e.epochs&&e.epochs>0&&Number.isInteger(e.epochs),()=>`For fitDataset(), config.epochs is expected to be a positive integer, but got ${e.epochs}`),I(!s||e.batchesPerEpoch>0&&Number.isInteger(e.batchesPerEpoch),()=>`For fitDataset(), config.batchesPerEpoch is expected to be a positive integer if specified, but got ${e.batchesPerEpoch}`),I(null==e.validationSplit,()=>"`validationSplit` is not supported by `fitDataset()`. Use validationData instead."),n.isTraining)throw new Error("Cannot start training because another fit() call is ongoing.");n.isTraining=!0;try{const r=null!=e.validationData;let o,a;if(r)if(w0(e.validationData))I(null==e.validationBatches||e.validationBatches>0&&Number.isInteger(e.validationBatches),()=>`For fitDataset() with dataset-based validation, config.validationBatches is expected not to be provided, or to be a positive integer, but got ${e.validationBatches}`);else{const m=function OR(n){if(3===n.length)throw new Pe("Validation with sample weights is not implemented yet.");return{xs:n[0],ys:n[1]}}(e.validationData);o=m.xs,a=m.ys}const i=n.makeTrainFunction(),l=n.getDedupedMetricsNames();let u;u=r?l.slice().concat(l.map(m=>"val_"+m)):l.slice();const c=s0(e.callbacks,e.yieldEvery),h=null==e.verbose?1:e.verbose,{callbackList:d,history:p}=r0(c,h,e.epochs,null,null,function PR(n,t){let e=null;return null!=t.batchesPerEpoch?e=t.batchesPerEpoch:Number.isFinite(n.size)&&(e=n.size),e}(t,e),null,r,u);d.setModel(n),n.history=p,yield d.onTrainBegin(),n.stopTraining_=!1;let f=null==e.initialEpoch?0:e.initialEpoch,g=yield t.iterator();for(;f<e.epochs;){const m={};yield d.onEpochBegin(f);let y=0,x=0;for(s||(g=yield t.iterator());!s||y<e.batchesPerEpoch;){const b=yield g.next();if(s&&b.done){console.warn(`You provided \`batchesPerEpoch\` as ${e.batchesPerEpoch}, but your dataset iterator ran out of data after ${y} batches; interrupting training. Make sure that your dataset can generate at least \`batchesPerEpoch * epochs\` batches (in this case, ${e.batchesPerEpoch*e.epochs} batches). You may need to use the repeat() function when building your dataset.`);break}if(null!=b.value){const{xs:w,ys:S}=x0(n,b.value),C={};C.batch=x,C.size=w[0].shape[0],yield d.onBatchBegin(x,C);const k=[];if(null!=e.classWeight){const R=g0(e.classWeight,n.outputNames);for(let L=0;L<R.length;++L)k.push(yield y0(S[L],null,R[L]))}const T=w.concat(S).concat(k),E=i(T);Be(T);for(let R=0;R<l.length;++R){const B=E[R];C[l[R]]=B,en(B)}yield d.onBatchEnd(x,C),n0(C),x++,y++}if(s?y>=e.batchesPerEpoch:b.done){if(r){let w;w=w0(e.validationData)?gt(yield n.evaluateDataset(e.validationData,{batches:e.validationBatches})):gt(n.evaluate(o,a,{batchSize:null==e.validationBatchSize?32:e.validationBatchSize,verbose:0}));for(let S=0;S<n.metricsNames.length;++S)m[`val_${n.metricsNames[S]}`]=w[S]}break}if(n.stopTraining_)break}if(yield d.onEpochEnd(f,m),f++,n.stopTraining_)break}return yield d.onTrainEnd(),yield n.history.syncData(),n.history}finally{n.isTraining=!1}})).apply(this,arguments)}function w0(n){return"function"==typeof n.iterator}function Yf(){return(Yf=(0,W.Z)(function*(n,t,e){const s=null!=(e=e||{}).batches,r=n.testFunction;let o=[];if(e.verbose>0)throw new Pe("Verbose mode is not implemented yet.");I(!s||e.batches>0&&Number.isInteger(e.batches),()=>`Test loop expects \`batches\` to be a positive integer, but received ${JSON.stringify(e.batches)}`);const a=function zR(n){return"function"==typeof n.next}(t)?t:yield t.iterator();let i=0,l=0;for(;!s||l<e.batches;){const u=yield a.next();if(o=P(()=>{if(u.value){const{xs:c,ys:h}=x0(n,u.value),d=c.concat(h),p=P(()=>r(d));if(Be(d),0===l)for(let g=0;g<p.length;++g)o.push($e(0));const f=d[0].shape[0];for(let g=0;g<p.length;++g){const m=p[g],y=o[g];o[g]=P(()=>ee(o[g],D(f,m))),l>0&&Be(y)}Be(p),i+=f,++l}return o}),u.done){s&&console.warn(`Your dataset iterator ran out of data during evaluateDataset(). Interrupting evalution. Make sure that your dataset can generate at least \`batches\` batches (in this case, ${e.batches} batches). You may need to use the repeat() function when building your dataset.`);break}}for(let u=0;u<o.length;++u){const c=o[u];o[u]=Ce(o[u],i),Be(c)}return En(o)})).apply(this,arguments)}function Qf(n){I(n>0&&Number.isInteger(n),()=>`batchSize is required to be a positive integer, but got ${n}`)}function ji(n,t,e){return null==n?[null]:Array.isArray(n)?n.map(s=>co(s,t,e-t)):co(n,t,e-t)}function Jf(n,t){return P(()=>null==n?null:Array.isArray(n)?n.map(e=>Jf(e,t)):Bb(n,"int32"===t.dtype?t:he(t,"int32")))}function em(n,t){const e=[];let s=0,r=null;for(;s<n;)r=s+t,r>=n&&(r=n),e.push([s,r]),s=r;return e}function v0(n){const t=[];n instanceof mt&&(n=[n]);for(let e=0;e<n.length;++e){const s=n[e];if(1===s.rank)t.push(Bi(s,1));else{if(0===s.rank)throw new Error("Expected tensor to be at least 1D, but received a 0D tensor (scalar).");t.push(s)}}return t}function Ns(n,t){if(null==n)return;const e=[];if(t instanceof mt)e.push(t.id);else if(Array.isArray(t))t.forEach(r=>e.push(r.id));else if(null!=t)for(const r in t)e.push(t[r].id);const s=[];if(n instanceof mt)-1===e.indexOf(n.id)&&s.push(n);else if(Array.isArray(n))n.forEach(r=>{-1===e.indexOf(r.id)&&s.push(r)});else if(null!=n)for(const r in n){const o=n[r];-1===e.indexOf(o.id)&&s.push(o)}s.forEach(r=>{r.isDisposed||r.dispose()})}function tm(n){return Array.isArray(n)}function S0(n){return!function BR(n){return n instanceof mt}(n)&&!tm(n)}function I0(n,t,e,s=!0,r=""){if(null==t||0===t.length){if(null!=n){let a=!1;if(tm(n)&&n.length>0)a=!0;else if(S0(n)){for(const i in n)if(n.hasOwnProperty(i)){a=!0;break}}else a=!0;if(a)throw new O(`Error when checking model ${r} expected no data, but got ${n}`)}return[]}if(null==n)return t.map(a=>null);let o;if(S0(n)){o=[];for(const a of t){if(null==n[a])throw new O(`No data provided for "${a}". Need data for each key in: ${t}`);o.push(n[a])}}else if(tm(n)){if(n.length!==t.length)throw new O(`Error when checking model ${r}: the Array of Tensors that you are passing to your model is not the size the model expected. Expected to see ${t.length} Tensor(s), but instead got the following list of Tensor(s): ${n}`);o=n}else{if(t.length>1)throw new O(`The model ${r} expects ${t.length} Tensor(s), but only received one Tensor. Found: Tensor with shape ${n.shape}`);o=[n]}if(o=v0(o),null!=e)for(let a=0;a<t.length;++a){if(null==e[a])continue;const i=o[a];if(i.shape.length!==e[a].length)throw new O(`Error when checking ${r}: expected ${t[a]} to have ${e[a].length} dimension(s). but got array with shape ${i.shape}`);for(let l=0;l<e[a].length;++l){if(0===l&&!s)continue;const c=e[a][l];if(null!=c&&c>=0&&i.shape[l]!==c)throw new O(`${r} expected a batch of elements where each example has shape [${e[a].slice(1,e[a].length)}] (i.e.,tensor shape [*,${e[a].slice(1,e[a].length)}]) but the ${r} received an input with ${i.shape[0]} examples, each with shape [${i.shape.slice(1,i.shape.length)}] (tensor shape [${i.shape}])`)}}return o}function N0(n,t,e,s=!0,r=""){let o;if(Array.isArray(n)){if(n.length!==t.length)throw new O(`Error when checking model ${r}: the Array of Tensors that you are passing to your model is not the size the the model expected. Expected to see ${t.length} Tensor(s), but instead got ${n.length} Tensors(s).`);o=n}else{if(t.length>1)throw new O(`The model expects ${t.length} ${r} Tensors, but only received one Tensor. Found: array with shape ${JSON.stringify(n.shape)}.`);o=[n]}if(null!=e)for(let a=0;a<t.length;++a){if(null==e[a])continue;const i=o[a];if(i.shape.length!==e[a].length)throw new O(`Error when checking ${r}: expected ${t[a]} to have ${e[a].length} dimension(s), but got array with shape ${JSON.stringify(i.shape)}`);for(let l=0;l<e[a].length;++l){if(0===l&&!s)continue;const c=e[a][l];if(null!=c&&c!==i.shape[l])throw new O(`Error when checking ${r}: expected ${t[a]} to have shape ${JSON.stringify(e[a])} but got array with shape ${JSON.stringify(i.shape)}.`)}}}let ea=(()=>{class n extends Is{constructor(e){super(e),this.isTraining=!1}summary(e,s,r=console.log){if(!this.built)throw new O("This model has never been called, thus its weights have not been created yet. So no summary can be displayed. Build the model first (e.g., by calling it on some test data).");!function $R(n,t,e,s=console.log){const r=function ER(n){let t=!0;const e=[],s=[];for(const r in n.nodesByDepth)e.push(n.nodesByDepth[r]);for(const r of e){if(r.length>1||1===r.length&&r[0].inboundLayers.length>1){t=!1;break}s.push(...r)}if(t)for(const r of n.layers){let o=!1;for(const a of r.inboundNodes)if(-1!==s.indexOf(a)){if(o){t=!1;break}o=!0}if(!t)break}return t}(n),o=["Layer (type)","Input Shape","Output shape","Param #"];let a;if(r?(t=t||90,e=e||[.32,.61,.89,1]):(t=t||115,e=e||[.24,.48,.7,.8,1]),e[e.length-1]<=1&&(e=e.map(c=>Math.floor(t*c))),!r){o.push("Receives inputs"),a=[];for(const c in n.nodesByDepth)a.push(...n.nodesByDepth[c])}s("_".repeat(t)),wc(o,e,s),s("=".repeat(t));const i=n.layers;for(let c=0;c<i.length;++c)r?AR(i[c],e,s):RR(i[c],e,a,s),s((c===i.length-1?"=":"_").repeat(t));n.checkTrainableWeightsConsistency();const l=function _R(n){let t;return t=lc(null!=n.collectedTrainableWeights?n.collectedTrainableWeights:n.trainableWeights),t}(n),u=lc(n.nonTrainableWeights);s(`Total params: ${l+u}`),s(`Trainable params: ${l}`),s(`Non-trainable params: ${u}`),s("_".repeat(t))}(this,e,s,r)}compile(e){if(null==e.loss&&(e.loss=[]),this.loss=e.loss,"string"==typeof e.optimizer)this.optimizer_=function TR(n){const t={Adagrad:()=>Zo.adagrad(.01),Adadelta:()=>Zo.adadelta(1,.95,qt()),Adam:()=>Zo.adam(.001,.9,.999,qt()),Adamax:()=>Zo.adamax(.002,.9,.999,qt(),0),RMSProp:()=>Zo.rmsprop(.001,.9,0,qt()),SGD:()=>Zo.sgd(.01)};if(t.adagrad=t.Adagrad,t.adadelta=t.Adadelta,t.adam=t.Adam,t.adamax=t.Adamax,t.rmsprop=t.RMSProp,t.sgd=t.SGD,n in t)return t[n]();throw new O(`Unknown Optimizer ${n}`)}(e.optimizer),this.isOptimizerOwned=!0;else{if(!(e.optimizer instanceof yr))throw new O("User-defined optimizer must be an instance of tf.Optimizer.");this.optimizer_=e.optimizer,this.isOptimizerOwned=!1}let s=[];if(Array.isArray(e.loss)||"string"==typeof e.loss||"function"==typeof e.loss)if(Array.isArray(e.loss)){if(e.loss.length!==this.outputs.length)throw new O(`When passing an Array as loss, it should have one entry per model output. The model has ${this.outputs.length} output(s), but you passed loss=${e.loss}.`);s=e.loss.map(l=>Gf(l))}else{const i=Gf(e.loss);this.outputs.forEach(l=>{s.push(i)})}else{e.loss=e.loss;for(const i in e.loss)if(-1===this.outputNames.indexOf(i))throw new O(`Unknown entry in loss dictionary: "${i}". Only expected the following keys: ${this.outputNames}`);for(const i of this.outputNames)null==e.loss[i]&&console.warn(`Output "${i}" is missing from loss dictionary. We assume this was done on purpose, and we will not be expecting data to be passed to ${i} during training`),s.push(Gf(e.loss[i]))}this.lossFunctions=s,this.feedOutputNames=[],this.feedOutputShapes=[],this.feedLossFns=[];for(let i=0;i<this.outputs.length;++i){const l=this.internalOutputShapes[i];this.feedOutputNames.push(this.outputNames[i]),this.feedOutputShapes.push(l),this.feedLossFns.push(this.lossFunctions[i])}const r=[];this.metrics=e.metrics,this.metricsNames=["loss"],this.metricsTensors=[],uo("loss",()=>{for(let i=0;i<this.outputs.length;++i)-1===r.indexOf(i)&&this.outputs.length>1&&(this.metricsTensors.push([this.lossFunctions[i],i]),this.metricsNames.push(this.outputNames[i]+"_loss"))});const o=function UR(n,t){if(null==n||Array.isArray(n)&&0===n.length)return t.map(s=>[]);let e;if("string"==typeof n||"function"==typeof n)e=[n];else{if(!Array.isArray(n)&&"object"!=typeof n)throw new TypeError(`Type of metrics argument not understood. Expected an string,function, Array, or Object, found: ${n}`);e=n}if(Array.isArray(e))return t.map(s=>e);{const s=[];for(const r of t){let o=e.hasOwnProperty(r)?e[r]:[];Array.isArray(o)||(o=[o]),s.push(o)}return s}}(e.metrics,this.outputNames),a=(i,l,u)=>{this.outputNames.length>1&&(l=this.outputNames[i]+"_"+l),this.metricsNames.push(l),this.metricsTensors.push([u,i])};uo("metric",()=>{for(let i=0;i<this.outputs.length;++i)-1===r.indexOf(i)&&(c=>{let d,p,f;for(const g of c){if("string"==typeof g&&-1!==["accuracy","acc","crossentropy","ce"].indexOf(g)){const y=this.internalOutputShapes[i];let x;1===y[y.length-1]||this.lossFunctions[i]===gc?-1!==["accuracy","acc"].indexOf(g)?p=a0:-1!==["crossentropy","ce"].indexOf(g)&&(p=yR):this.lossFunctions[i]===mc?-1!==["accuracy","acc"].indexOf(g)?p=xR:-1!==["crossentropy","ce"].indexOf(g)&&(p=h0):-1!==["accuracy","acc"].indexOf(g)?p=l0:-1!==["crossentropy","ce"].indexOf(g)&&(p=c0),-1!==["accuracy","acc"].indexOf(g)?x="acc":-1!==["crossentropy","ce"].indexOf(g)&&(x="ce"),f=p,d=""+x}else f=kR(g),d=""+bc(g);let m;uo(d,()=>{m=f}),a(i,d,m)}})(o[i])}),this.collectedTrainableWeights=this.trainableWeights}checkTrainableWeightsConsistency(){null!=this.collectedTrainableWeights&&this.trainableWeights.length!==this.collectedTrainableWeights.length&&console.warn("Discrepancy between trainableweights and collected trainable weights. Did you set `model.trainable` without calling `model.compile()` afterwards?")}evaluate(e,s,r={}){const o=null==r.batchSize?32:r.batchSize;Qf(o);const i=this.standardizeUserDataXY(e,s,!0,o);try{const l=i[0].concat(i[1]);return this.makeTestFunction(),En(this.testLoop(this.testFunction,l,o,r.verbose,r.steps))}finally{Ns(i[0],e),Ns(i[1],s)}}evaluateDataset(e,s){var r=this;return(0,W.Z)(function*(){return r.makeTestFunction(),function MR(n,t,e){return Yf.apply(this,arguments)}(r,e,s)})()}checkNumSamples(e,s,r,o="steps"){let a;if(null!=r){if(a=null,null!=s)throw new O(`If ${o} is set, batchSize must be null or undefined.Got batchSize = ${s}`)}else{if(null==e)throw new O(`Either the input data should have a defined shape, or ${o} shoud be specified.`);a=Array.isArray(e)?e[0].shape[0]:e.shape[0]}return a}execute(e,s){if(Array.isArray(s)&&0===s.length)throw new O("`outputs` is an empty Array, which is not allowed.");const r=Array.isArray(s),a=this.retrieveSymbolicTensors(r?s:[s]),i=new $r;if(e instanceof mt&&(e=[e]),Array.isArray(e)){if(e.length!==this.inputs.length)throw new O(`The number of inputs provided (${e.length}) does not match the number of inputs of this model (${this.inputs.length}).`);for(let u=0;u<this.inputs.length;++u)i.add(this.inputs[u],e[u])}else for(const u of this.inputs){const c=e[u.name];if(null==c)throw new O(`No value is provided for the model's input ${u.name}`);i.add(u,c)}const l=Ui(a,i);return r?l:l[0]}retrieveSymbolicTensors(e){const s=oo(null,e.length);let r=e.length;for(const o of this.layers){const a=Array.isArray(o.output)?o.output:[o.output],i=a.map(l=>l.name);for(let l=0;l<e.length;++l){const u=i.indexOf(e[l]);if(-1!==u&&(s[l]=a[u],r--),0===r)break}if(0===r)break}if(r>0){const o=[];throw s.forEach((a,i)=>{null==a&&o.push(e[i])}),new O(`Cannot find SymbolicTensors for output name(s): ${JSON.stringify(o)}`)}return s}predictLoop(e,s=32,r=!1){return P(()=>{const o=this.checkNumSamples(e);if(r)throw new Pe("Verbose predictLoop() is not implemented yet.");const a=em(o,s),i=this.outputs.map(l=>[]);for(let l=0;l<a.length;++l)P(()=>{const d=ji(e,a[l][0],a[l][1]),p=[];if(Array.isArray(d))for(let g=0;g<d.length;++g)p.push({key:this.inputs[g],value:d[g]});else p.push({key:this.inputs[0],value:d});const f=new $r(p);return Ui(this.outputs,f)}).forEach((c,h)=>i[h].push(c));return En(i.map(l=>Bt(l,0)))})}predict(e,s={}){const r=v0(e);N0(r,this.inputNames,this.feedInputShapes,!1);try{const o=null==s.batchSize?32:s.batchSize;return Qf(o),this.predictLoop(r,o)}finally{Ns(r,e)}}predictOnBatch(e){N0(e,this.inputNames,this.feedInputShapes,!0);const s=(Array.isArray(e)?e[0]:e).shape[0];return this.predictLoop(e,s)}standardizeUserDataXY(e,s,r=!0,o){if(null==this.optimizer_)throw new us("You must compile a model before training/testing. Use LayersModel.compile(modelCompileArgs).");const a=[];for(let i=0;i<this.feedOutputShapes.length;++i){const l=this.feedOutputShapes[i];a.push(this.feedLossFns[i]===mc?l.slice(0,l.length-1).concat([1]):l)}if(function VR(n,t,e){const s=Cr(n.map(o=>o.shape[0]));s.sort();const r=Cr(t.map(o=>o.shape[0]));if(r.sort(),s.length>1)throw new O(`All input Tensors (x) should have the same number of samples. Got array shapes: ${JSON.stringify(n.map(o=>o.shape))}`);if(r.length>1)throw new O(`All target Tensors (y) should have the same number of samples. Got array shapes: ${JSON.stringify(t.map(o=>o.shape))}`);if(s.length>0&&r.length>0&&!Xe(s,r))throw new O(`Input Tensors should have the same number of samples as target Tensors. Found ${s[0]} input sample(s) and ${r[0]} target sample(s).`)}(e=I0(e,this.feedInputNames,this.feedInputShapes,!1,"input"),s=I0(s,this.feedOutputNames,a,!1,"target")),function WR(n,t,e){const s=[fc,gc,Hi];for(let r=0;r<n.length;++r){const o=n[r],a=t[r],i=e[r];if(null!=a){if(a===Hi&&1===o.shape[o.shape.length-1])throw new O(`You are passing a target array of shape ${o.shape} while using a loss 'categorical_crossentropy'. 'categorical_crossentropy'expects targets to be binary matrices (1s and 0s) of shape [samples, classes].`);if(-1!==s.indexOf(a)){const l=o.shape.slice(1),u=i.slice(1);for(let c=0;c<l.length;++c){const d=u[c];if(null!=d&&l[c]!==d)throw new O(`A target Tensor with shape ${o.shape} was passed for an output of shape ${i}, while using a loss function that expects targets to have the same shape as the output.`)}}}}}(s,this.feedLossFns,this.feedOutputShapes),this.stateful&&null!=o&&o>0&&e[0].shape[0]%o!=0)throw new O(`In a stateful network, you should only pass inputs with a number of samples that is divisible by the batch size ${o}. Found: ${e[0].shape[0]} sample(s).`);return[e,s]}standardizeUserData(e,s,r,o,a=!0,i){var l=this;return(0,W.Z)(function*(){const[u,c]=l.standardizeUserDataXY(e,s,a,i);if(null!=r)throw new Error("sample weight is not supported yet.");let h=null;if(null!=o){const d=g0(o,l.outputNames);h=[];for(let p=0;p<d.length;++p)h.push(yield y0(c[p],null,d[p]))}return[u,c,h]})()}testLoop(e,s,r,o=0,a){return P(()=>{const i=this.checkNumSamples(s,r,a,"steps"),l=[];if(o>0)throw new Pe("Verbose mode is not implemented yet.");if(null!=a)throw new Pe("steps mode in testLoop() is not implemented yet");{const u=em(i,r),c=mn(ws(0,i));for(let h=0;h<u.length;++h){const d=u[h][0],p=u[h][1],f=co(c,d,p-d),g=Jf(s,f),m=e(g);if(0===h)for(let y=0;y<m.length;++y)l.push($e(0));for(let y=0;y<m.length;++y)l[y]=ee(l[y],D(p-d,m[y]))}for(let h=0;h<l.length;++h)l[h]=Ce(l[h],i)}return l})}getDedupedMetricsNames(){const e=this.metricsNames,s=[];for(let r=0;r<e.length;++r){const o=e[r];let a=o;_b(e,o)>1&&(a+=`_${_b(e.slice(0,r),o)}`),s.push(a)}return s}makeTrainFunction(){return e=>{const s=[],r=e.slice(0,this.inputs.length),o=e.slice(this.inputs.length,this.inputs.length+this.outputs.length),a=e.slice(this.inputs.length+this.outputs.length,this.inputs.length+2*this.outputs.length),i=[],u=this.collectedTrainableWeights.map(d=>d.read());return[this.optimizer_.minimize(()=>{const d=[];for(let m=0;m<this.inputs.length;++m)d.push({key:this.inputs[m],value:r[m]});const p=new $r(d),f=Ui(this.outputs,p,{training:!0});let g;for(let m=0;m<this.lossFunctions.length;++m){let x=(0,this.lossFunctions[m])(o[m],f[m]);null!=a[m]&&(x=DR(x,a[m]));const b=Rt(x);s.push(b),g=0===m?x:ee(g,x)}for(let m=0;m<this.metricsTensors.length;++m){let y;if(this.outputs.length>1&&m<this.outputs.length)y=s[m];else{const b=this.metricsTensors[m][1];y=Rt((0,this.metricsTensors[m][0])(o[b],f[b]))}en(y),i.push(y)}return g=Rt(g),this.calculateLosses().forEach(m=>{g=ee(g,m)}),g},!0,u)].concat(i)}}makeTestFunction(){this.testFunction=e=>P(()=>{const s=[];let r;const o=e.slice(0,this.inputs.length),a=e.slice(this.inputs.length,this.inputs.length+this.outputs.length),i=[];for(let c=0;c<this.inputs.length;++c)i.push({key:this.inputs[c],value:o[c]});const l=new $r(i),u=Ui(this.outputs,l);for(let c=0;c<this.lossFunctions.length;++c){const d=Rt((0,this.lossFunctions[c])(a[c],u[c]));r=0===c?d:ee(r,d),s.push(r)}for(let c=0;c<this.metricsTensors.length;++c){const d=this.metricsTensors[c][1],p=Rt((0,this.metricsTensors[c][0])(a[d],u[d]));s.push(p)}return s})}fit(e,s,r={}){var o=this;return(0,W.Z)(function*(){if(o.isTraining)throw new Error("Cannot start training because another fit() call is ongoing.");let a,i,l,u,c,h,d,p,f;o.isTraining=!0;try{const g=null==r.batchSize?32:r.batchSize;Qf(g);const m=!1,y=yield o.standardizeUserData(e,s,r.sampleWeight,r.classWeight,m,g);a=y[0],i=y[1],f=y[2];let b,x=!1;if(null!=r.validationData&&r.validationData.length>0){if(x=!0,2!==r.validationData.length)throw 3===r.validationData.length?new Pe("validationData including sample weights is not supported yet."):new O(`When passing validation data, it must contain 2 (valX, valY) or 3 (valX, valY, valSampleWeight) items; ${r.validationData} is invalid.`);c=r.validationData[0],h=r.validationData[1];const L=!0,B=yield o.standardizeUserData(c,h,null,null,L,g);d=B[0],p=B[1],b=d.concat(p)}else if(null!=r.validationSplit&&r.validationSplit>0&&r.validationSplit<1){x=!0;const L=Math.floor(a[0].shape[0]*(1-r.validationSplit)),B=a[0].shape[0];d=ji(a,L,B),l=a,a=ji(a,0,L),p=ji(i,L,B),u=i,i=ji(i,0,L),b=d.concat(p)}else null!=r.validationSteps&&(x=!0);const w=a.concat(i).concat(f);o.checkTrainableWeightsConsistency();const S=o.makeTrainFunction(),C=o.getDedupedMetricsNames();let k,T;x?(o.makeTestFunction(),k=o.testFunction,T=C.slice().concat(C.map(L=>"val_"+L))):(k=null,b=[],T=C.slice());const E=s0(r.callbacks,r.yieldEvery);return yield o.fitLoop(S,w,C,g,r.epochs,r.verbose,E,k,b,r.shuffle,T,r.initialEpoch,null,null)}finally{o.isTraining=!1,Ns(a,e),Ns(i,s),Ns(l,e),Ns(u,s),Ns(d,c),Ns(p,h),null!=f&&Be(f)}})()}fitLoop(e,s,r,o,a,i,l,u,c,h,d,p,f,g){var m=this;return(0,W.Z)(function*(){null==o&&(o=32),null==a&&(a=1),null==h&&(h=!0),null==p&&(p=0);let y=!1;if(null!=u&&null!=c&&(y=!0),null!=g&&(y=!0,null==f))throw new O("Can only use `validationSteps` when doing step-wise training, i.e., `stepsPerEpoch` must be set.");const x=m.checkNumSamples(s,o,f,"steps_per_epoch");let b;null!=x&&(b=ws(0,x)),null==i&&(i=1);const{callbackList:w,history:S}=r0(l,i,a,p,x,f,o,y,d);w.setModel(m),m.history=S,yield w.onTrainBegin(),m.stopTraining_=!1;for(let C=p;C<a;++C){yield w.onEpochBegin(C);const k={};if(null!=f)throw new Pe("stepsPerEpoch mode is not implemented yet.");{if("batch"===h)throw new Pe("batch shuffling is not implemneted yet");h&&bn(b);const T=mn(b),E=em(x,o);for(let R=0;R<E.length;++R){const L={};if(yield w.onBatchBegin(R,L),P(()=>{const B=E[R][0],U=E[R][1],H=co(T,B,U-B);L.batch=R,L.size=U-B;const j=Jf(s,H),Z=e(j);for(let Y=0;Y<r.length;++Y){const Q=Z[Y];L[r[Y]]=Q,en(Q)}if(R===E.length-1&&y){const Y=m.testLoop(u,c,o);for(let K=0;K<r.length;++K){const Q=r[K],se=Y[K];en(se),k["val_"+Q]=se}}}),yield w.onBatchEnd(R,L),n0(L),m.stopTraining_)break}T.dispose()}if(yield w.onEpochEnd(C,k),m.stopTraining_)break}return yield w.onTrainEnd(),yield m.history.syncData(),m.history})()}fitDataset(e,s){var r=this;return(0,W.Z)(function*(){return function LR(n,t,e){return Zf.apply(this,arguments)}(r,e,s)})()}trainOnBatch(e,s){var r=this;return(0,W.Z)(function*(){const o=yield r.standardizeUserData(e,s),a=o[0],i=o[1],u=r.makeTrainFunction()(a.concat(i)),c=[];for(const h of u){const d=yield h.data();c.push(d[0])}return Be(u),Ns(o[0],e),Ns(o[1],s),En(c)})()}getNamedWeights(e){const s=[],r=null!=e&&e.trainableOnly,o=r?this.trainableWeights:this.weights,a=this.getWeights(r);for(let i=0;i<o.length;++i)r&&!o[i].trainable||s.push({name:o[i].originalName,tensor:a[i]});return s}set stopTraining(e){this.stopTraining_=e}get stopTraining(){return this.stopTraining_}get optimizer(){return this.optimizer_}set optimizer(e){this.optimizer_!==e&&(this.optimizer_=e,this.isOptimizerOwned=!1)}dispose(){const e=super.dispose();if(0===e.refCountAfterDispose&&null!=this.optimizer&&this.isOptimizerOwned){const s=Kd().numTensors;this.optimizer_.dispose(),e.numDisposedVariables+=s-Kd().numTensors}return e}getLossIdentifiers(){let e;if("string"==typeof this.loss)e=er(this.loss);else if(Array.isArray(this.loss)){for(const s of this.loss)if("string"!=typeof s)throw new Error("Serialization of non-string loss is not supported.");e=this.loss.map(s=>er(s))}else{const s=Object.keys(this.loss);e={};const r=this.loss;for(const o of s){if("string"!=typeof r[o])throw new Error("Serialization of non-string loss is not supported.");e[o]=er(r[o])}}return e}getMetricIdentifiers(){if("string"==typeof this.metrics||"function"==typeof this.metrics)return[er(bc(this.metrics))];if(Array.isArray(this.metrics))return this.metrics.map(e=>er(bc(e)));{const e={};for(const s in this.metrics)e[s]=er(bc(this.metrics[s]));return e}}getTrainingConfig(){return{loss:this.getLossIdentifiers(),metrics:this.getMetricIdentifiers(),optimizer_config:{class_name:this.optimizer.getClassName(),config:this.optimizer.getConfig()}}}loadTrainingConfig(e){if(null!=e.weighted_metrics)throw new Error("Loading weight_metrics is not supported yet.");if(null!=e.loss_weights)throw new Error("Loading loss_weights is not supported yet.");if(null!=e.sample_weight_mode)throw new Error("Loading sample_weight_mode is not supported yet.");const r=tr(jf(e.optimizer_config));let o,a;if("string"==typeof e.loss)o=ao(e.loss);else if(Array.isArray(e.loss))o=e.loss.map(i=>ao(i));else if(null!=e.loss){o={};for(const i in e.loss)o[i]=ao(e.loss[i])}if(Array.isArray(e.metrics))a=e.metrics.map(i=>ao(i));else if(null!=e.metrics){a={};for(const i in e.metrics)a[i]=ao(e.metrics[i])}this.compile({loss:o,metrics:a,optimizer:r})}save(e,s){var r=this;return(0,W.Z)(function*(){if("string"==typeof e){const h=ey(e);if(0===h.length)throw new O(`Cannot find any save handlers for URL '${e}'`);if(h.length>1)throw new O(`Found more than one (${h.length}) save handlers for URL '${e}'`);e=h[0]}if(null==e.save)throw new O("LayersModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");const o=yield Rd(r.getNamedWeights(s)),u={modelTopology:r.toJSON(null,!1),format:"layers-model",generatedBy:"TensorFlow.js tfjs-layers v4.10.0",convertedBy:null};if(null!=s&&s.includeOptimizer&&null!=r.optimizer){u.trainingConfig=r.getTrainingConfig();const h="optimizer",{data:d,specs:p}=yield Rd(yield r.optimizer.getWeights(),h);o.specs.push(...p),o.data=Xg([o.data,d])}return null!=r.userDefinedMetadata&&(p0(r.userDefinedMetadata,r.name,!0),u.userDefinedMetadata=r.userDefinedMetadata),u.weightData=o.data,u.weightSpecs=o.specs,e.save(u)})()}setUserDefinedMetadata(e){p0(e,this.name),this.userDefinedMetadata=e}getUserDefinedMetadata(){return this.userDefinedMetadata}}return n.className="Model",n})();te(ea),te((()=>{class n extends ea{}return n.className="Functional",n})()),te((()=>{class n extends ea{constructor(e){if(super({inputs:[],outputs:[]}),e=e||{},this.trainable=!0,this.built=!1,this.name=null!=e.name?e.name:sc("sequential_"),null!=e.layers)for(const s of e.layers)this.add(s)}checkShape(e){if(e.inboundNodes[0].outputTensors[0].shape.some(r=>r<0))throw new O(`Negative dimension size caused by adding layer ${e.name} with input shape [${e.inboundNodes[0].inputTensors[0].shape}]`)}add(e){const s=e instanceof n||e instanceof ea;let r;if(s){if(r=e,1!==r.outputs.length)throw new O("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");if(1!==r.inputs.length)throw new O("All layers in a Sequential model should have a single input tensor. For multi-input layers, use the functional API.")}if(0===this.outputs.length){if(0===e.inboundNodes.length){if(null==e.batchInputShape)throw new O("The first layer in a Sequential model must get an `inputShape` or `batchInputShape` argument.");const o=function KA(n){if(null==n.batchShape&&null==n.shape)throw new Error("Please provide to Input either a `shape` or a `batchShape` argument. Note that `shape` does not include the batch dimension.");if(null!=n.batchShape&&null!=n.shape)throw new O("Please provide either a `shape` or `batchShape` argument to Input, but not both.");let t=n.batchShape;null!=n.shape&&null==t&&(t=[null].concat(n.shape));let e=n.dtype;return null==e&&(e="float32"),new cc({batchInputShape:t,name:n.name,dtype:e,sparse:n.sparse}).inboundNodes[0].outputTensors[0]}({batchShape:e.batchInputShape,dtype:e.dtype,name:e.name+"_input"});e.apply(o)}if(s)this.outputs=r.outputs,this.inputs=r.inputs;else{if(1!==e.inboundNodes.length)throw new O(`A layer added to a Sequential model must not already be connected somewhere else. LayersModel received layer ${e.name} which has ${e.inboundNodes.length} pre-existing inbound connections.`);if(1!==e.inboundNodes[0].outputTensors.length)throw new O("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(e),this.outputs=[e.inboundNodes[0].outputTensors[0]],this.inputs=Qb(this.outputs[0])}this.inboundNodes=[],new uc({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:oo(null,this.inputs.length),outputMasks:[null],inputShapes:this.inputs.map(o=>o.shape),outputShapes:this.outputs[0].shape})}else{const o=e.apply(this.outputs[0]);if(Array.isArray(o))throw new TypeError("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(e),this.outputs=[o],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}this.layers.push(e),this.built=!1}pop(){if(0===this.layers.length)throw new TypeError("There are no layers in the model.");if(this.layers.pop(),0===this.layers.length)this.outputs=[],this.inboundNodes=[],this.outboundNodes=[];else{const e=this.layers.length-1;this.layers[e].outboundNodes=[],this.outputs=[this.layers[e].output],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}}call(e,s){return null==this.model&&this.build(),this.model.call(e,s)}build(e){if(nt(e),0===this.inputs.length||0===this.outputs.length)throw new TypeError("Sequential model cannot be built: model is empty. Add some layers first.");this.model=new ea({inputs:this.inputs,outputs:this.outputs[0],name:this.name+"_model"}),this.model.trainable=this.trainable,this.supportsMasking=this.model.supportsMasking,this.inputLayers=this.model.inputLayers,this.inputLayersNodeIndices=this.model.inputLayersNodeIndices,this.inputLayersTensorIndices=this.model.inputLayersTensorIndices,this.outputLayers=this.model.outputLayers,this.outputLayersNodeIndices=this.model.outputLayersNodeIndices,this.outputLayersTensorIndices=this.model.outputLayersTensorIndices,this.nodesByDepth=this.model.nodesByDepth,this.containerNodes=this.model.containerNodes,this.outputNames=this.model.outputNames,this.inputNames=this.model.inputNames,this.built=!0}countParams(){return this.built||this.build(),super.countParams()}summary(e,s,r=console.log){this.built||this.build(),super.summary(e,s,r)}setWeights(e){null==this.model&&this.build(),this.model.setWeights(e)}evaluate(e,s,r={}){if(!this.built)throw new us("The model needs to be compiled before being used.");return this.model.evaluate(e,s,r)}evaluateDataset(e,s){var r=this;return(0,W.Z)(function*(){if(!r.built)throw new us("The model needs to be compiled before being used.");return r.model.evaluateDataset(e,s)})()}predict(e,s={}){return null==this.model&&this.build(),this.model.predict(e,s)}predictOnBatch(e){return null==this.model&&this.build(),this.model.predictOnBatch(e)}compile(e){this.build(),this.model.compile(e),this.optimizer_=this.model.optimizer,this.isOptimizerOwned=this.model.isOptimizerOwned,this.loss=this.model.loss,this.metrics=this.model.metrics,this.metricsTensors=this.model.metricsTensors,this.metricsNames=this.model.metricsNames}get optimizer(){return null==this.model?void 0:this.model.optimizer}set optimizer(e){this.model.optimizer=e}fit(e,s,r={}){var o=this;return(0,W.Z)(function*(){if(!o.built)throw new us("The model needs to be compiled before being used.");return o.model.fit(e,s,r)})()}fitDataset(e,s){var r=this;return(0,W.Z)(function*(){if(!r.built)throw new us("The model needs to be compiled before being used.");return r.model.fitDataset(e,s)})()}trainOnBatch(e,s){var r=this;return(0,W.Z)(function*(){return r.model.trainOnBatch(e,s)})()}static fromConfig(e,s,r={},o=!1){let a,i={};if(s instanceof Array){if(null==s[0].className||"Merge"===s[0].className)throw new O("Legacy serialization format not supported yet.");a=s}else I(null!=s.layers,()=>"When the config data for a Sequential model is not an Array, it must be an Object that contains the 'layers' field."),a=s.layers,delete s.layers,i=s;const l=new e(i);if(!(l instanceof n))throw new Pe(`Sequential.fromConfig called on non-Sequential input: ${l}`);for(const u of a){const h=tr(u,void 0,o);o&&h.setFastWeightInitDuringBuild(!0),l.add(h)}return l}set stopTraining(e){if(null==this.model)throw new O("Cannot set the stopTraining property of a sequential model before it is compiled.");this.model.stopTraining=e}get stopTraining(){if(null==this.model)throw new O("Cannot get the stopTraining property of a sequential model before it is compiled.");return this.model.stopTraining}getConfig(){const e=[];for(const s of this.layers){const r={};r.className=s.getClassName(),r.config=s.getConfig(),e.push(r)}return{name:this.name,layers:e}}}return n.className="Sequential",n})());class An extends zo{getConfig(){return{}}}te((()=>{class n extends An{apply(e,s=1){return function FA(n,t=1){if(1!==t)throw new Pe(`Support for alpha values other than 1 (${t}) is not implemented yet.`);return Ci(n)}(e,s)}}return n.className="elu",n})()),te((()=>{class n extends An{apply(e){return Dp(e)}}return n.className="selu",n})()),te((()=>{class n extends An{apply(e){return Fs(e)}}return n.className="relu",n})()),te((()=>{class n extends An{apply(e){return P(()=>to(6,Fs(e)))}}return n.className="relu6",n})()),te((()=>{class n extends An{apply(e){return e}}return n.className="linear",n})()),te((()=>{class n extends An{apply(e){return Rs(e)}}return n.className="sigmoid",n})()),te((()=>{class n extends An{apply(e){return function LA(n){return P(()=>{const t=ee(.5,D(.2,n));return On(t,0,1)})}(e)}}return n.className="hardSigmoid",n})()),te((()=>{class n extends An{apply(e){return Ho(e)}}return n.className="softplus",n})()),te((()=>{class n extends An{apply(e){return function OA(n){return P(()=>Ce(n,ee(Ht(n),1)))}(e)}}return n.className="softsign",n})()),te((()=>{class n extends An{apply(e){return Wo(e)}}return n.className="tanh",n})());let C0=(()=>{class n extends An{apply(e,s=-1){return Hu(e,s)}}return n.className="softmax",n})();function Er(n){return n.getClassName()}function om(n,t={}){return zi(n,rs.getMap().classNameMap,t,"activation")}function Ar(n){if(null==n){return om({className:"linear",config:{}})}if("string"==typeof n){const t={};return t.className=n,t.config={},om(t)}return n instanceof An?n:om(n)}te(C0),te((()=>{class n extends An{apply(e,s=-1){return Sp(e,s)}}return n.className="logSoftmax",n})()),te((()=>{class n extends An{apply(e,s=1){return P(()=>D(Rs(D(e,s)),e))}}return n.className="swish",n})()),te((()=>{class n extends An{apply(e){return P(()=>D(e,Wo(Ho(e))))}}return n.className="mish",n})());class k0 extends zo{}te((()=>{class n extends k0{constructor(e){super(),function am(n){if(null!=n&&"object"!=typeof n)throw new Error(`Argument to L1L2 regularizer's constructor is expected to be an object, but received: ${n}`)}(e),this.l1=null==e||null==e.l1?.01:e.l1,this.l2=null==e||null==e.l2?.01:e.l2,this.hasL1=0!==this.l1,this.hasL2=0!==this.l2}apply(e){return P(()=>{let s=Kt([1]);return this.hasL1&&(s=ee(s,ve(D(this.l1,Ht(e))))),this.hasL2&&(s=ee(s,ve(D(this.l2,Vi(e))))),F(s,[])})}getConfig(){return{l1:this.l1,l2:this.l2}}static fromConfig(e,s){return new e({l1:s.l1,l2:s.l2})}}return n.className="L1L2",n})());const T0={l1l2:"L1L2"};function pt(n){return Ef(n)}function $0(n,t={}){return zi(n,rs.getMap().classNameMap,t,"regularizer")}function It(n){return null==n?null:"string"==typeof n?$0({className:n in T0?T0[n]:n,config:{}}):n instanceof k0?n:$0(n)}function ta(n,t,e){if("number"==typeof n)return oo(n,t);if(n.length!==t)throw new O(`The ${e} argument must be an integer or tuple of ${t} integers. Received: ${n.length} elements.`);for(let s=0;s<t;++s){const r=n[s];if(!$A(r))throw new O(`The ${e} argument must be an integer or tuple of ${t} integers. Received: ${JSON.stringify(n)} including a non-integer number ${r}`)}return n}function Cs(n,t,e,s,r=1){if(null==n)return n;let a;return a="same"===e?n:n-(t+(t-1)*(r-1))+1,Math.floor((a+s-1)/s)}function Us(n,t,e,s){if(null==n)return null;if("valid"===s)n=n*t+Tr([e-t,0]);else{if("same"!==s)throw new O(`Unsupport padding mode: ${s}.`);n*=t}return n}function lm(n,t){return P(()=>(Pt(t),"channelsFirst"===t?Je(n,[0,2,3,1]):n))}function _0(n,t){return P(()=>(Pt(t),"channelsFirst"===t?Je(n,[0,2,3,4,1]):n))}function um(n,t,e,s=[1,1],r="valid",o,a,i=null){return P(()=>{if(null==o&&(o="channelsLast"),Pt(o),3!==n.rank&&4!==n.rank)throw new O(`conv2dWithBiasActivation expects input to be of rank 3 or 4, but received ${n.rank}.`);if(3!==t.rank&&4!==t.rank)throw new O(`conv2dWithBiasActivation expects kernel to be of rank 3 or 4, but received ${n.rank}.`);let l=lm(n,o);if("causal"===r)throw new Pe("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");return l=Lx({x:l,filter:t,strides:s,pad:"same"===r?"same":"valid",dilations:a,dataFormat:"NHWC",bias:e,activation:i}),"channelsFirst"===o&&(l=Je(l,[0,3,1,2])),l})}te((()=>{class n extends He{constructor(e){super(null==e?{}:e),this.supportsMasking=!0,null!=e&&(this.maxValue=e.maxValue)}call(e,s){e=De(e);let r=Fs(e);return null!=this.maxValue&&(r=On(r,0,this.maxValue)),r}computeOutputShape(e){return e}getConfig(){const e={maxValue:this.maxValue},s=super.getConfig();return Object.assign(e,s),e}}return n.className="ReLU",n})()),te((()=>{class n extends He{constructor(e){super(null==e?{}:e),this.DEFAULT_ALPHA=.3,null==e&&(e={}),this.alpha=null==e.alpha?this.DEFAULT_ALPHA:e.alpha}call(e,s){const r=De(e);return Fu(r,this.alpha)}computeOutputShape(e){return e}getConfig(){const e={alpha:this.alpha},s=super.getConfig();return Object.assign(e,s),e}}return n.className="LeakyReLU",n})()),te((()=>{class n extends He{constructor(e){if(super(null==e?{}:e),this.DEFAULT_ALPHA_INITIALIZER="zeros",null==e&&(e={}),this.supportsMasking=!0,this.alphaInitializer=St(e.alphaInitializer||this.DEFAULT_ALPHA_INITIALIZER),this.alphaRegularizer=It(e.alphaRegularizer),this.alphaConstraint=Yt(e.alphaConstraint),null==e.sharedAxes)this.sharedAxes=null;else if(Array.isArray(e.sharedAxes))this.sharedAxes=e.sharedAxes;else{if("number"!=typeof e.sharedAxes)throw new O(`Expected sharedAxes to be a number or an array of numbers, but got ${e.sharedAxes}`);this.sharedAxes=[e.sharedAxes]}}build(e){const s=(e=nt(e)).slice(1);if(null!=this.sharedAxes)for(const o of this.sharedAxes)s[o-1]=1;this.alpha=this.addWeight("alpha",s,"float32",this.alphaInitializer,this.alphaRegularizer,!0,this.alphaConstraint);const r={};if(null!=this.sharedAxes)for(let o=1;o<e.length;++o)r[o]=e[o];this.inputSpec=[new Xt({ndim:e.length,axes:r})],this.built=!0}call(e,s){return e=De(e),Vu(e,this.alpha.read())}getConfig(){const e={alphaInitializer:Tt(this.alphaInitializer),alphaRegularizer:pt(this.alphaRegularizer),alphaConstraint:Zt(this.alphaConstraint),sharedAxes:this.sharedAxes},s=super.getConfig();return Object.assign(e,s),e}}return n.className="PReLU",n})()),te((()=>{class n extends He{constructor(e){if(super(null==e?{}:e),this.DEFAULT_ALPHA=1,null==e&&(e={}),null!=e.alpha&&e.alpha!==this.DEFAULT_ALPHA)throw new Pe(`Non-default alpha value (${e.alpha}) is not supported by the ELU layer yet.`);this.alpha=null==e.alpha?this.DEFAULT_ALPHA:e.alpha}call(e,s){const r=De(e);return Ci(r)}computeOutputShape(e){return e}getConfig(){const e={alpha:this.alpha},s=super.getConfig();return Object.assign(e,s),e}}return n.className="ELU",n})()),te((()=>{class n extends He{constructor(e){super(null==e?{}:e),this.DEFAULT_THETA=1,null==e&&(e={}),this.theta=null==e.theta?this.DEFAULT_THETA:e.theta}call(e,s){const r=De(e);return D(r,he(_n(r,this.theta),"float32"))}computeOutputShape(e){return e}getConfig(){const e={theta:this.theta},s=super.getConfig();return Object.assign(e,s),e}}return n.className="ThresholdedReLU",n})()),te((()=>{class n extends He{constructor(e){super(null==e?{}:e),this.DEFAULT_AXIS=1,null==e&&(e={}),this.softmax=(new C0).apply,this.axis=null==e.axis?this.DEFAULT_AXIS:e.axis}call(e,s){const r=De(e);return this.softmax(r,this.axis)}computeOutputShape(e){return e}getConfig(){const e={axis:this.axis},s=super.getConfig();return Object.assign(e,s),e}}return n.className="Softmax",n})());class vc extends He{constructor(t,e){if(super(e),this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",vc.verifyArgs(e),this.rank=t,sn(this.rank,"rank"),1!==this.rank&&2!==this.rank&&3!==this.rank)throw new Pe(`Convolution layer for rank other than 1, 2, or 3 (${this.rank}) is not implemented yet.`);if(this.kernelSize=ta(e.kernelSize,t,"kernelSize"),this.strides=ta(null==e.strides?1:e.strides,t,"strides"),this.padding=null==e.padding?"valid":e.padding,Yn(this.padding),this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,Pt(this.dataFormat),this.activation=Ar(e.activation),this.useBias=null==e.useBias||e.useBias,this.biasInitializer=St(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.biasConstraint=Yt(e.biasConstraint),this.biasRegularizer=It(e.biasRegularizer),this.activityRegularizer=It(e.activityRegularizer),this.dilationRate=ta(null==e.dilationRate?1:e.dilationRate,t,"dilationRate"),1===this.rank&&Array.isArray(this.dilationRate)&&1!==this.dilationRate.length)throw new O(`dilationRate must be a number or an array of a single number for 1D convolution, but received ${JSON.stringify(this.dilationRate)}`);if(2===this.rank){if("number"==typeof this.dilationRate)this.dilationRate=[this.dilationRate,this.dilationRate];else if(2!==this.dilationRate.length)throw new O(`dilationRate must be a number or array of two numbers for 2D convolution, but received ${JSON.stringify(this.dilationRate)}`)}else if(3===this.rank)if("number"==typeof this.dilationRate)this.dilationRate=[this.dilationRate,this.dilationRate,this.dilationRate];else if(3!==this.dilationRate.length)throw new O(`dilationRate must be a number or array of three numbers for 3D convolution, but received ${JSON.stringify(this.dilationRate)}`)}static verifyArgs(t){if(Zn("kernelSize"in t,"required key 'kernelSize' not in config"),"number"!=typeof t.kernelSize&&!Rf(t.kernelSize,"number",1,3))throw new O(`BaseConv expects config.kernelSize to be number or number[] with length 1, 2, or 3, but received ${JSON.stringify(t.kernelSize)}.`)}getConfig(){const t={kernelSize:this.kernelSize,strides:this.strides,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,activation:Er(this.activation),useBias:this.useBias,biasInitializer:Tt(this.biasInitializer),biasRegularizer:pt(this.biasRegularizer),activityRegularizer:pt(this.activityRegularizer),biasConstraint:Zt(this.biasConstraint)},e=super.getConfig();return Object.assign(t,e),t}}class na extends vc{constructor(t,e){super(t,e),this.kernel=null,na.verifyArgs(e),this.filters=e.filters,sn(this.filters,"filters"),this.kernelInitializer=St(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.kernelConstraint=Yt(e.kernelConstraint),this.kernelRegularizer=It(e.kernelRegularizer)}build(t){t=nt(t);const e="channelsFirst"===this.dataFormat?1:t.length-1;if(null==t[e])throw new O(`The channel dimension of the input should be defined. Found ${t[e]}`);const s=t[e],r=this.kernelSize.concat([s,this.filters]);this.kernel=this.addWeight("kernel",r,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[{ndim:this.rank+2,axes:{[e]:s}}],this.built=!0}call(t,e){return P(()=>{let s;t=De(t);const r=null==this.bias?null:this.bias.read(),o=Ab(this.activation.getClassName());if(null!=o&&2===this.rank)s=um(t,this.kernel.read(),r,this.strides,this.padding,this.dataFormat,this.dilationRate,o);else{if(1===this.rank)s=function E0(n,t,e,s=1,r="valid",o,a=1){return P(()=>{if(null==o&&(o="channelsLast"),Pt(o),3!==n.shape.length)throw new O(`The input of a conv1dWithBias operation should be 3, but is ${n.shape.length} instead.`);if(3!==t.shape.length)throw new O(`The kernel for a conv1dWithBias operation should be 3, but is ${t.shape.length} instead`);if(null!=e&&1!==e.shape.length)throw new O(`The bias for a conv1dWithBias operation should be 1, but is ${t.shape.length} instead`);if("channelsFirst"===o&&(n=Je(n,[0,2,1])),"causal"===r)throw new Pe("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");let i=fp(n,t,s,"same"===r?"same":"valid","NWC",a);return null!=e&&(i=Ss(i,e)),i})}(t,this.kernel.read(),r,this.strides[0],this.padding,this.dataFormat,this.dilationRate[0]);else if(2===this.rank)s=um(t,this.kernel.read(),r,this.strides,this.padding,this.dataFormat,this.dilationRate);else{if(3!==this.rank)throw new Pe("convolutions greater than 3D are not implemented yet.");s=function A0(n,t,e,s=[1,1,1],r="valid",o,a){return P(()=>{if(null==o&&(o="channelsLast"),Pt(o),4!==n.rank&&5!==n.rank)throw new O(`conv3dWithBias expects input to be of rank 4 or 5, but received ${n.rank}.`);if(4!==t.rank&&5!==t.rank)throw new O(`conv3dWithBias expects kernel to be of rank 4 or 5, but received ${n.rank}.`);let i=_0(n,o);if("causal"===r)throw new Pe("The support for CAUSAL padding mode in conv3dWithBias is not implemented yet.");return i=nx(i,t,s,"same"===r?"same":"valid","NDHWC",a),null!=e&&(i=Ss(i,e)),"channelsFirst"===o&&(i=Je(i,[0,4,1,2,3])),i})}(t,this.kernel.read(),r,this.strides,this.padding,this.dataFormat,this.dilationRate)}null!=this.activation&&(s=this.activation.apply(s))}return s})}computeOutputShape(t){t=nt(t);const e=[],s="channelsLast"===this.dataFormat?t.slice(1,t.length-1):t.slice(2);for(let o=0;o<s.length;++o){const a=Cs(s[o],this.kernelSize[o],this.padding,this.strides[o],"number"==typeof this.dilationRate?this.dilationRate:this.dilationRate[o]);e.push(a)}let r=[t[0]];return"channelsLast"===this.dataFormat?(r=r.concat(e),r.push(this.filters)):(r.push(this.filters),r=r.concat(e)),r}getConfig(){const t={filters:this.filters,kernelInitializer:Tt(this.kernelInitializer),kernelRegularizer:pt(this.kernelRegularizer),kernelConstraint:Zt(this.kernelConstraint)},e=super.getConfig();return Object.assign(t,e),t}static verifyArgs(t){if(!("filters"in t)||"number"!=typeof t.filters||t.filters<1)throw new O(`Convolution layer expected config.filters to be a 'number' > 0 but got ${JSON.stringify(t.filters)}`)}}let R0=(()=>{class n extends na{constructor(e){super(2,e),n.verifyArgs(e)}getConfig(){const e=super.getConfig();return delete e.rank,e}static verifyArgs(e){if("number"!=typeof e.kernelSize&&!Rf(e.kernelSize,"number",1,2))throw new O(`Conv2D expects config.kernelSize to be number or number[] with length 1 or 2, but received ${JSON.stringify(e.kernelSize)}.`)}}return n.className="Conv2D",n})();te(R0);let D0=(()=>{class n extends na{constructor(e){super(3,e),n.verifyArgs(e)}getConfig(){const e=super.getConfig();return delete e.rank,e}static verifyArgs(e){if("number"!=typeof e.kernelSize&&(!Array.isArray(e.kernelSize)||1!==e.kernelSize.length&&3!==e.kernelSize.length))throw new O(`Conv3D expects config.kernelSize to be number or [number, number, number], but received ${JSON.stringify(e.kernelSize)}.`)}}return n.className="Conv3D",n})();te(D0),te((()=>{class n extends R0{constructor(e){if(super(e),this.inputSpec=[new Xt({ndim:4})],"same"!==this.padding&&"valid"!==this.padding)throw new O(`Conv2DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode ${this.padding}`)}build(e){if(4!==(e=nt(e)).length)throw new O("Input should have rank 4; Received input shape: "+JSON.stringify(e));const s="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[s])throw new O("The channel dimension of the inputs should be defined. Found `None`.");const r=e[s],o=this.kernelSize.concat([this.filters,r]);this.kernel=this.addWeight("kernel",o,"float32",this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[new Xt({ndim:4,axes:{[s]:r}})],this.built=!0}call(e,s){return P(()=>{let r=De(e);if(4!==r.shape.length)throw new O(`Conv2DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-${r.shape.length}`);const o=r.shape;let i,l;"channelsFirst"===this.dataFormat?(i=2,l=3):(i=1,l=2);const c=o[l],d=this.kernelSize[1],f=this.strides[1],y=[o[0],Us(o[i],this.strides[0],this.kernelSize[0],this.padding),Us(c,f,d,this.padding),this.filters];"channelsLast"!==this.dataFormat&&(r=Je(r,[0,2,3,1]));let x=gp(r,this.kernel.read(),y,this.strides,this.padding);return"channelsLast"!==this.dataFormat&&(x=Je(x,[0,3,1,2])),null!=this.bias&&(x=Ss(x,this.bias.read(),this.dataFormat)),null!=this.activation&&(x=this.activation.apply(x)),x})}computeOutputShape(e){const s=(e=nt(e)).slice();let r,o,a;"channelsFirst"===this.dataFormat?(r=1,o=2,a=3):(r=3,o=1,a=2);const i=this.kernelSize[0],l=this.kernelSize[1],u=this.strides[0],c=this.strides[1];return s[r]=this.filters,s[o]=Us(s[o],u,i,this.padding),s[a]=Us(s[a],c,l,this.padding),s}getConfig(){const e=super.getConfig();return delete e.dilationRate,e}}return n.className="Conv2DTranspose",n})()),te((()=>{class n extends D0{constructor(e){if(super(e),this.inputSpec=[new Xt({ndim:5})],"same"!==this.padding&&"valid"!==this.padding)throw new O(`Conv3DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode ${this.padding}`)}build(e){if(5!==(e=nt(e)).length)throw new O("Input should have rank 5; Received input shape: "+JSON.stringify(e));const s="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[s])throw new O("The channel dimension of the inputs should be defined. Found `None`.");const r=e[s],o=this.kernelSize.concat([this.filters,r]);this.kernel=this.addWeight("kernel",o,"float32",this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[new Xt({ndim:5,axes:{[s]:r}})],this.built=!0}call(e,s){return P(()=>{let r=De(e);if(5!==r.shape.length)throw new O(`Conv3DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-${r.shape.length}`);const o=r.shape;let i,l,u;"channelsFirst"===this.dataFormat?(u=2,i=3,l=4):(u=1,i=2,l=3);const h=o[i],d=o[l],f=this.kernelSize[1],g=this.kernelSize[2],y=this.strides[1],x=this.strides[2],C=[o[0],Us(o[u],this.strides[0],this.kernelSize[0],this.padding),Us(h,y,f,this.padding),Us(d,x,g,this.padding),this.filters];"channelsLast"!==this.dataFormat&&(r=Je(r,[0,2,3,4,1]));let k=rx(r,this.kernel.read(),C,this.strides,this.padding);return"channelsLast"!==this.dataFormat&&(k=Je(k,[0,4,1,2,3])),null!==this.bias&&(k=Ss(k,this.bias.read(),this.dataFormat)),null!==this.activation&&(k=this.activation.apply(k)),k})}computeOutputShape(e){const s=(e=nt(e)).slice();let r,o,a,i;"channelsFirst"===this.dataFormat?(r=1,o=2,a=3,i=4):(r=4,o=1,a=2,i=3);const l=this.kernelSize[0],u=this.kernelSize[1],c=this.kernelSize[2],h=this.strides[0],d=this.strides[1],p=this.strides[2];return s[r]=this.filters,s[o]=Us(s[o],h,l,this.padding),s[a]=Us(s[a],d,u,this.padding),s[i]=Us(s[i],p,c,this.padding),s}getConfig(){const e=super.getConfig();return delete e.dilationRate,e}}return n.className="Conv3DTranspose",n})());let KR=(()=>{class n extends na{constructor(e,s){if(super(e,s),this.DEFAULT_DEPTHWISE_INITIALIZER="glorotUniform",this.DEFAULT_POINTWISE_INITIALIZER="glorotUniform",this.depthwiseKernel=null,this.pointwiseKernel=null,null==s.filters)throw new O("The `filters` configuration field is required by SeparableConv, but is unspecified.");if(null!=s.kernelInitializer||null!=s.kernelRegularizer||null!=s.kernelConstraint)throw new O("Fields kernelInitializer, kernelRegularizer and kernelConstraint are invalid for SeparableConv2D. Use depthwiseInitializer, depthwiseRegularizer, depthwiseConstraint, pointwiseInitializer, pointwiseRegularizer and pointwiseConstraint instead.");if(null!=s.padding&&"same"!==s.padding&&"valid"!==s.padding)throw new O(`SeparableConv${this.rank}D supports only padding modes: 'same' and 'valid', but received ${JSON.stringify(s.padding)}`);this.depthMultiplier=null==s.depthMultiplier?1:s.depthMultiplier,this.depthwiseInitializer=St(s.depthwiseInitializer||this.DEFAULT_DEPTHWISE_INITIALIZER),this.depthwiseRegularizer=It(s.depthwiseRegularizer),this.depthwiseConstraint=Yt(s.depthwiseConstraint),this.pointwiseInitializer=St(s.depthwiseInitializer||this.DEFAULT_POINTWISE_INITIALIZER),this.pointwiseRegularizer=It(s.pointwiseRegularizer),this.pointwiseConstraint=Yt(s.pointwiseConstraint)}build(e){if((e=nt(e)).length<this.rank+2)throw new O(`Inputs to SeparableConv${this.rank}D should have rank ${this.rank+2}, but received input shape: ${JSON.stringify(e)}`);const s="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[s]||e[s]<0)throw new O(`The channel dimension of the inputs should be defined, but found ${JSON.stringify(e[s])}`);const r=e[s],o=this.kernelSize.concat([r,this.depthMultiplier]),a=[];for(let l=0;l<this.rank;++l)a.push(1);a.push(r*this.depthMultiplier,this.filters);const i=!0;this.depthwiseKernel=this.addWeight("depthwise_kernel",o,"float32",this.depthwiseInitializer,this.depthwiseRegularizer,i,this.depthwiseConstraint),this.pointwiseKernel=this.addWeight("pointwise_kernel",a,"float32",this.pointwiseInitializer,this.pointwiseRegularizer,i,this.pointwiseConstraint),this.bias=this.useBias?this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,i,this.biasConstraint):null,this.inputSpec=[new Xt({ndim:this.rank+2,axes:{[s]:r}})],this.built=!0}call(e,s){return P(()=>{let r;if(e=De(e),1===this.rank)throw new Pe("1D separable convolution is not implemented yet.");return 2===this.rank&&("channelsFirst"===this.dataFormat&&(e=Je(e,[0,2,3,1])),r=Fp(e,this.depthwiseKernel.read(),this.pointwiseKernel.read(),this.strides,this.padding,this.dilationRate,"NHWC")),this.useBias&&(r=Ss(r,this.bias.read(),this.dataFormat)),null!=this.activation&&(r=this.activation.apply(r)),"channelsFirst"===this.dataFormat&&(r=Je(r,[0,3,1,2])),r})}getConfig(){const e=super.getConfig();return delete e.rank,delete e.kernelInitializer,delete e.kernelRegularizer,delete e.kernelConstraint,e.depthwiseInitializer=Tt(this.depthwiseInitializer),e.pointwiseInitializer=Tt(this.pointwiseInitializer),e.depthwiseRegularizer=pt(this.depthwiseRegularizer),e.pointwiseRegularizer=pt(this.pointwiseRegularizer),e.depthwiseConstraint=Zt(this.depthwiseConstraint),e.pointwiseConstraint=Zt(this.pointwiseConstraint),e}}return n.className="SeparableConv",n})();function F0(n,t,e,s){if(Array.isArray(n)){if(null!=t||null!=e)throw new O("When inputs is an array, neither initialState or constants should be provided");null!=s&&(e=n.slice(n.length-s,n.length),n=n.slice(0,n.length-s)),n.length>1&&(t=n.slice(1,n.length)),n=n[0]}function r(o){return null==o||Array.isArray(o)?o:[o]}return{inputs:n,initialState:t=r(t),constants:e=r(e)}}function O0(n,t,e,s=!1,r,o,a=!1,i=!1){return P(()=>{const l=t.shape.length;if(l<3)throw new O(`Input should be at least 3D, but is ${l}D.`);const u=[1,0].concat(ws(2,l));if(t=Je(t,u),null!=o)throw new Pe("The rnn() functoin of the deeplearn.js backend does not support constants yet.");a&&console.warn("Backend rnn(): the unroll = true option is not applicable to the imperative deeplearn.js backend."),null!=r&&((r=he(he(r,"bool"),"float32")).rank===l-1&&(r=In(r,-1)),r=Je(r,u)),s&&(t=is(t,0),null!=r&&(r=is(r,0)));const c=[];let h,d=e;const p=t.shape[0],f=ls(t);let g,m;null!=r&&(g=ls(r));for(let y=0;y<p;++y){const x=f[y],b=P(()=>n(x,d));if(null==r)h=b[0],d=b[1];else{const w=P(()=>{const S=g[y],C=be(qn(S),S);return{output:ee(D(b[0],S),D(d[0],C)),newStates:d.map((E,R)=>ee(D(b[1][R],S),D(E,C)))}});h=w.output,d=w.newStates}i&&c.push(h)}return i&&(m=Xn(c,1)),[h,m,d]})}te((()=>{class n extends KR{constructor(e){super(2,e)}}return n.className="SeparableConv2D",n})()),te((()=>{class n extends na{constructor(e){super(1,e),n.verifyArgs(e),this.inputSpec=[{ndim:3}]}getConfig(){const e=super.getConfig();return delete e.rank,delete e.dataFormat,e}static verifyArgs(e){if("number"!=typeof e.kernelSize&&!Rf(e.kernelSize,"number",1,1))throw new O(`Conv1D expects config.kernelSize to be number or number[] with length 1, but received ${JSON.stringify(e.kernelSize)}.`)}}return n.className="Conv1D",n})()),te((()=>{class n extends He{constructor(e){super(e),this.cropping="number"==typeof e.cropping?[[e.cropping,e.cropping],[e.cropping,e.cropping]]:"number"==typeof e.cropping[0]?[[e.cropping[0],e.cropping[0]],[e.cropping[1],e.cropping[1]]]:e.cropping,this.dataFormat=void 0===e.dataFormat?"channelsLast":e.dataFormat,this.inputSpec=[{ndim:4}]}computeOutputShape(e){return"channelsFirst"===this.dataFormat?[e[0],e[1],e[2]-this.cropping[0][0]-this.cropping[0][1],e[3]-this.cropping[1][0]-this.cropping[1][1]]:[e[0],e[1]-this.cropping[0][0]-this.cropping[0][1],e[2]-this.cropping[1][0]-this.cropping[1][1],e[3]]}call(e,s){return P(()=>{if(e=De(e),"channelsLast"===this.dataFormat){const r=oc(e,this.cropping[0][0],e.shape[1]-this.cropping[0][0]-this.cropping[0][1],2);return oc(r,this.cropping[1][0],e.shape[2]-this.cropping[1][1]-this.cropping[1][0],3)}{const r=oc(e,this.cropping[0][0],e.shape[2]-this.cropping[0][0]-this.cropping[0][1],3);return oc(r,this.cropping[1][0],e.shape[3]-this.cropping[1][1]-this.cropping[1][0],4)}})}getConfig(){const e={cropping:this.cropping,dataFormat:this.dataFormat},s=super.getConfig();return Object.assign(e,s),e}}return n.className="Cropping2D",n})()),te((()=>{class n extends He{constructor(e){super(e),this.DEFAULT_SIZE=[2,2],this.inputSpec=[{ndim:4}],this.size=null==e.size?this.DEFAULT_SIZE:e.size,this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,Pt(this.dataFormat),this.interpolation=null==e.interpolation?"nearest":e.interpolation,function CA(n){lo(vA,"InterpolationFormat",n)}(this.interpolation)}computeOutputShape(e){return"channelsFirst"===this.dataFormat?[e[0],e[1],null==e[2]?null:this.size[0]*e[2],null==e[3]?null:this.size[1]*e[3]]:[e[0],null==e[1]?null:this.size[0]*e[1],null==e[2]?null:this.size[1]*e[2],e[3]]}call(e,s){return P(()=>{let r=De(e);const o=r.shape;if("channelsFirst"===this.dataFormat){r=Je(r,[0,2,3,1]);const a=this.size[0]*o[2],i=this.size[1]*o[3],l="nearest"===this.interpolation?Os.resizeNearestNeighbor(r,[a,i]):Os.resizeBilinear(r,[a,i]);return Je(l,[0,3,1,2])}{const a=this.size[0]*o[1],i=this.size[1]*o[2];return"nearest"===this.interpolation?Os.resizeNearestNeighbor(r,[a,i]):Os.resizeBilinear(r,[a,i])}})}getConfig(){const e={size:this.size,dataFormat:this.dataFormat,interpolation:this.interpolation},s=super.getConfig();return Object.assign(e,s),e}}return n.className="UpSampling2D",n})()),te((()=>{class n extends vc{constructor(e){super(2,e),this.depthwiseKernel=null,this.depthMultiplier=null==e.depthMultiplier?1:e.depthMultiplier,this.depthwiseInitializer=St(e.depthwiseInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.depthwiseConstraint=Yt(e.depthwiseConstraint),this.depthwiseRegularizer=It(e.depthwiseRegularizer)}build(e){if((e=nt(e)).length<4)throw new O(`Inputs to DepthwiseConv2D should have rank 4. Received input shape: ${JSON.stringify(e)}.`);const s="channelsFirst"===this.dataFormat?1:3;if(null==e[s]||e[s]<0)throw new O(`The channel dimension of the inputs to DepthwiseConv2D should be defined, but is not (${e[s]}).`);const r=e[s];this.depthwiseKernel=this.addWeight("depthwise_kernel",[this.kernelSize[0],this.kernelSize[1],r,this.depthMultiplier],null,this.depthwiseInitializer,this.depthwiseRegularizer,!0,this.depthwiseConstraint),this.bias=this.useBias?this.addWeight("bias",[r*this.depthMultiplier],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):null,this.built=!0}call(e,s){return P(()=>{let r=function qR(n,t,e=[1,1],s="valid",r,o){return P(()=>{null==r&&(r="channelsLast"),Pt(r);let a=lm(n,r);if(4!==n.rank)throw new O(`Input for depthwiseConv2d is required to be 4-D, but is instead ${n.rank}-D`);if(4!==t.rank)throw new O(`depthwiseKernel is required to be 4-D, but is instead ${t.rank}-D`);return a=Ni(a,t,e,"same"===s?"same":"valid","NHWC",o),"channelsFirst"===r&&(a=Je(a,[0,3,1,2])),a})}(e=De(e),this.depthwiseKernel.read(),this.strides,this.padding,this.dataFormat,null);return this.useBias&&(r=Ss(r,this.bias.read(),this.dataFormat)),null!=this.activation&&(r=this.activation.apply(r)),r})}computeOutputShape(e){e=nt(e);const r="channelsFirst"===this.dataFormat?e[3]:e[2],o="channelsFirst"===this.dataFormat?e[1]*this.depthMultiplier:e[3]*this.depthMultiplier,a=Cs("channelsFirst"===this.dataFormat?e[2]:e[1],this.kernelSize[0],this.padding,this.strides[0]),i=Cs(r,this.kernelSize[1],this.padding,this.strides[1]);return"channelsFirst"===this.dataFormat?[e[0],o,a,i]:[e[0],a,i,o]}getConfig(){const e=super.getConfig();return e.depthMultiplier=this.depthMultiplier,e.depthwiseInitializer=Tt(this.depthwiseInitializer),e.depthwiseRegularizer=pt(this.depthwiseRegularizer),e.depthwiseConstraint=Zt(this.depthwiseRegularizer),e}}return n.className="DepthwiseConv2D",n})());let Ki=(()=>{class n extends He{constructor(e){let s;if(super(e),null==e.cell)throw new O("cell property is missing for the constructor of RNN.");if(s=Array.isArray(e.cell)?new z0({cells:e.cell}):e.cell,null==s.stateSize)throw new O("The RNN cell should have an attribute `stateSize` (tuple of integers, one integer per RNN state).");this.cell=s,this.returnSequences=null!=e.returnSequences&&e.returnSequences,this.returnState=null!=e.returnState&&e.returnState,this.goBackwards=null!=e.goBackwards&&e.goBackwards,this._stateful=null!=e.stateful&&e.stateful,this.unroll=null!=e.unroll&&e.unroll,this.supportsMasking=!0,this.inputSpec=[new Xt({ndim:3})],this.stateSpec=null,this.states_=null,this.numConstants=null,this.keptStates=[]}getStates(){return null==this.states_?ws(0,Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1).map(s=>null):this.states_}setStates(e){this.states_=e}computeOutputShape(e){Pf(e)&&(e=e[0]);let s=this.cell.stateSize;Array.isArray(s)||(s=[s]);const r=s[0];let o;if(o=this.returnSequences?[e[0],e[1],r]:[e[0],r],this.returnState){const a=[];for(const i of s)a.push([e[0],i]);return[o].concat(a)}return o}computeMask(e,s){return P(()=>{Array.isArray(s)&&(s=s[0]);const r=this.returnSequences?s:null;if(this.returnState){const o=this.states.map(a=>null);return[r].concat(o)}return r})}get states(){if(null==this.states_){const e=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1,s=[];for(let r=0;r<e;++r)s.push(null);return s}return this.states_}set states(e){this.states_=e}build(e){if(null!=this.numConstants)throw new Pe("Constants support is not implemented in RNN yet.");Pf(e)&&(e=e[0]);const r=this.stateful?e[0]:null,o=e.slice(2);this.inputSpec[0]=new Xt({shape:[r,null,...o]});const a=[e[0]].concat(e.slice(2));let i;if(this.cell.build(a),i=Array.isArray(this.cell.stateSize)?this.cell.stateSize:[this.cell.stateSize],null!=this.stateSpec){if(!Xe(this.stateSpec.map(l=>l.shape[l.shape.length-1]),i))throw new O(`An initialState was passed that is not compatible with cell.stateSize. Received stateSpec=${this.stateSpec}; However cell.stateSize is ${this.cell.stateSize}`)}else this.stateSpec=i.map(l=>new Xt({shape:[null,l]}));this.stateful&&this.resetStates()}resetStates(e,s=!1){P(()=>{if(!this.stateful)throw new zs("Cannot call resetStates() on an RNN Layer that is not stateful.");const r=this.inputSpec[0].shape[0];if(null==r)throw new O("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if(null==this.states_)this.states_=Array.isArray(this.cell.stateSize)?this.cell.stateSize.map(o=>Kt([r,o])):[Kt([r,this.cell.stateSize])];else if(null==e)Be(this.states_),null!=this.keptStates&&(Be(this.keptStates),this.keptStates=[]),Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map(o=>Kt([r,o])):this.states_[0]=Kt([r,this.cell.stateSize]);else{if(Array.isArray(e)||(e=[e]),e.length!==this.states_.length)throw new O(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${e.length} state value(s). Input received: ${e}`);!0===s?this.keptStates.push(this.states_.slice()):Be(this.states_);for(let o=0;o<this.states_.length;++o){const a=e[o],i=Array.isArray(this.cell.stateSize)?this.cell.stateSize[o]:this.cell.stateSize,l=[r,i];if(!Xe(a.shape,l))throw new O(`State ${o} is incompatible with layer ${this.name}: expected shape=${l}, received shape=${a.shape}`);this.states_[o]=a}}this.states_=this.states_.map(o=>en(o.clone()))})}apply(e,s){let r=null==s?null:s.initialState,o=null==s?null:s.constants;null==s&&(s={});const a=F0(e,r,o,this.numConstants);e=a.inputs,r=a.initialState,o=a.constants;let i=[],l=[];if(null!=r){s.initialState=r,i=i.concat(r),this.stateSpec=[];for(const c of r)this.stateSpec.push(new Xt({shape:c.shape}));l=l.concat(this.stateSpec)}if(null!=o&&(s.constants=o,i=i.concat(o),this.numConstants=o.length),i[0]instanceof Ws){const c=[e].concat(i),h=this.inputSpec.concat(l),d=this.inputSpec;this.inputSpec=h;const p=super.apply(c,s);return this.inputSpec=d,p}return super.apply(e,s)}call(e,s){return P(()=>{const r=null==s?null:s.mask,o=null==s?null:s.training;let a=null==s?null:s.initialState;e=De(e),null==a&&(a=this.stateful?this.states_:this.getInitialState(e));const i=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1;if(a.length!==i)throw new O(`RNN Layer has ${i} state(s) but was passed ${a.length} initial state(s).`);this.unroll&&console.warn("Ignoring unroll = true for RNN layer, due to imperative backend.");const l={training:o},c=O0((g,m)=>{const y=this.cell.call([g].concat(m),l);return[y[0],y.slice(1)]},e,a,this.goBackwards,r,null,this.unroll,this.returnSequences),h=c[0],d=c[1],p=c[2];this.stateful&&this.resetStates(p,o);const f=this.returnSequences?d:h;return this.returnState?[f].concat(p):f})}getInitialState(e){return P(()=>{let s=Kt(e.shape);return s=ve(s,[1,2]),s=Bi(s),Array.isArray(this.cell.stateSize)?this.cell.stateSize.map(r=>r>1?Of(s,[1,r]):s):this.cell.stateSize>1?[Of(s,[1,this.cell.stateSize])]:[s]})}get trainableWeights(){return this.trainable?this.cell.trainableWeights:[]}get nonTrainableWeights(){return this.trainable?this.cell.nonTrainableWeights:this.cell.weights}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),null!=this.cell&&this.cell.setFastWeightInitDuringBuild(e)}getConfig(){const e=super.getConfig(),s={returnSequences:this.returnSequences,returnState:this.returnState,goBackwards:this.goBackwards,stateful:this.stateful,unroll:this.unroll};null!=this.numConstants&&(s.numConstants=this.numConstants);const r=this.cell.getConfig();return this.getClassName()===n.className&&(s.cell={className:this.cell.getClassName(),config:r}),Object.assign(Object.assign(Object.assign({},r),e),s)}static fromConfig(e,s,r={}){const a=tr(s.cell,r);return new e(Object.assign(s,{cell:a}))}}return n.className="RNN",n})();te(Ki);class Sc extends He{}let L0=(()=>{class n extends Sc{constructor(e){super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=e.units,sn(this.units,"units"),this.activation=Ar(null==e.activation?this.DEFAULT_ACTIVATION:e.activation),this.useBias=null==e.useBias||e.useBias,this.kernelInitializer=St(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=St(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=St(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=It(e.kernelRegularizer),this.recurrentRegularizer=It(e.recurrentRegularizer),this.biasRegularizer=It(e.biasRegularizer),this.kernelConstraint=Yt(e.kernelConstraint),this.recurrentConstraint=Yt(e.recurrentConstraint),this.biasConstraint=Yt(e.biasConstraint),this.dropout=Qo([1,Tr([0,null==e.dropout?0:e.dropout])]),this.recurrentDropout=Qo([1,Tr([0,null==e.recurrentDropout?0:e.recurrentDropout])]),this.dropoutFunc=e.dropoutFunc,this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){e=nt(e),this.kernel=this.addWeight("kernel",[e[e.length-1],this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.bias=this.useBias?this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):null,this.built=!0}call(e,s){return P(()=>{if(2!==e.length)throw new O(`SimpleRNNCell expects 2 input Tensors, got ${e.length}.`);let r=e[1];e=e[0];const o=null!=s.training&&s.training;let a;0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=Rr({ones:()=>qn(e),rate:this.dropout,training:o,dropoutFunc:this.dropoutFunc})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=Rr({ones:()=>qn(r),rate:this.recurrentDropout,training:o,dropoutFunc:this.dropoutFunc}));const i=this.dropoutMask,l=this.recurrentDropoutMask;a=Bs(null!=i?D(e,i):e,this.kernel.read()),null!=this.bias&&(a=Ss(a,this.bias.read())),null!=l&&(r=D(r,l));let u=ee(a,Bs(r,this.recurrentKernel.read()));return null!=this.activation&&(u=this.activation.apply(u)),[u,u]})}getConfig(){const e=super.getConfig(),s={units:this.units,activation:Er(this.activation),useBias:this.useBias,kernelInitializer:Tt(this.kernelInitializer),recurrentInitializer:Tt(this.recurrentInitializer),biasInitializer:Tt(this.biasInitializer),kernelRegularizer:pt(this.kernelRegularizer),recurrentRegularizer:pt(this.recurrentRegularizer),biasRegularizer:pt(this.biasRegularizer),activityRegularizer:pt(this.activityRegularizer),kernelConstraint:Zt(this.kernelConstraint),recurrentConstraint:Zt(this.recurrentConstraint),biasConstraint:Zt(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout};return Object.assign(Object.assign({},e),s)}}return n.className="SimpleRNNCell",n})();te(L0),te((()=>{class n extends Ki{constructor(e){e.cell=new L0(e),super(e)}call(e,s){return P(()=>(null!=this.cell.dropoutMask&&(Be(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(Be(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null),super.call(e,{mask:null==s?null:s.mask,training:null==s?null:s.training,initialState:null==s?null:s.initialState})))}static fromConfig(e,s){return new e(s)}}return n.className="SimpleRNN",n})());let P0=(()=>{class n extends Sc{constructor(e){if(super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",e.resetAfter)throw new O("GRUCell does not support reset_after parameter set to true.");this.units=e.units,sn(this.units,"units"),this.activation=Ar(void 0===e.activation?this.DEFAULT_ACTIVATION:e.activation),this.recurrentActivation=Ar(void 0===e.recurrentActivation?this.DEFAULT_RECURRENT_ACTIVATION:e.recurrentActivation),this.useBias=null==e.useBias||e.useBias,this.kernelInitializer=St(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=St(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=St(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=It(e.kernelRegularizer),this.recurrentRegularizer=It(e.recurrentRegularizer),this.biasRegularizer=It(e.biasRegularizer),this.kernelConstraint=Yt(e.kernelConstraint),this.recurrentConstraint=Yt(e.recurrentConstraint),this.biasConstraint=Yt(e.biasConstraint),this.dropout=Qo([1,Tr([0,null==e.dropout?0:e.dropout])]),this.recurrentDropout=Qo([1,Tr([0,null==e.recurrentDropout?0:e.recurrentDropout])]),this.dropoutFunc=e.dropoutFunc,this.implementation=e.implementation,this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){e=nt(e),this.kernel=this.addWeight("kernel",[e[e.length-1],3*this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,3*this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.bias=this.useBias?this.addWeight("bias",[3*this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):null,this.built=!0}call(e,s){return P(()=>{if(2!==e.length)throw new O(`GRUCell expects 2 input Tensors (inputs, h, c), got ${e.length}.`);const r=null!=s.training&&s.training;let o=e[1];e=e[0],0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=Rr({ones:()=>qn(e),rate:this.dropout,training:r,count:3,dropoutFunc:this.dropoutFunc})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=Rr({ones:()=>qn(o),rate:this.recurrentDropout,training:r,count:3,dropoutFunc:this.dropoutFunc}));const i=this.recurrentDropoutMask;let l,u,c;0<this.dropout&&this.dropout<1&&(e=D(e,this.dropoutMask[0]));let h=Bs(e,this.kernel.read());this.useBias&&(h=Ss(h,this.bias.read())),0<this.recurrentDropout&&this.recurrentDropout<1&&(o=D(o,i[0]));const d=this.recurrentKernel.read(),[p,f]=Ln(d,[2*this.units,this.units],d.rank-1),g=Bs(o,p),[m,y,x]=Ln(h,3,h.rank-1),[b,w]=Ln(g,2,g.rank-1);l=this.recurrentActivation.apply(ee(m,b)),u=this.recurrentActivation.apply(ee(y,w));const S=Bs(D(u,o),f);c=this.activation.apply(ee(x,S));const C=ee(D(l,o),D(ee(1,wt(l)),c));return[C,C]})}getConfig(){const e=super.getConfig(),s={units:this.units,activation:Er(this.activation),recurrentActivation:Er(this.recurrentActivation),useBias:this.useBias,kernelInitializer:Tt(this.kernelInitializer),recurrentInitializer:Tt(this.recurrentInitializer),biasInitializer:Tt(this.biasInitializer),kernelRegularizer:pt(this.kernelRegularizer),recurrentRegularizer:pt(this.recurrentRegularizer),biasRegularizer:pt(this.biasRegularizer),activityRegularizer:pt(this.activityRegularizer),kernelConstraint:Zt(this.kernelConstraint),recurrentConstraint:Zt(this.recurrentConstraint),biasConstraint:Zt(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation,resetAfter:!1};return Object.assign(Object.assign({},e),s)}}return n.className="GRUCell",n})();te(P0),te((()=>{class n extends Ki{constructor(e){0===e.implementation&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),e.cell=new P0(e),super(e)}call(e,s){return P(()=>(null!=this.cell.dropoutMask&&(Be(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(Be(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null),super.call(e,{mask:null==s?null:s.mask,training:null==s?null:s.training,initialState:null==s?null:s.initialState})))}static fromConfig(e,s){return 0===s.implmentation&&(s.implementation=1),new e(s)}}return n.className="GRU",n})());let cm=(()=>{class n extends Sc{constructor(e){super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=e.units,sn(this.units,"units"),this.activation=Ar(void 0===e.activation?this.DEFAULT_ACTIVATION:e.activation),this.recurrentActivation=Ar(void 0===e.recurrentActivation?this.DEFAULT_RECURRENT_ACTIVATION:e.recurrentActivation),this.useBias=null==e.useBias||e.useBias,this.kernelInitializer=St(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=St(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=St(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.unitForgetBias=e.unitForgetBias,this.kernelRegularizer=It(e.kernelRegularizer),this.recurrentRegularizer=It(e.recurrentRegularizer),this.biasRegularizer=It(e.biasRegularizer),this.kernelConstraint=Yt(e.kernelConstraint),this.recurrentConstraint=Yt(e.recurrentConstraint),this.biasConstraint=Yt(e.biasConstraint),this.dropout=Qo([1,Tr([0,null==e.dropout?0:e.dropout])]),this.recurrentDropout=Qo([1,Tr([0,null==e.recurrentDropout?0:e.recurrentDropout])]),this.dropoutFunc=e.dropoutFunc,this.implementation=e.implementation,this.stateSize=[this.units,this.units],this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){var s;let o;if(e=nt(e),this.kernel=this.addWeight("kernel",[e[e.length-1],4*this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,4*this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias){if(this.unitForgetBias){const a=this.biasInitializer,i=this.units;o=new((s=class extends hs{apply(u,c){const h=a.apply([i]),d=(new Wb).apply([i]),p=a.apply([2*i]);return Mb(Mb(h,d),p)}}).className="CustomInit",s)}else o=this.biasInitializer;this.bias=this.addWeight("bias",[4*this.units],null,o,this.biasRegularizer,!0,this.biasConstraint)}else this.bias=null;this.built=!0}call(e,s){return P(()=>{const r=null!=s.training&&s.training;if(3!==e.length)throw new O(`LSTMCell expects 3 input Tensors (inputs, h, c), got ${e.length}.`);let o=e[1];const a=e[2];e=e[0],0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=Rr({ones:()=>qn(e),rate:this.dropout,training:r,count:4,dropoutFunc:this.dropoutFunc})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=Rr({ones:()=>qn(o),rate:this.recurrentDropout,training:r,count:4,dropoutFunc:this.dropoutFunc}));const l=this.recurrentDropoutMask;let u,c,h,d;0<this.dropout&&this.dropout<1&&(e=D(e,this.dropoutMask[0]));let p=Bs(e,this.kernel.read());0<this.recurrentDropout&&this.recurrentDropout<1&&(o=D(o,l[0])),p=ee(p,Bs(o,this.recurrentKernel.read())),this.useBias&&(p=Ss(p,this.bias.read()));const[f,g,m,y]=Ln(p,4,p.rank-1);u=this.recurrentActivation.apply(f),c=this.recurrentActivation.apply(g),h=ee(D(c,a),D(u,this.activation.apply(m))),d=this.recurrentActivation.apply(y);const x=D(d,this.activation.apply(h));return[x,x,h]})}getConfig(){const e=super.getConfig(),s={units:this.units,activation:Er(this.activation),recurrentActivation:Er(this.recurrentActivation),useBias:this.useBias,kernelInitializer:Tt(this.kernelInitializer),recurrentInitializer:Tt(this.recurrentInitializer),biasInitializer:Tt(this.biasInitializer),unitForgetBias:this.unitForgetBias,kernelRegularizer:pt(this.kernelRegularizer),recurrentRegularizer:pt(this.recurrentRegularizer),biasRegularizer:pt(this.biasRegularizer),activityRegularizer:pt(this.activityRegularizer),kernelConstraint:Zt(this.kernelConstraint),recurrentConstraint:Zt(this.recurrentConstraint),biasConstraint:Zt(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation};return Object.assign(Object.assign({},e),s)}}return n.className="LSTMCell",n})();te(cm),te((()=>{class n extends Ki{constructor(e){0===e.implementation&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),e.cell=new cm(e),super(e)}call(e,s){return P(()=>(null!=this.cell.dropoutMask&&(Be(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(Be(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null),super.call(e,{mask:null==s?null:s.mask,training:null==s?null:s.training,initialState:null==s?null:s.initialState})))}static fromConfig(e,s){return 0===s.implmentation&&(s.implementation=1),new e(s)}}return n.className="LSTM",n})());let z0=(()=>{class n extends Sc{constructor(e){super(e),this.cells=e.cells}get stateSize(){const e=[];for(const s of this.cells.slice().reverse())Array.isArray(s.stateSize)?e.push(...s.stateSize):e.push(s.stateSize);return e}call(e,s){return P(()=>{let r=e.slice(1);const o=[];for(const l of this.cells.slice().reverse())Array.isArray(l.stateSize)?o.push(r.splice(0,l.stateSize.length)):o.push(r.splice(0,1));o.reverse();const a=[];let i;for(let l=0;l<this.cells.length;++l){const u=this.cells[l];r=o[l],i=0===l?[e[0]].concat(r):[i[0]].concat(r),i=u.call(i,s),a.push(i.slice(1))}r=[];for(const l of a.slice().reverse())r.push(...l);return[i[0]].concat(r)})}build(e){let s;Pf(e)&&(e=e[0]),this.cells.forEach((r,o)=>{uo(`RNNCell_${o}`,()=>{r.build(e),s=Array.isArray(r.stateSize)?r.stateSize[0]:r.stateSize,e=[e[0],s]})}),this.built=!0}getConfig(){const e=super.getConfig(),o={cells:this.cells.map(a=>({className:a.getClassName(),config:a.getConfig()}))};return Object.assign(Object.assign({},e),o)}static fromConfig(e,s,r={}){const o=[];for(const a of s.cells)o.push(tr(a,r));return new e({cells:o})}get trainableWeights(){if(!this.trainable)return[];const e=[];for(const s of this.cells)e.push(...s.trainableWeights);return e}get nonTrainableWeights(){const e=[];for(const s of this.cells)e.push(...s.nonTrainableWeights);if(!this.trainable){const s=[];for(const r of this.cells)s.push(...r.trainableWeights);return s.concat(e)}return e}getWeights(){const e=[];for(const s of this.cells)e.push(...s.weights);return zf(e)}setWeights(e){const s=[];for(const r of this.cells){const a=e.splice(r.weights.length);for(let i=0;i<r.weights.length;++i)s.push([r.weights[i],a[i]])}Mf(s)}}return n.className="StackedRNNCells",n})();function Rr(n){const{ones:t,rate:e,training:s=!1,count:r=1,dropoutFunc:o}=n,a=()=>null!=o?o(t(),e):Vb(t(),e),i=()=>Wi(a,t,s);return!r||r<=1?en(i().clone()):Array(r).fill(void 0).map(i).map(u=>en(u.clone()))}te(z0);let ZR=(()=>{class n extends Ki{constructor(e){if(e.unroll)throw new Pe("Unrolling is not possible with convolutional RNNs.");if(Array.isArray(e.cell))throw new Pe("It is not possible at the moment to stack convolutional cells.");super(e),this.inputSpec=[new Xt({ndim:5})]}call(e,s){return P(()=>{if(null!=this.cell.dropoutMask&&(Be(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(Be(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null),s&&s.constants)throw new O("ConvRNN2D cell does not support constants");return super.call(e,{mask:null==s?null:s.mask,training:null==s?null:s.training,initialState:null==s?null:s.initialState})})}computeOutputShape(e){let s=this.computeSingleOutputShape(e);return this.returnSequences||(s=[s[0],...s.slice(2)]),this.returnState&&(s=[s,...Array(2).fill([e[0],...s.slice(-3)])]),s}getInitialState(e){return P(()=>{const{stateSize:s}=this.cell,o=this.computeSingleOutputShape(e.shape),i=Kt([o[0],...o.slice(2)]);return Array.isArray(s)?Array(s.length).fill(i):[i]})}resetStates(e,s=!1){P(()=>{if(!this.stateful)throw new zs("Cannot call resetStates() on an RNN Layer that is not stateful.");const r=this.inputSpec[0].shape,o=this.computeSingleOutputShape(r),a=[o[0],...o.slice(2)];if(null==r[0])throw new O("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if(null==this.getStates())this.states_=Array.isArray(this.cell.stateSize)?this.cell.stateSize.map(()=>Kt(a)):[Kt(a)];else if(null==e)Be(this.states_),null!=this.keptStates&&(Be(this.keptStates),this.keptStates=[]),Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map(()=>Kt(a)):this.states_[0]=Kt(a);else{if(Array.isArray(e)||(e=[e]),e.length!==this.states_.length)throw new O(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${e.length} state value(s). Input received: ${e}`);s?this.keptStates.push(this.states_.slice()):Be(this.states_);for(let l=0;l<this.states_.length;++l){const u=e[l],c=a;if(!Xe(u.shape,c))throw new O(`State ${l} is incompatible with layer ${this.name}: expected shape=${c}, received shape=${u.shape}`);this.states_[l]=u}}this.states_=this.states_.map(l=>en(l.clone()))})}computeSingleOutputShape(e){const{dataFormat:s,filters:r,kernelSize:o,padding:a,strides:i,dilationRate:l}=this.cell,u="channelsFirst"===s,h=e[u?4:3],d=Cs(e[u?3:2],o[0],a,i[0],l[0]),p=Cs(h,o[1],a,i[1],l[1]);return[...e.slice(0,2),...u?[r,d,p]:[d,p,r]]}}return n.className="ConvRNN2D",n})(),M0=(()=>{class n extends cm{constructor(e){const{filters:s,kernelSize:r,strides:o,padding:a,dataFormat:i,dilationRate:l}=e;super(Object.assign(Object.assign({},e),{units:s})),this.filters=s,sn(this.filters,"filters"),this.kernelSize=ta(r,2,"kernelSize"),this.kernelSize.forEach(u=>sn(u,"kernelSize")),this.strides=ta(o||1,2,"strides"),this.strides.forEach(u=>sn(u,"strides")),this.padding=a||"valid",Yn(this.padding),this.dataFormat=i||"channelsLast",Pt(this.dataFormat),this.dilationRate=ta(l||1,2,"dilationRate"),this.dilationRate.forEach(u=>sn(u,"dilationRate"))}build(e){var s;e=nt(e);const r="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[r])throw new O(`The channel dimension of the input should be defined. Found ${e[r]}`);const i=this.kernelSize.concat([e[r],4*this.filters]);this.kernel=this.addWeight("kernel",i,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint);const l=this.kernelSize.concat([this.filters,4*this.filters]);if(this.recurrentKernel=this.addWeight("recurrent_kernel",l,null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias){let u;if(this.unitForgetBias){const c=this.biasInitializer,h=this.filters;u=new((s=class extends hs{apply(p,f){return Ff([c.apply([h]),Kn([h]),c.apply([2*h])])}}).className="CustomInit",s)}else u=this.biasInitializer;this.bias=this.addWeight("bias",[4*this.filters],null,u,this.biasRegularizer,!0,this.biasConstraint)}this.built=!0}call(e,s){return P(()=>{if(3!==e.length)throw new O(`ConvLSTM2DCell expects 3 input Tensors (inputs, h, c), got ${e.length}.`);const r=s.training||!1,o=e[0],a=e[1],i=e[2];0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=Rr({ones:()=>qn(o),rate:this.dropout,training:r,count:4,dropoutFunc:this.dropoutFunc}));const u=this.dropoutMask,c=(re,le,ie)=>le&&le[ie]?D(le[ie],re):re;let h=c(o,u,0),d=c(o,u,1),p=c(o,u,2),f=c(o,u,3);0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=Rr({ones:()=>qn(a),rate:this.recurrentDropout,training:r,count:4,dropoutFunc:this.dropoutFunc}));const g=this.recurrentDropoutMask;let m=c(a,g,0),y=c(a,g,1),x=c(a,g,2),b=c(a,g,3);const[S,C,k,T]=Ln(this.kernel.read(),4,3),[E,R,L,B]=this.useBias?Ln(this.bias.read(),4):[null,null,null,null];h=this.inputConv(h,S,E,this.padding),d=this.inputConv(d,C,R,this.padding),p=this.inputConv(p,k,L,this.padding),f=this.inputConv(f,T,B,this.padding);const[U,H,j,Z]=Ln(this.recurrentKernel.read(),4,3);m=this.recurrentConv(m,U),y=this.recurrentConv(y,H),x=this.recurrentConv(x,j),b=this.recurrentConv(b,Z);const Y=this.recurrentActivation.apply(ee(h,m)),K=this.recurrentActivation.apply(ee(d,y)),Q=ee(D(K,i),D(Y,this.activation.apply(ee(p,x)))),se=D(this.recurrentActivation.apply(ee(f,b)),this.activation.apply(Q));return[se,se,Q]})}getConfig(){const r=function(n,t){var e={};for(var s in n)Object.prototype.hasOwnProperty.call(n,s)&&t.indexOf(s)<0&&(e[s]=n[s]);if(null!=n&&"function"==typeof Object.getOwnPropertySymbols){var r=0;for(s=Object.getOwnPropertySymbols(n);r<s.length;r++)t.indexOf(s[r])<0&&Object.prototype.propertyIsEnumerable.call(n,s[r])&&(e[s[r]]=n[s[r]])}return e}(super.getConfig(),["units"]),o={filters:this.filters,kernelSize:this.kernelSize,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,strides:this.strides};return Object.assign(Object.assign({},r),o)}inputConv(e,s,r,o){const a=vr(e,s,this.strides,o||"valid","channelsFirst"===this.dataFormat?"NCHW":"NHWC",this.dilationRate);return r?Ss(a,r,this.dataFormat):a}recurrentConv(e,s){return vr(e,s,1,"same","channelsFirst"===this.dataFormat?"NCHW":"NHWC")}}return n.className="ConvLSTM2DCell",n})();te(M0),te((()=>{class n extends ZR{constructor(e){const s=new M0(e);super(Object.assign(Object.assign({},e),{cell:s}))}static fromConfig(e,s){return new e(s)}}return n.className="ConvLSTM2D",n})());let B0=(()=>{class n extends He{constructor(e){super(e),this.rate=Math.max(Math.min(e.rate,1),0),this.noiseShape=e.noiseShape,this.seed=e.seed,this.supportsMasking=!0}getNoiseShape(e){if(null==this.noiseShape)return this.noiseShape;const s=e.shape,r=[];for(let o=0;o<this.noiseShape.length;++o)r.push(null==this.noiseShape[o]?s[o]:this.noiseShape[o]);return r}call(e,s){return P(()=>{this.invokeCallHook(e,s);const r=De(e);if(0<this.rate&&this.rate<1){const o=null!=s.training&&s.training,a=this.getNoiseShape(r);return Wi(()=>Vb(r,this.rate,a,this.seed),()=>r,o)}return e})}getConfig(){const e={rate:this.rate,noiseShape:this.noiseShape,seed:this.seed},s=super.getConfig();return Object.assign(e,s),e}dispose(){return super.dispose()}}return n.className="Dropout",n})();te(B0),te((()=>{class n extends B0{constructor(e){super(e),this.inputSpec=[{ndim:3}]}getNoiseShape(e){const s=e.shape;return[s[0],1,s[2]]}}return n.className="SpatialDropout1D",n})()),te((()=>{class n extends He{constructor(e){if(super(e),this.activation=null,this.useBias=!0,this.kernel=null,this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",null==e.batchInputShape&&null==e.inputShape&&null!=e.inputDim){let s=null;null!=e.batchSize&&(s=e.batchSize),this.batchInputShape=[s,e.inputDim]}this.units=e.units,sn(this.units,"units"),this.activation=Ar(e.activation),null!=e.useBias&&(this.useBias=e.useBias),this.kernelInitializer=St(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.biasInitializer=St(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelConstraint=Yt(e.kernelConstraint),this.biasConstraint=Yt(e.biasConstraint),this.kernelRegularizer=It(e.kernelRegularizer),this.biasRegularizer=It(e.biasRegularizer),this.activityRegularizer=It(e.activityRegularizer),this.supportsMasking=!0,this.inputSpec=[{minNDim:2}]}build(e){const s=(e=nt(e))[e.length-1];null==this.kernel&&(this.kernel=this.addWeight("kernel",[s,this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint))),this.inputSpec=[{minNDim:2,axes:{[-1]:s}}],this.built=!0}computeOutputShape(e){const s=(e=nt(e)).slice();return s[s.length-1]=this.units,s}call(e,s){return P(()=>{this.invokeCallHook(e,s);const r=De(e),o=Ab(this.activation.getClassName());let a;return null!=o?a=Bs(r,this.kernel.read(),o,this.bias?this.bias.read():null):(a=Bs(r,this.kernel.read()),null!=this.bias&&(a=Ss(a,this.bias.read())),null!=this.activation&&(a=this.activation.apply(a))),a})}getConfig(){const e={units:this.units,activation:Er(this.activation),useBias:this.useBias,kernelInitializer:Tt(this.kernelInitializer),biasInitializer:Tt(this.biasInitializer),kernelRegularizer:pt(this.kernelRegularizer),biasRegularizer:pt(this.biasRegularizer),activityRegularizer:pt(this.activityRegularizer),kernelConstraint:Zt(this.kernelConstraint),biasConstraint:Zt(this.biasConstraint)},s=super.getConfig();return Object.assign(e,s),e}}return n.className="Dense",n})()),te((()=>{class n extends He{constructor(e){super(e=e||{}),this.inputSpec=[{minNDim:3}],this.dataFormat=e.dataFormat}computeOutputShape(e){e=nt(e);for(const s of e.slice(1))if(null==s)throw new O(`The shape of the input to "Flatten" is not fully defined (got ${e.slice(1)}). Make sure to pass a complete "input_shape" or "batch_input_shape" argument to the first layer in your model.`);return[e[0],kr(e,1)]}call(e,s){return P(()=>{this.invokeCallHook(e,s);let r=De(e);if("channelsFirst"===this.dataFormat&&r.rank>1){const o=[0];for(let a=2;a<r.rank;++a)o.push(a);o.push(1),r=Je(r,o)}return function DA(n){if(n.rank<=1)throw new O(`batchFlatten requires a minimum rank of 2. Got rank: ${n.rank}.`);const t=[n.shape[0],kr(n.shape,1)];return F(n,t)}(r)})}getConfig(){const e={};null!=this.dataFormat&&(e.dataFormat=this.dataFormat);const s=super.getConfig();return Object.assign(e,s),e}}return n.className="Flatten",n})()),te((()=>{class n extends He{constructor(e){super(e),this.supportsMasking=!0,this.activation=Ar(e.activation)}call(e,s){return P(()=>{this.invokeCallHook(e,s);const r=De(e);return this.activation.apply(r)})}getConfig(){const e={activation:Er(this.activation)},s=super.getConfig();return Object.assign(e,s),e}}return n.className="Activation",n})()),te((()=>{class n extends He{constructor(e){super(e),this.n=e.n,this.inputSpec=[{ndim:2}]}computeOutputShape(e){return[e[0],this.n,e[1]]}call(e,s){return P(()=>function AA(n,t){return P(()=>{if(2!==n.shape.length)throw new O(`repeat() expects a rank-2 tensor, but received a rank-${n.shape.length} tensor.`);return Of(Bi(n,1),[1,t,1])})}(e=De(e),this.n))}getConfig(){const e={n:this.n},s=super.getConfig();return Object.assign(e,s),e}}return n.className="RepeatVector",n})()),te((()=>{class n extends He{constructor(e){super(e),this.targetShape=e.targetShape;for(let s=0;s<this.targetShape.length;++s)this.isUnknown(this.targetShape[s])&&(this.targetShape[s]=null)}isUnknown(e){return e<0||null==e}fixUnknownDimension(e,s){const r="Total size of new array must be unchanged.",o=s.slice();let a=1,i=null;for(let u=0;u<o.length;++u){const c=o[u];if(this.isUnknown(c)){if(null!==i)throw new O("Can only specifiy one unknown dimension.");i=u}else a*=c}const l=kr(e);if(null!==i){if(0===a||l%a!=0)throw new O(r);o[i]=l/a}else if(l!==a)throw new O(r);return o}computeOutputShape(e){let s=!1;for(let r=0;r<e.length;++r)if(this.isUnknown(e[r])){s=!0;break}return s?e.slice(0,1).concat(this.targetShape):e.slice(0,1).concat(this.fixUnknownDimension(e.slice(1),this.targetShape))}call(e,s){return P(()=>{this.invokeCallHook(e,s);const r=De(e),o=r.shape,a=o.slice(0,1).concat(this.fixUnknownDimension(o.slice(1),this.targetShape));return F(r,a)})}getConfig(){const e={targetShape:this.targetShape},s=super.getConfig();return Object.assign(e,s),e}}return n.className="Reshape",n})()),te((()=>{class n extends He{constructor(e){if(super(e),null==e.dims)throw new Error("Required configuration field `dims` is missing during Permute constructor call.");if(!Array.isArray(e.dims))throw new Error(`Permute constructor requires \`dims\` to be an Array, but received ${e.dims} instead.`);const s=ws(1,e.dims.length+1);if(!Xe(e.dims.slice().sort(),s))throw new Error("Invalid permutation `dims`: "+JSON.stringify(e.dims)+" `dims` must contain consecutive integers starting from 1.");this.dims=e.dims,this.dimsIncludingBatch=[0].concat(this.dims),this.inputSpec=[new Xt({ndim:this.dims.length+1})]}computeOutputShape(e){const s=(e=nt(e)).slice();return this.dims.forEach((r,o)=>{s[o+1]=e[r]}),s}call(e,s){return Je(De(e),this.dimsIncludingBatch)}getConfig(){const e={dims:this.dims},s=super.getConfig();return Object.assign(e,s),e}}return n.className="Permute",n})()),te((()=>{class n extends He{constructor(e){super(null==e?{}:e),this.supportsMasking=!0,this.maskValue=null!=e?null==e.maskValue?0:e.maskValue:0}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),s={maskValue:this.maskValue};return Object.assign(s,e),s}computeMask(e,s){const r=De(e);return $u(jo(r,this.maskValue),-1)}call(e,s){return P(()=>{this.invokeCallHook(e,s);const r=De(e),i=$u(jo(r,this.maskValue),-1,!0);return D(r,he(i,r.dtype))})}}return n.className="Masking",n})()),te((()=>{class n extends He{constructor(e){if(super(e),this.embeddings=null,this.DEFAULT_EMBEDDINGS_INITIALIZER="randomUniform",null==e.batchInputShape&&null==e.inputShape){let s=null;null!=e.batchSize&&(s=e.batchSize),this.batchInputShape=null==e.inputLength?[s,null]:[s].concat(gt(e.inputLength))}this.inputDim=e.inputDim,sn(this.inputDim,"inputDim"),this.outputDim=e.outputDim,sn(this.outputDim,"outputDim"),this.embeddingsInitializer=St(e.embeddingsInitializer||this.DEFAULT_EMBEDDINGS_INITIALIZER),this.embeddingsRegularizer=It(e.embeddingsRegularizer),this.activityRegularizer=It(e.activityRegularizer),this.embeddingsConstraint=Yt(e.embeddingsConstraint),this.maskZero=e.maskZero,this.supportsMasking=e.maskZero,this.inputLength=e.inputLength}build(e){this.embeddings=this.addWeight("embeddings",[this.inputDim,this.outputDim],this.dtype,this.embeddingsInitializer,this.embeddingsRegularizer,!0,this.embeddingsConstraint),this.built=!0}warnOnIncompatibleInputShape(e){}computeMask(e,s){return P(()=>this.maskZero?(e=De(e),jo(e,Ye(e))):null)}computeOutputShape(e){if(e=nt(e),null==this.inputLength)return[...e,this.outputDim];const s=gt(this.inputLength);if(s.length!==e.length-1)throw new O(`"inputLength" is ${this.inputLength}, but received input shape has shape ${e}`);{let r=0;for(let o=0;o<s.length;++o){const a=s[o],i=e[o+1];if(null!=a&&null!=i&&a!==i)throw new O(`"inputLength" is ${this.inputLength}, but received input shape has shape ${e}`);null==a&&(s[r]=i),r++}}return[e[0],...s,this.outputDim]}call(e,s){return P(()=>{this.invokeCallHook(e,s);let r=De(e);"int32"!==r.dtype&&(r=Ms(r,"int32"));const o=Bb(this.embeddings.read(),F(r,[r.size]));return F(o,nt(this.computeOutputShape(r.shape)))})}getConfig(){const e={inputDim:this.inputDim,outputDim:this.outputDim,embeddingsInitializer:Tt(this.embeddingsInitializer),embeddingsRegularizer:pt(this.embeddingsRegularizer),activityRegularizer:pt(this.activityRegularizer),embeddingsConstraint:Zt(this.embeddingsConstraint),maskZero:this.maskZero,inputLength:this.inputLength},s=super.getConfig();return Object.assign(e,s),e}}return n.className="Embedding",n})());class ho extends He{constructor(t){super(t||{}),this.supportsMasking=!0}mergeFunction(t){throw new Pe}computeElementwiseOpOutputShape(t,e){if(null==t||null==e)return null;if(t.length<e.length)return this.computeElementwiseOpOutputShape(e,t);if(0===e.length)return t;const s=t.slice(0,t.length-e.length);for(let r=0;r<e.length;++r){const o=t[t.length-e.length+r],a=e[r];if(null==o||null==a||o<0||a<0)s.push(null);else if(1===o)s.push(a);else if(1===a)s.push(o);else{if(o!==a)throw new O("Operands could not be broadcast together with shapes "+JSON.stringify(t)+" "+JSON.stringify(e));s.push(o)}}return s}build(t){if(Array.isArray(t)&&!Array.isArray(t[0])&&(t=[nt(t)]),t.length<2)throw new O(`A merge layer should be called on an Array of at least 2 inputs. Got ${t.length} input(s).`);let e=[];for(const o of t)null!=o&&null!==o[0]&&e.push(o[0]);if(e=Cr(e),e.length>1)throw new O(`Can not merge tensors with different batch sizes. Got tensors with shapes: ${JSON.stringify(t)}.`);let s=null==t[0]?null:t[0].slice(1);for(let o=1;o<t.length;++o){const a=null==t[o]?null:t[o].slice(1);s=this.computeElementwiseOpOutputShape(s,a)}const r=t.map(o=>o.length);this.reshapeRequired=-1!==t.indexOf(null)||1!==Cr(r).length}call(t,e){return P(()=>{if(this.reshapeRequired){const s=[],r=t.map(o=>o.rank);if(-1===r.indexOf(null)){const o=Tr(r);for(let a of t){const i=a.rank;for(let l=0;l<o-i;++l)a=Bi(a,1);s.push(a)}return this.mergeFunction(s)}{let o=!1;for(const l of t){const u=l.rank;if(null==u){const c=l.shape,h=c[0],d=c.slice(1).concat([h]);let p=F(l,[h].concat(kr(c.slice(1))));p=Je(p,[1,0]),p=F(p,d),s.push(p),o=!0}else if(u>1){const c=ws(1,u).concat([0]);s.push(Je(l,c)),o=!0}else s.push(l)}let a=this.mergeFunction(s);const i=a.rank;if(o)if(null==i){const l=a.shape,c=l[l.length-1],h=[c].concat(l.slice(0,l.length-1));a=F(Je(F(a,[-1,c]),[1,0]),h)}else if(i>1){const l=[i-1].concat(ws(0,i-1));a=Je(a,l)}return a}}return this.mergeFunction(t)})}computeOutputShape(t){let e;e=null==t[0]?null:t[0].slice(1);for(let r=1;r<t.length;++r){const o=null==t[r]?null:t[r].slice(1);e=this.computeElementwiseOpOutputShape(e,o)}let s=[];for(const r of t)null!=r&&null!==r[0]&&s.push(r[0]);return s=Cr(s),e=1===s.length?s.concat(e):[null].concat(e),e}computeMask(t,e){return P(()=>{if(null==e)return null;if(!Array.isArray(e))throw new O("`mask` should be an Array");if(!Array.isArray(t))throw new O("`inputs` should be an Array");if(e.length!==t.length)throw new O(`The Array 'inputs' and 'mask' are expected to have the same length, but have different lengths (${t.length} vs ${e.length})`);if(e.every(r=>null==r))return null;let s=(e=e.map(r=>null==r?r:In(r,0)))[0];for(let r=1;r<e.length-1;++r)s=Ds(s,e[r]);return s})}}function qi(n,t){for(;n<0;)n+=t;return n}function Xi(n,t,e,s,r,o=.001){let a;if(2===n.rank)a=Ky(n,t,e,s,r,o);else if(3===n.rank)a=qy(n,t,e,s,r,o);else{if(4!==n.rank)throw new Pe(`batchNormalization is not implemented for array of rank ${n.rank} yet`);a=Xy(n,t,e,s,r,o)}return a}function Ic(n,t,e,s,r,o){return P(()=>{let a;Pt(r),Db(o),Yn(s),null==e&&(e=[1,1]),null==s&&(s="valid"),null==r&&(r="channelsLast"),null==o&&(o="max"),n=lm(n,r);const i="same"===s?"same":"valid";return a="max"===o?zu(n,t,e,i):_u(n,t,e,i),"channelsFirst"===r&&(a=Je(a,[0,3,1,2])),a})}function V0(n,t,e,s,r,o){return P(()=>{let a;Pt(r),Db(o),Yn(s),null==e&&(e=[1,1,1]),null==s&&(s="valid"),null==r&&(r="channelsLast"),null==o&&(o="max"),n=_0(n,r);const i="same"===s?"same":"valid";return a="max"===o?wx(n,t,e,i):jy(n,t,e,i),"channelsFirst"===r&&(a=Je(a,[0,4,1,2,3])),a})}te((()=>{class n extends ho{constructor(e){super(e)}mergeFunction(e){return P(()=>{let s=e[0].clone();for(let r=1;r<e.length;++r)s=ee(s,e[r]);return s})}}return n.className="Add",n})()),te((()=>{class n extends ho{constructor(e){super(e)}mergeFunction(e){return P(()=>{let s=e[0].clone();for(let r=1;r<e.length;++r)s=D(s,e[r]);return s})}}return n.className="Multiply",n})()),te((()=>{class n extends ho{constructor(e){super(e)}mergeFunction(e){return P(()=>{let s=e[0].clone();for(let r=1;r<e.length;++r)s=ee(s,e[r]);return D(1/e.length,s)})}}return n.className="Average",n})()),te((()=>{class n extends ho{constructor(e){super(e)}mergeFunction(e){return P(()=>{let s=e[0];for(let r=1;r<e.length;++r)s=xs(s,e[r]);return s})}}return n.className="Maximum",n})()),te((()=>{class n extends ho{constructor(e){super(e)}mergeFunction(e){return P(()=>{let s=e[0];for(let r=1;r<e.length;++r)s=to(s,e[r]);return s})}}return n.className="Minimum",n})()),te((()=>{class n extends ho{constructor(e){super(e),this.DEFAULT_AXIS=-1,null==e&&(e={}),this.axis=null==e.axis?this.DEFAULT_AXIS:e.axis,this.supportsMasking=!0,this.reshapeRequired=!1}build(e){if(!Array.isArray(e)||!Array.isArray(e[0])||1===e.length)throw new O("A `Concatenate` layer should be called on a list of at least 2 inputs");let s=!0;for(const o of e)if(null!=o){s=!1;break}if(s)return;const r=[];for(let o=0;o<e.length;++o){const a=e[o].slice();a.splice(this.axis,1);let i=!1;for(const l of r)if(Xe(l,a)){i=!0;break}i||r.push(a)}if(r.length>1)throw new O("A `Concatenate` layer requires inputs with matching shapes except for the concat axis. Got input shapes: "+JSON.stringify(e))}mergeFunction(e){return P(()=>Ff(e,this.axis))}computeOutputShape(e){if(!Array.isArray(e)||!Array.isArray(e[0]))throw new O("A `Concatenate` layer should be called on a list of inputs.");const s=e,r=s[0].slice(),o=this.axis<0?r.length+this.axis:this.axis;for(const a of s.slice(1)){if(null==r[o]||null==a[o]){r[o]=null;break}r[o]+=a[o]}return r}computeMask(e,s){if(null==s)return null;if(!Array.isArray(s))throw new O("`mask` should be an array for Concatenate");if(!Array.isArray(e))throw new O("`inputs` should be an array for Concatenate");if(s.length!==e.length)throw new O(`Mismatch in the length of mask (${s.length}) and the legnth of inputs (${e.length})`);return P(()=>{let r=!0;if(s.forEach(i=>{null==i||(r=!1)}),r)return null;const o=[];for(let i=0;i<e.length;++i)o.push(null==s[i]?he(qn(e[i]),"bool"):s[i].rank<e[i].rank?In(s[i],-1):s[i]);const a=Bt(o,this.axis);return hp(a,-1,!1)})}getConfig(){const e={axis:this.axis},s=super.getConfig();return Object.assign(e,s),e}}return n.className="Concatenate",n})()),te((()=>{class n extends ho{constructor(e){super(e),this.axes=e.axes,this.normalize=null!=e.normalize&&e.normalize,this.supportsMasking=!0,this.reshapeRequired=!1}build(e){I(Array.isArray(e)&&2===e.length&&Array.isArray(e[0])&&Array.isArray(e[1]),()=>"A `Dot` layer should be called on a list of exactly 2 inputs.");const s=e[0],r=e[1];if(s.length>3||r.length>3)throw new Pe("Dot layer does not support tensors of 4D or higher rank yet.");const o=this.interpretAxes(s,r);if(s[o[0]]!==r[o[1]])throw new O(`Dimension incompatibility: ${s[o[0]]} !== ${r[o[1]]}`)}mergeFunction(e){if(2!==e.length)throw new O(`A \`Dot\` layer must be called on exactly 2 inputs, but received ${e.length} input(s).`);let o,s=e[0],r=e[1];return o=Array.isArray(this.axes)?this.axes.map((a,i)=>qi(a,e[i].shape.length)):[qi(this.axes,s.shape.length),qi(this.axes,r.shape.length)],this.normalize&&(s=pc(s,o[0]),r=pc(r,o[1])),function YR(n,t,e){if(n.shape.length>3||t.shape.length>3)throw new Pe("batchDot is not implemented for tensors of 4D or higher rank yet");if(I(n.shape.length>=2,()=>`batchDot requires the rank of x to be >= 2, but got ${n.shape.length}`),I(n.shape.length>=2,()=>`batchDot requires the rank of y to be >= 2, but got ${t.shape.length}`),"number"==typeof e&&(e=[e,e]),"complex64"===n.dtype||"complex64"===t.dtype)throw new Pe("batchDot is not implemented for complex64-type Tensors yet.");const s=n.shape.length,r=t.shape.length;null==e&&(e=[s-1,r-2]);const o=e;return P(()=>{let a,i;if(s>r){a=s-r;const l=[];for(let u=0;u<a;++u)l.push(1);t=F(t,t.shape.concat(l))}else if(r>s){a=r-s;const l=[];for(let u=0;u<a;++u)l.push(1);n=F(n,n.shape.concat(l))}else a=0;if(i=2===n.shape.length&&2===t.shape.length?o[0]===o[1]?ve(D(n,t),o[0]):ve(D(Je(n,[1,0]),t),o[1]):Ke(n,t,o[0]!==n.shape.length-1,o[1]===t.shape.length-1),a>0){let l;l=s>r?s+r-3:s-1;const u=[];for(let c=l;c<l+a;++c)u.push(c);i=so(i,u)}return 1===i.shape.length&&(i=In(i,1)),i})}(s,r,o)}interpretAxes(e,s){let r;return r=Array.isArray(this.axes)?this.axes:[qi(this.axes,e.length),qi(this.axes,s.length)],r}computeOutputShape(e){I(Array.isArray(e)&&2===e.length&&Array.isArray(e[0])&&Array.isArray(e[1]),()=>"A `Dot` layer should be called on a list of exactly 2 inputs.");const s=e[0].slice(),r=e[1].slice();if(s.length>3||r.length>3)throw new Pe("Dot layer does not support tensors of 4D or higher rank yet.");const o=this.interpretAxes(s,r);s.splice(o[0],1),r.splice(o[1],1),r.splice(0,1);const a=s.concat(r);return 1===a.length&&a.push(1),a}computeMask(e,s){return null}getConfig(){const e={axes:this.axes,normalize:this.normalize},s=super.getConfig();return Object.assign(e,s),e}}return n.className="Dot",n})()),te((()=>{class n extends He{constructor(e){super(e),this.supportsMasking=!0,this.stddev=e.stddev}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),s={stddev:this.stddev};return Object.assign(s,e),s}call(e,s){return P(()=>{this.invokeCallHook(e,s);const r=De(e);return Wi(()=>ee(ac(r.shape,0,this.stddev),r),()=>r,s.training||!1)})}}return n.className="GaussianNoise",n})()),te((()=>{class n extends He{constructor(e){super(e),this.supportsMasking=!0,this.rate=e.rate}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),s={rate:this.rate};return Object.assign(s,e),s}call(e,s){return P(()=>{this.invokeCallHook(e,s);const r=De(e);return this.rate>0&&this.rate<1?Wi(()=>{const a=Math.sqrt(this.rate/(1-this.rate));return D(r,ac(r.shape,1,a))},()=>r,s.training||!1):r})}}return n.className="GaussianDropout",n})()),te((()=>{class n extends He{constructor(e){super(e),this.supportsMasking=!0,this.rate=e.rate,this.noiseShape=e.noiseShape}_getNoiseShape(e){return this.noiseShape||De(e).shape}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),s={rate:this.rate};return Object.assign(s,e),s}call(e,s){return P(()=>{if(this.rate<1&&this.rate>0){const r=this._getNoiseShape(e);return Wi(()=>{const a=De(e),u=-1.7580993408473766;let c=Ir(no(r),this.rate);c=Ms(c,"float32");const h=((1-this.rate)*(1+this.rate*u**2))**-.5,d=-h*u*this.rate,p=ee(D(a,c),D(ee(c,-1),u));return ee(D(p,h),d)},()=>De(e),s.training||!1)}return e})}}return n.className="AlphaDropout",n})()),te((()=>{class n extends He{constructor(e){null==e&&(e={}),super(e),this.supportsMasking=!0,this.axis=null==e.axis?-1:e.axis,this.momentum=null==e.momentum?.99:e.momentum,this.epsilon=null==e.epsilon?.001:e.epsilon,this.center=null==e.center||e.center,this.scale=null==e.scale||e.scale,this.betaInitializer=St(e.betaInitializer||"zeros"),this.gammaInitializer=St(e.gammaInitializer||"ones"),this.movingMeanInitializer=St(e.movingMeanInitializer||"zeros"),this.movingVarianceInitializer=St(e.movingVarianceInitializer||"ones"),this.betaConstraint=Yt(e.betaConstraint),this.gammaConstraint=Yt(e.gammaConstraint),this.betaRegularizer=It(e.betaRegularizer),this.gammaRegularizer=It(e.gammaRegularizer)}build(e){e=nt(e);const s=this.axis>=0?this.axis:this.axis+e.length,r=e[s];if(null==r)throw new O(`Axis ${s} of input tensor should have a defined dimension but the layer received an input with shape ${JSON.stringify(e)}.`);this.inputSpec=[new Xt({ndim:e.length,axes:{[s]:r}})];const o=[r];this.scale&&(this.gamma=this.addWeight("gamma",o,null,this.gammaInitializer,this.gammaRegularizer,!0,this.gammaConstraint)),this.center&&(this.beta=this.addWeight("beta",o,null,this.betaInitializer,this.betaRegularizer,!0,this.betaConstraint)),this.movingMean=this.addWeight("moving_mean",o,null,this.movingMeanInitializer,null,!1),this.movingVariance=this.addWeight("moving_variance",o,null,this.movingVarianceInitializer,null,!1),this.built=!0}call(e,s){return P(()=>{const r=null!=s.training&&s.training,o=De(e),a=o.shape,i=a.length,l=ws(0,i),u=this.axis>=0?this.axis:this.axis+i;l.splice(u,1);const c=oo(1,i);c[u]=a[u];const h=l.slice();h.sort();const d=!Xe(h,ws(0,i).slice(0,i-1));if(!r)return(()=>{if(d){const b=F(this.movingMean.read(),c),w=F(this.movingVariance.read(),c),S=this.center?F(this.beta.read(),c):null,C=this.scale?F(this.gamma.read(),c):null;return Xi(o,b,w,S,C,this.epsilon)}return Xi(o,this.movingMean.read(),this.movingVariance.read(),null==this.beta?null:this.beta.read(),null==this.gamma?null:this.gamma.read(),this.epsilon)})();const[f,g,m]=function eD(n,t,e,s,r=.001){return Xe(s.slice().sort(),ws(0,n.rank-1))?function QR(n,t,e,s,r=.001){return P(()=>{const o=Mu(n,s),a=o.mean,i=o.variance;return[Xi(n,a,i,e,t,r),a,i]})}(n,t,e,s,r):function JR(n,t,e,s,r=.001){return P(()=>{const o=Mu(n,s),a=o.mean,i=o.variance,l=[];for(const f of ws(0,n.rank))-1!==s.indexOf(f)?l.push(1):l.push(n.shape[f]);const u=F(a,l),c=F(i,l),h=null==t?null:F(t,l),d=null==e?null:F(e,l);return[Xi(n,u,c,d,h,r),a,i]})}(n,t,e,s,r)}(o,this.gamma.read(),this.beta.read(),l,this.epsilon),y=(b,w,S)=>{P(()=>{const C=1-S,k=b.read(),T=D(be(k,w),C);b.write(be(k,T))})};return(()=>{y(this.movingMean,g,this.momentum),y(this.movingVariance,m,this.momentum)})(),f})}getConfig(){const e={axis:this.axis,momentum:this.momentum,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:Tt(this.betaInitializer),gammaInitializer:Tt(this.gammaInitializer),movingMeanInitializer:Tt(this.movingMeanInitializer),movingVarianceInitializer:Tt(this.movingVarianceInitializer),betaRegularizer:pt(this.betaRegularizer),gammaRegularizer:pt(this.gammaRegularizer),betaConstraint:Zt(this.betaConstraint),gammaConstraint:Zt(this.gammaConstraint)},s=super.getConfig();return Object.assign(e,s),e}}return n.className="BatchNormalization",n})()),te((()=>{class n extends He{constructor(e){if(null==e&&(e={}),super(e),this.axis=null==e.axis?-1:e.axis,"number"==typeof this.axis){if(!Number.isInteger(this.axis))throw new Error(`Expected axis to be an integer, but received ${this.axis}`)}else{if(!Array.isArray(this.axis))throw new Error(`Expected axis to be an integer or an array of integers, but received ${JSON.stringify(this.axis)}`);for(const s of this.axis)if(!Number.isInteger(s))throw new Error(`Expected axis to be an array of integers, but received ${JSON.stringify(this.axis)}`)}this.epsilon=null==e.epsilon?.001:e.epsilon,this.center=null==e.center||e.center,this.scale=null==e.scale||e.scale,this.betaInitializer=St(e.betaInitializer||"zeros"),this.gammaInitializer=St(e.gammaInitializer||"ones"),this.betaRegularizer=It(e.betaRegularizer),this.gammaRegularizer=It(e.gammaRegularizer),this.supportsMasking=!0}build(e){const s=(e=nt(e)).length;"number"==typeof this.axis&&(this.axis=[this.axis]);for(let a=0;a<this.axis.length;++a)this.axis[a]<0&&(this.axis[a]+=s);for(const a of this.axis)if(a<0||a>=s)throw new Error(`Invalid axis: ${a}`);if(this.axis.length!==Cr(this.axis).length)throw new Error(`Found duplicate axes in: ${this.axis}`);const r=this.axis.map(a=>e[a]);this.gamma=this.scale?this.addWeight("gamma",r,"float32",this.gammaInitializer,this.gammaRegularizer,!0):null,this.beta=this.center?this.addWeight("beta",r,"float32",this.betaInitializer,this.betaRegularizer,!0):null,this.built=!0}call(e,s){const r=De(e),o=r.shape,a=o.length;return P(()=>{let{mean:l,variance:u}=Mu(r,this.axis,!0);const c=oo(1,a);for(const m of this.axis)c[m]=o[m];const h=m=>null!=m&&m.shape.length!==a?F(m,c):m;let d=this.scale?h(this.gamma.read()):null,p=this.center?h(this.beta.read()):null;const f=[],g=[];for(let m=0;m<a;++m)-1!==this.axis.indexOf(m)?(f.push(o[m]),g.push(1)):(f.push(1),g.push(o[m]));return l=as(l,f),u=as(u,f),null!=d&&(d=as(d,g)),null!=p&&(p=as(p,g)),Xi(r,l,u,p,d,this.epsilon)})}getConfig(){const e={axis:this.axis,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:Tt(this.betaInitializer),gammaInitializer:Tt(this.gammaInitializer),betaRegularizer:pt(this.betaRegularizer),gammaRegularizer:pt(this.gammaRegularizer)},s=super.getConfig();return Object.assign(e,s),e}}return n.className="LayerNormalization",n})()),te((()=>{class n extends He{constructor(e){if(null==e&&(e={}),super(e),this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,null==e.padding)this.padding=[[1,1],[1,1]];else if("number"==typeof e.padding)this.padding=[[e.padding,e.padding],[e.padding,e.padding]];else{if(e.padding=e.padding,2!==e.padding.length)throw new O(`ZeroPadding2D expects padding to be a length-2 array, but received a length-${e.padding.length} array.`);let s,r;if("number"==typeof e.padding[0])s=[e.padding[0],e.padding[0]],r=[e.padding[1],e.padding[1]];else{if(e.padding=e.padding,2!==e.padding[0].length)throw new O(`ZeroPadding2D expects height padding to be a length-2 array, but received a length-${e.padding[0].length} array.`);if(s=e.padding[0],2!==e.padding[1].length)throw new O(`ZeroPadding2D expects width padding to be a length-2 array, but received a length-${e.padding[1].length} array.`);r=e.padding[1]}this.padding=[s,r]}this.inputSpec=[new Xt({ndim:4})]}computeOutputShape(e){let s,r;return e=nt(e),"channelsFirst"===this.dataFormat?(s=null!=e[2]&&e[2]>=0?e[2]+this.padding[0][0]+this.padding[0][1]:null,r=null!=e[3]&&e[3]>=0?e[3]+this.padding[1][0]+this.padding[1][1]:null,[e[0],e[1],s,r]):(s=null!=e[1]&&e[1]>=0?e[1]+this.padding[0][0]+this.padding[0][1]:null,r=null!=e[2]&&e[2]>=0?e[2]+this.padding[1][0]+this.padding[1][1]:null,[e[0],s,r,e[3]])}call(e,s){return P(()=>function tD(n,t,e){return P(()=>{if(4!==n.rank)throw new O(`temporalPadding expects input tensor to be 4-D, but received a ${n.rank}-D tensor.`);if(null==t&&(t=[[1,1],[1,1]]),2!==t.length||2!==t[0].length||2!==t[1].length)throw new O("spatial2dPadding expects `padding` to be an Array of two Arrays, each of which is an Array of two integers.");if(null==e&&(e="channelsLast"),"channelsLast"!==e&&"channelsFirst"!==e)throw new O(`Unknown data format: ${e}. Supported data formats are 'channelsLast' and 'channelsFirst.`);let s;return s="channelsFirst"===e?[[0,0],[0,0],t[0],t[1]]:[[0,0],t[0],t[1],[0,0]],Nr(n,s)})}(De(e),this.padding,this.dataFormat))}getConfig(){const e={padding:this.padding,dataFormat:this.dataFormat},s=super.getConfig();return Object.assign(e,s),e}}return n.className="ZeroPadding2D",n})());class W0 extends He{constructor(t){if(null==t.poolSize&&(t.poolSize=2),super(t),"number"==typeof t.poolSize)this.poolSize=[t.poolSize];else{if(!Array.isArray(t.poolSize)||1!==t.poolSize.length||"number"!=typeof t.poolSize[0])throw new O(`poolSize for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(t.poolSize)}`);this.poolSize=t.poolSize}if(sn(this.poolSize,"poolSize"),null==t.strides)this.strides=this.poolSize;else if("number"==typeof t.strides)this.strides=[t.strides];else{if(!Array.isArray(t.strides)||1!==t.strides.length||"number"!=typeof t.strides[0])throw new O(`strides for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(t.strides)}`);this.strides=t.strides}sn(this.strides,"strides"),this.padding=null==t.padding?"valid":t.padding,Yn(this.padding),this.inputSpec=[new Xt({ndim:3})]}computeOutputShape(t){const e=Cs((t=nt(t))[1],this.poolSize[0],this.padding,this.strides[0]);return[t[0],e,t[2]]}call(t,e){return P(()=>{this.invokeCallHook(t,e),t=Bi(De(t),2);const s=this.poolingFunction(De(t),[this.poolSize[0],1],[this.strides[0],1],this.padding,"channelsLast");return so(s,[2])})}getConfig(){const t={poolSize:this.poolSize,padding:this.padding,strides:this.strides},e=super.getConfig();return Object.assign(t,e),t}}te((()=>{class n extends W0{constructor(e){super(e)}poolingFunction(e,s,r,o,a){return Pt(a),Yn(o),Ic(e,s,r,o,a,"max")}}return n.className="MaxPooling1D",n})()),te((()=>{class n extends W0{constructor(e){super(e)}poolingFunction(e,s,r,o,a){return Pt(a),Yn(o),Ic(e,s,r,o,a,"avg")}}return n.className="AveragePooling1D",n})());class U0 extends He{constructor(t){if(null==t.poolSize&&(t.poolSize=[2,2]),super(t),this.poolSize=Array.isArray(t.poolSize)?t.poolSize:[t.poolSize,t.poolSize],null==t.strides)this.strides=this.poolSize;else if(Array.isArray(t.strides)){if(2!==t.strides.length)throw new O(`If the strides property of a 2D pooling layer is an Array, it is expected to have a length of 2, but received length ${t.strides.length}.`);this.strides=t.strides}else this.strides=[t.strides,t.strides];sn(this.poolSize,"poolSize"),sn(this.strides,"strides"),this.padding=null==t.padding?"valid":t.padding,this.dataFormat=null==t.dataFormat?"channelsLast":t.dataFormat,Pt(this.dataFormat),Yn(this.padding),this.inputSpec=[new Xt({ndim:4})]}computeOutputShape(t){t=nt(t);let e="channelsFirst"===this.dataFormat?t[2]:t[1],s="channelsFirst"===this.dataFormat?t[3]:t[2];return e=Cs(e,this.poolSize[0],this.padding,this.strides[0]),s=Cs(s,this.poolSize[1],this.padding,this.strides[1]),"channelsFirst"===this.dataFormat?[t[0],t[1],e,s]:[t[0],e,s,t[3]]}call(t,e){return P(()=>(this.invokeCallHook(t,e),this.poolingFunction(De(t),this.poolSize,this.strides,this.padding,this.dataFormat)))}getConfig(){const t={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},e=super.getConfig();return Object.assign(t,e),t}}te((()=>{class n extends U0{constructor(e){super(e)}poolingFunction(e,s,r,o,a){return Pt(a),Yn(o),Ic(e,s,r,o,a,"max")}}return n.className="MaxPooling2D",n})()),te((()=>{class n extends U0{constructor(e){super(e)}poolingFunction(e,s,r,o,a){return Pt(a),Yn(o),Ic(e,s,r,o,a,"avg")}}return n.className="AveragePooling2D",n})());class G0 extends He{constructor(t){if(null==t.poolSize&&(t.poolSize=[2,2,2]),super(t),this.poolSize=Array.isArray(t.poolSize)?t.poolSize:[t.poolSize,t.poolSize,t.poolSize],null==t.strides)this.strides=this.poolSize;else if(Array.isArray(t.strides)){if(3!==t.strides.length)throw new O(`If the strides property of a 3D pooling layer is an Array, it is expected to have a length of 3, but received length ${t.strides.length}.`);this.strides=t.strides}else this.strides=[t.strides,t.strides,t.strides];sn(this.poolSize,"poolSize"),sn(this.strides,"strides"),this.padding=null==t.padding?"valid":t.padding,this.dataFormat=null==t.dataFormat?"channelsLast":t.dataFormat,Pt(this.dataFormat),Yn(this.padding),this.inputSpec=[new Xt({ndim:5})]}computeOutputShape(t){t=nt(t);let e="channelsFirst"===this.dataFormat?t[2]:t[1],s="channelsFirst"===this.dataFormat?t[3]:t[2],r="channelsFirst"===this.dataFormat?t[4]:t[3];return e=Cs(e,this.poolSize[0],this.padding,this.strides[0]),s=Cs(s,this.poolSize[1],this.padding,this.strides[1]),r=Cs(r,this.poolSize[2],this.padding,this.strides[2]),"channelsFirst"===this.dataFormat?[t[0],t[1],e,s,r]:[t[0],e,s,r,t[4]]}call(t,e){return P(()=>(this.invokeCallHook(t,e),this.poolingFunction(De(t),this.poolSize,this.strides,this.padding,this.dataFormat)))}getConfig(){const t={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},e=super.getConfig();return Object.assign(t,e),t}}te((()=>{class n extends G0{constructor(e){super(e)}poolingFunction(e,s,r,o,a){return Pt(a),Yn(o),V0(e,s,r,o,a,"max")}}return n.className="MaxPooling3D",n})()),te((()=>{class n extends G0{constructor(e){super(e)}poolingFunction(e,s,r,o,a){return Pt(a),Yn(o),V0(e,s,r,o,a,"avg")}}return n.className="AveragePooling3D",n})());class H0 extends He{constructor(t){super(t),this.inputSpec=[new Xt({ndim:3})]}computeOutputShape(t){return[t[0],t[2]]}call(t,e){throw new Pe}}te((()=>{class n extends H0{constructor(e){super(e||{})}call(e,s){return P(()=>{const r=De(e);return Rt(r,1)})}}return n.className="GlobalAveragePooling1D",n})()),te((()=>{class n extends H0{constructor(e){super(e||{})}call(e,s){return P(()=>{const r=De(e);return Gn(r,1)})}}return n.className="GlobalMaxPooling1D",n})());class j0 extends He{constructor(t){super(t),this.dataFormat=null==t.dataFormat?"channelsLast":t.dataFormat,Pt(this.dataFormat),this.inputSpec=[new Xt({ndim:4})]}computeOutputShape(t){return"channelsLast"===this.dataFormat?[t[0],t[3]]:[t[0],t[1]]}call(t,e){throw new Pe}getConfig(){const t={dataFormat:this.dataFormat},e=super.getConfig();return Object.assign(t,e),t}}te((()=>{class n extends j0{call(e,s){return P(()=>{const r=De(e);return Rt(r,"channelsLast"===this.dataFormat?[1,2]:[2,3])})}}return n.className="GlobalAveragePooling2D",n})()),te((()=>{class n extends j0{call(e,s){return P(()=>{const r=De(e);return Gn(r,"channelsLast"===this.dataFormat?[1,2]:[2,3])})}}return n.className="GlobalMaxPooling2D",n})());class K0 extends He{constructor(t){super(t),this.layer=t.layer}build(t){this.built=!0}get trainable(){return null!=this.layer&&this.layer.trainable}set trainable(t){null!=this.layer&&(this.layer.trainable=t)}get trainableWeights(){return this.layer.trainableWeights}get nonTrainableWeights(){return this.layer.nonTrainableWeights}get updates(){return this.layer._updates}get losses(){return this.layer.losses}getWeights(){return this.layer.getWeights()}setWeights(t){this.layer.setWeights(t)}getConfig(){const t={layer:{className:this.layer.getClassName(),config:this.layer.getConfig()}},e=super.getConfig();return Object.assign(t,e),t}setFastWeightInitDuringBuild(t){super.setFastWeightInitDuringBuild(t),null!=this.layer&&this.layer.setFastWeightInitDuringBuild(t)}static fromConfig(t,e,s={}){const o=tr(e.layer,s);delete e.layer;const a={layer:o};return Object.assign(a,e),new t(a)}}te((()=>{class n extends K0{constructor(e){super(e),this.supportsMasking=!0}build(e){if((e=nt(e)).length<3)throw new O(`TimeDistributed layer expects an input shape >= 3D, but received input shape ${JSON.stringify(e)}`);this.inputSpec=[{shape:e}];const s=[e[0]].concat(e.slice(2));this.layer.built||(this.layer.build(s),this.layer.built=!0),super.build(e)}computeOutputShape(e){const s=[(e=nt(e))[0]].concat(e.slice(2)),r=this.layer.computeOutputShape(s);return[r[0],e[1]].concat(r.slice(1))}call(e,s){return P(()=>O0((i,l)=>[De(this.layer.call(i,s)),[]],e=De(e),[],!1,null,null,!1,!0)[1])}}return n.className="TimeDistributed",n})()),te((()=>{class n extends K0{constructor(e){super(e);const s=e.layer.getConfig(),r={};r.className=e.layer.getClassName(),r.config=s,this.forwardLayer=tr(r),s.goBackwards=!0!==s.goBackwards;const o={};if(o.className=e.layer.getClassName(),o.config=s,this.backwardLayer=tr(o),this.forwardLayer.name="forward_"+this.forwardLayer.name,this.backwardLayer.name="backward_"+this.backwardLayer.name,this.mergeMode=void 0===e.mergeMode?"concat":e.mergeMode,function nD(n){lo(NA,"BidirectionalMergeMode",n)}(this.mergeMode),e.weights)throw new Pe("weights support is not implemented for Bidirectional layer yet.");this._stateful=e.layer.stateful,this.returnSequences=e.layer.returnSequences,this.returnState=e.layer.returnState,this.supportsMasking=!0,this._trainable=!0,this.inputSpec=e.layer.inputSpec,this.numConstants=null}get trainable(){return this._trainable}set trainable(e){this._trainable=e,null!=this.forwardLayer&&(this.forwardLayer.trainable=e),null!=this.backwardLayer&&(this.backwardLayer.trainable=e)}getWeights(){return this.forwardLayer.getWeights().concat(this.backwardLayer.getWeights())}setWeights(e){const r=Math.floor(e.length/2);this.forwardLayer.setWeights(e.slice(0,r)),this.backwardLayer.setWeights(e.slice(r))}computeOutputShape(e){let r,o,a,s=this.forwardLayer.computeOutputShape(e);return Array.isArray(s)&&Array.isArray(s[0])||(s=[s]),this.returnState&&(a=s.slice(1)),r=s[0],"concat"===this.mergeMode?(r[r.length-1]*=2,o=[r]):o=null==this.mergeMode?[r,r.slice()]:[r],this.returnState?null==this.mergeMode?o.concat(a).concat(a.slice()):[r].concat(a).concat(a.slice()):En(o)}apply(e,s){let r=null==s?null:s.initialState,o=null==s?null:s.constants;null==s&&(s={});const a=F0(e,r,o,this.numConstants);if(e=a.inputs,r=a.initialState,o=a.constants,Array.isArray(e)&&(r=e.slice(1),e=e[0]),(null==r||0===r.length)&&null==o)return super.apply(e,s);const i=[],l=[];if(null!=r){const c=r.length;if(c%2>0)throw new O("When passing `initialState` to a Bidrectional RNN, the state should be an Array containing the states of the underlying RNNs.");s.initialState=r,i.push(...r);const h=r.map(d=>new Xt({shape:d.shape}));this.forwardLayer.stateSpec=h.slice(0,c/2),this.backwardLayer.stateSpec=h.slice(c/2),l.push(...h)}if(null!=o)throw new Pe("Support for constants in Bidirectional layers is not implemented yet.");const u=i[0]instanceof Ws;for(const c of i)if(c instanceof Ws!==u)throw new O("The initial state of a Bidirectional layer cannot be specified as a mix of symbolic and non-symbolic tensors");if(u){const c=[e].concat(i),h=this.inputSpec.concat(l),d=this.inputSpec;this.inputSpec=h;const p=super.apply(c,s);return this.inputSpec=d,p}return super.apply(e,s)}call(e,s){return P(()=>{const r=s.initialState;let o,a,i,l;if(null==r)o=this.forwardLayer.call(e,s),a=this.backwardLayer.call(e,s);else{const u=r.slice(0,r.length/2),c=r.slice(r.length/2);o=this.forwardLayer.call(e,Object.assign(s,{initialState:u})),a=this.backwardLayer.call(e,Object.assign(s,{initialState:c}))}return this.returnState&&(Array.isArray(o)&&(i=o.slice(1).concat(a.slice(1))),o=o[0],a=a[0]),this.returnSequences&&(a=is(a,1)),"concat"===this.mergeMode?l=Ff([o,a]):"sum"===this.mergeMode?l=ee(o,a):"ave"===this.mergeMode?l=D(.5,ee(o,a)):"mul"===this.mergeMode?l=D(o,a):null==this.mergeMode&&(l=[o,a]),this.returnState?null==this.mergeMode?l.concat(i):[l].concat(i):l})}resetStates(e){this.forwardLayer.resetStates(),this.backwardLayer.resetStates()}build(e){uo(this.forwardLayer.name,()=>{this.forwardLayer.build(e)}),uo(this.backwardLayer.name,()=>{this.backwardLayer.build(e)}),this.built=!0}computeMask(e,s){let r;if(Array.isArray(s)&&(s=s[0]),r=this.returnSequences?null==this.mergeMode?[s,s]:s:null==this.mergeMode?[null,null]:null,this.returnState){const a=this.forwardLayer.states.map(i=>null);return Array.isArray(r)?r.concat(a).concat(a):[r].concat(a).concat(a)}return r}get trainableWeights(){return this.forwardLayer.trainableWeights.concat(this.backwardLayer.trainableWeights)}get nonTrainableWeights(){return this.forwardLayer.nonTrainableWeights.concat(this.backwardLayer.nonTrainableWeights)}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),null!=this.forwardLayer&&this.forwardLayer.setFastWeightInitDuringBuild(e),null!=this.backwardLayer&&this.backwardLayer.setFastWeightInitDuringBuild(e)}getConfig(){const e={mergeMode:this.mergeMode},s=super.getConfig();return Object.assign(e,s),e}static fromConfig(e,s){const r=tr(s.layer);if(delete s.layer,null!=s.numConstants)throw new Pe("Deserialization of a Bidirectional layer with numConstants present is not supported yet.");const o=s;return o.layer=r,new e(o)}}return n.className="Bidirectional",n})()),te((()=>{class n extends He{constructor(e){super(e),this.scale=e.scale,this.offset=e.offset?e.offset:0}getConfig(){const e={scale:this.scale,offset:this.offset},s=super.getConfig();return Object.assign(e,s),e}call(e,s){return P(()=>("float32"!==(e=De(e)).dtype&&(e=Ms(e,"float32")),ee(D(e,this.scale),this.offset)))}}return n.className="Rescaling",n})());const{resizeBilinear:rD,cropAndResize:oD}=Os;te((()=>{class n extends He{constructor(e){super(e),this.height=e.height,this.width=e.width}centerCrop(e,s,r,o,a,i,l,u){return P(()=>{let c,h=!1;const m=[s/i,r/l,(o+s)/i,(a+r)/l],y=[];3===e.rank?(h=!0,c=Xn([e])):c=e;for(let C=0;C<c.shape[0];C++)y.push(m);const x=At(y,[y.length,4]),b=Ko(0,y.length,1,"int32"),S=oD(c,x,b,[o,a],"nearest");return Ms(h?De(ls(S)):S,u)})}upsize(e,s,r,o){return P(()=>Ms(rD(e,[s,r]),o))}call(e,s){return P(()=>{const r=De(e),o=r.dtype,a=r.shape,i=a[a.length-3],l=a[a.length-2];let u=0;i!==this.height&&(u=Math.floor((i-this.height)/2));let c=0;return l!==this.width&&(c=Math.floor((l-this.width)/2),0===c&&(c=1)),u>=0&&c>=0?this.centerCrop(r,u,c,this.height,this.width,i,l,o):this.upsize(e,this.height,this.width,o)})}getConfig(){const e={height:this.height,width:this.width},s=super.getConfig();return Object.assign(e,s),e}computeOutputShape(e){const r=(e=nt(e)).length-2;return e[e.length-3]=this.height,e[r]=this.width,e}}return n.className="CenterCrop",n})()),te((()=>{class n extends He{constructor(e){super(e),this.numTokens=e.numTokens,this.outputMode=e.outputMode?e.outputMode:"multiHot"}getConfig(){const e={numTokens:this.numTokens,outputMode:this.outputMode},s=super.getConfig();return Object.assign(e,s),e}computeOutputShape(e){return null==(e=nt(e))?[this.numTokens]:"oneHot"===this.outputMode&&1!==e[e.length-1]?(e.push(this.numTokens),e):(e[e.length-1]=this.numTokens,e)}call(e,s){return P(()=>{let r;if("int32"!==(e=De(e)).dtype&&(e=Ms(e,"int32")),typeof s.countWeights<"u"){if("count"!==this.outputMode)throw new O(`countWeights is not used when outputMode !== count.\n              Received countWeights=${s.countWeights}`);r=De(s.countWeights)}const o=Gn(e),a=ki(e),i=_n(this.numTokens,o).bufferSync().get(0),l=Ir(a,0).bufferSync().get(0);if(!i||!l)throw new O(`Input values must be between 0 < values <= numTokens with numTokens=${this.numTokens}`);return function aD(n,t,e,s){let r=De(n);if("int32"!==r.dtype&&(r=Ms(r,"int32")),"int"===t)return r;const o=r.shape;if(0===r.rank&&(r=In(r,-1)),"oneHot"===t&&1!==r.shape[r.shape.length-1]&&(r=In(r,-1)),r.rank>2)throw new O(`When outputMode is not int, maximum output rank is 2 Received outputMode ${t} and input shape ${o} which would result in output rank ${r.rank}.`);const a=["multiHot","oneHot"].includes(t);let l;if(l=bp(r,typeof s<"u"&&"count"===t?s:[],e,a),"tfIdf"!==t)return l;if(s)return D(l,s);throw new O("When outputMode is 'tfIdf', weights must be provided.")}(e,this.outputMode,this.numTokens,r)})}}return n.className="CategoryEncoding",n})());const q0=new Set(["bilinear","nearest"]);te((()=>{class n extends He{constructor(e){if(super(e),this.height=e.height,this.width=e.width,e.interpolation){if(!q0.has(e.interpolation))throw new O(`Invalid interpolation parameter: ${e.interpolation} is not implemented`);this.interpolation=e.interpolation}else this.interpolation="bilinear";this.cropToAspectRatio=!!e.cropToAspectRatio}computeOutputShape(e){return e=nt(e),[this.height,this.width,e[2]]}getConfig(){const e={height:this.height,width:this.width,interpolation:this.interpolation,cropToAspectRatio:this.cropToAspectRatio},s=super.getConfig();return Object.assign(e,s),e}call(e,s){return P(()=>{const r=[this.height,this.width];if("bilinear"===this.interpolation)return Os.resizeBilinear(e,r,!this.cropToAspectRatio);if("nearest"===this.interpolation)return Os.resizeNearestNeighbor(e,r,!this.cropToAspectRatio);throw new Error(`Interpolation is ${this.interpolation} but only ${[...q0]} are supported`)})}}return n.className="Resizing",n})());let lD=(()=>{class n{constructor(e){this.seed=e}next(){if(void 0!==this.seed)return this.seed++}}return n.className="RandomSeed",n})(),uD=(()=>{class n extends He{constructor(e){super(e),this.randomGenerator=new lD(e.seed)}getConfig(){const e={seed:this.randomGenerator.seed},s=super.getConfig();return Object.assign(e,s),e}}return n.className="BaseRandomLayer",n})();const X0=new Set(["bilinear","nearest"]);te((()=>{class n extends uD{constructor(e){super(e);const{factor:s,interpolation:r="bilinear"}=e;if(this.factor=s,Array.isArray(this.factor)&&2===this.factor.length)this.widthLower=this.factor[0],this.widthUpper=this.factor[1];else{if(Array.isArray(this.factor)||!(this.factor>0))throw new O(`Invalid factor: ${this.factor}. Must be positive number or tuple of 2 numbers`);this.widthLower=-this.factor,this.widthUpper=this.factor}if(this.widthLower<-1||this.widthUpper<-1)throw new O(`factor must have values larger than -1. Got: ${this.factor}`);if(this.widthUpper<this.widthLower)throw new O(`factor cannot have upper bound less than lower bound.\n        Got upper bound: ${this.widthUpper}.\n        Got lower bound: ${this.widthLower}\n      `);if(r){if(!X0.has(r))throw new O(`Invalid interpolation parameter: ${r} is not implemented`);this.interpolation=r}}getConfig(){const e={factor:this.factor,interpolation:this.interpolation},s=super.getConfig();return Object.assign(e,s),e}computeOutputShape(e){return e=nt(e),[this.imgHeight,-1,e[2]]}call(e,s){return P(()=>{const r=De(e);this.imgHeight=r.shape[r.shape.length-3];const o=r.shape[r.shape.length-2];this.widthFactor=no([1],1+this.widthLower,1+this.widthUpper,"float32",this.randomGenerator.next());let a=this.widthFactor.dataSync()[0]*o;a=Math.round(a);const i=[this.imgHeight,a];switch(this.interpolation){case"bilinear":return Os.resizeBilinear(e,i);case"nearest":return Os.resizeNearestNeighbor(e,i);default:throw new Error(`Interpolation is ${this.interpolation}\n          but only ${[...X0]} are supported`)}})}}return n.className="RandomWidth",n})()),z().registerFlag("KEEP_INTERMEDIATE_TENSORS",()=>!1,n=>{n&&console.warn("Keep intermediate tensors is ON. This will print the values of all intermediate tensors during model inference. Not all models support this mode. For details, check e2e/benchmarks/ model_config.js. This significantly impacts performance.")});var ew,ks=function(n){return n[n.DT_INVALID=0]="DT_INVALID",n[n.DT_FLOAT=1]="DT_FLOAT",n[n.DT_DOUBLE=2]="DT_DOUBLE",n[n.DT_INT32=3]="DT_INT32",n[n.DT_UINT8=4]="DT_UINT8",n[n.DT_INT16=5]="DT_INT16",n[n.DT_INT8=6]="DT_INT8",n[n.DT_STRING=7]="DT_STRING",n[n.DT_COMPLEX64=8]="DT_COMPLEX64",n[n.DT_INT64=9]="DT_INT64",n[n.DT_BOOL=10]="DT_BOOL",n[n.DT_QINT8=11]="DT_QINT8",n[n.DT_QUINT8=12]="DT_QUINT8",n[n.DT_QINT32=13]="DT_QINT32",n[n.DT_BFLOAT16=14]="DT_BFLOAT16",n[n.DT_QINT16=15]="DT_QINT16",n[n.DT_QUINT16=16]="DT_QUINT16",n[n.DT_UINT16=17]="DT_UINT16",n[n.DT_COMPLEX128=18]="DT_COMPLEX128",n[n.DT_HALF=19]="DT_HALF",n[n.DT_RESOURCE=20]="DT_RESOURCE",n[n.DT_VARIANT=21]="DT_VARIANT",n[n.DT_UINT32=22]="DT_UINT32",n[n.DT_UINT64=23]="DT_UINT64",n[n.DT_FLOAT_REF=101]="DT_FLOAT_REF",n[n.DT_DOUBLE_REF=102]="DT_DOUBLE_REF",n[n.DT_INT32_REF=103]="DT_INT32_REF",n[n.DT_UINT8_REF=104]="DT_UINT8_REF",n[n.DT_INT16_REF=105]="DT_INT16_REF",n[n.DT_INT8_REF=106]="DT_INT8_REF",n[n.DT_STRING_REF=107]="DT_STRING_REF",n[n.DT_COMPLEX64_REF=108]="DT_COMPLEX64_REF",n[n.DT_INT64_REF=109]="DT_INT64_REF",n[n.DT_BOOL_REF=110]="DT_BOOL_REF",n[n.DT_QINT8_REF=111]="DT_QINT8_REF",n[n.DT_QUINT8_REF=112]="DT_QUINT8_REF",n[n.DT_QINT32_REF=113]="DT_QINT32_REF",n[n.DT_BFLOAT16_REF=114]="DT_BFLOAT16_REF",n[n.DT_QINT16_REF=115]="DT_QINT16_REF",n[n.DT_QUINT16_REF=116]="DT_QUINT16_REF",n[n.DT_UINT16_REF=117]="DT_UINT16_REF",n[n.DT_COMPLEX128_REF=118]="DT_COMPLEX128_REF",n[n.DT_HALF_REF=119]="DT_HALF_REF",n[n.DT_RESOURCE_REF=120]="DT_RESOURCE_REF",n[n.DT_VARIANT_REF=121]="DT_VARIANT_REF",n[n.DT_UINT32_REF=122]="DT_UINT32_REF",n[n.DT_UINT64_REF=123]="DT_UINT64_REF",n}(ks||{});!function(n){let t;var e;(e=t=n.CheckpointFormatVersion||(n.CheckpointFormatVersion={}))[e.LEGACY=0]="LEGACY",e[e.V1=1]="V1",e[e.V2=2]="V2"}(ew||(ew={}));const ym={};function tw(n){return ym[n]}function v(n,t,e,s,r){const o=t.inputParams[n];if(o&&void 0!==o.inputIndexStart){const i=o.inputIndexStart,l=0===o.inputIndexEnd?void 0:void 0===o.inputIndexEnd?i+1:o.inputIndexEnd,u=i<0?t.inputNames.length+i:i;if("tensor"===o.type)return un(t.inputNames[u],e,s,r);if("tensors"===o.type){const d=t.inputs.slice(i,l);return t.inputNames.slice(i,l).filter((f,g)=>{var m;return"NoOp"!==(null===(m=d[g])||void 0===m?void 0:m.op)}).map(f=>un(f,e,s,r))}const c=un(t.inputNames[u],e,s,r),h=c.dataSync();return"number"===o.type?h[0]:ns(c.shape,h)}const a=t.attrParams[n];return a&&a.value}function un(n,t,e,s){const[r,o]=zn(n,e);if(null!=s){const i=s.getHashTableHandleByName(r);if(null!=i)return i}const a=e.currentContextIds.find(i=>!!t[Cc(r,i)]);return void 0!==a?t[Cc(r,a)][o]:void 0}function nw(n,t,e){return t[Cc(n,e.currentContextId)]}function nr(n,t){const[e,s,r]=zn(n,t);return[Cc(e,t&&t.currentContextId),s,r]}function Cc(n,t){return t?`${n}-${t}`:n}function zn(n,t){if(""===n)return["",0,void 0];const e=null!=t&&null!=t.parseNodeNameCache;if(e){const o=t.parseNodeNameCache.get(n);if(null!=o)return o}const s=n.split(":");let r;if(1===s.length)r=[n,0,void 0];else{const a=3===s.length?s[1]:void 0;r=[s[0],Number(s[s.length-1]),a]}return e&&t.parseNodeNameCache.set(n,r),r}function kc(n,t,e){let s=v("pad",n,t,e);if("explicit"===s){s=v("explicitPaddings",n,t,e);const r=[[0,0],[0,0],[0,0],[0,0]];for(let o=0;o<4;o++)r[o][0]=s[2*o],r[o][1]=s[2*o+1];return r}return s}function sr(n){return n.kept?n:Ks(n)}const fD=[{tfOpName:"Add",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddV2",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddN",category:"arithmetic",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"BiasAdd",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"Sub",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"RealDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Div",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"DivNoNan",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mul",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Maximum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Minimum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Pow",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SquaredDifference",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorMod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],mD=[{tfOpName:"Abs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan2",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ceil",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ClipByValue",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"clipValueMin",type:"number"},{start:2,name:"clipValueMax",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Complex",category:"basic_math",inputs:[{start:0,name:"real",type:"tensor"},{start:1,name:"imag",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ComplexAbs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Elu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Exp",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Floor",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Imag",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Neg",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Real",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Prelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"alpha",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu6",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Selu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sigmoid",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Rsqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Square",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sign",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Round",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Expm1",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log1p",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Reciprocal",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Softplus",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Erf",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LeakyRelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"alpha",name:"alpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"IsNan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"IsFinite",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"IsInf",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],gD=[{tfOpName:"EmptyTensorList",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"maxNumElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"LoopCond",category:"control",inputs:[{start:0,name:"pred",type:"tensor"}]},{tfOpName:"Switch",category:"control",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"pred",type:"tensor"}]},{tfOpName:"Merge",category:"control",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"Enter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"frame_name",name:"frameName",type:"string"},{tfName:"is_constant",name:"isConstant",type:"bool"}]},{tfOpName:"Exit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NextIteration",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayV3",category:"control",inputs:[{start:0,name:"size",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"dynamic_size",name:"dynamicSize",type:"bool"},{tfName:"clear_after_read",name:"clearAfterRead",type:"bool"},{tfName:"identical_element_shapes",name:"identicalElementShapes",type:"bool"},{tfName:"tensor_array_name",name:"name",type:"string"}]},{tfOpName:"TensorArrayWriteV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayReadV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayGatherV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"}]},{tfOpName:"TensorArrayScatterV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArrayConcatV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape_except0",name:"elementShapeExcept0",type:"shape",notSupported:!0}]},{tfOpName:"TensorArraySplitV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"tensor",type:"tensor"},{start:2,name:"lengths",type:"number[]"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArraySizeV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}]},{tfOpName:"TensorArrayCloseV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"}]},{tfOpName:"StatelessIf",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"If",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"StatelessWhile",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"While",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"TensorListScatter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListScatterV2",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"},{start:3,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGather",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListSetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListReserve",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListFromTensor",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListStack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"},{tfName:"num_elements",name:"numElements",type:"dtype"}]},{tfOpName:"TensorListSplit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"},{start:2,name:"lengths",type:"number[]"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcat",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcatV2",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPopBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPushBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListLength",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}]},{tfOpName:"TensorListResize",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"size",type:"number"}]}],yD=[{tfOpName:"AvgPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[],notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPoolWithArgmax",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"include_batch_in_index",name:"includeBatchInIndex",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AvgPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Conv1D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"stride",name:"stride",type:"number"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NWC"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"dilation",name:"dilation",type:"number",defaultValue:1}]},{tfOpName:"Conv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"useCudnnOnGpu",name:"useCudnnOnGpu",type:"bool"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"_FusedConv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"use_cudnn_on_gpu",name:"useCudnnOnGpu",type:"bool",defaultValue:!0},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"leakyrelu_alpha",name:"leakyreluAlpha",type:"number",defaultValue:.2}]},{tfOpName:"Conv2DBackpropInput",category:"convolution",inputs:[{start:2,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:0,name:"outputShape",type:"number[]"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]",notSupported:!0}]},{tfOpName:"DepthwiseConv2d",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"DepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"FusedDepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]}]},{tfOpName:"Conv3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"Dilation2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"rates",name:"dilations",type:"number[]"},{tfName:"padding",name:"pad",type:"string"}]}],xD=[{tfOpName:"Fill",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"},{start:1,name:"value",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"LinSpace",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"num",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"OneHot",category:"creation",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"depth",type:"number"},{start:2,name:"onValue",type:"number",defaultValue:1},{start:3,name:"offValue",type:"number",defaultValue:0}],attrs:[{tfName:"axis",name:"axis",type:"number",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Ones",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"OnesLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"RandomStandardNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"RandomUniform",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"minval",name:"minval",type:"number",defaultValue:0},{tfName:"maxval",name:"maxval",type:"number",defaultValue:1},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"RandomUniformInt",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"minval",name:"minval",type:"number"},{tfName:"maxval",name:"maxval",type:"number"},{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0}]},{tfOpName:"Range",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"step",type:"number",defaultValue:0}],attrs:[{tfName:"Tidx",name:"dtype",type:"dtype"}]},{tfOpName:"TruncatedNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"means",name:"mean",type:"number",defaultValue:0},{tfName:"stddev",name:"stdDev",type:"number",defaultValue:1},{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Zeros",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"ZerosLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Multinomial",category:"creation",inputs:[{start:0,name:"logits",type:"tensor"},{start:1,name:"numSamples",type:"number"}],attrs:[{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number"},{tfName:"T",name:"dtype",type:"dtype"},{tfName:"output_dtype",name:"output_dtype",type:"dtype"}]}],bD=[{tfOpName:"NonMaxSuppressionV2",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV3",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV4",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"T_threshold",name:"threshold",type:"dtype",notSupported:!0},{tfName:"pad_to_max_output_size",name:"padToMaxOutputSize",type:"bool"}]},{tfOpName:"NonMaxSuppressionV5",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"},{start:5,name:"softNmsSigma",type:"number"}]},{tfOpName:"Where",category:"dynamic",inputs:[{start:0,name:"condition",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ListDiff",category:"dynamic",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],wD=[{tfOpName:"LowerBound",category:"evaluation",inputs:[{start:0,name:"sortedSequence",type:"tensor"},{start:1,name:"values",type:"tensor"}]},{tfOpName:"TopKV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"k",type:"number"}],attrs:[{tfName:"sorted",name:"sorted",type:"bool"}]},{tfOpName:"UpperBound",category:"evaluation",inputs:[{start:0,name:"sortedSequence",type:"tensor"},{start:1,name:"values",type:"tensor"}]},{tfOpName:"Unique",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"UniqueV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]}],vD=[{tfOpName:"PlaceholderWithDefault",category:"graph",inputs:[{start:0,name:"default",type:"tensor"}],attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Placeholder",category:"graph",attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Const",category:"graph"},{tfOpName:"Identity",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IdentityN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Snapshot",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Rank",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Size",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Shape",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"ShapeN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Print",category:"graph",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"data",type:"tensors"}],attrs:[{tfName:"message",name:"message",type:"string"},{tfName:"first_n",name:"firstN",type:"number",notSupported:!0},{tfName:"summarize",name:"summarize",type:"number",defaultValue:3}]},{tfOpName:"NoOp",category:"graph",inputs:[]},{tfOpName:"StopGradient",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"FakeQuantWithMinMaxVars",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"min",name:"min",type:"number"},{tfName:"max",name:"max",type:"number"}]}],SD=[{tfOpName:"HashTable",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"HashTableV2",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"LookupTableImport",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableImportV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFind",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFindV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableSize",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"}]},{tfOpName:"LookupTableSizeV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"}]},{tfOpName:"InitializeTable",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}]},{tfOpName:"InitializeTableV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}]}],ID=[{tfOpName:"ResizeBilinear",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ResizeNearestNeighbor",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"CropAndResize",category:"image",inputs:[{start:0,name:"image",type:"tensor"},{start:1,name:"boxes",type:"tensor"},{start:2,name:"boxInd",type:"tensor"},{start:3,name:"cropSize",type:"number[]"}],attrs:[{tfName:"method",name:"method",type:"string"},{tfName:"extrapolation_value",name:"extrapolationValue",type:"number"}]},{tfOpName:"ImageProjectiveTransformV3",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"transforms",type:"tensor"},{start:2,name:"outputShape",type:"number[]"},{start:3,name:"fillValue",type:"number"}],attrs:[{tfName:"interpolation",name:"interpolation",type:"string"},{tfName:"fill_mode",name:"fillMode",type:"string"}]}],ND=[{tfOpName:"Equal",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NotEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Greater",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"GreaterEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Less",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LessEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalAnd",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalNot",category:"logical",inputs:[{start:0,name:"a",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalOr",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Select",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SelectV2",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BitwiseAnd",category:"logical",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}]}],CD=[{tfOpName:"_FusedMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"leakyrelu_alpha",name:"leakyreluAlpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMulV2",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Transpose",category:"matrices",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"perm",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Einsum",category:"matrices",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"equation",name:"equation",type:"string"},{tfName:"N",name:"n",type:"number",defaultValue:2},{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"MatrixBandPart",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"numLower",type:"tensor"},{start:1,name:"numUpper",type:"tensor"}]}],kD=[{tfOpName:"EuclideanNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool",defaultValue:!1}]},{tfOpName:"FusedBatchNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV2",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV3",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"LRN",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"depth_radius",name:"radius",type:"number",defaultValue:5},{tfName:"bias",name:"bias",type:"number",defaultValue:1},{tfName:"alpha",name:"alpha",type:"number",defaultValue:1},{tfName:"beta",name:"beta",type:"number",defaultValue:.5}]},{tfOpName:"Softmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"LogSoftmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]}],TD=[{tfOpName:"Bincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}]},{tfOpName:"DenseBincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}],attrs:[{tfName:"binary_output",name:"binaryOutput",type:"bool"}]},{tfOpName:"Max",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Mean",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Min",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Sum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"All",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Any",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"ArgMax",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"ArgMin",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"Prod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cumprod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]},{tfOpName:"Cumsum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]}],$D=[{tfOpName:"ConcatV2",category:"slice_join",inputs:[{start:0,end:-1,name:"tensors",type:"tensors"},{start:-1,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"Concat",category:"slice_join",inputs:[{start:1,end:0,name:"tensors",type:"tensors"},{start:0,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"GatherV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"axis",type:"number",defaultValue:0}],attrs:[{tfName:"batch_dims",name:"batchDims",type:"number",defaultValue:0}]},{tfOpName:"Gather",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",notSupported:!0}]},{tfOpName:"Reverse",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"dims",type:"bool[]"}]},{tfOpName:"ReverseV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}]},{tfOpName:"Slice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"size",type:"number[]"}]},{tfOpName:"StridedSlice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"end",type:"number[]"},{start:3,name:"strides",type:"number[]"}],attrs:[{tfName:"begin_mask",name:"beginMask",type:"number",defaultValue:0},{tfName:"end_mask",name:"endMask",type:"number",defaultValue:0},{tfName:"new_axis_mask",name:"newAxisMask",type:"number",defaultValue:0},{tfName:"ellipsis_mask",name:"ellipsisMask",type:"number",defaultValue:0},{tfName:"shrink_axis_mask",name:"shrinkAxisMask",type:"number",defaultValue:0}]},{tfOpName:"Pack",category:"slice_join",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0}]},{tfOpName:"Unpack",category:"slice_join",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0},{tfName:"num",name:"num",type:"number",defaultValue:0,notSupported:!0}]},{tfOpName:"Tile",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"reps",type:"number[]"}]},{tfOpName:"Split",category:"slice_join",inputs:[{start:0,name:"axis",type:"number",defaultValue:0},{start:1,name:"x",type:"tensor"}],attrs:[{tfName:"num_split",name:"numOrSizeSplits",type:"number",defaultValue:1}]},{tfOpName:"SplitV",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"numOrSizeSplits",type:"number[]"},{start:2,name:"axis",type:"number",defaultValue:0}]},{tfOpName:"ScatterNd",category:"slice_join",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"shape",type:"number[]"}]},{tfOpName:"GatherNd",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}]},{tfOpName:"SparseToDense",category:"slice_join",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!1,notSupported:!0}]},{tfOpName:"TensorScatterUpdate",category:"slice_join",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"values",type:"tensor"}]}],_D=[{tfOpName:"SparseFillEmptyRows",category:"sparse",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"denseShape",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}]},{tfOpName:"SparseReshape",category:"sparse",inputs:[{start:0,name:"inputIndices",type:"tensor"},{start:1,name:"inputShape",type:"tensor"},{start:2,name:"newShape",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SparseSegmentMean",category:"sparse",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"segmentIds",type:"tensor"}]},{tfOpName:"SparseSegmentSum",category:"sparse",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"segmentIds",type:"tensor"}]}],ED=[{tfOpName:"FFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"RFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]},{tfOpName:"IRFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]}],AD=[{tfOpName:"StaticRegexReplace",category:"string",inputs:[{start:0,name:"input",type:"tensor"}],attrs:[{tfName:"pattern",name:"pattern",type:"string"},{tfName:"rewrite",name:"rewrite",type:"string"},{tfName:"replace_global",name:"replaceGlobal",type:"bool"}]},{tfOpName:"StringNGrams",category:"string",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"dataSplits",type:"tensor"}],attrs:[{tfName:"separator",name:"separator",type:"string"},{tfName:"ngram_widths",name:"nGramWidths",type:"number[]"},{tfName:"left_pad",name:"leftPad",type:"string"},{tfName:"right_pad",name:"rightPad",type:"string"},{tfName:"pad_width",name:"padWidth",type:"number"},{tfName:"preserve_short_sequences",name:"preserveShortSequences",type:"bool"}],outputs:["ngrams","ngrams_splits"]},{tfOpName:"StringSplit",category:"string",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"delimiter",type:"tensor"}],attrs:[{tfName:"skip_empty",name:"skipEmpty",type:"bool"}],outputs:["indices","values","shape"]},{tfOpName:"StringToHashBucketFast",category:"string",inputs:[{start:0,name:"input",type:"tensor"}],attrs:[{tfName:"num_buckets",name:"numBuckets",type:"number"}]}],RD=[{tfOpName:"Cast",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"SrcT",name:"sdtype",type:"dtype",notSupported:!0},{tfName:"DstT",name:"dtype",type:"dtype"}]},{tfOpName:"ExpandDims",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"MirrorPad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"mode",name:"mode",type:"string"}]},{tfOpName:"Pad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"constant_value",name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"PadV2",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"},{start:2,name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"Reshape",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}]},{tfOpName:"EnsureShape",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}]},{tfOpName:"Squeeze",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"axis",tfDeprecatedName:"squeeze_dims",name:"axis",type:"number[]"}]},{tfOpName:"SpaceToBatchND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"paddings",type:"number[]"}]},{tfOpName:"BatchToSpaceND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"crops",type:"number[]"}]},{tfOpName:"DepthToSpace",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"block_size",name:"blockSize",type:"number"},{tfName:"data_format",name:"dataFormat",type:"string"}]},{tfOpName:"BroadcastTo",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}],attrs:[]},{tfOpName:"BroadcastArgs",category:"transformation",inputs:[{start:0,name:"s0",type:"tensor"},{start:1,name:"s1",type:"tensor"}],attrs:[]}];class sw{static get Instance(){return this._instance||(this._instance=new this)}constructor(){const e=[].concat(...[_e,ze,xe,M,ae,pe,J,oe,we,Ne,it,Wt,Mt,ts,Vn,Ze,rt,ot,ne].map(s=>s.json));this.opMappers=e.reduce((s,r)=>(s[r.tfOpName]=r,s),{})}transformGraph(t,e={}){const r=[],o=[],a=[],i=t.node.reduce((g,m)=>(g[m.name]=this.mapNode(m),m.op.startsWith("Placeholder")?r.push(g[m.name]):"Const"===m.op?o.push(g[m.name]):(null==m.input||0===m.input.length)&&a.push(g[m.name]),g),{});let l=[];const u=[];let c={},h={};null!=e&&(c=this.mapSignatureEntries(e.inputs),h=this.mapSignatureEntries(e.outputs));const d=Object.keys(i);d.forEach(g=>{const m=i[g];m.inputNames.forEach((y,x)=>{const[b,,w]=nr(y),S=i[b];if(null!=S.outputs){const C=S.outputs.indexOf(w);-1!==C&&(m.inputNames[x]=`${b}:${C}`)}m.inputs.push(S),S.children.push(m)})}),0===Object.keys(h).length?d.forEach(g=>{const m=i[g];0===m.children.length&&u.push(m)}):Object.keys(h).forEach(g=>{const[m]=nr(g),y=i[m];null!=y&&(y.signatureKey=h[g],u.push(y))}),Object.keys(c).length>0?Object.keys(c).forEach(g=>{const[m]=nr(g),y=i[m];y&&(y.signatureKey=c[g],l.push(y))}):l=r;let p={};null!=t.library&&null!=t.library.function&&(p=t.library.function.reduce((g,m)=>(g[m.signature.name]=this.mapFunction(m),g),{}));const f={nodes:i,inputs:l,outputs:u,weights:o,placeholders:r,signature:e,functions:p};return a.length>0&&(f.initNodes=a),f}mapSignatureEntries(t){return Object.keys(t||{}).reduce((e,s)=>(e[t[s].name]=s,e),{})}mapNode(t){const e=tw(t.op)||this.opMappers[t.op]||{};null==t.attr&&(t.attr={});const s={name:t.name,op:t.op,category:e.category,inputNames:(t.input||[]).map(r=>r.startsWith("^")?r.slice(1):r),inputs:[],children:[],inputParams:{},attrParams:{},rawAttrs:t.attr,outputs:e.outputs};return null!=e.inputs&&(s.inputParams=e.inputs.reduce((r,o)=>(r[o.name]={type:o.type,inputIndexStart:o.start,inputIndexEnd:o.end},r),{})),null!=e.attrs&&(s.attrParams=e.attrs.reduce((r,o)=>{const a=o.type;let i;switch(o.type){case"string":i=xm(t.attr,o.tfName,o.defaultValue),void 0===i&&o.tfDeprecatedName&&(i=xm(t.attr,o.tfDeprecatedName,o.defaultValue));break;case"string[]":i=km(t.attr,o.tfName,o.defaultValue),void 0===i&&o.tfDeprecatedName&&(i=km(t.attr,o.tfDeprecatedName,o.defaultValue));break;case"number":i=wm(t.attr,o.tfName,o.defaultValue||0),void 0===i&&o.tfDeprecatedName&&(i=wm(t.attr,o.tfDeprecatedName,o.defaultValue));break;case"number[]":i=Cm(t.attr,o.tfName,o.defaultValue),void 0===i&&o.tfDeprecatedName&&(i=Cm(t.attr,o.tfDeprecatedName,o.defaultValue));break;case"bool":i=bm(t.attr,o.tfName,o.defaultValue),void 0===i&&o.tfDeprecatedName&&(i=bm(t.attr,o.tfDeprecatedName,o.defaultValue));break;case"bool[]":i=$m(t.attr,o.tfName,o.defaultValue),void 0===i&&o.tfDeprecatedName&&(i=$m(t.attr,o.tfDeprecatedName,o.defaultValue));break;case"shape":i=Nm(t.attr,o.tfName,o.defaultValue),void 0===i&&o.tfDeprecatedName&&(i=Nm(t.attr,o.tfDeprecatedName,o.defaultValue));break;case"shape[]":i=Tm(t.attr,o.tfName,o.defaultValue),void 0===i&&o.tfDeprecatedName&&(i=Tm(t.attr,o.tfDeprecatedName,o.defaultValue));break;case"dtype":i=Sm(t.attr,o.tfName,o.defaultValue),void 0===i&&o.tfDeprecatedName&&(i=Sm(t.attr,o.tfDeprecatedName,o.defaultValue));break;case"dtype[]":i=Im(t.attr,o.tfName,o.defaultValue),void 0===i&&o.tfDeprecatedName&&(i=Im(t.attr,o.tfDeprecatedName,o.defaultValue));break;case"func":i=ow(t.attr,o.tfName,o.defaultValue),void 0===i&&o.tfDeprecatedName&&(i=ow(t.attr,o.tfDeprecatedName,o.defaultValue));break;case"tensor":case"tensors":break;default:throw new Error(`Unsupported param type: ${o.type} for op: ${t.op}`)}return r[o.name]={value:i,type:a},r},{})),s}mapFunction(t){const e=t.nodeDef,r=[];let o={};null!=e&&(o=e.reduce((h,d)=>(h[d.name]=this.mapNode(d),"Const"===d.op&&r.push(h[d.name]),h),{}));const a=[],i=[];t.signature.inputArg.forEach(h=>{const[d]=nr(h.name),p={name:d,op:"Placeholder",inputs:[],inputNames:[],category:"graph",inputParams:{},attrParams:{dtype:{value:vm(h.type),type:"dtype"}},children:[]};p.signatureKey=h.name,a.push(p),o[d]=p}),Object.keys(o).forEach(h=>{const d=o[h];d.inputNames.forEach((p,f)=>{const[g,,m]=nr(p),y=o[g];if(null!=y.outputs){const x=y.outputs.indexOf(m);-1!==x&&(d.inputNames[f]=`${g}:${x}`)}d.inputs.push(y),y.children.push(d)})});const u=t.ret;t.signature.outputArg.forEach(h=>{const[d,p]=nr(u[h.name]),f=o[d];null!=f&&(f.defaultOutput=p,i.push(f))});const c=this.mapArgsToSignature(t);return{nodes:o,inputs:a,outputs:i,weights:r,placeholders:[],signature:c}}mapArgsToSignature(t){return{methodName:t.signature.name,inputs:t.signature.inputArg.reduce((e,s)=>(e[s.name]=this.mapArgToTensorInfo(s),e),{}),outputs:t.signature.outputArg.reduce((e,s)=>(e[s.name]=this.mapArgToTensorInfo(s,t.ret),e),{})}}mapArgToTensorInfo(t,e){let s=t.name;return null!=e&&(s=e[s]),{name:s,dtype:t.type}}}function rw(n,t){const e=Array.isArray(n)?String.fromCharCode.apply(null,n):function DD(n){const t=z().global;if(typeof t.atob<"u")return t.atob(n);if(typeof Buffer<"u")return new Buffer(n,"base64").toString();throw new Error("Unable to decode base64 in this environment. Missing built-in atob() or Buffer()")}(n);return t?e:e.toLowerCase()}function xm(n,t,e,s=!1){const r=n[t];return null!=r?rw(r.s,s):e}function bm(n,t,e){const s=n[t];return s?s.b:e}function wm(n,t,e){const s=n[t]||{},r=null!=s.i?s.i:null!=s.f?s.f:e;return"number"==typeof r?r:parseInt(r,10)}function vm(n){switch("string"==typeof n&&(n=ks[n]),n){case ks.DT_FLOAT:case ks.DT_HALF:return"float32";case ks.DT_INT32:case ks.DT_INT64:case ks.DT_INT8:case ks.DT_UINT8:return"int32";case ks.DT_BOOL:return"bool";case ks.DT_DOUBLE:return"float32";case ks.DT_STRING:return"string";default:return null}}function ow(n,t,e){const s=n[t];return s&&s.func?s.func.name:e}function Sm(n,t,e){const s=n[t];return s&&s.type?vm(s.type):e}function Im(n,t,e){const s=n[t];return s&&s.list&&s.list.type?s.list.type.map(r=>vm(r)):e}function aw(n){if(!n.unknownRank)return null!=n.dim?n.dim.map(t=>"number"==typeof t.size?t.size:parseInt(t.size,10)):[]}function Nm(n,t,e){const s=n[t];return s&&s.shape?aw(s.shape):e}function Cm(n,t,e){const s=n[t];return s?((s.list.f&&s.list.f.length?s.list.f:s.list.i)||[]).map(r=>"number"==typeof r?r:parseInt(r,10)):e}function km(n,t,e,s=!1){const r=n[t];return r&&r.list&&r.list.s?r.list.s.map(o=>rw(o,s)):e}function Tm(n,t,e){const s=n[t];return s&&s.list&&s.list.shape?s.list.shape.map(r=>aw(r)):e}function $m(n,t,e){const s=n[t];return s&&s.list&&s.list.b?s.list.b:e}class FD{constructor(t,e,s){this.node=t,this.tensorMap=e,this.context=s,this.inputs=[],this.attrs={},this.inputs=t.inputNames.map(r=>this.getInput(r)),null!=t.rawAttrs&&(this.attrs=Object.keys(t.rawAttrs).reduce((r,o)=>(r[o]=this.getAttr(o),r),{}))}getInput(t){return un(t,this.tensorMap,this.context)}getAttr(t,e){const s=this.node.rawAttrs[t];if(null!=s.tensor)return un(t,this.tensorMap,this.context);if(null!=s.i||null!=s.f)return wm(this.node.rawAttrs,t,e);if(null!=s.s)return xm(this.node.rawAttrs,t,e);if(null!=s.b)return bm(this.node.rawAttrs,t,e);if(null!=s.shape)return Nm(this.node.rawAttrs,t,e);if(null!=s.type)return Sm(this.node.rawAttrs,t,e);if(null!=s.list){if(null!=s.list.i||null!=s.list.f)return Cm(this.node.rawAttrs,t,e);if(null!=s.list.s)return km(this.node.rawAttrs,t,e);if(null!=s.list.shape)return Tm(this.node.rawAttrs,t,e);if(null!=s.list.b)return $m(this.node.rawAttrs,t,e);if(null!=s.list.type)return Im(this.node.rawAttrs,t,e)}return e}}function ds(n,t,e=""){if("number"!=typeof n&&"number"!=typeof t){I(n.length===t.length,()=>e+` Shapes ${n} and ${t} must match`);for(let s=0;s<n.length;s++){const r=n[s],o=t[s];I(r<0||o<0||r===o,()=>e+` Shapes ${n} and ${t} must match`)}}}function iw(n){return!("number"==typeof n||n.some(t=>t<0))}function Zi(n,t,e){let s=_m(n,e);const r=!iw(s);if(r&&0===t.length)throw new Error(`Tried to calculate elements of an empty list with non-fully-defined elementShape: ${s}`);if(r&&t.forEach(o=>{s=_m(o.shape,s)}),!iw(s))throw new Error(`Non-fully-defined elementShape: ${s}`);return s}function _m(n,t){if("number"==typeof n)return t;if("number"==typeof t)return n;if(n.length!==t.length)throw new Error(`Incompatible ranks during merge: ${n} vs. ${t}`);const e=[];for(let s=0;s<n.length;++s){const r=n[s],o=t[s];if(r>=0&&o>=0&&r!==o)throw new Error(`Incompatible shape during merge: ${n} vs. ${t}`);e[s]=r>=0?r:o}return e}class PD{constructor(t,e,s,r,o,a,i){this.name=t,this.dtype=e,this.maxSize=s,this.elementShape=r,this.identicalElementShapes=o,this.dynamicSize=a,this.clearAfterRead=i,this.tensors=[],this.closed_=!1,this.idTensor=$e(0),en(this.idTensor)}get id(){return this.idTensor.id}get closed(){return this.closed_}clearAndClose(t){this.tensors.forEach(e=>{(null==t||!t.has(e.tensor.id))&&e.tensor.dispose()}),this.tensors=[],this.closed_=!0,this.idTensor.dispose()}size(){return this.tensors.length}read(t){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(t<0||t>=this.size())throw new Error(`Tried to read from index ${t}, but array size is: ${this.size()}`);const e=this.tensors[t];if(e.cleared)throw new Error(`TensorArray ${this.name}: Could not read index ${t} twice because it was cleared after a previous read (perhaps try setting clear_after_read = false?).`);return this.clearAfterRead&&(e.cleared=!0),e.read=!0,e.tensor}readMany(t){return t.map(e=>this.read(e))}write(t,e){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(t<0||!this.dynamicSize&&t>=this.maxSize)throw new Error(`Tried to write to index ${t}, but array is not resizeable and size is: ${this.maxSize}`);const s=this.tensors[t]||{};if(e.dtype!==this.dtype)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${t},\n          because the value dtype is ${e.dtype}, but TensorArray dtype is ${this.dtype}.`);if(0===this.size()&&(null==this.elementShape||0===this.elementShape.length)&&(this.elementShape=e.shape),ds(this.elementShape,e.shape,`TensorArray ${this.name}: Could not write to TensorArray index ${t}.`),s.read)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${t}, because it has already been read.`);if(s.written)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${t}, because it has already been written.`);s.tensor=e,en(e),s.written=!0,this.tensors[t]=s}writeMany(t,e){if(t.length!==e.length)throw new Error(`TensorArray ${this.name}: could not write multiple tensors,because the index size: ${t.length} is not the same as tensors size: ${e.length}.`);t.forEach((s,r)=>this.write(s,e[r]))}gather(t,e){if(e&&e!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but gather requested dtype ${e}`);if(t)t=t.slice(0,this.size());else{t=[];for(let r=0;r<this.size();r++)t.push(r)}if(0===t.length)return At([],[0].concat(this.elementShape));const s=this.readMany(t);return ds(this.elementShape,s[0].shape,"TensorArray shape mismatch: "),Xn(s,0)}concat(t){if(t&&t!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but concat requested dtype ${t}`);if(0===this.size())return At([],[0].concat(this.elementShape));const e=[];for(let r=0;r<this.size();r++)e.push(r);const s=this.readMany(e);return ds(this.elementShape,s[0].shape,`TensorArray shape mismatch: tensor array shape (${this.elementShape}) vs first tensor shape (${s[0].shape})`),Bt(s,0)}scatter(t,e){if(e.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${e.dtype}`);if(t.length!==e.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${t.length} vs. ${e.shape[0]}`);const s=Math.max(...t);if(!this.dynamicSize&&s>=this.maxSize)throw new Error(`Max index must be < array size (${s}  vs. ${this.maxSize})`);this.writeMany(t,ls(e,0))}split(t,e){if(e.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${e.dtype}`);let s=0;const r=t.map(l=>(s+=l,s));if(s!==e.shape[0])throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${s}, and tensor's shape is: ${e.shape}`);if(!this.dynamicSize&&t.length!==this.maxSize)throw new Error(`TensorArray's size is not equal to the size of lengths (${this.maxSize} vs. ${t.length}), and the TensorArray is not marked as dynamically resizeable`);const o=0===s?0:e.size/s,a=[];P(()=>{e=F(e,[1,s,o]);for(let l=0;l<t.length;++l)a[l]=F(Qe(e,[0,0===l?0:r[l-1],0],[1,t[l],o]),this.elementShape);return a});const i=[];for(let l=0;l<t.length;l++)i[l]=l;this.writeMany(i,a)}}class po{get id(){return this.idTensor.id}constructor(t,e,s,r=-1){this.tensors=t,this.elementShape=e,this.elementDtype=s,null!=t&&t.forEach(o=>{if(s!==o.dtype)throw new Error(`Invalid data types; op elements ${s}, but list elements ${o.dtype}`);ds(e,o.shape,"TensorList shape mismatch: "),en(o)}),this.idTensor=$e(0),this.maxNumElements=r,en(this.idTensor)}copy(){return new po([...this.tensors],this.elementShape,this.elementDtype)}clearAndClose(t){this.tensors.forEach(e=>{(null==t||!t.has(e.id))&&e.dispose()}),this.tensors.length=0,this.idTensor.dispose()}size(){return this.tensors.length}stack(t,e,s=-1){if(e!==this.elementDtype)throw new Error(`Invalid data types; op elements ${e}, but list elements ${this.elementDtype}`);if(-1!==s&&this.tensors.length!==s)throw new Error(`Operation expected a list with ${s} elements but got a list with ${this.tensors.length} elements.`);ds(t,this.elementShape,"TensorList shape mismatch: ");const r=Zi(this.elementShape,this.tensors,t);return P(()=>{const o=this.tensors.map(a=>F(a,r));return Xn(o,0)})}popBack(t,e){if(e!==this.elementDtype)throw new Error(`Invalid data types; op elements ${e}, but list elements ${this.elementDtype}`);if(0===this.size())throw new Error("Trying to pop from an empty list.");const s=Zi(this.elementShape,this.tensors,t),r=this.tensors.pop();return r.kept=!1,ds(r.shape,t,"TensorList shape mismatch: "),F(r,s)}pushBack(t){if(t.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t.dtype}, but list elements ${this.elementDtype}`);if(ds(t.shape,this.elementShape,"TensorList shape mismatch: "),this.maxNumElements===this.size())throw new Error("Trying to push element into a full list.");en(t),this.tensors.push(t)}resize(t){if(t<0)throw new Error(`TensorListResize expects size to be non-negative. Got: ${t}`);if(-1!==this.maxNumElements&&t>this.maxNumElements)throw new Error(`TensorListResize input size ${t} is greater maxNumElement ${this.maxNumElements}.`);const e=new po([],this.elementShape,this.elementDtype,this.maxNumElements);e.tensors.length=t;for(let s=0;s<Math.min(this.tensors.length,t);++s)e.tensors[s]=this.tensors[s];return e}getItem(t,e,s){if(s!==this.elementDtype)throw new Error(`Invalid data types; op elements ${s}, but list elements ${this.elementDtype}`);if(t<0||t>this.tensors.length)throw new Error(`Trying to access element ${t} in a list with ${this.tensors.length} elements.`);if(null==this.tensors[t])throw new Error(`element at index ${t} is null.`);ds(this.tensors[t].shape,e,"TensorList shape mismatch: ");const r=Zi(this.elementShape,this.tensors,e);return F(this.tensors[t],r)}setItem(t,e){if(e.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${e.dtype}, but list elements ${this.elementDtype}`);if(t<0||-1!==this.maxNumElements&&t>=this.maxNumElements)throw new Error(`Trying to set element ${t} in a list with max ${this.maxNumElements} elements.`);ds(this.elementShape,e.shape,"TensorList shape mismatch: "),en(e),null!=this.tensors[t]&&(this.tensors[t].kept=!1),this.tensors[t]=e}gather(t,e,s){if(e!==this.elementDtype)throw new Error(`Invalid data types; op elements ${e}, but list elements ${this.elementDtype}`);ds(this.elementShape,s,"TensorList shape mismatch: "),t=t.slice(0,this.size());const r=Zi(this.elementShape,this.tensors,s);return 0===t.length?At([],[0].concat(r)):P(()=>{const o=t.map(a=>F(this.tensors[a],r));return Xn(o,0)})}concat(t,e){if(t&&t!==this.elementDtype)throw new Error(`TensorList dtype is ${this.elementDtype} but concat requested dtype ${t}`);ds(this.elementShape,e,"TensorList shape mismatch: ");const s=Zi(this.elementShape,this.tensors,e);return 0===this.size()?At([],[0].concat(s)):P(()=>{const r=this.tensors.map(o=>F(o,s));return Bt(r,0)})}}const WD=function(){var n=(0,W.Z)(function*(t,e,s){switch(t.op){case"If":case"StatelessIf":{const r=v("thenBranch",t,e,s),o=v("elseBranch",t,e,s),a=v("cond",t,e,s),i=v("args",t,e,s);return(yield a.data())[0]?s.functionMap[r].executeFunctionAsync(i,s.tensorArrayMap,s.tensorListMap):s.functionMap[o].executeFunctionAsync(i,s.tensorArrayMap,s.tensorListMap)}case"While":case"StatelessWhile":{const r=v("body",t,e,s),o=v("cond",t,e,s),a=v("args",t,e,s),i=yield s.functionMap[o].executeFunctionAsync(a,s.tensorArrayMap,s.tensorListMap),l=a.map(h=>h.id);let u=yield i[0].data();i.forEach(h=>{!h.kept&&-1===l.indexOf(h.id)&&h.dispose()});let c=a;for(;u[0];){const h=c;c=yield s.functionMap[r].executeFunctionAsync(c,s.tensorArrayMap,s.tensorListMap);const d=c.map(f=>f.id);h.forEach(f=>{!f.kept&&-1===l.indexOf(f.id)&&-1===d.indexOf(f.id)&&f.dispose()});const p=yield s.functionMap[o].executeFunctionAsync(c,s.tensorArrayMap,s.tensorListMap);u=yield p[0].data(),p.forEach(f=>{!f.kept&&-1===l.indexOf(f.id)&&-1===d.indexOf(f.id)&&f.dispose()})}return c}case"LoopCond":return[sr(v("pred",t,e,s))];case"Switch":{const r=v("pred",t,e,s);let o=v("data",t,e,s);return o.kept||(o=sr(o)),(yield r.data())[0]?[void 0,o]:[o,void 0]}case"Merge":{const r=t.inputNames.find(o=>void 0!==un(o,e,s));return r?[sr(un(r,e,s))]:void 0}case"Enter":{const r=v("frameName",t,e,s),o=v("tensor",t,e,s);return s.enterFrame(r),[sr(o)]}case"Exit":{const r=v("tensor",t,e,s);return s.exitFrame(),[sr(r)]}case"NextIteration":{const r=v("tensor",t,e,s);return s.nextIteration(),[sr(r)]}case"TensorArrayV3":{const r=v("size",t,e,s),o=v("dtype",t,e,s),a=v("elementShape",t,e,s),i=v("dynamicSize",t,e,s),l=v("clearAfterRead",t,e,s),u=v("identicalElementShapes",t,e,s),c=v("name",t,e,s),h=new PD(c,o,r,a,u,i,l);return s.addTensorArray(h),[h.idTensor,$e(1)]}case"TensorArrayWriteV3":{const r=v("tensorArrayId",t,e,s),o=v("index",t,e,s),a=v("tensor",t,e,s),i=s.getTensorArray(r.id);return i.write(o,a),[i.idTensor]}case"TensorArrayReadV3":{const r=v("tensorArrayId",t,e,s),o=v("index",t,e,s);return[s.getTensorArray(r.id).read(o)]}case"TensorArrayGatherV3":{const r=v("tensorArrayId",t,e,s),o=v("indices",t,e,s),a=v("dtype",t,e,s);return[s.getTensorArray(r.id).gather(o,a)]}case"TensorArrayScatterV3":{const r=v("tensorArrayId",t,e,s),o=v("indices",t,e,s),a=v("tensor",t,e,s),i=s.getTensorArray(r.id);return i.scatter(o,a),[i.idTensor]}case"TensorArrayConcatV3":{const r=v("tensorArrayId",t,e,s),o=s.getTensorArray(r.id),a=v("dtype",t,e,s);return[o.concat(a)]}case"TensorArraySplitV3":{const r=v("tensorArrayId",t,e,s),o=v("tensor",t,e,s),a=v("lengths",t,e,s),i=s.getTensorArray(r.id);return i.split(a,o),[i.idTensor]}case"TensorArraySizeV3":{const r=v("tensorArrayId",t,e,s);return[$e(s.getTensorArray(r.id).size(),"int32")]}case"TensorArrayCloseV3":{const r=v("tensorArrayId",t,e,s),o=s.getTensorArray(r.id);return o.clearAndClose(),[o.idTensor]}case"TensorListSetItem":{const r=v("tensorListId",t,e,s),o=v("index",t,e,s),a=v("tensor",t,e,s),i=s.getTensorList(r.id);return i.setItem(o,a),[i.idTensor]}case"TensorListGetItem":{const r=v("tensorListId",t,e,s),o=v("index",t,e,s),a=v("elementShape",t,e,s),i=v("elementDType",t,e,s);return[s.getTensorList(r.id).getItem(o,a,i)]}case"TensorListScatterV2":case"TensorListScatter":{const r=v("indices",t,e,s),l=function BD(n,t,e,s){if(t.length!==n.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${t.length} vs. ${n.shape[0]}`);const r=Math.max(...t);if(null!=s&&-1!==s&&r>=s)throw new Error(`Max index must be < array size (${r}  vs. ${s})`);const o=new po([],e,n.dtype,s),a=ls(n,0);return t.forEach((i,l)=>{o.setItem(i,a[l])}),o}(v("tensor",t,e,s),r,v("elementShape",t,e,s),v("numElements",t,e,s));return s.addTensorList(l),[l.idTensor]}case"TensorListReserve":case"EmptyTensorList":{const r=v("elementShape",t,e,s),o=v("elementDType",t,e,s);let a;a="TensorListReserve"===t.op?"numElements":"maxNumElements";const i=v(a,t,e,s),u=function MD(n,t,e,s){return new po([],n,t,s)}(r,o,0,"TensorListReserve"===t.op?-1:i);return s.addTensorList(u),[u.idTensor]}case"TensorListGather":{const r=v("tensorListId",t,e,s),o=v("indices",t,e,s),a=v("elementShape",t,e,s),i=v("elementDType",t,e,s);return[s.getTensorList(r.id).gather(o,i,a)]}case"TensorListStack":{const r=v("tensorListId",t,e,s),o=v("elementShape",t,e,s),a=v("elementDType",t,e,s),i=v("numElements",t,e,s);return[s.getTensorList(r.id).stack(o,a,i)]}case"TensorListFromTensor":{const i=function zD(n,t,e){const s=n.dtype;if(n.shape.length<1)throw new Error(`Tensor must be at least a vector, but saw shape: ${n.shape}`);if(n.dtype!==e)throw new Error(`Invalid data types; op elements ${n.dtype}, but list elements ${e}`);ds(n.shape.slice(1),t,"TensorList shape mismatch: ");const o=ls(n);return new po(o,t,s)}(v("tensor",t,e,s),v("elementShape",t,e,s),v("elementDType",t,e,s));return s.addTensorList(i),[i.idTensor]}case"TensorListConcat":case"TensorListConcatV2":{const r=v("tensorListId",t,e,s),o=s.getTensorList(r.id),a=v("dtype",t,e,s),i=v("elementShape",t,e,s);return[o.concat(a,i)]}case"TensorListPushBack":{const r=v("tensorListId",t,e,s),o=v("tensor",t,e,s),a=s.getTensorList(r.id);return a.pushBack(o),[a.idTensor]}case"TensorListPopBack":{const r=v("tensorListId",t,e,s),o=v("elementShape",t,e,s),a=v("elementDType",t,e,s);return[s.getTensorList(r.id).popBack(o,a)]}case"TensorListSplit":{const r=v("tensor",t,e,s),o=v("elementShape",t,e,s),i=function VD(n,t,e){let s=0;const r=t.map(c=>(s+=c,s));if(s!==n.shape[0])throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${s}, and tensor's shape is: ${n.shape}`);const a=_m(n.shape.slice(1),e),i=0===s?0:n.size/s,l=P(()=>{const c=[];n=F(n,[1,s,i]);for(let h=0;h<t.length;++h)c[h]=F(Qe(n,[0,0===h?0:r[h-1],0],[1,t[h],i]),a);return n.dispose(),c}),u=new po([],e,n.dtype,t.length);for(let c=0;c<l.length;c++)u.setItem(c,l[c]);return u}(r,v("lengths",t,e,s),o);return s.addTensorList(i),[i.idTensor]}case"TensorListLength":{const r=v("tensorListId",t,e,s);return[$e(s.getTensorList(r.id).size(),"int32")]}case"TensorListResize":{const r=v("tensorListId",t,e,s),o=v("size",t,e,s),i=s.getTensorList(r.id).resize(o);return s.addTensorList(i),[i.idTensor]}default:throw TypeError(`Node type ${t.op} is not implemented`)}});return function(e,s,r){return n.apply(this,arguments)}}();function lw(n,t,e){const[s,r]=v("fusedOps",n,t,e),o="biasadd"===s,a=!o,i="prelu"===r,l="fusedbatchnorm"===s,u=v("numArgs",n,t,e);if(o){if(i&&2!==u)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!i&&o&&1!==u)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd must have one extra argument: bias.")}if(l)throw new Error("FusedConv2d and DepthwiseConv2d with FusedBatchNorm is not supported");const c=v("strides",n,t,e),h=kc(n,t,e),d=v("dataFormat",n,t,e).toUpperCase(),p=v("dilations",n,t,e);let[f,g]=v("args",n,t,e);return a&&(g=f,f=void 0),{stride:c,pad:h,dataFormat:d,dilations:p,biasArg:f,preluArg:g,activationFunc:r,leakyreluAlpha:v("leakyreluAlpha",n,t,e)}}function Em(n,t,e){return{boxes:v("boxes",n,t,e),scores:v("scores",n,t,e),maxOutputSize:v("maxOutputSize",n,t,e),iouThreshold:v("iouThreshold",n,t,e),scoreThreshold:v("scoreThreshold",n,t,e),softNmsSigma:v("softNmsSigma",n,t,e)}}const HD=function(){var n=(0,W.Z)(function*(t,e,s,r,o=X){switch(t.op){case"NonMaxSuppressionV5":{const{boxes:a,scores:i,maxOutputSize:l,iouThreshold:u,scoreThreshold:c,softNmsSigma:h}=Em(t,e,s),d=yield o.image.nonMaxSuppressionWithScoreAsync(a,i,l,u,c,h);return[d.selectedIndices,d.selectedScores]}case"NonMaxSuppressionV4":{const{boxes:a,scores:i,maxOutputSize:l,iouThreshold:u,scoreThreshold:c}=Em(t,e,s),h=v("padToMaxOutputSize",t,e,s),d=yield o.image.nonMaxSuppressionPaddedAsync(a,i,l,u,c,h);return[d.selectedIndices,d.validOutputs]}case"NonMaxSuppressionV3":case"NonMaxSuppressionV2":{const{boxes:a,scores:i,maxOutputSize:l,iouThreshold:u,scoreThreshold:c}=Em(t,e,s);return[yield o.image.nonMaxSuppressionAsync(a,i,l,u,c)]}case"Where":{const a=o.cast(v("condition",t,e,s),"bool"),i=[yield o.whereAsync(a)];return a.dispose(),i}case"ListDiff":return o.setdiff1dAsync(v("x",t,e,s),v("y",t,e,s));default:throw TypeError(`Node type ${t.op} is not implemented`)}});return function(e,s,r,o){return n.apply(this,arguments)}}();class qD{get id(){return this.handle.id}constructor(t,e){this.keyDType=t,this.valueDType=e,this.handle=$e(0),this.tensorMap=new Map,en(this.handle)}clearAndClose(){this.tensorMap.forEach(t=>t.dispose()),this.tensorMap.clear(),this.handle.dispose()}size(){return this.tensorMap.size}tensorSize(){return $e(this.size(),"int32")}import(t,e){var s=this;return(0,W.Z)(function*(){s.checkKeyAndValueTensor(t,e);const r=yield t.data();return s.tensorMap.forEach(o=>o.dispose()),s.tensorMap.clear(),P(()=>{const o=ls(e),a=r.length,i=o.length;I(a===i,()=>`The number of elements doesn't match, keys has ${a} elements, the values has ${i} elements.`);for(let l=0;l<a;l++){const u=r[l],c=o[l];en(c),s.tensorMap.set(u,c)}return s.handle})})()}find(t,e){var s=this;return(0,W.Z)(function*(){s.checkKeyAndValueTensor(t,e);const r=yield t.data();return P(()=>{const o=[];for(let a=0;a<r.length;a++){const l=s.findWithDefault(r[a],e);o.push(l)}return Xn(o)})})()}findWithDefault(t,e){const s=this.tensorMap.get(t);return null!=s?s:e}checkKeyAndValueTensor(t,e){if(t.dtype!==this.keyDType)throw new Error(`Expect key dtype ${this.keyDType}, but got ${t.dtype}`);if(e.dtype!==this.valueDType)throw new Error(`Expect value dtype ${this.valueDType}, but got ${e.dtype}`)}}const XD=function(){var n=(0,W.Z)(function*(t,e,s,r){switch(t.op){case"HashTable":case"HashTableV2":{const o=r.getHashTableHandleByName(t.name);if(null!=o)return[o];{const a=v("keyDType",t,e,s),i=v("valueDType",t,e,s),l=new qD(a,i);return r.addHashTable(t.name,l),[l.handle]}}case"InitializeTable":case"InitializeTableV2":case"LookupTableImport":case"LookupTableImportV2":{const o=v("tableHandle",t,e,s,r),a=v("keys",t,e,s),i=v("values",t,e,s);return[yield r.getHashTableById(o.id).import(a,i)]}case"LookupTableFind":case"LookupTableFindV2":{const o=v("tableHandle",t,e,s,r),a=v("keys",t,e,s),i=v("defaultValue",t,e,s);return[yield r.getHashTableById(o.id).find(a,i)]}case"LookupTableSize":case"LookupTableSizeV2":{const o=v("tableHandle",t,e,s,r);return[r.getHashTableById(o.id).tensorSize()]}default:throw TypeError(`Node type ${t.op} is not implemented`)}});return function(e,s,r,o){return n.apply(this,arguments)}}();function uw(n,t,e,s,r=P){const o=((a,i,l)=>{switch(a.category){case"arithmetic":return r(()=>((n,t,e,s=X)=>{switch(n.op){case"BiasAdd":case"AddV2":case"Add":return[s.add(v("a",n,t,e),v("b",n,t,e))];case"AddN":return[s.addN(v("tensors",n,t,e))];case"FloorMod":case"Mod":return[s.mod(v("a",n,t,e),v("b",n,t,e))];case"Mul":return[s.mul(v("a",n,t,e),v("b",n,t,e))];case"RealDiv":case"Div":return[s.div(v("a",n,t,e),v("b",n,t,e))];case"DivNoNan":return[s.divNoNan(v("a",n,t,e),v("b",n,t,e))];case"FloorDiv":return[s.floorDiv(v("a",n,t,e),v("b",n,t,e))];case"Sub":return[s.sub(v("a",n,t,e),v("b",n,t,e))];case"Minimum":return[s.minimum(v("a",n,t,e),v("b",n,t,e))];case"Maximum":return[s.maximum(v("a",n,t,e),v("b",n,t,e))];case"Pow":return[s.pow(v("a",n,t,e),v("b",n,t,e))];case"SquaredDifference":return[s.squaredDifference(v("a",n,t,e),v("b",n,t,e))];default:throw TypeError(`Node type ${n.op} is not implemented`)}})(a,i,l));case"basic_math":return r(()=>((n,t,e,s=X)=>{switch(n.op){case"Abs":case"ComplexAbs":return[s.abs(v("x",n,t,e))];case"Acos":return[s.acos(v("x",n,t,e))];case"Acosh":return[s.acosh(v("x",n,t,e))];case"Asin":return[s.asin(v("x",n,t,e))];case"Asinh":return[s.asinh(v("x",n,t,e))];case"Atan":return[s.atan(v("x",n,t,e))];case"Atan2":return[s.atan2(v("x",n,t,e),v("y",n,t,e))];case"Atanh":return[s.atanh(v("x",n,t,e))];case"Ceil":return[s.ceil(v("x",n,t,e))];case"Complex":return[s.complex(v("real",n,t,e),v("imag",n,t,e))];case"Cos":return[s.cos(v("x",n,t,e))];case"Cosh":return[s.cosh(v("x",n,t,e))];case"Elu":return[s.elu(v("x",n,t,e))];case"Erf":return[s.erf(v("x",n,t,e))];case"Exp":return[s.exp(v("x",n,t,e))];case"Expm1":return[s.expm1(v("x",n,t,e))];case"Floor":return[s.floor(v("x",n,t,e))];case"Log":return[s.log(v("x",n,t,e))];case"Log1p":return[s.log1p(v("x",n,t,e))];case"Imag":return[s.imag(v("x",n,t,e))];case"Neg":return[s.neg(v("x",n,t,e))];case"Reciprocal":return[s.reciprocal(v("x",n,t,e))];case"Real":return[s.real(v("x",n,t,e))];case"Relu":return[s.relu(v("x",n,t,e))];case"Round":return[s.round(v("x",n,t,e))];case"Selu":return[s.selu(v("x",n,t,e))];case"Sigmoid":return[s.sigmoid(v("x",n,t,e))];case"Sin":return[s.sin(v("x",n,t,e))];case"Sign":return[s.sign(v("x",n,t,e))];case"Sinh":return[s.sinh(v("x",n,t,e))];case"Softplus":return[s.softplus(v("x",n,t,e))];case"Sqrt":return[s.sqrt(v("x",n,t,e))];case"Square":return[s.square(v("x",n,t,e))];case"Tanh":return[s.tanh(v("x",n,t,e))];case"Tan":return[s.tan(v("x",n,t,e))];case"ClipByValue":return[s.clipByValue(v("x",n,t,e),v("clipValueMin",n,t,e),v("clipValueMax",n,t,e))];case"Relu6":return[s.relu6(v("x",n,t,e))];case"Rsqrt":return[s.rsqrt(un(n.inputNames[0],t,e))];case"LeakyRelu":return[s.leakyRelu(v("x",n,t,e),v("alpha",n,t,e))];case"Prelu":return[s.prelu(v("x",n,t,e),v("alpha",n,t,e))];case"IsNan":return[s.isNaN(un(n.inputNames[0],t,e))];case"IsInf":return[s.isInf(un(n.inputNames[0],t,e))];case"IsFinite":return[s.isFinite(un(n.inputNames[0],t,e))];default:throw TypeError(`Node type ${n.op} is not implemented`)}})(a,i,l));case"control":return WD(a,i,l);case"convolution":return r(()=>((n,t,e,s=X)=>{switch(n.op){case"Conv1D":{const r=v("stride",n,t,e),o=v("pad",n,t,e),a=v("dataFormat",n,t,e).toUpperCase(),i=v("dilation",n,t,e);return[s.conv1d(v("x",n,t,e),v("filter",n,t,e),r,o,a,i)]}case"Conv2D":{const r=v("strides",n,t,e),o=kc(n,t,e),a=v("dataFormat",n,t,e).toUpperCase(),i=v("dilations",n,t,e);return[s.conv2d(v("x",n,t,e),v("filter",n,t,e),[r[1],r[2]],o,a,[i[1],i[2]])]}case"_FusedConv2D":{const{stride:r,pad:o,dataFormat:a,dilations:i,biasArg:l,preluArg:u,activationFunc:c,leakyreluAlpha:h}=lw(n,t,e);return[s.fused.conv2d({x:v("x",n,t,e),filter:v("filter",n,t,e),strides:[r[1],r[2]],pad:o,dataFormat:a,dilations:[i[1],i[2]],bias:l,activation:c,preluActivationWeights:u,leakyreluAlpha:h})]}case"FusedDepthwiseConv2dNative":{const{stride:r,pad:o,dataFormat:a,dilations:i,biasArg:l,preluArg:u,activationFunc:c,leakyreluAlpha:h}=lw(n,t,e);return[s.fused.depthwiseConv2d({x:v("x",n,t,e),filter:v("filter",n,t,e),strides:[r[1],r[2]],pad:o,dataFormat:a,dilations:[i[1],i[2]],bias:l,activation:c,preluActivationWeights:u,leakyreluAlpha:h})]}case"Conv2DBackpropInput":case"Conv2dTranspose":{const r=v("outputShape",n,t,e),o=v("strides",n,t,e),a=kc(n,t,e);return[s.conv2dTranspose(v("x",n,t,e),v("filter",n,t,e),r,[o[1],o[2]],a)]}case"DepthwiseConv2dNative":case"DepthwiseConv2d":{const r=v("strides",n,t,e),o=kc(n,t,e),a=v("dilations",n,t,e),i=v("dataFormat",n,t,e).toUpperCase();return[s.depthwiseConv2d(v("input",n,t,e),v("filter",n,t,e),[r[1],r[2]],o,i,[a[1],a[2]])]}case"Conv3D":{const r=v("strides",n,t,e),o=v("pad",n,t,e),a=v("dataFormat",n,t,e).toUpperCase(),i=v("dilations",n,t,e);return[s.conv3d(v("x",n,t,e),v("filter",n,t,e),[r[1],r[2],r[3]],o,a,[i[1],i[2],i[3]])]}case"AvgPool":{const r=v("strides",n,t,e),o=v("pad",n,t,e),a=v("kernelSize",n,t,e);return[s.avgPool(v("x",n,t,e),[a[1],a[2]],[r[1],r[2]],o)]}case"MaxPool":{const r=v("strides",n,t,e),o=v("pad",n,t,e),a=v("kernelSize",n,t,e);return[s.maxPool(v("x",n,t,e),[a[1],a[2]],[r[1],r[2]],o)]}case"MaxPoolWithArgmax":{const r=v("strides",n,t,e),o=v("pad",n,t,e),a=v("kernelSize",n,t,e),i=v("includeBatchInIndex",n,t,e),{result:l,indexes:u}=s.maxPoolWithArgmax(v("x",n,t,e),[a[1],a[2]],[r[1],r[2]],o,i);return[l,u]}case"AvgPool3D":{const r=v("strides",n,t,e),o=v("pad",n,t,e),a=v("kernelSize",n,t,e);return[s.avgPool3d(v("x",n,t,e),[a[1],a[2],a[3]],[r[1],r[2],r[3]],o)]}case"MaxPool3D":{const r=v("strides",n,t,e),o=v("pad",n,t,e),a=v("kernelSize",n,t,e);return[s.maxPool3d(v("x",n,t,e),[a[1],a[2],a[3]],[r[1],r[2],r[3]],o)]}case"Dilation2D":{const r=v("strides",n,t,e),o=v("pad",n,t,e),a=v("dilations",n,t,e),i=r[1],l=r[2],u=a[1],c=a[2];return[s.dilation2d(v("x",n,t,e),v("filter",n,t,e),[i,l],o,[u,c],"NHWC")]}default:throw TypeError(`Node type ${n.op} is not implemented`)}})(a,i,l));case"creation":return r(()=>((n,t,e,s=X)=>{switch(n.op){case"Fill":{const r=v("shape",n,t,e),o=v("dtype",n,t,e),a=v("value",n,t,e);return[s.fill(r,a,o)]}case"LinSpace":{const r=v("start",n,t,e),o=v("stop",n,t,e),a=v("num",n,t,e);return[s.linspace(r,o,a)]}case"Multinomial":{const r=v("logits",n,t,e),o=v("numSamples",n,t,e),a=v("seed",n,t,e);return[s.multinomial(r,o,a)]}case"OneHot":{const r=v("indices",n,t,e),o=v("depth",n,t,e),a=v("onValue",n,t,e),i=v("offValue",n,t,e),l=v("dtype",n,t,e);return[s.oneHot(r,o,a,i,l)]}case"Ones":return[s.ones(v("shape",n,t,e),v("dtype",n,t,e))];case"OnesLike":return[s.onesLike(v("x",n,t,e))];case"RandomStandardNormal":return[s.randomStandardNormal(v("shape",n,t,e),v("dtype",n,t,e),v("seed",n,t,e))];case"RandomUniform":return[s.randomUniform(v("shape",n,t,e),v("minval",n,t,e),v("maxval",n,t,e),v("dtype",n,t,e))];case"RandomUniformInt":return[s.randomUniformInt(v("shape",n,t,e),v("minval",n,t,e),v("maxval",n,t,e),v("seed",n,t,e))];case"Range":{const r=v("start",n,t,e),o=v("stop",n,t,e),a=v("step",n,t,e);return[s.range(r,o,a,v("dtype",n,t,e))]}case"TruncatedNormal":{const r=v("shape",n,t,e),o=v("mean",n,t,e),a=v("stdDev",n,t,e),i=v("seed",n,t,e);return[s.truncatedNormal(r,o,a,v("dtype",n,t,e),i)]}case"Zeros":return[s.zeros(v("shape",n,t,e),v("dtype",n,t,e))];case"ZerosLike":return[s.zerosLike(v("x",n,t,e))];default:throw TypeError(`Node type ${n.op} is not implemented`)}})(a,i,l));case"dynamic":return HD(a,i,l);case"evaluation":return r(()=>((n,t,e,s=X)=>{switch(n.op){case"LowerBound":{const r=v("sortedSequence",n,t,e),o=v("values",n,t,e);return[s.lowerBound(r,o)]}case"TopKV2":{const r=v("x",n,t,e),o=v("k",n,t,e),a=v("sorted",n,t,e),i=s.topk(r,o,a);return[i.values,i.indices]}case"UpperBound":{const r=v("sortedSequence",n,t,e),o=v("values",n,t,e);return[s.upperBound(r,o)]}case"Unique":{const r=v("x",n,t,e),o=s.unique(r);return[o.values,o.indices]}case"UniqueV2":{const r=v("x",n,t,e),o=v("axis",n,t,e),a=s.unique(r,o);return[a.values,a.indices]}default:throw TypeError(`Node type ${n.op} is not implemented`)}})(a,i,l));case"image":return r(()=>((n,t,e,s=X)=>{switch(n.op){case"ResizeBilinear":{const r=v("images",n,t,e),o=v("size",n,t,e),a=v("alignCorners",n,t,e),i=v("halfPixelCenters",n,t,e);return[s.image.resizeBilinear(r,[o[0],o[1]],a,i)]}case"ResizeNearestNeighbor":{const r=v("images",n,t,e),o=v("size",n,t,e),a=v("alignCorners",n,t,e),i=v("halfPixelCenters",n,t,e);return[s.image.resizeNearestNeighbor(r,[o[0],o[1]],a,i)]}case"CropAndResize":{const r=v("image",n,t,e),o=v("boxes",n,t,e),a=v("boxInd",n,t,e),i=v("cropSize",n,t,e),l=v("method",n,t,e),u=v("extrapolationValue",n,t,e);return[s.image.cropAndResize(r,o,a,i,l,u)]}case"ImageProjectiveTransformV3":{const r=v("images",n,t,e),o=v("transforms",n,t,e),a=v("outputShape",n,t,e),i=v("fillValue",n,t,e),l=v("interpolation",n,t,e),u=v("fillMode",n,t,e);return[s.image.transform(r,o,l.toLowerCase(),u.toLowerCase(),i,a)]}default:throw TypeError(`Node type ${n.op} is not implemented`)}})(a,i,l));case"graph":return r(()=>((n,t,e,s=X)=>{switch(n.op){case"Const":return t[n.name];case"PlaceholderWithDefault":const r=v("default",n,t,e);return[un(n.name,t,e)||r];case"Placeholder":return[un(n.name,t,e)];case"Identity":case"StopGradient":case"FakeQuantWithMinMaxVars":case"Snapshot":return[sr(v("x",n,t,e))];case"IdentityN":return v("x",n,t,e).map(c=>sr(c));case"Shape":return[s.tensor1d(v("x",n,t,e).shape,"int32")];case"ShapeN":return v("x",n,t,e).map(c=>s.tensor1d(c.shape));case"Size":return[s.scalar(v("x",n,t,e).size,"int32")];case"Rank":return[s.scalar(v("x",n,t,e).rank,"int32")];case"NoOp":return[s.scalar(1)];case"Print":const a=v("x",n,t,e),i=v("data",n,t,e),l=v("message",n,t,e),u=v("summarize",n,t,e);console.warn("The graph has a tf.print() operation,usually used for debugging, which slows down performance."),console.log(l);for(let c=0;c<i.length;c++)console.log(Array.prototype.slice.call(i[c].dataSync()).slice(0,u));return[a];default:throw TypeError(`Node type ${n.op} is not implemented`)}})(a,i,l));case"logical":return r(()=>((n,t,e,s=X)=>{switch(n.op){case"Equal":return[s.equal(v("a",n,t,e),v("b",n,t,e))];case"NotEqual":return[s.notEqual(v("a",n,t,e),v("b",n,t,e))];case"Greater":return[s.greater(v("a",n,t,e),v("b",n,t,e))];case"GreaterEqual":return[s.greaterEqual(v("a",n,t,e),v("b",n,t,e))];case"Less":return[s.less(v("a",n,t,e),v("b",n,t,e))];case"LessEqual":return[s.lessEqual(v("a",n,t,e),v("b",n,t,e))];case"LogicalAnd":return[s.logicalAnd(v("a",n,t,e),v("b",n,t,e))];case"LogicalNot":return[s.logicalNot(v("a",n,t,e))];case"LogicalOr":return[s.logicalOr(v("a",n,t,e),v("b",n,t,e))];case"Select":case"SelectV2":return[s.where(v("condition",n,t,e),v("a",n,t,e),v("b",n,t,e))];case"BitwiseAnd":return[s.bitwiseAnd(v("a",n,t,e),v("b",n,t,e))];default:throw TypeError(`Node type ${n.op} is not implemented`)}})(a,i,l));case"matrices":return r(()=>((n,t,e,s=X)=>{switch(n.op){case"BatchMatMul":case"BatchMatMulV2":case"MatMul":return[s.matMul(v("a",n,t,e),v("b",n,t,e),v("transposeA",n,t,e),v("transposeB",n,t,e))];case"Einsum":return[s.einsum(v("equation",n,t,e),...v("tensors",n,t,e))];case"Transpose":return[s.transpose(v("x",n,t,e),v("perm",n,t,e))];case"_FusedMatMul":const[r,o]=v("fusedOps",n,t,e),a="biasadd"===r,i="prelu"===o,l=v("numArgs",n,t,e),u=v("leakyreluAlpha",n,t,e);if(a){if(i&&2!==l)throw new Error("Fused MatMul with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!i&&1!==l)throw new Error("Fused MatMul with BiasAdd must have one extra argument: bias.")}const[c,h]=v("args",n,t,e);return[s.fused.matMul({a:v("a",n,t,e),b:v("b",n,t,e),transposeA:v("transposeA",n,t,e),transposeB:v("transposeB",n,t,e),bias:c,activation:o,preluActivationWeights:h,leakyreluAlpha:u})];case"MatrixBandPart":return[s.linalg.bandPart(v("a",n,t,e),v("numLower",n,t,e),v("numUpper",n,t,e))];default:throw TypeError(`Node type ${n.op} is not implemented`)}})(a,i,l));case"normalization":return r(()=>((n,t,e,s=X)=>{switch(n.op){case"EuclideanNorm":return[s.euclideanNorm(v("x",n,t,e),v("axis",n,t,e),v("keepDims",n,t,e))];case"FusedBatchNorm":case"FusedBatchNormV2":case"FusedBatchNormV3":return[s.batchNorm(v("x",n,t,e),v("mean",n,t,e),v("variance",n,t,e),v("offset",n,t,e),v("scale",n,t,e),v("epsilon",n,t,e))];case"LRN":return[s.localResponseNormalization(v("x",n,t,e),v("radius",n,t,e),v("bias",n,t,e),v("alpha",n,t,e),v("beta",n,t,e))];case"Softmax":return[s.softmax(v("x",n,t,e))];case"LogSoftmax":return[s.logSoftmax(v("x",n,t,e))];default:throw TypeError(`Node type ${n.op} is not implemented`)}})(a,i,l));case"ragged":return r(()=>((n,t,e,s=X)=>{switch(n.op){case"RaggedGather":{const{outputNestedSplits:r,outputDenseValues:o}=s.raggedGather(v("paramsNestedSplits",n,t,e),v("paramsDenseValues",n,t,e),v("indices",n,t,e),v("outputRaggedRank",n,t,e));return r.concat(o)}case"RaggedRange":{const{rtNestedSplits:r,rtDenseValues:o}=s.raggedRange(v("starts",n,t,e),v("limits",n,t,e),v("splits",n,t,e));return[r,o]}case"RaggedTensorToTensor":return[s.raggedTensorToTensor(v("shape",n,t,e),v("values",n,t,e),v("defaultValue",n,t,e),v("rowPartitionTensors",n,t,e),v("rowPartitionTypes",n,t,e))];default:throw TypeError(`Node type ${n.op} is not implemented`)}})(a,i,l));case"reduction":return r(()=>((n,t,e,s=X)=>{switch(n.op){case"Max":{const i=v("axis",n,t,e),l=v("keepDims",n,t,e);return[s.max(v("x",n,t,e),i,l)]}case"Mean":{const i=v("axis",n,t,e),l=v("keepDims",n,t,e);return[s.mean(v("x",n,t,e),i,l)]}case"Min":{const i=v("axis",n,t,e),l=v("keepDims",n,t,e);return[s.min(v("x",n,t,e),i,l)]}case"Sum":{const i=v("axis",n,t,e),l=v("keepDims",n,t,e);return[s.sum(v("x",n,t,e),i,l)]}case"All":{const i=v("axis",n,t,e),l=v("keepDims",n,t,e);return[s.all(v("x",n,t,e),i,l)]}case"Any":{const i=v("axis",n,t,e),l=v("keepDims",n,t,e);return[s.any(v("x",n,t,e),i,l)]}case"ArgMax":{const i=v("axis",n,t,e);return[s.argMax(v("x",n,t,e),i)]}case"ArgMin":{const i=v("axis",n,t,e);return[s.argMin(v("x",n,t,e),i)]}case"Prod":{const i=v("axis",n,t,e),l=v("keepDims",n,t,e);return[s.prod(v("x",n,t,e),i,l)]}case"Cumprod":{const i=v("axis",n,t,e),l=v("exclusive",n,t,e),u=v("reverse",n,t,e);return[s.cumprod(v("x",n,t,e),i,l,u)]}case"Cumsum":{const i=v("axis",n,t,e),l=v("exclusive",n,t,e),u=v("reverse",n,t,e);return[s.cumsum(v("x",n,t,e),i,l,u)]}case"Bincount":const r=v("x",n,t,e),o=v("weights",n,t,e),a=v("size",n,t,e);return[s.bincount(r,o,a)];case"DenseBincount":{const i=v("x",n,t,e),l=v("weights",n,t,e),u=v("size",n,t,e),c=v("binaryOutput",n,t,e);return[s.denseBincount(i,l,u,c)]}default:throw TypeError(`Node type ${n.op} is not implemented`)}})(a,i,l));case"slice_join":return r(()=>((n,t,e,s=X)=>{switch(n.op){case"ConcatV2":case"Concat":{const r=v("n",n,t,e),o=v("axis",n,t,e);let a=v("tensors",n,t,e);return a=a.slice(0,r),[s.concat(a,o)]}case"Gather":{const r=v("x",n,t,e),o=v("indices",n,t,e);return[s.gather(r,s.cast(o,"int32"),0)]}case"GatherV2":{const r=v("axis",n,t,e),o=v("batchDims",n,t,e),a=v("x",n,t,e),i=v("indices",n,t,e);return[s.gather(a,s.cast(i,"int32"),r,o)]}case"Reverse":{const r=v("dims",n,t,e),o=[];for(let i=0;i<r.length;i++)r[i]&&o.push(i);const a=v("x",n,t,e);return[s.reverse(a,o)]}case"ReverseV2":{const r=v("axis",n,t,e),o=v("x",n,t,e);return[s.reverse(o,r)]}case"Slice":{const r=v("begin",n,t,e),o=v("size",n,t,e);return[s.slice(v("x",n,t,e),r,o)]}case"StridedSlice":{const r=v("begin",n,t,e),o=v("end",n,t,e),a=v("strides",n,t,e),i=v("beginMask",n,t,e),l=v("endMask",n,t,e),u=v("ellipsisMask",n,t,e),c=v("newAxisMask",n,t,e),h=v("shrinkAxisMask",n,t,e),d=v("x",n,t,e);return[s.stridedSlice(d,r,o,a,i,l,u,c,h)]}case"Pack":return P(()=>{const r=v("axis",n,t,e),o=v("tensors",n,t,e),a=o[0].shape,i=s.squeeze(o[0]).shape,l=o.map(u=>{const c=Xe(u.shape,a);if(!c&&!Xe(s.squeeze(u).shape,i))throw new Error("the input tensors shape does not match");return c?u:s.reshape(u,a)});return[s.stack(l,r)]});case"Unpack":{const r=v("axis",n,t,e),o=v("tensor",n,t,e);return s.unstack(o,r)}case"Tile":{const r=v("reps",n,t,e);return[s.tile(v("x",n,t,e),r)]}case"Split":case"SplitV":{const r=v("axis",n,t,e),o=v("numOrSizeSplits",n,t,e),a=v("x",n,t,e);return s.split(a,o,r)}case"ScatterNd":{const r=v("indices",n,t,e),o=v("values",n,t,e),a=v("shape",n,t,e);return[s.scatterND(r,o,a)]}case"GatherNd":{const r=v("x",n,t,e),o=v("indices",n,t,e);return[s.gatherND(r,o)]}case"SparseToDense":{const r=v("sparseIndices",n,t,e),o=v("outputShape",n,t,e),a=v("sparseValues",n,t,e),i=v("defaultValue",n,t,e);return[s.sparseToDense(r,a,o,a.dtype===i.dtype?i:s.cast(i,a.dtype))]}case"TensorScatterUpdate":{const r=v("indices",n,t,e),o=v("values",n,t,e),a=v("tensor",n,t,e);return[s.tensorScatterUpdate(a,r,o)]}default:throw TypeError(`Node type ${n.op} is not implemented`)}})(a,i,l));case"sparse":return r(()=>((n,t,e,s=X)=>{switch(n.op){case"SparseFillEmptyRows":{const{outputIndices:r,outputValues:o,emptyRowIndicator:a,reverseIndexMap:i}=s.sparse.sparseFillEmptyRows(v("indices",n,t,e),v("values",n,t,e),v("denseShape",n,t,e),v("defaultValue",n,t,e));return[r,o,a,i]}case"SparseReshape":{const{outputIndices:r,outputShape:o}=s.sparse.sparseReshape(v("inputIndices",n,t,e),v("inputShape",n,t,e),v("newShape",n,t,e));return[r,o]}case"SparseSegmentMean":return[s.sparse.sparseSegmentMean(v("data",n,t,e),v("indices",n,t,e),v("segmentIds",n,t,e))];case"SparseSegmentSum":return[s.sparse.sparseSegmentSum(v("data",n,t,e),v("indices",n,t,e),v("segmentIds",n,t,e))];default:throw TypeError(`Node type ${n.op} is not implemented`)}})(a,i,l));case"spectral":return r(()=>((n,t,e,s=X)=>{switch(n.op){case"FFT":return[s.fft(v("x",n,t,e))];case"IFFT":return[s.ifft(v("x",n,t,e))];case"RFFT":return[s.rfft(v("x",n,t,e))];case"IRFFT":return[s.irfft(v("x",n,t,e))];default:throw TypeError(`Node type ${n.op} is not implemented`)}})(a,i,l));case"string":return r(()=>((n,t,e,s=X)=>{switch(n.op){case"StaticRegexReplace":return[s.string.staticRegexReplace(v("input",n,t,e),v("pattern",n,t,e),v("rewrite",n,t,e),v("replaceGlobal",n,t,e))];case"StringNGrams":{const{nGrams:r,nGramsSplits:o}=s.string.stringNGrams(v("data",n,t,e),v("dataSplits",n,t,e),v("separator",n,t,e),v("nGramWidths",n,t,e),v("leftPad",n,t,e),v("rightPad",n,t,e),v("padWidth",n,t,e),v("preserveShortSequences",n,t,e));return[r,o]}case"StringSplit":{const{indices:r,values:o,shape:a}=s.string.stringSplit(v("input",n,t,e),v("delimiter",n,t,e),v("skipEmpty",n,t,e));return[r,o,a]}case"StringToHashBucketFast":return[s.string.stringToHashBucketFast(v("input",n,t,e),v("numBuckets",n,t,e))];default:throw TypeError(`Node type ${n.op} is not implemented`)}})(a,i,l));case"transformation":return r(()=>((n,t,e,s=X)=>{switch(n.op){case"Cast":return[s.cast(v("x",n,t,e),v("dtype",n,t,e))];case"ExpandDims":{const r=v("axis",n,t,e);return[s.expandDims(v("x",n,t,e),r)]}case"Squeeze":{const r=v("axis",n,t,e);return[s.squeeze(v("x",n,t,e),r)]}case"Reshape":return[s.reshape(v("x",n,t,e),v("shape",n,t,e))];case"EnsureShape":return[s.ensureShape(v("x",n,t,e),v("shape",n,t,e))];case"MirrorPad":return[s.mirrorPad(v("x",n,t,e),v("padding",n,t,e),v("mode",n,t,e))];case"PadV2":case"Pad":return[s.pad(v("x",n,t,e),v("padding",n,t,e),v("constantValue",n,t,e))];case"SpaceToBatchND":{const r=v("blockShape",n,t,e),o=v("paddings",n,t,e);return[s.spaceToBatchND(v("x",n,t,e),r,o)]}case"BatchToSpaceND":{const r=v("blockShape",n,t,e),o=v("crops",n,t,e);return[s.batchToSpaceND(v("x",n,t,e),r,o)]}case"DepthToSpace":{const r=v("blockSize",n,t,e),o=v("dataFormat",n,t,e).toUpperCase();return[s.depthToSpace(v("x",n,t,e),r,o)]}case"BroadcastTo":return[s.broadcastTo(v("x",n,t,e),v("shape",n,t,e))];case"BroadcastArgs":return[s.broadcastArgs(v("s0",n,t,e),v("s1",n,t,e))];default:throw TypeError(`Node type ${n.op} is not implemented`)}})(a,i,l));case"hash_table":return XD(a,i,l,s);case"custom":const u=tw(a.op);if(u&&u.customExecutor)return u.customExecutor(new FD(a,i,l));throw TypeError(`Custom op ${a.op} is not registered.`);default:throw TypeError(`Unknown op '${a.op}'. File an issue at https://github.com/tensorflow/tfjs/issues so we can add it, or register a custom execution with tf.registerOp()`)}})(n,t,e);return Gr(o)?o.then(a=>[].concat(a)):[].concat(o)}class cw{constructor(t={},e={},s={},r={},o){this.weightMap=t,this.tensorArrayMap=e,this.tensorListMap=s,this.functionMap=r,this.parseNodeNameCache=o,this.rootContext={id:0,frameName:"",iterationId:0},this.contexts=[this.rootContext],this.lastId=0,this.generateCurrentContextIds()}newFrame(t,e){return{id:t,frameName:e,iterationId:0}}set currentContext(t){this.contexts!==t&&(this.contexts=t,this.generateCurrentContextIds())}get currentContext(){return this.contexts}get currentContextId(){return this._currentContextIds[0]}get currentContextIds(){return this._currentContextIds}generateCurrentContextIds(){const t=[];for(let e=0;e<this.contexts.length-1;e++){const s=this.contexts.slice(0,this.contexts.length-e);t.push(this.contextIdforContexts(s))}t.push(""),this._currentContextIds=t}contextIdforContexts(t){return t?t.map(e=>0===e.id&&0===e.iterationId?"":`${e.frameName}-${e.iterationId}`).join("/"):""}enterFrame(t){this.contexts&&(this.lastId++,this.contexts=this.contexts.slice(),this.contexts.push(this.newFrame(this.lastId,t)),this._currentContextIds.unshift(this.contextIdforContexts(this.contexts)))}exitFrame(){if(!(this.contexts&&this.contexts.length>1))throw new Error("Cannot exit frame, the context is empty");this.contexts=this.contexts.slice(),this.contexts.splice(-1),this.currentContextIds.shift()}nextIteration(){if(!(this.contexts&&this.contexts.length>0))throw new Error("Cannot increase frame iteration, the context is empty");{this.contexts=this.contexts.slice(),this.lastId++;const t=Object.assign({},this.contexts[this.contexts.length-1]);t.iterationId+=1,t.id=this.lastId,this.contexts.splice(-1,1,t),this._currentContextIds.splice(0,1,this.contextIdforContexts(this.contexts))}}getWeight(t){return this.weightMap[t]}addTensorArray(t){this.tensorArrayMap[t.id]=t}getTensorArray(t){return this.tensorArrayMap[t]}addTensorList(t){this.tensorListMap[t.id]=t}getTensorList(t){return this.tensorListMap[t]}dispose(t){for(const e in this.tensorArrayMap)this.tensorArrayMap[e].clearAndClose(t);for(const e in this.tensorListMap)this.tensorListMap[e].clearAndClose(t)}}function hw(n,t,e,s){const r=new Set,o=[];let a=null,i=null;const l=new Set,u=new Set(Object.keys(n).map(d=>zn(d)[0]));s=s||[];const c=new Set(s.map(d=>zn(d.name)[0])),h=[...t];for(;h.length>0;){const d=h.pop();if((fo(d)||fF(d)||mF(d))&&null==a&&(a=d,i=a.children.map(p=>p.name).filter(p=>r.has(p))),r.add(d.name),null==e[d.name]&&!u.has(d.name)&&!c.has(d.name)){if(0===d.inputs.length){o.push(d.name);continue}d.inputs.forEach(p=>{l.has(p.name)||(l.add(p.name),h.push(p))})}}return{inputs:n,outputs:t,usedNodes:r,missingInputs:o,dynamicNode:a,syncInputs:i}}class Tc extends Error{constructor(t){super(`NodesExecutionOrderError: ${t}`)}}const hF=new Set(["Switch","Merge","Enter","Exit","NextIteration","StatelessIf","StatelessWhile","if","While"]),dF=new Set(["NonMaxSuppressionV2","NonMaxSuppressionV3","NonMaxSuppressionV5","Where"]),pF=new Set(["HashTable","HashTableV2","LookupTableImport","LookupTableImportV2","LookupTableFind","LookupTableFindV2","LookupTableSize","LookupTableSizeV2"]);function fo(n){return hF.has(n.op)}function fF(n){return dF.has(n.op)}function mF(n){return pF.has(n.op)}class $c{get weightIds(){return this.parent?this.parent.weightIds:this._weightIds}get functionExecutorMap(){return this.parent?this.parent.functionExecutorMap:this._functionExecutorMap}get weightMap(){return this.parent?this.parent.weightMap:this._weightMap}set weightMap(t){const e=Object.keys(t).map(s=>t[s].map(r=>r.id));this._weightIds=[].concat(...e),this._weightMap=t}set resourceManager(t){this._resourceManager=t}get inputs(){return this._inputs.map(t=>({name:t.name,shape:t.attrParams.shape?t.attrParams.shape.value:void 0,dtype:t.attrParams.dtype?t.attrParams.dtype.value:void 0}))}get outputs(){return this._outputs.map(t=>({name:t.name,shape:t.attrParams.shape?t.attrParams.shape.value:void 0,dtype:t.attrParams.dtype?t.attrParams.dtype.value:void 0}))}get inputNodes(){return this._inputs.map(t=>t.signatureKey||t.name)}get outputNodes(){return this._outputs.map(t=>{const e=t.signatureKey||t.name;return t.defaultOutput?`${e}:${t.defaultOutput}`:e})}get functions(){return Object.keys(this._functions).reduce((t,e)=>(t[e]=this._functions[e].signature,t),{})}constructor(t,e){this.graph=t,this.parent=e,this.compiledMap=new Map,this.parseNodeNameCache=new Map,this._weightMap={},this.SEPARATOR=",",this._functions={},this._functionExecutorMap={},this.keepIntermediateTensors=!1,this._outputs=t.outputs,this._inputs=t.inputs,this._initNodes=t.initNodes,this._signature=t.signature,this._functions=t.functions,null!=t.functions&&Object.keys(t.functions).forEach(s=>{this._functionExecutorMap[s]=new $c(t.functions[s],this)})}getCompilationKey(t,e){const s=t.map(o=>o.name).sort(),r=e.map(o=>o.name).sort();return s.join(this.SEPARATOR)+"--"+r.join(this.SEPARATOR)}compile(t,e){const s=hw(t,e,this.weightMap,this._initNodes),{missingInputs:r,dynamicNode:o,syncInputs:a}=s;if(null!=o)throw new Error(`This execution contains the node '${o.name}', which has the dynamic op '${o.op}'. Please use model.executeAsync() instead. Alternatively, to avoid the dynamic ops, specify the inputs [${a}]`);if(r.length>0){const u=e.map(h=>h.name),c=Object.keys(t);throw new Error(`Cannot compute the outputs [${u}] from the provided inputs [${c}]. Missing the following inputs: [${r}]`)}const i=function iF(n,t){const{usedNodes:e,inputs:s}=t,a=m=>e.has("string"==typeof m?m:m.name);function i(m){return[...new Map(m.map(y=>[y.name,y])).values()]}const l=i([...Object.keys(s).map(m=>zn(m)[0]).map(m=>n.nodes[m]),...n.weights,...n.initNodes||[]]).filter(a),u=i([...l,...Object.values(n.nodes)]).filter(a),c=new Map(u.map(m=>[m.name,m])),h={};for(const m of u){h[m.name]=h[m.name]||0;for(const y of m.children)a(y)||(h[y.name]=Number.POSITIVE_INFINITY),h[y.name]=(h[y.name]||0)+1}const d=Object.entries(h).filter(([,m])=>0===m).map(([m])=>m),p=[...d];for(;d.length>0;){const m=d.pop(),y=c.get(m);for(const x of y.children.filter(a))0==--h[x.name]&&(p.push(x.name),d.push(x.name))}const g=function lF(n,t){const e=new Map(n.map(a=>[a.name,a])),s=t.map(a=>a.name),r=new Set(s);for(;s.length>0;){const a=s.pop(),i=e.get(a);for(const l of i.children)!e.has(l.name)||r.has(l.name)||(r.add(l.name),s.push(l.name))}return n.filter(a=>r.has(a.name))}(p.map(m=>c.get(m)),l);return function uF(n,t){const e=new Map(n.map((i,l)=>[i.name,l])),s=new Set(t.map(i=>i.name)),r=i=>s.has("string"==typeof i?i:i.name),o=new Set(n.map(i=>i.name)),a=i=>o.has("string"==typeof i?i:i.name);for(const i of n){for(const l of i.children.filter(a)){if(!e.has(l.name))throw new Tc(`Child ${l.name} of node ${i.name} is unreachable.`);if(e.get(i.name)>e.get(l.name))throw new Tc(`Node ${i.name} is scheduled to run after its child ${l.name}.`)}if(!r(i))for(const l of i.inputs){if(!e.has(l.name))throw new Tc(`Input ${l.name} of node ${i.name} is unreachable.`);if(e.get(l.name)>e.get(i.name))throw new Tc(`Node ${i.name} is scheduled to run before its input ${l.name}.`)}}}(g,l),g}(this.graph,s),l=function cF(n){const t=new Map(n.map((i,l)=>[i.name,l])),e=Number.MAX_SAFE_INTEGER,s=n.map((i,l)=>fo(i)?e:l),r=i=>{const l=s[t.get(i.name)];return null==l?-1:l},o=n.map((i,l)=>i.children.map(r).reduce((u,c)=>Math.max(u,c),s[l])),a=new Map;for(let i=0;i<n.length;++i){const l=o[i];if(l===e)continue;const u=n[i],c=n[l];a.has(c.name)||a.set(c.name,[]),a.get(c.name).push(u)}return a}(i);return{orderedNodes:i,nodeLiveUntilMap:l}}cloneAndKeepTensor(t){if(null==t)return null;const e=t.clone();return en(e),e}cloneTensorList(t){return t?t.map(s=>this.cloneAndKeepTensor(s)):null}cloneTensorMap(t){return Object.fromEntries(Object.entries(t).map(([e,s])=>[e,this.cloneTensorList(s)]))}execute(t,e){this.disposeIntermediateTensors(),t=this.mapInputs(t);const s=Object.keys(t).sort();this.checkInputs(t),this.checkInputShapeAndType(t),e=this.mapOutputs(e),this.checkOutputs(e);const r=s.map(d=>this.graph.nodes[zn(d)[0]]),o=e.map(d=>zn(d)[0]),a=new Set(o);let i=o.map(d=>this.graph.nodes[d]);0===i.length&&(i=this._outputs);const l=this.getCompilationKey(r,i);let u=this.compiledMap.get(l);null==u&&(u=this.compile(t,i),this.compiledMap.set(l,u));try{this.keepIntermediateTensors=z().getBool("KEEP_INTERMEDIATE_TENSORS")}catch(d){this.keepIntermediateTensors=!1,console.warn(d.message)}const c={},h={};return P(()=>{const d=new cw(this.weightMap,c,h,this.functionExecutorMap,this.parseNodeNameCache),p=Object.assign({},this.weightMap);this.keepIntermediateTensors&&(this.clonedTensorsMap=this.cloneTensorMap(this.weightMap)),Object.keys(t).forEach(y=>{const[x,b]=zn(y,d),w=[];w[b]=t[y],p[x]=w,this.keepIntermediateTensors&&(this.clonedTensorsMap[x]=this.cloneTensorList(w))});const f=this.getFrozenTensorIds(p),{orderedNodes:g,nodeLiveUntilMap:m}=u;for(const y of g){if(p[y.name])continue;const x=uw(y,p,d,this._resourceManager);if(Gr(x))throw new Error(`The execution of the op '${y.op}' returned a promise. Please use model.executeAsync() instead.`);p[y.name]=x,this.keepIntermediateTensors&&(this.clonedTensorsMap[y.name]=this.cloneTensorList(x)),this.checkTensorForDisposalWithNodeLiveUntilInfo(y,p,d,f,a,m.get(y.name))}return null==this.parent&&d.dispose(f),e.map(y=>un(y,p,d))})}getFrozenTensorIds(t){const e=[].concat.apply([],Object.keys(t).map(s=>t[s]).map(s=>s.map(r=>r.id)));return new Set(e)}checkTensorForDisposal(t,e,s,r,o,a,i){if(!fo(e)&&!a.has(t)){for(const l of s[t])null!=l&&(i[l.id]=(i[l.id]||0)+e.children.length);for(const l of e.inputs){if(fo(l))continue;const u=nw(l.name,s,r);if(null!=u)for(const c of u){if(!c||c.kept||o.has(c.id))continue;const h=i[c.id];1===h?(c.dispose(),delete i[c.id]):null!=h&&i[c.id]--}}}}checkTensorForDisposalWithNodeLiveUntilInfo(t,e,s,r,o,a){function i(l){return fo(l)||o.has(l.name)}if(!fo(t)&&null!=a)for(const l of a){if(i(l))continue;const u=nw(l.name,e,s);for(const c of u)!c||c.kept||r.has(c.id)||c.dispose()}}executeAsync(t,e){var s=this;return(0,W.Z)(function*(){return s._executeAsync(t,e)})()}disposeIntermediateTensors(){this.clonedTensorsMap&&(Object.values(this.clonedTensorsMap).forEach(t=>{for(const e of t)e&&!e.isDisposed&&e.dispose()}),this.clonedTensorsMap=null)}getIntermediateTensors(){return this.clonedTensorsMap}_executeAsync(t,e,s=!1,r={},o={}){var a=this;return(0,W.Z)(function*(){a.disposeIntermediateTensors(),s||(t=a.mapInputs(t),a.checkInputs(t),a.checkInputShapeAndType(t),e=a.mapOutputs(e),a.checkOutputs(e));try{a.keepIntermediateTensors=z().getBool("KEEP_INTERMEDIATE_TENSORS")}catch(p){a.keepIntermediateTensors=!1,console.warn(p.message)}const i=new cw(a.weightMap,r,o,a.functionExecutorMap,a.parseNodeNameCache);a.keepIntermediateTensors&&(a.clonedTensorsMap=a.cloneTensorMap(a.weightMap));const l=yield a.executeWithControlFlow(t,i,e,s),u=e.map(p=>un(p,l,i)),c=u.map(p=>p.id),h=Object.keys(t).map(p=>t[p].id),d=new Set([...c,...h,...a.weightIds]);return Object.values(l).forEach(p=>{p.forEach(f=>{f&&!f.isDisposed&&!d.has(f.id)&&f.dispose()})}),null==a.parent&&i.dispose(d),u})()}executeFunctionAsync(t,e,s){var r=this;return(0,W.Z)(function*(){const o=t.reduce((a,i,l)=>(a[r.inputs[l].name]=i,a),{});return r._executeAsync(o,r.outputNodes,!0,e,s)})()}executeWithControlFlow(t,e,s,r){var o=this;return(0,W.Z)(function*(){const a=Object.keys(t),i=a.map(S=>o.graph.nodes[zn(S)[0]]),l=s.map(S=>zn(S)[0]),u=new Set(l);let c=l.map(S=>o.graph.nodes[S]);0===c.length&&(c=o._outputs);const{usedNodes:h,missingInputs:d,dynamicNode:p,syncInputs:f}=hw(t,c,o.weightMap,o._initNodes),g=[...i,...o.graph.weights,...o._initNodes||[]].map(S=>({node:S,contexts:e.currentContext})),m=Object.assign({},o.weightMap);Object.keys(t).forEach(S=>{const[C,k]=zn(S),T=[];T[k]=t[S],m[C]=T});const y={},x=o.getFrozenTensorIds(m),b={};for(;g.length>0;){const S=o.processStack(i,g,e,m,b,x,u,y,h);yield Promise.all(S)}null==p&&!r&&console.warn("This model execution did not contain any nodes with control flow or dynamic output shapes. You can use model.execute() instead.");const w=c.filter(S=>!fo(S)&&!un(S.name,m,e)).map(S=>S.name);if(w.length>0){let S="";throw null!=p&&(S=`Alternatively, to avoid the dynamic ops, use model.execute() and specify the inputs [${f}]`),new Error(`Cannot compute the outputs [${w}] from the provided inputs [${a}]. Consider providing the following inputs: [${d}]. ${S}`)}return m})()}processStack(t,e,s,r,o,a,i,l,u){const c=[];for(;e.length>0;){const h=e.pop();s.currentContext=h.contexts;let d="";if("Enter"===h.node.op&&v("isConstant",h.node,r,s)&&([d]=nr(h.node.name,s)),null==r[h.node.name]){const p=uw(h.node,r,s,this._resourceManager);d||([d]=nr(h.node.name,s));const f=s.currentContext;Gr(p)?c.push(p.then(g=>(r[d]=g,this.keepIntermediateTensors&&(this.clonedTensorsMap[d]=this.cloneTensorList(g)),s.currentContext=f,this.checkTensorForDisposal(d,h.node,r,s,a,i,l),this.processChildNodes(h.node,e,s,r,o,u),g))):(r[d]=p,this.keepIntermediateTensors&&(this.clonedTensorsMap[d]=this.cloneTensorList(p)),this.checkTensorForDisposal(d,h.node,r,s,a,i,l),this.processChildNodes(h.node,e,s,r,o,u))}else this.processChildNodes(h.node,e,s,r,o,u)}return c}processChildNodes(t,e,s,r,o,a){t.children.forEach(i=>{const[l]=nr(i.name,s);o[l]||!a.has(i.name)||("Merge"===i.op?i.inputNames.some(u=>!!un(u,r,s))&&(o[l]=!0,e.push({contexts:s.currentContext,node:i})):i.inputNames.every(u=>!!un(u,r,s))&&(o[l]=!0,e.push({contexts:s.currentContext,node:i})))})}dispose(){Object.keys(this.weightMap).forEach(t=>this.weightMap[t].forEach(e=>e.dispose()))}checkInputShapeAndType(t){Object.keys(t).forEach(e=>{const s=t[e],[r]=zn(e),o=this.graph.nodes[r];if(o.attrParams.shape&&o.attrParams.shape.value){const a=o.attrParams.shape.value;I(a.length===s.shape.length&&s.shape.every((l,u)=>-1===a[u]||a[u]===l),()=>`The shape of dict['${o.name}'] provided in model.execute(dict) must be [${a}], but was [${s.shape}]`)}o.attrParams.dtype&&o.attrParams.dtype.value&&I(s.dtype===o.attrParams.dtype.value,()=>`The dtype of dict['${o.name}'] provided in model.execute(dict) must be ${o.attrParams.dtype.value}, but was ${s.dtype}`)})}mapInputs(t){var e,s;const r={};for(const o in t){const a=null===(s=null===(e=this._signature)||void 0===e?void 0:e.inputs)||void 0===s?void 0:s[o];null!=a?r[a.name]=t[o]:r[o]=t[o]}return r}checkInputs(t){const e=Object.keys(t).filter(s=>{const[r]=zn(s);return null==this.graph.nodes[r]});if(e.length>0)throw new Error(`The dict provided in model.execute(dict) has keys: [${e}] that are not part of graph`)}mapOutputs(t){return t.map(e=>{var s,r;const o=null===(r=null===(s=this._signature)||void 0===s?void 0:s.outputs)||void 0===r?void 0:r[e];return null!=o?o.name:e},{})}checkOutputs(t){t.forEach(e=>{const[s]=zn(e);if(!this.graph.nodes[s])throw new Error(`The output '${e}' is not found in the graph`)})}}class gF{constructor(t={},e={}){this.hashTableNameToHandle=t,this.hashTableMap=e}addHashTable(t,e){this.hashTableNameToHandle[t]=e.handle,this.hashTableMap[e.id]=e}getHashTableHandleByName(t){return this.hashTableNameToHandle[t]}getHashTableById(t){return this.hashTableMap[t]}dispose(){for(const t in this.hashTableMap)this.hashTableMap[t].clearAndClose(),delete this.hashTableMap[t];for(const t in this.hashTableNameToHandle)this.hashTableNameToHandle[t].dispose(),delete this.hashTableNameToHandle[t]}}class dw{get modelVersion(){return this.version}get inputNodes(){return this.executor.inputNodes}get outputNodes(){return this.executor.outputNodes}get inputs(){return this.executor.inputs}get outputs(){return this.executor.outputs}get weights(){return this.executor.weightMap}get metadata(){return this.artifacts.userDefinedMetadata}get modelSignature(){return this.signature}get modelStructuredOutputKeys(){return this.structuredOutputKeys}constructor(t,e={},s=Fe){this.modelUrl=t,this.loadOptions=e,this.version="n/a",this.io=s,null==e&&(this.loadOptions={}),this.resourceManager=new gF}findIOHandler(){const t=this.modelUrl;if(null!=t.load)this.handler=t;else if(null!=this.loadOptions.requestInit)this.handler=this.io.browserHTTPRequest(t,this.loadOptions);else{const e=this.io.getLoadHandlers(t,this.loadOptions);if(0===e.length)e.push(this.io.browserHTTPRequest(t,this.loadOptions));else if(e.length>1)throw new Error(`Found more than one (${e.length}) load handlers for URL '${[t]}'`);this.handler=e[0]}}load(){if(this.findIOHandler(),null==this.handler.load)throw new Error("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");const t=this.handler.load();return Gr(t)?t.then(e=>this.loadSync(e)):this.loadSync(t)}loadSync(t){this.artifacts=t;const e=this.artifacts.modelTopology;let s=this.artifacts.signature;if(null!=this.artifacts.userDefinedMetadata){const o=this.artifacts.userDefinedMetadata;null!=o.signature&&(s=o.signature),null!=o.structuredOutputKeys&&(this.structuredOutputKeys=o.structuredOutputKeys)}this.signature=s,this.version=`${e.versions.producer}.${e.versions.minConsumer}`;const r=this.io.decodeWeights(this.artifacts.weightData,this.artifacts.weightSpecs);if(this.executor=new $c(sw.Instance.transformGraph(e,this.signature)),this.executor.weightMap=this.convertTensorMapToTensorsMap(r),this.executor.resourceManager=this.resourceManager,null!=t.modelInitializer&&null!=t.modelInitializer.node){const o=sw.Instance.transformGraph(t.modelInitializer);this.initializer=new $c(o),this.initializer.weightMap=this.executor.weightMap,this.initializer.resourceManager=this.resourceManager,this.initializerSignature=t.initializerSignature}return!0}save(t,e){var s=this;return(0,W.Z)(function*(){if("string"==typeof t){const r=s.io.getSaveHandlers(t);if(0===r.length)throw new Error(`Cannot find any save handlers for URL '${t}'`);if(r.length>1)throw new Error(`Found more than one (${r.length}) save handlers for URL '${t}'`);t=r[0]}if(null==t.save)throw new Error("GraphModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");return t.save(s.artifacts)})()}addStructuredOutputNames(t){if(this.structuredOutputKeys){const s={};return(t instanceof mt?[t]:t).forEach((r,o)=>s[this.structuredOutputKeys[o]]=r),s}return t}predict(t,e){const s=this.execute(t,this.outputNodes);return this.addStructuredOutputNames(s)}predictAsync(t,e){var s=this;return(0,W.Z)(function*(){const r=yield s.executeAsync(t,s.outputNodes);return s.addStructuredOutputNames(r)})()}normalizeInputs(t){var e;if(!(t instanceof mt||Array.isArray(t))){const o=null===(e=this.signature)||void 0===e?void 0:e.inputs;if(null!=o)for(const a in o){const i=o[a];null!=i.resourceId&&(t[a]=this.resourceIdToCapturedInput[i.resourceId])}return t}t=Array.isArray(t)?t:[t];const s=Object.keys(this.resourceIdToCapturedInput).length;if(t.length+s!==this.inputNodes.length)throw new Error(`Input tensor count mismatch, the graph model has ${this.inputNodes.length-s} non-resource placeholders, while there are ${t.length} input tensors provided.`);let r=0;return this.inputNodes.reduce((o,a)=>{var i,l,u;const c=null===(u=null===(l=null===(i=this.signature)||void 0===i?void 0:i.inputs)||void 0===l?void 0:l[a])||void 0===u?void 0:u.resourceId;return o[a]=null!=c?this.resourceIdToCapturedInput[c]:t[r++],o},{})}normalizeOutputs(t){return t=t||this.outputNodes,Array.isArray(t)?t:[t]}executeInitializerGraph(){return null==this.initializer?[]:this.initializer.execute({},null==this.initializerSignature?[]:Object.keys(this.initializerSignature.outputs))}executeInitializerGraphAsync(){var t=this;return(0,W.Z)(function*(){return null==t.initializer?[]:t.initializer.executeAsync({},null==t.initializerSignature?[]:Object.keys(t.initializerSignature.outputs))})()}setResourceIdToCapturedInput(t){if(this.resourceIdToCapturedInput={},this.initializerSignature){const e=this.initializerSignature.outputs,s=Object.keys(e);for(let r=0;r<s.length;r++)this.resourceIdToCapturedInput[e[s[r]].resourceId]=t[r]}}execute(t,e){null==this.resourceIdToCapturedInput&&this.setResourceIdToCapturedInput(this.executeInitializerGraph()),t=this.normalizeInputs(t),e=this.normalizeOutputs(e);const s=this.executor.execute(t,e);return s.length>1?s:s[0]}executeAsync(t,e){var s=this;return(0,W.Z)(function*(){null==s.resourceIdToCapturedInput&&s.setResourceIdToCapturedInput(yield s.executeInitializerGraphAsync()),t=s.normalizeInputs(t),e=s.normalizeOutputs(e);const r=yield s.executor.executeAsync(t,e);return r.length>1?r:r[0]})()}getIntermediateTensors(){return this.executor.getIntermediateTensors()}disposeIntermediateTensors(){this.executor.disposeIntermediateTensors()}convertTensorMapToTensorsMap(t){return Object.keys(t).reduce((e,s)=>(e[s]=[t[s]],e),{})}dispose(){this.executor.dispose(),this.initializer&&(this.initializer.dispose(),this.resourceIdToCapturedInput&&Be(this.resourceIdToCapturedInput)),this.resourceManager.dispose()}}function Am(){return(Am=(0,W.Z)(function*(n,t={},e=Fe){if(null==n)throw new Error("modelUrl in loadGraphModel() cannot be null. Please provide a url or an IOHandler that loads the model");null==t&&(t={}),t.fromTFHub&&"string"==typeof n&&(n=function wF(n){return n.endsWith("/")||(n+="/"),`${n}model.json?tfjs-format=file`}(n));const s=new dw(n,t,e);return yield s.load(),s})).apply(this,arguments)}function Se(n,t){Array.isArray(n)||(n=[n]),n.forEach(e=>{null!=e&&I("complex64"!==e.dtype,()=>`${t} does not support complex64 tensors in the CPU backend.`)})}Symbol("out"),Symbol("field"),Symbol("quote"),Symbol("quoteafterquote"),Symbol("quoteinquote");const qF=Gp;let XF=(()=>{class n extends xn{nextDataId(){return n.nextDataId++}constructor(){super(),this.blockSize=48,this.firstUse=!0,this.data=new _t(this,As())}write(e,s,r){this.firstUse&&(this.firstUse=!1,z().get("IS_NODE")&&Un("\n============================\nHi, looks like you are running TensorFlow.js in Node.js. To speed things up dramatically, install our node backend, visit https://github.com/tensorflow/tfjs-node for more details. \n============================"));const o={id:this.nextDataId()};return this.data.set(o,{values:e,dtype:r,refCount:1}),o}makeTensorInfo(e,s,r){let o;if("string"===s&&null!=r&&r.length>0&&ba(r[0])){const a=r.map(i=>hr(i));o=this.write(a,e,s)}else o=this.write(r,e,s);return{dataId:o,shape:e,dtype:s}}refCount(e){return this.data.has(e)?this.data.get(e).refCount:0}incRef(e){this.data.get(e).refCount++}decRef(e){this.data.has(e)&&this.data.get(e).refCount--}move(e,s,r,o,a){this.data.set(e,{values:s,dtype:o,refCount:a})}numDataIds(){return this.data.numDataIds()}read(e){var s=this;return(0,W.Z)(function*(){return s.readSync(e)})()}readSync(e){const{dtype:s,complexTensorInfos:r}=this.data.get(e);return"complex64"===s?Qs(this.readSync(r.real.dataId),this.readSync(r.imag.dataId)):function uS(n,t){if(Array.isArray(n))return n;if("float32"===t)return n instanceof Float32Array?n:new Float32Array(n);if("int32"===t)return n instanceof Int32Array?n:new Int32Array(n);if("bool"===t||"string"===t)return Uint8Array.from(new Int32Array(n));throw new Error(`Unknown dtype ${t}`)}(this.data.get(e).values,s)}bufferSync(e){const s=this.readSync(e.dataId);if("string"===e.dtype)try{const r=s.map(o=>dr(o));return Me(e.shape,e.dtype,r)}catch{throw new Error("Failed to decode encoded string bytes into utf-8")}return Me(e.shape,e.dtype,s)}makeOutput(e,s,r){return As().makeTensorFromTensorInfo(this.makeTensorInfo(s,r,e),this)}disposeData(e,s=!1){if(this.data.has(e)){if(this.data.get(e).refCount--,!s&&this.data.get(e).refCount>0)return!1;const{complexTensorInfos:r}=this.data.get(e);null!=r&&(this.disposeData(r.real.dataId,!0),this.disposeData(r.imag.dataId,!0)),this.data.delete(e)}return!0}disposeIntermediateTensorInfo(e){this.disposeData(e.dataId)}time(e){return(0,W.Z)(function*(){const s=Tn();return e(),{kernelMs:Tn()-s}})()}memory(){return{unreliable:!0,reasons:["The reported memory is an upper bound. Due to automatic garbage collection, the true allocated memory may be less."]}}where(e){Se([e],"where");const s=this.readSync(e.dataId);return qF(e.shape,s)}dispose(){}floatPrecision(){return 32}epsilon(){return super.epsilon()}}return n.nextDataId=0,n})();function Gs(n){return(t,e,s)=>{const r=Ft(e,t.length);for(let o=0;o<t.length;++o)r[o]=n(t[o],s);return r}}function lt(n,t,e){return Dr(n,Gs(t),e)}function Dr(n,t,e){return({inputs:s,attrs:r,backend:o})=>{const{x:a}=s;Se(a,n);const i=o,l=i.data.get(a.dataId).values;let u;if("string"===a.dtype){if(!Array.isArray(l))throw new Error("String tensor's value was not an instance of Array");u=Js(l)}else u=l;const c=e||a.dtype,h=t(u,c,r);return i.makeTensorInfo(a.shape,c,h)}}uy("cpu",()=>new XF,1);const Iw=lt(Da,n=>n>=0?n:Math.exp(n)-1),YF={kernelName:Da,backendName:"cpu",kernelFunc:Iw};function Hs(n){const{inputs:t,backend:e}=n,{x:s}=t;return e.incRef(s.dataId),{dataId:s.dataId,shape:s.shape,dtype:s.dtype}}const QF={kernelName:Ba,backendName:"cpu",kernelFunc:Hs};function Nw(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{alpha:o}=s;Se([r],"leakyRelu");const a=G(r.shape),i=e.data.get(r.dataId).values,l=on("float32",a);for(let u=0;u<i.length;u++)l[u]=i[u]<0?o*i[u]:i[u];return e.makeTensorInfo(r.shape,"float32",l)}const JF={kernelName:Dl,backendName:"cpu",kernelFunc:Nw};function zt(n){return(t,e,s,r,o)=>{const a=Le(t,e),i=a.length,l=ke(a),c=on(o,G(a)),h=t.length,d=e.length,p=ke(t),f=ke(e),g=Bo(t,a),m=Bo(e,a);if(g.length+m.length===0)for(let y=0;y<c.length;++y)c[y]=n(s[y%s.length],r[y%r.length]);else for(let y=0;y<c.length;++y){const x=_o(y,i,l),b=x.slice(-h);g.forEach(k=>b[k]=0);const w=_s(b,h,p),S=x.slice(-d);m.forEach(k=>S[k]=0);const C=_s(S,d,f);c[y]=n(s[w],r[C])}return[c,a]}}const eO=zt((n,t)=>n<0?t*n:n);function Cw(n){const{inputs:t,backend:e}=n,{x:s,alpha:r}=t;Se([s,r],"prelu");const o=e.data.get(s.dataId).values,a=e.data.get(r.dataId).values,[i,l]=eO(s.shape,r.shape,o,a,"float32");return e.makeTensorInfo(l,"float32",i)}const tO={kernelName:Ql,backendName:"cpu",kernelFunc:Cw},kw=lt(Qa,n=>Math.max(0,n)),nO={kernelName:Qa,backendName:"cpu",kernelFunc:kw},Tw=lt(Ja,n=>Math.min(Math.max(0,n),6)),sO={kernelName:Ja,backendName:"cpu",kernelFunc:Tw},rO=Gs(n=>1/(1+Math.exp(-n))),$w=lt(ai,n=>1/(1+Math.exp(-n))),oO={kernelName:ai,backendName:"cpu",kernelFunc:$w};function Rc(n,t,e,s,r){if("linear"===e)return Hs({inputs:{x:t},backend:n});if("relu"===e)return kw({inputs:{x:t},backend:n});if("elu"===e)return Iw({inputs:{x:t},backend:n});if("relu6"===e)return Tw({inputs:{x:t},backend:n});if("prelu"===e)return Cw({inputs:{x:t,alpha:s},backend:n});if("leakyrelu"===e)return Nw({inputs:{x:t},backend:n,attrs:{alpha:r}});if("sigmoid"===e)return $w({inputs:{x:t},backend:n});throw new Error(`Activation ${e} has not been implemented for the CPU backend.`)}function Mn(n){const{inputs:t,backend:e}=n,{real:s,imag:r}=t,o=e.data.get(s.dataId).values,a=e.data.get(r.dataId).values,i=e.makeTensorInfo(s.shape,"complex64");return e.data.get(i.dataId).complexTensorInfos={real:e.makeTensorInfo(s.shape,"float32",o),imag:e.makeTensorInfo(r.shape,"float32",a)},i}const aO={kernelName:vh,backendName:"cpu",kernelFunc:Mn};function Dc(n,t,e="float32"){if("complex64"===e)return Mn({inputs:{real:Dc(n,t,"float32"),imag:Dc(n,t,"float32")},backend:n});const s=dn(G(t),e);return n.makeTensorInfo(t,e,s)}function mo(n){const{inputs:t,backend:e}=n,{input:s}=t,r=e.data.get(s.dataId).complexTensorInfos.real,o=e.data.get(r.dataId).values;return e.makeTensorInfo(r.shape,r.dtype,o)}const iO={kernelName:nd,backendName:"cpu",kernelFunc:mo};function _w(n,t,e,s){if("int32"===s)return[t,"int32",Int32Array.from(n)];if("bool"===s){const r=Kr([0],e),[o,a]=zt((i,l)=>i!==l?1:0)(t,[],n,r,"bool");return[a,"bool",o]}throw new Error(`Error in Cast: failed to cast ${e} to ${s}`)}function Fr(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{dtype:o}=s;if("complex64"===o){if("complex64"===r.dtype)return Hs({inputs:{x:r},backend:e});const c=Dc(e,r.shape,r.dtype),h=Fr({inputs:{x:r},backend:e,attrs:{dtype:"float32"}}),d=Mn({inputs:{real:h,imag:c},backend:e});return e.disposeIntermediateTensorInfo(c),e.disposeIntermediateTensorInfo(h),d}if("complex64"===r.dtype){const c=mo({inputs:{input:r},backend:e}),h=Fr({inputs:{x:c},backend:e,attrs:{dtype:o}});return e.disposeIntermediateTensorInfo(c),h}if(!yg(r.dtype,o)){const c=Hs({inputs:{x:r},backend:e});return{dataId:c.dataId,shape:c.shape,dtype:o}}const a=e.data.get(r.dataId).values,[i,l,u]=_w(a,r.shape,r.dtype,o);return e.makeTensorInfo(i,l,u)}const lO={kernelName:Ta,backendName:"cpu",kernelFunc:Fr};function Qt(n,t,e,s){return null==e?({inputs:r,backend:o})=>{const{a,b:i}=r,l=o;Se([a,i],n);const u=l.data.get(a.dataId).values,c=l.data.get(i.dataId).values,h="string"===a.dtype?Js(u):u,d="string"===a.dtype?Js(c):c,p=s||a.dtype,[f,g]=t(a.shape,i.shape,h,d,p);return l.makeTensorInfo(g,p,f)}:({inputs:r,backend:o})=>{const{a,b:i}=r,l=o;if("complex64"===a.dtype||"complex64"===i.dtype){const u=Fr({inputs:{x:a},backend:l,attrs:{dtype:"complex64"}}),c=l.data.get(u.dataId),d=c.complexTensorInfos.imag,p=l.data.get(c.complexTensorInfos.real.dataId).values,f=l.data.get(d.dataId).values,g=Fr({inputs:{x:i},backend:l,attrs:{dtype:"complex64"}}),m=l.data.get(g.dataId),x=m.complexTensorInfos.imag,b=l.data.get(m.complexTensorInfos.real.dataId).values,w=l.data.get(x.dataId).values,[S,C,k]=e(a.shape,i.shape,p,f,b,w),T=l.makeTensorInfo(k,"float32",S),E=l.makeTensorInfo(k,"float32",C),R=Mn({inputs:{real:T,imag:E},backend:l});return l.disposeIntermediateTensorInfo(u),l.disposeIntermediateTensorInfo(g),l.disposeIntermediateTensorInfo(T),l.disposeIntermediateTensorInfo(E),R}{const u=l.data.get(a.dataId).values,c=l.data.get(i.dataId).values,h=s||a.dtype,[d,p]=t(a.shape,i.shape,u,c,h);return l.makeTensorInfo(p,h,d)}}}function zm(n){return(t,e,s,r,o,a)=>{const i=Le(t,e),l=G(i),u=i.length,c=ke(i),h=on("float32",l),d=on("float32",l),p=Bo(t,i),f=Bo(e,i),g=Qs(s,r),m=Qs(o,a),y=t.length,x=ke(t),b=e.length,w=ke(e);if(p.length+f.length===0)for(let S=0;S<h.length;S++){const C=S%g.length,k=S%m.length,T=n(g[2*C],g[2*C+1],m[2*k],m[2*k+1]);h[S]=T.real,d[S]=T.imag}else for(let S=0;S<h.length;S++){const C=_o(S,u,c),k=C.slice(-y);p.forEach(B=>k[B]=0);const T=_s(k,y,x),E=C.slice(-b);f.forEach(B=>E[B]=0);const R=_s(E,b,w),L=n(g[2*T],g[2*T+1],m[2*R],m[2*R+1]);h[S]=L.real,d[S]=L.imag}return[h,d,i]}}const Ew=zt((n,t)=>n+t),uO=zm((n,t,e,s)=>({real:n+e,imag:t+s})),ra=Qt(Eo,Ew,uO),cO={kernelName:Eo,backendName:"cpu",kernelFunc:ra};function yt(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{shape:o}=s,a=G(r.shape),i=gg(o,a),l=G(i);I(a===l,()=>`The new shape (${i}) has ${l} elements and the old shape (${r.shape}) has ${a} elements. The new shape and old shape must have the same number of elements.`),e.incRef(r.dataId);const u=e.data.get(r.dataId);if(null!=u.complexTensorInfos){const h=u.complexTensorInfos.imag;u.complexTensorInfos.real.shape=i,h.shape=i}return{dataId:r.dataId,shape:i,dtype:r.dtype}}const hO={kernelName:eu,backendName:"cpu",kernelFunc:yt};function Aw(n){const{inputs:t,backend:e,attrs:s}=n,{a:r,b:o}=t,{transposeA:a,transposeB:i}=s;Se([r,o],"matMul");const l=r.shape.length,u=o.shape.length,c=a?r.shape[l-2]:r.shape[l-1],h=i?o.shape[u-1]:o.shape[u-2],d=a?r.shape[l-1]:r.shape[l-2],p=i?o.shape[u-2]:o.shape[u-1],f=r.shape.slice(0,-2),g=o.shape.slice(0,-2),m=G(f),y=G(g),b=Le(r.shape.slice(0,-2),o.shape.slice(0,-2)).concat([d,p]);I(c===h,()=>`Error in matMul: inner shapes (${c}) and (${h}) of Tensors with shapes ${r.shape} and ${o.shape} and transposeA=${a} and transposeB=${i} must match.`);const S=i?[y,p,h]:[y,h,p],C=yt({inputs:{x:r},backend:e,attrs:{shape:a?[m,c,d]:[m,d,c]}}),k=yt({inputs:{x:o},backend:e,attrs:{shape:S}}),T=a?C.shape[1]:C.shape[2],E=a?C.shape[2]:C.shape[1],R=i?k.shape[1]:k.shape[2],L=Math.max(m,y),B=e.data.get(C.dataId).values,U=e.data.get(k.dataId).values,H=ke(C.shape),j=ke(k.shape),[Z,Y,K]=a?[H[0],1,H[1]]:[H[0],H[1],1],[Q,se,re]=i?[1,j[1],j[0]]:[j[1],1,j[0]],le=E*R,ie=Me([L,E,R],C.dtype),fe=ie.values,ue=e.blockSize;for(let ye=0;ye<L;ye++){const Te=ye%m,Re=ye%y;for(let Ae=0;Ae<E;Ae+=ue){const Ve=Math.min(Ae+ue,E);for(let Ue=0;Ue<R;Ue+=ue){const ut=Math.min(Ue+ue,R);for(let xt=0;xt<T;xt+=ue){const Dt=Math.min(xt+ue,T);for(let bt=Ae;bt<Ve;bt++)for(let ht=Ue;ht<ut;ht++){let $t=0;for(let Nt=xt;Nt<Dt;Nt++)$t+=B[Te*Z+bt*Y+Nt*K]*U[Nt*Q+ht*se+Re*re];fe[ye*le+(bt*R+ht)]+=$t}}}}}return e.disposeIntermediateTensorInfo(C),e.disposeIntermediateTensorInfo(k),e.makeTensorInfo(b,ie.dtype,ie.values)}const dO={kernelName:yl,backendName:"cpu",kernelFunc:Aw},fO={kernelName:fu,backendName:"cpu",kernelFunc:function pO(n){const{inputs:t,backend:e,attrs:s}=n,{a:r,b:o,bias:a,preluActivationWeights:i}=t,{transposeA:l,transposeB:u,activation:c,leakyreluAlpha:h}=s;let d,p,f;const g=[];d=Aw({inputs:{a:r,b:o},attrs:{transposeA:l,transposeB:u},backend:e}),a&&(p=ra({inputs:{a:d,b:a},backend:e}),g.push(d),d=p),c&&(f=Rc(e,d,c,i,h),g.push(d),d=f);for(const y of g)e.disposeIntermediateTensorInfo(y);return d}};function Rw(n){const t=new Float32Array(n.length);for(let e=0;e<n.length;++e)t[e]=Math.abs(n[e]);return t}const mO={kernelName:hl,backendName:"cpu",kernelFunc:n=>{const{x:t}=n.inputs,e=n.backend;Se(t,"abs");let s=new Float32Array(G(t.shape));return s=Rw(e.data.get(t.dataId).values),e.makeOutput(s,t.shape,t.dtype)}},gO=lt(wa,n=>Math.acos(n)),yO={kernelName:wa,backendName:"cpu",kernelFunc:gO},xO=lt(va,n=>Math.acosh(n)),bO={kernelName:va,backendName:"cpu",kernelFunc:xO},vO={kernelName:dl,backendName:"cpu",kernelFunc:function wO(n){const{inputs:t,backend:e}=n,s=t;Se(t,"addN");const r=s.map(i=>e.data.get(i.dataId).values),o=Me(s[0].shape,s[0].dtype),a=o.values;for(let i=0;i<s.length;i++){const l=r[i];for(let u=0;u<a.length;u++)a[u]+=l[u]}return e.makeTensorInfo(o.shape,o.dtype,o.values)}};function Mm(n,t,e,s,r){const o=t.length,a=G(t),i=ke(t),l=ke(r),u=on(e,G(r));for(let c=0;c<a;++c){const h=_o(c,o,i),d=new Array(h.length);for(let f=0;f<d.length;f++)d[f]=h[s[f]];u[_s(d,o,l)]=n[c]}return u}function Rn(n){const{inputs:t,attrs:e,backend:s}=n,{x:r}=t,{perm:o}=e;Se(r,"transpose");const i=new Array(r.shape.length);for(let h=0;h<i.length;h++)i[h]=r.shape[o[h]];const u=Mm(s.data.get(r.dataId).values,r.shape,r.dtype,o,i);return{dataId:s.write(u,i,r.dtype),shape:i,dtype:r.dtype}}const SO={kernelName:Ao,backendName:"cpu",kernelFunc:Rn},NO={kernelName:"All",backendName:"cpu",kernelFunc:function IO(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:o,keepDims:a}=s;Se(r,"all");const i=Ge(o,r.shape);let l=i;const u=kt(l,r.shape.length);let c=r;null!=u&&(c=Rn({inputs:{x:r},backend:e,attrs:{perm:u}}),l=Lt(l.length,r.shape.length)),ln("all",l,c.shape.length);const[h,d]=nn(c.shape,l),p=G(d),f=dn(G(h),c.dtype),g=e.data.get(c.dataId).values;for(let y=0;y<f.length;++y){const x=y*p;let b=g[x];for(let w=0;w<p;++w)b=b&&g[x+w];f[y]=b}null!=u&&e.disposeIntermediateTensorInfo(c);const m=e.makeTensorInfo(h,c.dtype,f);if(a){const x=yt({inputs:{x:m},backend:e,attrs:{shape:Ot(h,i)}});return e.disposeIntermediateTensorInfo(m),x}return m}},kO={kernelName:"Any",backendName:"cpu",kernelFunc:function CO(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:o,keepDims:a}=s;Se(r,"any");const i=Ge(o,r.shape);let l=i;const u=kt(l,r.shape.length);let c=r;null!=u&&(c=Rn({inputs:{x:r},backend:e,attrs:{perm:u}}),l=Lt(l.length,r.shape.length)),ln("any",l,c.shape.length);const[h,d]=nn(c.shape,l),p=G(d),f=dn(G(h),c.dtype),g=e.data.get(c.dataId).values;for(let y=0;y<f.length;++y){const x=y*p;let b=g[x];for(let w=0;w<p;++w)b=b||g[x+w];f[y]=b}null!=u&&e.disposeIntermediateTensorInfo(c);const m=e.makeTensorInfo(h,c.dtype,f);if(a){const x=yt({inputs:{x:m},backend:e,attrs:{shape:Ot(h,i)}});return e.disposeIntermediateTensorInfo(m),x}return m}},$O={kernelName:pl,backendName:"cpu",kernelFunc:function TO(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:o}=s;Se(r,"argMax");let a=Ge(o,r.shape);const i=kt(a,r.shape.length);let l=r;const u=[];null!=i&&(l=Rn({inputs:{x:r},backend:e,attrs:{perm:i}}),u.push(l),a=Lt(a.length,l.shape.length)),a=[a[0]],ln("argMax",a,l.shape.length);const[c,h]=nn(l.shape,a),p=dn(G(c),"int32"),f=G(h),g=e.data.get(l.dataId).values;for(let m=0;m<p.length;++m){const y=m*f;let x=g[y],b=0;for(let w=0;w<f;++w){const S=g[y+w];S>x&&(x=S,b=w)}p[m]=b}return u.forEach(m=>e.disposeIntermediateTensorInfo(m)),e.makeTensorInfo(c,"int32",p)}},EO={kernelName:fl,backendName:"cpu",kernelFunc:function _O(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:o}=s;Se(r,"argMin");let a=Ge(o,r.shape);const i=kt(a,r.shape.length);let l=r;const u=[];null!=i&&(l=Rn({inputs:{x:r},backend:e,attrs:{perm:i}}),u.push(l),a=Lt(a.length,l.shape.length)),a=[a[0]],ln("argMin",a,l.shape.length);const[c,h]=nn(l.shape,a),p=dn(G(c),"int32"),f=G(h),g=e.data.get(l.dataId).values;for(let m=0;m<p.length;++m){const y=m*f;let x=g[y],b=0;for(let w=0;w<f;++w){const S=g[y+w];S<x&&(x=S,b=w)}p[m]=b}return u.forEach(m=>e.disposeIntermediateTensorInfo(m)),e.makeTensorInfo(c,"int32",p)}},AO=lt(Sa,n=>Math.asin(n)),RO={kernelName:Sa,backendName:"cpu",kernelFunc:AO},DO=lt(Ia,n=>Math.asinh(n)),FO={kernelName:Ia,backendName:"cpu",kernelFunc:DO},OO=lt(Na,n=>Math.atan(n)),LO={kernelName:Na,backendName:"cpu",kernelFunc:OO},PO=zt((n,t)=>Math.atan2(n,t)),zO=Qt(ka,PO),MO={kernelName:ka,backendName:"cpu",kernelFunc:zO},BO=lt(Ca,n=>Math.atanh(n)),VO={kernelName:Ca,backendName:"cpu",kernelFunc:BO};function Bm(n,t,e,s,r,o){const a=r.strideHeight,i=r.strideWidth,l=r.dilationHeight,u=r.dilationWidth,c=r.effectiveFilterHeight,h=r.effectiveFilterWidth,d=r.padInfo.top,p=r.padInfo.left,f="max"===o?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,g=Me(r.outShape,e),m=g.values,y=r.outShape[1]*r.outShape[2]*r.outShape[3],x=r.outShape[2]*r.outShape[3],b=r.outShape[3];for(let w=0;w<r.batchSize;++w){const S=w*y,C=w*s[0];for(let k=0;k<r.inChannels;++k)for(let T=0;T<r.outHeight;++T){const E=T*a-d,R=Math.max(0,E),L=Math.min(r.inHeight,c+E),B=S+T*x;for(let U=0;U<r.outWidth;++U){const H=U*i-p,j=Math.max(0,H),Z=Math.min(r.inWidth,h+H);let Y=f,K=0,Q=0;for(let re=R;re<L;re+=l){const le=C+re*s[1];for(let ie=j;ie<Z;ie+=u){const ue=n[le+ie*s[2]+k];"max"===o&&ue>Y?Y=ue:"avg"===o&&(K+=ue,Q++)}if(isNaN(Y))break}m[B+U*b+k]="avg"===o?K/Q:Y}}}return g}function Dw(n,t,e,s,r=!1,o=!1){const a=Me(s.outShape,"int32"),i=s.strideHeight,l=s.strideWidth,u=s.dilationHeight,c=s.dilationWidth,h=s.effectiveFilterHeight,d=s.effectiveFilterWidth,p=s.padInfo.top,f=s.padInfo.left,g=Me(t,e,n);for(let m=0;m<s.batchSize;++m)for(let y=0;y<s.inChannels;++y)for(let x=0;x<s.outHeight;++x){const b=x*i-p;let w=b;for(;w<0;)w+=u;const S=Math.min(s.inHeight,h+b);for(let C=0;C<s.outWidth;++C){const k=C*l-f;let T=k;for(;T<0;)T+=c;const E=Math.min(s.inWidth,d+k);let R=Number.NEGATIVE_INFINITY,L=-1;for(let B=w;B<S;B+=u){const U=B-b;for(let H=T;H<E;H+=c){const j=H-k,Z=g.get(m,B,H,y);Z>R&&(R=Z,L=r?o?((m*s.inHeight+B)*s.inWidth+H)*s.inChannels+y:(B*s.inWidth+H)*s.inChannels+y:U*d+j)}}a.set(L,m,x,C,y)}}return a}function Fw(n,t,e,s,r,o){const a=r.strideDepth,i=r.strideHeight,l=r.strideWidth,u=r.dilationDepth,c=r.dilationHeight,h=r.dilationWidth,d=r.effectiveFilterDepth,p=r.effectiveFilterHeight,f=r.effectiveFilterWidth,g=r.padInfo.front,m=r.padInfo.top,y=r.padInfo.left,x="max"===o?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,b=Me(r.outShape,e),w=b.values,S=r.outShape[1]*r.outShape[2]*r.outShape[3]*r.outShape[4],C=r.outShape[2]*r.outShape[3]*r.outShape[4],k=r.outShape[3]*r.outShape[4],T=r.outShape[4];for(let E=0;E<r.batchSize;++E){const R=E*S,L=E*s[0];for(let B=0;B<r.inChannels;++B)for(let U=0;U<r.outDepth;++U){const H=U*a-g;let j=H;for(;j<0;)j+=u;const Z=Math.min(r.inDepth,d+H),Y=R+U*C;for(let K=0;K<r.outHeight;++K){const Q=K*i-m;let se=Q;for(;se<0;)se+=c;const re=Math.min(r.inHeight,p+Q),le=Y+K*k;for(let ie=0;ie<r.outWidth;++ie){const fe=ie*l-y;let ue=fe;for(;ue<0;)ue+=h;const ye=Math.min(r.inWidth,f+fe),Te=le+ie*T;let Re=x,Ae=0,Ve=0;for(let ut=j;ut<Z;ut+=u){const xt=L+ut*s[1];for(let Dt=se;Dt<re;Dt+=c){const bt=xt+Dt*s[2];for(let ht=ue;ht<ye;ht+=h){const Nt=n[bt+ht*s[3]+B];if("max"===o&&Nt>Re?Re=Nt:"avg"===o&&(Ae+=Nt,Ve++),isNaN(Re))break}if(isNaN(Re))break}if(isNaN(Re))break}w[Te+B]="avg"===o?Ae/Math.max(Ve,1):Re}}}}return b}const GO={kernelName:ml,backendName:"cpu",kernelFunc:function UO(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t;Se(r,"avgPool");const{filterSize:o,strides:a,pad:i,dimRoundingMode:l}=s;I(an(a,1),()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${a} and dilations '1'`);const c=os(r.shape,o,a,1,i,l);let h;if(1===c.filterWidth&&1===c.filterHeight&&Xe(c.inShape,c.outShape))h=Hs({inputs:{x:r},backend:e});else{const d=e.data.get(r.dataId).values,p=ke(r.shape),f=Bm(d,0,r.dtype,p,c,"avg");h=e.makeTensorInfo(c.outShape,r.dtype,f.values)}return h}},jO={kernelName:gl,backendName:"cpu",kernelFunc:function HO(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{filterSize:o,strides:a,pad:i,dimRoundingMode:l,dataFormat:u}=s;Se(r,"avgPool3d");const c=Xs(r.shape,o,a,1,i,l,u),d=Fw(e.data.get(r.dataId).values,0,r.dtype,ke(r.shape),c,"avg");return e.makeTensorInfo(d.shape,"float32",d.values)}},qO={kernelName:xh,backendName:"cpu",kernelFunc:function KO(n){const{inputs:t,backend:e,attrs:s}=n,{dy:r,input:o}=t,{filterSize:a,strides:i,pad:l,dimRoundingMode:u}=s;Se([r,o],"avgPool3DGrad");const c=Xs(o.shape,a,i,1,l,u),h=c.strideDepth,d=c.strideHeight,p=c.strideWidth,f=c.filterDepth,g=c.filterHeight,m=c.filterWidth,y=c.dilationDepth,x=c.dilationHeight,b=c.dilationWidth,w=c.effectiveFilterDepth,S=c.effectiveFilterHeight,C=c.effectiveFilterWidth,k=w-1-c.padInfo.front,T=C-1-c.padInfo.left,E=S-1-c.padInfo.top,R=Me(o.shape,"float32"),L=1/(f*g*m),B=e.bufferSync(r);for(let U=0;U<c.batchSize;++U)for(let H=0;H<c.inChannels;++H)for(let j=0;j<c.inDepth;++j)for(let Z=0;Z<c.inHeight;++Z)for(let Y=0;Y<c.inWidth;++Y){const K=j-k,Q=Z-E,se=Y-T;let re=0;for(let le=0;le<w;le+=y){const ie=(K+le)/h;if(!(ie<0||ie>=c.outDepth||Math.floor(ie)!==ie))for(let fe=0;fe<S;fe+=x){const ue=(Q+fe)/d;if(!(ue<0||ue>=c.outHeight||Math.floor(ue)!==ue))for(let ye=0;ye<C;ye+=b){const Te=(se+ye)/p;Te<0||Te>=c.outWidth||Math.floor(Te)!==Te||(re+=B.get(U,ie,ue,Te,H))}}}R.set(re*L,U,j,Z,Y,H)}return e.makeTensorInfo(R.shape,R.dtype,R.values)}},ZO={kernelName:yh,backendName:"cpu",kernelFunc:function XO(n){const{inputs:t,backend:e,attrs:s}=n,{dy:r,input:o}=t,a=o;Se([r,o],"avgPoolGrad");const{filterSize:i,strides:l,pad:u}=s,c=os(a.shape,i,l,1,u),h=c.strideHeight,d=c.strideWidth,p=c.filterHeight,f=c.filterWidth,g=c.dilationHeight,m=c.dilationWidth,y=c.effectiveFilterHeight,x=c.effectiveFilterWidth,b=x-1-c.padInfo.left,w=y-1-c.padInfo.top,S=Me(a.shape,"float32"),C=1/(p*f),k=e.data.get(r.dataId).values,T=Me(r.shape,"float32",k);for(let E=0;E<c.batchSize;++E)for(let R=0;R<c.inChannels;++R)for(let L=0;L<c.inHeight;++L)for(let B=0;B<c.inWidth;++B){const U=L-w,H=B-b;let j=0;for(let Z=0;Z<y;Z+=g){const Y=(U+Z)/h;if(!(Y<0||Y>=c.outHeight||Math.floor(Y)!==Y))for(let K=0;K<x;K+=m){const Q=(H+K)/d;Q<0||Q>=c.outWidth||Math.floor(Q)!==Q||(j+=T.get(E,Y,Q,R))}}S.set(j*C,E,L,B,R)}return e.makeTensorInfo(S.shape,S.dtype,S.values)}},QO={kernelName:El,backendName:"cpu",kernelFunc:function YO(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,scale:o,offset:a,mean:i,variance:l}=t;I(i.shape.length===l.shape.length,()=>"Batch normalization gradient requires mean and variance to have equal ranks."),I(null==a||i.shape.length===a.shape.length,()=>"Batch normalization gradient requires mean and offset to have equal ranks."),I(null==o||i.shape.length===o.shape.length,()=>"Batch normalization gradient requires mean and scale to have equal ranks."),Se([r,i,l,o,a],"batchNorm");let{varianceEpsilon:u}=s;null==u&&(u=.001);const c=e.data.get(r.dataId).values,h=e.data.get(i.dataId).values,d=e.data.get(l.dataId).values,p=o?e.data.get(o.dataId).values:new Float32Array([1]),f=a?e.data.get(a.dataId).values:new Float32Array([0]),g=new Float32Array(c.length),m=f.length,y=p.length,x=d.length,b=h.length;let w=0,S=0,C=0,k=0;for(let T=0;T<c.length;++T)g[T]=f[w++]+(c[T]-h[S++])*p[C++]/Math.sqrt(d[k++]+u),w>=m&&(w=0),S>=b&&(S=0),C>=y&&(C=0),k>=x&&(k=0);return e.makeTensorInfo(r.shape,r.dtype,g)}};function Ow(n,t,e,s,r){const o=lp(s,t,e),a=G(e),i=ke(s);if(o){const h=up(t,i);return"string"===r?n.slice(h,h+a):n.subarray(h,h+a)}const u=Me(s,r,"string"===r?Js(n):n),c=Me(e,r);for(let h=0;h<c.size;++h){const d=c.indexToLoc(h),p=d.map((f,g)=>f+t[g]);c.set(u.get(...p),...d)}return"string"===r?xb(c.values):c.values}function go(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{begin:o,size:a}=s;Se(r,"slice");const[i,l]=Tu(r,o,a);ap(r,i,l);const c=Ow(e.data.get(r.dataId).values,i,l,r.shape,r.dtype);return e.makeTensorInfo(l,r.dtype,c)}const JO={kernelName:ou,backendName:"cpu",kernelFunc:go},tL={kernelName:xl,backendName:"cpu",kernelFunc:function eL(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{blockShape:o,crops:a}=s;Se([r],"batchToSpaceND");const i=o.reduce((y,x)=>y*x),l=Oi(r.shape,o,i),u=Li(l.length,o.length),c=Pi(r.shape,o,i),h=cf(a,o.length),d=hf(c,a,o.length),p=yt({inputs:{x:r},backend:e,attrs:{shape:l}}),f=Rn({inputs:{x:p},backend:e,attrs:{perm:u}}),g=yt({inputs:{x:f},backend:e,attrs:{shape:c}}),m=go({inputs:{x:g},backend:e,attrs:{begin:h,size:d}});return e.disposeIntermediateTensorInfo(p),e.disposeIntermediateTensorInfo(f),e.disposeIntermediateTensorInfo(g),m}};function Vm(n,t,e,s,r){const o=G(s),a=dn(r,e);for(let i=0;i<n.length;i++){const l=n[i];if(l<0)throw new Error("Input x must be non-negative!");l>=r||(a[l]+=o>0?t[i]:1)}return a}function Lw(n,t,e,s=!1){const r=n.shape[0],o=n.shape[1],a=Me([r,e],t.dtype);for(let i=0;i<r;i++)for(let l=0;l<o;l++){const u=n.get(i,l);if(u<0)throw new Error("Input x must be non-negative!");u>=e||a.set(s?1:t.size>0?a.get(i,u)+t.get(i,l):a.get(i,u)+1,i,u)}return a}const sL={kernelName:bh,backendName:"cpu",kernelFunc:function nL(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,weights:o}=t,{size:a}=s,u=Vm(e.data.get(r.dataId).values,e.data.get(o.dataId).values,o.dtype,o.shape,a);return e.makeTensorInfo([a],o.dtype,u)}},Pw=zt((n,t)=>n&t),rL=Qt(bl,Pw),oL={kernelName:bl,backendName:"cpu",kernelFunc:rL},iL={kernelName:wh,backendName:"cpu",kernelFunc:function aL(n){const{inputs:t,backend:e}=n,{s0:s,s1:r}=t,o=e.data.get(s.dataId).values,a=e.data.get(r.dataId).values,i=Le(Array.from(o),Array.from(a));return e.makeTensorInfo([i.length],"int32",Int32Array.from(i))}},zw=Gs(n=>Math.ceil(n)),lL=Dr($a,zw),uL={kernelName:$a,backendName:"cpu",kernelFunc:lL},cL=lt(_a,(n,t)=>n>t.clipValueMax?t.clipValueMax:n<t.clipValueMin?t.clipValueMin:n),hL={kernelName:_a,backendName:"cpu",kernelFunc:cL},dL={kernelName:wl,backendName:"cpu",kernelFunc:n=>{const{x:t}=n.inputs,e=n.backend,s=new Float32Array(G(t.shape)),r=e.data.get(t.dataId),a=r.complexTensorInfos.imag,i=e.data.get(r.complexTensorInfos.real.dataId).values,l=e.data.get(a.dataId).values;for(let u=0;u<i.length;u++)s[u]=Math.hypot(i[u],l[u]);return e.makeOutput(s,t.shape,"float32")}};function Mw(n,t,e,s){const r=Ft(e,G(t));if(s&&"string"!==e){let o=0;n.forEach(a=>{const i=G(a.shape);r.set(a.vals,o),o+=i})}else{let o=0;n.forEach(a=>{const i="string"===e?Js(a.vals):a.vals;let l=0;for(let u=0;u<a.shape[0];++u){const c=u*t[1]+o;for(let h=0;h<a.shape[1];++h)r[c+h]=i[l++]}o+=a.shape[1]})}return r}function oa(n){const{inputs:t,backend:e}=n,{input:s}=t,r=e.data.get(s.dataId).complexTensorInfos.imag,o=e.data.get(r.dataId).values;return e.makeTensorInfo(r.shape,r.dtype,o)}const pL={kernelName:Wh,backendName:"cpu",kernelFunc:oa};function aa(n){const{inputs:t,backend:e,attrs:s}=n,{axis:r}=s,o=Ge(r,t[0].shape)[0];af(t.map(g=>g.shape),o);let i=Ls(t.map(g=>g.shape),o);if(0===G(i))return e.makeTensorInfo(i,t[0].dtype,[]);const l=t.filter(g=>G(g.shape)>0);if(1===l.length)return Hs({inputs:{x:l[0]},backend:e});if("complex64"===l[0].dtype){const g=l.map(w=>mo({inputs:{input:w},backend:e})),m=l.map(w=>oa({inputs:{input:w},backend:e})),y=aa({inputs:g,backend:e,attrs:{axis:o}}),x=aa({inputs:m,backend:e,attrs:{axis:o}}),b=Mn({inputs:{real:y,imag:x},backend:e});return g.forEach(w=>e.disposeIntermediateTensorInfo(w)),m.forEach(w=>e.disposeIntermediateTensorInfo(w)),e.disposeIntermediateTensorInfo(y),e.disposeIntermediateTensorInfo(x),b}const u=l.map(g=>{const y=[-1,G(g.shape.slice(o))];return yt({inputs:{x:g},backend:e,attrs:{shape:y}})}),c=u.map(g=>({vals:e.data.get(g.dataId).values,shape:g.shape}));i=Ls(u.map(g=>g.shape),1);const d=Mw(c,i,t[0].dtype,1===u[0].shape[0]),p=Ls(l.map(g=>g.shape),o),f=e.makeTensorInfo(p,t[0].dtype,d);return u.forEach(g=>e.disposeIntermediateTensorInfo(g)),f}const fL={kernelName:vl,backendName:"cpu",kernelFunc:aa};function Bw(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,filter:o}=t,{strides:a,pad:i,dataFormat:l,dilations:u,dimRoundingMode:c}=s;Se([r,o],"conv2d");const h=Zs(l),d=tn(r.shape,o.shape,a,u,i,c,!1,h),p=d.filterHeight,f=d.filterWidth,g=d.dilationHeight,m=d.dilationWidth,y=d.padInfo.left,x=d.padInfo.top,b="channelsLast"===d.dataFormat,w=new Gt(d.outShape,r.dtype),S=ke(r.shape),C=ke(o.shape),k=S[0],T=b?S[1]:S[2],E=b?S[2]:1,R=b?1:S[1],L=w.strides[0],B=b?w.strides[1]:w.strides[2],U=b?w.strides[2]:1,H=b?1:w.strides[1],j=e.data.get(r.dataId).values,Z=e.data.get(o.dataId).values,Y=w.values;for(let K=0;K<d.batchSize;++K){const Q=K*k,se=K*L;for(let re=0;re<d.outHeight;++re){const le=se+re*B,ie=re*d.strideHeight-x;for(let fe=0;fe<p;++fe){const ue=ie+fe*g;if(ue<0||ue>=d.inHeight)continue;const ye=fe*C[0],Te=Q+ue*T;for(let Re=0;Re<d.outWidth;++Re){const Ae=le+Re*U,Ve=Re*d.strideWidth-y;for(let Ue=0;Ue<f;++Ue){const ut=Ve+Ue*m;if(ut<0||ut>=d.inWidth)continue;const Dt=Te+ut*E;let bt=ye+Ue*C[1];for(let ht=0;ht<d.inChannels;++ht){const $t=j[Dt+ht*R];for(let Nt=0;Nt<d.outChannels;++Nt)Y[Ae+Nt*H]+=$t*Z[bt+Nt];bt+=d.outChannels}}}}}}return e.makeTensorInfo(w.shape,w.dtype,Y)}const mL={kernelName:Sl,backendName:"cpu",kernelFunc:Bw},yL={kernelName:Sh,backendName:"cpu",kernelFunc:function gL(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,dy:o}=t,{strides:a,pad:i,dataFormat:l,dimRoundingMode:u,filterShape:c}=s;Se([r,o],"conv2dBackpropFilter");const h=Zs(l),d=tn(r.shape,c,a,1,i,u,!1,h),{strideHeight:p,strideWidth:f,filterHeight:g,filterWidth:m}=d,y="channelsLast"===d.dataFormat,x=new Gt(d.filterShape,"float32"),b=d.padInfo.left,w=d.padInfo.top,S=e.data.get(r.dataId).values,C=e.data.get(o.dataId).values,k=new Gt(r.shape,r.dtype,S),T=new Gt(o.shape,o.dtype,C);for(let E=0;E<g;++E){const R=Math.max(0,Math.ceil((w-E)/p)),L=Math.min(d.outHeight,(d.inHeight+w-E)/p);for(let B=0;B<m;++B){const U=Math.max(0,Math.ceil((b-B)/f)),H=Math.min(d.outWidth,(d.inWidth+b-B)/f);for(let j=0;j<d.inChannels;++j)for(let Z=0;Z<d.outChannels;++Z){let Y=0;for(let K=0;K<d.batchSize;++K)for(let Q=R;Q<L;++Q){const se=E+Q*p-w;for(let re=U;re<H;++re){const le=B+re*f-b;Y+=y?k.get(K,se,le,j)*T.get(K,Q,re,Z):k.get(K,j,se,le)*T.get(K,Z,Q,re)}}x.set(Y,E,B,j,Z)}}}return e.makeTensorInfo(x.shape,x.dtype,x.values)}},bL={kernelName:Il,backendName:"cpu",kernelFunc:function xL(n){const{inputs:t,backend:e,attrs:s}=n,{dy:r,filter:o}=t,{inputShape:a,strides:i,pad:l,dataFormat:u,dimRoundingMode:c}=s;Se([r,o],"conv2dBackpropInput");const h=ke(o.shape),d=ke(r.shape);let p=Zs(u);const f=tn(a,o.shape,i,1,l,c,!1,p),g=new Gt(f.inShape,"float32"),m=g.values,y=e.data.get(r.dataId).values,x=e.data.get(o.dataId).values,[b,w,S]=h,{batchSize:C,filterHeight:k,filterWidth:T,inChannels:E,inHeight:R,inWidth:L,outChannels:B,outHeight:U,outWidth:H,strideHeight:j,strideWidth:Z}=f;p=f.dataFormat;const Y=k-1-f.padInfo.top,K=T-1-f.padInfo.left,Q="channelsLast"===p,se=g.strides[0],re=Q?g.strides[1]:g.strides[2],le=Q?g.strides[2]:1,ie=Q?1:g.strides[1],fe=d[0],ue=Q?d[1]:d[2],ye=Q?d[2]:1,Te=Q?1:d[1];for(let Re=0;Re<C;++Re)for(let Ae=0;Ae<E;++Ae)for(let Ve=0;Ve<R;++Ve){const Ue=Ve-Y,ut=Math.max(0,Math.ceil(Ue/j)),xt=Math.min(U,(k+Ue)/j);for(let Dt=0;Dt<L;++Dt){const bt=Dt-K,ht=Math.max(0,Math.ceil(bt/Z)),$t=Math.min(H,(T+bt)/Z);let Nt=0;for(let hn=ut;hn<xt;++hn){const Mr=hn*j-Ue;for(let es=ht;es<$t;++es){const $s=fe*Re+ue*hn+ye*es,ar=b*(k-1-Mr)+w*(T-1-(es*Z-bt))+S*Ae;for(let Br=0;Br<B;++Br)Nt+=y[$s+Te*Br]*x[ar+Br]}}m[se*Re+re*Ve+le*Dt+ie*Ae]=Nt}}return e.makeTensorInfo(g.shape,g.dtype,g.values)}},vL={kernelName:Nl,backendName:"cpu",kernelFunc:function wL(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,filter:o}=t,{strides:a,pad:i,dilations:l}=s;Se([r,o],"conv3d");const u=br(r.shape,o.shape,a,l,i),{filterDepth:c,filterHeight:h,filterWidth:d,dilationDepth:p,dilationHeight:f,dilationWidth:g,padInfo:m}=u,y=m.front,x=m.left,b=m.top,w=new Gt(u.outShape,r.dtype),S=e.data.get(r.dataId).values,C=e.data.get(o.dataId).values,k=w.values,T=ke(r.shape),E=ke(o.shape);for(let R=0;R<u.batchSize;++R){const L=R*T[0],B=R*w.strides[0];for(let U=0;U<u.outDepth;++U){const H=B+U*w.strides[1],j=U*u.strideDepth-y;for(let Z=0;Z<c;++Z){const Y=j+Z*p;if(Y<0||Y>=u.inDepth)continue;const K=Z*E[0],Q=L+Y*T[1];for(let se=0;se<u.outHeight;++se){const re=H+se*w.strides[2],le=se*u.strideHeight-b;for(let ie=0;ie<h;++ie){const fe=le+ie*f;if(fe<0||fe>=u.inHeight)continue;const ue=K+ie*E[1],ye=Q+fe*T[2];for(let Te=0;Te<u.outWidth;++Te){const Re=re+Te*u.outChannels,Ae=Te*u.strideWidth-x;for(let Ve=0;Ve<d;++Ve){const Ue=Ae+Ve*g;if(Ue<0||Ue>=u.inWidth)continue;const xt=ye+Ue*u.inChannels;let Dt=ue+Ve*E[2];for(let bt=0;bt<u.inChannels;++bt){const ht=S[xt+bt];for(let $t=0;$t<u.outChannels;++$t)k[Re+$t]+=ht*C[Dt+$t];Dt+=u.outChannels}}}}}}}}return e.makeTensorInfo(w.shape,w.dtype,w.values)}},IL={kernelName:Ih,backendName:"cpu",kernelFunc:function SL(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,dy:o}=t,{strides:a,pad:i,filterShape:l}=s;Se([r,o],"conv3dBackpropFilterV2");const u=ke(r.shape),c=ke(o.shape),h=br(r.shape,l,a,1,i),d=h.strideDepth,p=h.strideHeight,f=h.strideWidth,g=h.filterDepth,m=h.filterHeight,y=h.filterWidth,x=new Gt(h.filterShape,"float32"),b=x.values,[w,S,C,k]=x.strides,T=e.data.get(o.dataId).values,[E,R,L,B]=c,U=e.data.get(r.dataId).values,[H,j,Z,Y]=u,K=h.padInfo.front,Q=h.padInfo.left,se=h.padInfo.top;for(let re=0;re<g;++re){const le=Math.max(0,Math.ceil((K-re)/d)),ie=Math.min(h.outDepth,(h.inDepth+K-re)/d),fe=re*w;for(let ue=0;ue<m;++ue){const ye=Math.max(0,Math.ceil((se-ue)/p)),Te=Math.min(h.outHeight,(h.inHeight+se-ue)/p),Re=ue*S+fe;for(let Ae=0;Ae<y;++Ae){const Ve=Math.max(0,Math.ceil((Q-Ae)/f)),Ue=Math.min(h.outWidth,(h.inWidth+Q-Ae)/f),ut=Ae*C+Re;for(let xt=0;xt<h.inChannels;++xt){const Dt=xt*k+ut;for(let bt=0;bt<h.outChannels;++bt){let ht=0;for(let $t=0;$t<h.batchSize;++$t){const Nt=$t*H,or=$t*E;for(let hn=le;hn<ie;++hn){const es=(re+hn*d-K)*j+Nt,No=hn*R+or;for(let $s=ye;$s<Te;++$s){const Br=(ue+$s*p-se)*Z+es,Vr=$s*L+No;for(let Wr=Ve;Wr<Ue;++Wr)ht+=U[(Ae+Wr*f-Q)*Y+Br+xt]*T[Wr*B+Vr+bt]}}}b[Dt+bt]=ht}}}}}return e.makeTensorInfo(x.shape,x.dtype,x.values)}},CL={kernelName:Nh,backendName:"cpu",kernelFunc:function NL(n){const{inputs:t,backend:e,attrs:s}=n,{dy:r,filter:o}=t,{pad:a,strides:i,inputShape:l}=s;Se([r],"conv3dBackpropInputV2");const u=ke(r.shape),c=ke(o.shape),h=br(l,o.shape,i,1,a),d=new Gt(h.inShape,"float32"),p=d.values,[f,g,m,y]=d.strides,x=e.data.get(r.dataId).values,[b,w,S,C]=u,k=e.data.get(o.dataId).values,[T,E,R,L]=c,{batchSize:B,filterDepth:U,filterHeight:H,filterWidth:j,inChannels:Z,inDepth:Y,inHeight:K,inWidth:Q,outChannels:se,outDepth:re,outHeight:le,outWidth:ie,strideDepth:fe,strideHeight:ue,strideWidth:ye}=h,Te=U-1-h.padInfo.front,Re=H-1-h.padInfo.top,Ae=j-1-h.padInfo.left;for(let Ve=0;Ve<B;++Ve)for(let Ue=0;Ue<Z;++Ue)for(let ut=0;ut<Y;++ut){const xt=ut-Te,Dt=Math.max(0,Math.ceil(xt/fe)),bt=Math.min(re,(U+xt)/fe);for(let ht=0;ht<K;++ht){const $t=ht-Re,Nt=Math.max(0,Math.ceil($t/ue)),or=Math.min(le,(H+$t)/ue);for(let hn=0;hn<Q;++hn){const Mr=hn-Ae,es=Math.max(0,Math.ceil(Mr/ye)),No=Math.min(ie,(j+Mr)/ye);let $s=0;for(let ar=Dt;ar<bt;++ar){const Br=ar*fe-xt;for(let Vr=Nt;Vr<or;++Vr){const Wr=Vr*ue-$t;for(let ul=es;ul<No;++ul){const fg=b*Ve+w*ar+S*Vr+C*ul,PX=T*(U-1-Br)+E*(H-1-Wr)+R*(j-1-(ul*ye-Mr))+L*Ue;for(let ah=0;ah<se;++ah)$s+=x[fg+ah]*k[PX+ah]}}}p[f*Ve+g*ut+m*ht+y*hn+Ue]=$s}}}return e.makeTensorInfo(d.shape,d.dtype,d.values)}},kL=lt(Ea,n=>Math.cos(n)),TL={kernelName:Ea,backendName:"cpu",kernelFunc:kL},$L=lt(Aa,n=>Math.cosh(n)),_L={kernelName:Aa,backendName:"cpu",kernelFunc:$L},AL={kernelName:kh,backendName:"cpu",kernelFunc:function EL(n){const{inputs:t,backend:e,attrs:s}=n,{image:r,boxes:o,boxInd:a}=t,{cropSize:i,method:l,extrapolationValue:u}=s,[c,h,d,p]=r.shape,f=o.shape[0],[g,m]=i,y=Me([f,g,m,p],"float32"),x=e.data.get(o.dataId).values,b=e.data.get(a.dataId).values,w=e.data.get(r.dataId).values,S=ke(r.shape),C=ke(y.shape);for(let k=0;k<f;k++){const T=4*k,E=x[T],R=x[T+1],L=x[T+2],B=x[T+3],U=b[k];if(U>=c)continue;const H=g>1?(L-E)*(h-1)/(g-1):0,j=m>1?(B-R)*(d-1)/(m-1):0;for(let Z=0;Z<g;Z++){const Y=g>1?E*(h-1)+Z*H:.5*(E+L)*(h-1);if(Y<0||Y>h-1)for(let K=0;K<m;K++)for(let Q=0;Q<p;Q++)y.values[Q+K*C[2]+Z*C[1]+k*C[0]]=u;else if("bilinear"===l){const K=Math.floor(Y),Q=Math.ceil(Y),se=Y-K;for(let re=0;re<m;re++){const le=m>1?R*(d-1)+re*j:.5*(R+B)*(d-1);if(le<0||le>d-1){for(let ye=0;ye<p;ye++)y.values[ye+re*C[2]+Z*C[1]+k*C[0]]=u;continue}const ie=Math.floor(le),fe=Math.ceil(le),ue=le-ie;for(let ye=0;ye<p;ye++){let Te=ye+ie*S[2]+K*S[1]+U*S[0];const Re=w[Te];Te=ye+fe*S[2]+K*S[1]+U*S[0];const Ae=w[Te];Te=ye+ie*S[2]+Q*S[1]+U*S[0];const Ve=w[Te];Te=ye+fe*S[2]+Q*S[1]+U*S[0];const Ue=w[Te],ut=Re+(Ae-Re)*ue;Te=ye+re*C[2]+Z*C[1]+k*C[0],y.values[Te]=ut+(Ve+(Ue-Ve)*ue-ut)*se}}}else for(let K=0;K<m;++K){const Q=m>1?R*(d-1)+K*j:.5*(R+B)*(d-1);if(Q<0||Q>d-1){for(let le=0;le<p;le++)y.values[le+K*C[2]+Z*C[1]+k*C[0]]=u;continue}const se=Math.round(Q),re=Math.round(Y);for(let le=0;le<p;le++)y.values[le+K*C[2]+Z*C[1]+k*C[0]]=w[le+se*S[2]+re*S[1]+U*S[0]]}}}return e.makeTensorInfo(y.shape,y.dtype,y.values)}},DL={kernelName:Ch,backendName:"cpu",kernelFunc:function RL(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:o,exclusive:a,reverse:i}=s;Se(r,"cumprod");const l=kt([o],r.shape.length);let u=r;null!=l&&(u=Rn({inputs:{x:r},backend:e,attrs:{perm:l}}));const c=Lt(1,r.shape.length)[0];if(c!==u.shape.length-1)throw new Error(`backend.cumprod in CPU expects an inner-most axis=${u.shape.length-1} but got axis=${c}`);const h=Fn(u.dtype,"int32"),d=dh(G(u.shape),h),p=e.data.get(u.dataId).values,f=u.shape[u.shape.length-1],g=i?(y,x)=>y+f-x-1:(y,x)=>y+x;for(let y=0;y<p.length;y+=f)for(let x=0;x<f;x++){const b=g(y,x);if(0===x)d[b]=a?1:p[b];else{const w=g(y,x-1);d[b]=a?p[w]*d[w]:p[b]*d[w]}}const m=e.makeTensorInfo(u.shape,h,d);if(null!=l){const x=Rn({inputs:{x:m},backend:e,attrs:{perm:Sr(l)}});return e.disposeIntermediateTensorInfo(m),e.disposeIntermediateTensorInfo(u),x}return m}},OL={kernelName:Cl,backendName:"cpu",kernelFunc:function FL(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:o,exclusive:a,reverse:i}=s;Se(r,"cumsum");const l=kt([o],r.shape.length);let u=r;null!=l&&(u=Rn({inputs:{x:r},backend:e,attrs:{perm:l}}));const c=Lt(1,r.shape.length)[0];if(c!==u.shape.length-1)throw new Error(`backend.cumsum in CPU expects an inner-most axis=${u.shape.length-1} but got axis=${c}`);const h=Fn(u.dtype,"int32"),d=dn(G(u.shape),h),p=e.data.get(u.dataId).values,f=u.shape[u.shape.length-1],g=i?(y,x)=>y+f-x-1:(y,x)=>y+x;for(let y=0;y<p.length;y+=f)for(let x=0;x<f;x++){const b=g(y,x);if(0===x)d[b]=a?0:p[b];else{const w=g(y,x-1);d[b]=a?p[w]+d[w]:p[b]+d[w]}}const m=e.makeTensorInfo(u.shape,h,d);if(null!=l){const x=Rn({inputs:{x:m},backend:e,attrs:{perm:Sr(l)}});return e.disposeIntermediateTensorInfo(m),e.disposeIntermediateTensorInfo(u),x}return m}},PL={kernelName:Th,backendName:"cpu",kernelFunc:function LL(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,weights:o}=t,{size:a,binaryOutput:i}=s;if(1===r.shape.length){const c=Vm(e.data.get(r.dataId).values,e.data.get(o.dataId).values,o.dtype,o.shape,a);return e.makeTensorInfo([a],o.dtype,c)}if(2===r.shape.length){const c=Lw(e.bufferSync(r),e.bufferSync(o),a,i);return e.makeTensorInfo(c.shape,o.dtype,c.values)}throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${r.shape.length}.`)}},ML={kernelName:$h,backendName:"cpu",kernelFunc:function zL(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{blockSize:o,dataFormat:a}=s;I("NHWC"===a,()=>`Only NHWC dataFormat supported on CPU for depthToSpace. Got ${a}`);const i=r.shape[0],l=r.shape[1],u=r.shape[2],c=r.shape[3],h=l*o,d=u*o,p=c/(o*o),f=e.data.get(r.dataId).values,g=new Float32Array(i*h*d*p);let m=0;for(let y=0;y<i;++y)for(let x=0;x<h;++x){const b=Math.floor(x/o),w=x%o;for(let S=0;S<d;++S){const C=Math.floor(S/o),T=(w*o+S%o)*p;for(let E=0;E<p;++E)g[m++]=f[E+T+c*(C+u*(b+l*y))]}}return e.makeTensorInfo([i,h,d,p],r.dtype,g)}};function Vw(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,filter:o}=t,{strides:a,pad:i,dilations:l,dimRoundingMode:u}=s;Se([r,o],"depthwiseConv2DNative");const c=ke(r.shape),h=ke(o.shape);let d=l;null==d&&(d=[1,1]),I(an(a,d),()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${a} and dilations '${d}'`);const p=tn(r.shape,o.shape,a,d,i,u,!0),{filterHeight:f,filterWidth:g,dilationHeight:m,dilationWidth:y,padInfo:x}=p,b=x.left,w=x.top,S=p.outChannels/p.inChannels,C=new Gt(p.outShape,r.dtype),k=e.data.get(r.dataId).values,T=e.data.get(o.dataId).values,E=C.values;for(let R=0;R<p.batchSize;++R){const L=R*c[0],B=R*C.strides[0];for(let U=0;U<p.outHeight;++U){const H=B+U*C.strides[1],j=U*p.strideHeight-w;for(let Z=0;Z<f;++Z){const Y=j+Z*m;if(Y<0||Y>=p.inHeight)continue;const K=Z*h[0],Q=L+Y*c[1];for(let se=0;se<p.outWidth;++se){const re=H+se*C.strides[2],le=se*p.strideWidth-b;for(let ie=0;ie<g;++ie){const fe=le+ie*y;if(fe<0||fe>=p.inWidth)continue;const ye=Q+fe*p.inChannels;let Te=re,Re=K+ie*h[1];for(let Ae=0;Ae<p.inChannels;++Ae){const Ve=k[ye+Ae];for(let Ue=0;Ue<S;++Ue)E[Te+Ue]+=Ve*T[Re+Ue];Te+=S,Re+=S}}}}}}return e.makeTensorInfo(C.shape,C.dtype,C.values)}const BL={kernelName:kl,backendName:"cpu",kernelFunc:Vw},WL={kernelName:_h,backendName:"cpu",kernelFunc:function VL(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,dy:o}=t,{strides:a,dilations:i,pad:l,dimRoundingMode:u,filterShape:c}=s;Se([r,o],"depthwiseConv2dNativeBackpropFilter");const h=tn(r.shape,c,a,i,l,u,!0),{strideHeight:d,strideWidth:p,filterHeight:f,filterWidth:g}=h,m=new Gt(h.filterShape,"float32"),y=h.padInfo.left,x=h.padInfo.top,b=h.outChannels/h.inChannels,w=e.data.get(r.dataId).values,S=new Gt(r.shape,r.dtype,w),C=e.data.get(o.dataId).values,k=new Gt(o.shape,o.dtype,C);for(let T=0;T<f;++T){const E=Math.max(0,Math.ceil((x-T)/d)),R=Math.min(h.outHeight,(h.inHeight+x-T)/d);for(let L=0;L<g;++L){const B=Math.max(0,Math.ceil((y-L)/p)),U=Math.min(h.outWidth,(h.inWidth+y-L)/p);for(let H=0;H<h.outChannels;++H){const j=Math.trunc(H/b),Z=H%b;let Y=0;for(let K=0;K<h.batchSize;++K)for(let Q=E;Q<R;++Q){const se=T+Q*d-x;for(let re=B;re<U;++re)Y+=S.get(K,se,L+re*p-y,j)*k.get(K,Q,re,H)}m.set(Y,T,L,j,Z)}}}return e.makeTensorInfo(m.shape,m.dtype,m.values)}},GL={kernelName:Eh,backendName:"cpu",kernelFunc:function UL(n){const{inputs:t,backend:e,attrs:s}=n,{dy:r,filter:o}=t,{strides:a,dilations:i,pad:l,dimRoundingMode:u,inputShape:c}=s;Se([r,o],"depthwiseConv2DNativeBackpropInput");const h=ke(r.shape),d=ke(o.shape),p=tn(c,o.shape,a,i,l,u,!0),f=new Gt(p.inShape,"float32"),g=f.values,[m,y,x]=f.strides,b=e.data.get(r.dataId).values,[w,S,C]=h,k=e.data.get(o.dataId).values,[T,E,R]=d,{batchSize:L,filterHeight:B,filterWidth:U,inChannels:H,inHeight:j,inWidth:Z,outChannels:Y,outHeight:K,outWidth:Q,strideHeight:se,strideWidth:re}=p,le=B-1-p.padInfo.top,ie=U-1-p.padInfo.left,fe=Y/H;for(let ue=0;ue<L;++ue)for(let ye=0;ye<H;++ye)for(let Te=0;Te<j;++Te){const Re=Te-le,Ae=Math.max(0,Math.ceil(Re/se)),Ve=Math.min(K,(B+Re)/se);for(let Ue=0;Ue<Z;++Ue){const ut=Ue-ie,xt=Math.max(0,Math.ceil(ut/re)),Dt=Math.min(Q,(U+ut)/re);let bt=0;for(let ht=Ae;ht<Ve;++ht){const $t=ht*se-Re;for(let Nt=xt;Nt<Dt;++Nt){const hn=w*ue+S*ht+C*Nt,Mr=T*(B-1-$t)+E*(U-1-(Nt*re-ut))+R*ye;for(let es=0;es<fe;++es)bt+=b[hn+(ye*fe+es)]*k[Mr+es]}}g[m*ue+y*Te+x*Ue+ye]=bt}}return e.makeTensorInfo(f.shape,f.dtype,f.values)}},jL={kernelName:Ah,backendName:"cpu",kernelFunc:function HL(n){const{inputs:t,backend:e}=n,{x:s}=t,r=G(s.shape),o=e.data.get(s.dataId).values,a=Me([r,r],s.dtype),i=a.values;for(let u=0;u<o.length;u++)i[u*r+u]=o[u];const l=[...s.shape,...s.shape];return e.makeTensorInfo(l,a.dtype,a.values)}},KL={kernelName:Tl,backendName:"cpu",kernelFunc:({inputs:n,backend:t,attrs:e})=>{const{x:s,filter:r}=n,{strides:o,pad:a,dilations:i}=e,l=t,u=l.data.get(s.dataId).values,c=s.shape.length,h=l.data.get(r.dataId).values,d=r.shape.length,{batchSize:p,inHeight:f,inWidth:g,inChannels:m,outHeight:y,outWidth:x,padInfo:b,strideHeight:w,strideWidth:S,filterHeight:C,filterWidth:k,dilationHeight:T,dilationWidth:E,outShape:R}=wi(s.shape,r.shape,o,a,"NHWC",i),L=G(R),B=R.length,U=Ft(s.dtype,L);for(let j=0;j<p;++j)for(let Z=0;Z<y;++Z){const Y=Z*w-b.top;for(let K=0;K<x;++K){const Q=K*S-b.left;for(let se=0;se<m;++se){let re=Number.MIN_SAFE_INTEGER;for(let ie=0;ie<C;++ie){const fe=Y+ie*T;if(fe>=0&&fe<f)for(let ue=0;ue<k;++ue){const ye=Q+ue*E;if(ye>=0&&ye<g){const Te=_s([j,fe,ye,se],c,ke(s.shape)),Re=_s([ie,ue,se],d,ke(r.shape)),Ae=u[Te]+h[Re];Ae>re&&(re=Ae)}}}U[_s([j,Z,K,se],B,ke(R))]=re}}}return{dataId:l.write(Kr(U,s.dtype),R,s.dtype),shape:R,dtype:s.dtype}}},qL={kernelName:Dh,backendName:"cpu",kernelFunc:({inputs:n,backend:t,attrs:e})=>{const{x:s,filter:r,dy:o}=n,{strides:a,pad:i,dilations:l}=e,u=t,c=ns(s.shape,u.data.get(s.dataId).values),h=ns(r.shape,u.data.get(r.dataId).values),{batchSize:d,inHeight:p,inWidth:f,inChannels:g,outHeight:m,outWidth:y,padInfo:x,strideHeight:b,strideWidth:w,filterHeight:S,filterWidth:C,dilationHeight:k,dilationWidth:T,outShape:E}=wi(s.shape,r.shape,a,i,"NHWC",l);I(o.rank===E.length,()=>`Error in ${Dh}, dy must have the same rank as output ${E.length}, but got ${o.rank}`);const R=ns(E,u.data.get(o.dataId).values),L=bg(r.shape,r.dtype);for(let U=0;U<d;++U)for(let H=0;H<m;++H){const j=H*b-x.top;for(let Z=0;Z<y;++Z){const Y=Z*w-x.left;for(let K=0;K<g;++K){let Q=Number.MIN_SAFE_INTEGER,se=0,re=0;for(let le=0;le<S;++le){const ie=j+le*k;if(ie>=0&&ie<p)for(let fe=0;fe<C;++fe){const ue=Y+fe*T;if(ue>=0&&ue<f){const ye=c[U][ie][ue][K]+h[le][fe][K];ye>Q&&(Q=ye,se=le,re=fe)}}}L[se][re][K]+=R[U][H][Z][K]}}}return{dataId:u.write(Kr(L,s.dtype),r.shape,r.dtype),shape:r.shape,dtype:r.dtype}}},XL={kernelName:Rh,backendName:"cpu",kernelFunc:({inputs:n,backend:t,attrs:e})=>{const{x:s,filter:r,dy:o}=n,{strides:a,pad:i,dilations:l}=e,u=t,c=ns(s.shape,u.data.get(s.dataId).values),h=ns(r.shape,u.data.get(r.dataId).values),{batchSize:d,inHeight:p,inWidth:f,inChannels:g,outHeight:m,outWidth:y,padInfo:x,strideHeight:b,strideWidth:w,filterHeight:S,filterWidth:C,dilationHeight:k,dilationWidth:T,outShape:E}=wi(s.shape,r.shape,a,i,"NHWC",l);I(o.rank===E.length,()=>`Error in ${Rh}, dy must have the same rank as output ${E.length}, but got ${o.rank}`);const R=ns(E,u.data.get(o.dataId).values),L=bg(s.shape,s.dtype);for(let U=0;U<d;++U)for(let H=0;H<m;++H){const j=H*b-x.top;for(let Z=0;Z<y;++Z){const Y=Z*w-x.left;for(let K=0;K<g;++K){let Q=Number.MIN_SAFE_INTEGER,se=j<0?0:j,re=Y<0?0:Y;for(let le=0;le<S;++le){const ie=j+le*k;if(ie>=0&&ie<p)for(let fe=0;fe<C;++fe){const ue=Y+fe*T;if(ue>=0&&ue<f){const ye=c[U][ie][ue][K]+h[le][fe][K];ye>Q&&(Q=ye,se=ie,re=ue)}}}L[U][se][re][K]+=R[U][H][Z][K]}}}return{dataId:u.write(Kr(L,s.dtype),s.shape,s.dtype),shape:s.shape,dtype:s.dtype}}},YL={kernelName:"Draw",backendName:"cpu",kernelFunc:function ZL(n){const{inputs:t,backend:e,attrs:s}=n,{image:r}=t,{canvas:o,options:a}=s,{contextOptions:i,imageOptions:l}=a||{},u=(null==l?void 0:l.alpha)||1,c=(null==i?void 0:i.contextType)||"2d";if("2d"!==c)throw new Error(`Context type ${i.contextType} is not supported by the CPU backend.`);const h=o.getContext(c,(null==i?void 0:i.contextAttributes)||{});if(null==h)throw new Error(`Could not get the context with ${c} type.`);const[d,p]=r.shape.slice(0,2),f=2===r.shape.length?1:r.shape[2],g=e.data.get(r.dataId).values,m="float32"===r.dtype?255:1,y=new Uint8ClampedArray(p*d*4);for(let b=0;b<d*p;++b){const w=[0,0,0,255*u];for(let C=0;C<f;C++){const k=g[b*f+C];if("float32"===r.dtype){if(k<0||k>1)throw new Error(`Tensor values for a float32 Tensor must be in the range [0 - 1] but encountered ${k}.`)}else if("int32"===r.dtype&&(k<0||k>255))throw new Error(`Tensor values for a int32 Tensor must be in the range [0 - 255] but encountered ${k}.`);1===f?(w[0]=k*m,w[1]=k*m,w[2]=k*m):w[C]=k*m}const S=4*b;y[S+0]=Math.round(w[0]),y[S+1]=Math.round(w[1]),y[S+2]=Math.round(w[2]),y[S+3]=Math.round(w[3])}o.width=p,o.height=d;const x=new ImageData(y,p,d);return h.putImageData(x,0,0),r}},Wm=zt((n,t)=>n*t),QL=zm((n,t,e,s)=>({real:n*e-t*s,imag:n*s+t*e})),Fc=Qt(Xa,Wm,QL),JL={kernelName:Xa,backendName:"cpu",kernelFunc:Fc};function Qi(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:o,keepDims:a}=s;let i;Se(r,"sum"),i="bool"===r.dtype?Fr({inputs:{x:r},backend:e,attrs:{dtype:"int32"}}):Hs({inputs:{x:r},backend:e});const l=i.shape.length,u=Ge(o,i.shape),c=kt(u,l);let h=u,d=i;null!=c&&(d=Rn({inputs:{x:i},backend:e,attrs:{perm:c}}),h=Lt(h.length,l)),ln("sum",h,d.shape.length);const[p,f]=nn(d.shape,h);let m=Dc(e,p,Fn(d.dtype,"int32"));const y=G(f),x=e.data.get(m.dataId).values,b=e.data.get(d.dataId).values;for(let w=0;w<x.length;++w){const S=w*y;let C=0;for(let k=0;k<y;++k)C+=b[S+k];x[w]=C}if(a){const S=m;m=yt({inputs:{x:m},backend:e,attrs:{shape:Ot(m.shape,u)}}),e.disposeIntermediateTensorInfo(S)}return e.disposeIntermediateTensorInfo(i),null!=c&&e.disposeIntermediateTensorInfo(d),m}const eP={kernelName:au,backendName:"cpu",kernelFunc:Qi},nP={kernelName:Oh,backendName:"cpu",kernelFunc:function tP(n){const{inputs:t,backend:e,attrs:s}=n,{equation:r}=s,o=t,{allDims:a,summedDims:i,idDims:l}=vf(r,o.length);If(a.length,l,o);const{path:u,steps:c}=Nf(i,l),h=c.length;let d=null,p=a.length;const f=[];for(let g=0;g<h;++g){for(const m of c[g]){const{permutationIndices:y,expandDims:x}=Sf(p,l[m]);let b;Cf(y)?b=o[m]:(b=Rn({inputs:{x:o[m]},backend:e,attrs:{perm:y}}),f.push(b));const w=b.shape.slice();for(let S=0;S<x.length;++S)w.splice(x[S],0,1);Xe(b.shape,w)||(b=yt({inputs:{x:b},backend:e,attrs:{shape:w}}),f.push(b)),null===d?d=b:(d=Fc({inputs:{a:b,b:d},backend:e}),f.push(d))}g<h-1&&(u[g]>=0&&(d=Qi({inputs:{x:d},backend:e,attrs:{axis:u[g]-(a.length-p),keepDims:!1}}),f.push(d)),p--)}for(const g of f)g!==d&&e.disposeIntermediateTensorInfo(g);return d}},rP={kernelName:Lh,backendName:"cpu",kernelFunc:function sP(n){const{inputs:t,backend:e}=n,{dy:s,y:r}=t;Se([s,r],"eluGrad");const o=new Float32Array(G(r.shape)),a=e.data.get(r.dataId).values,i=e.data.get(s.dataId).values;for(let l=0;l<a.length;++l){const u=a[l];o[l]=u>=0?i[l]:i[l]*(u+1)}return e.makeTensorInfo(r.shape,"float32",o)}},Ww=zt((n,t)=>n===t?1:0),Uw=Qt($l,Ww,null,"bool"),oP={kernelName:$l,backendName:"cpu",kernelFunc:Uw},aP=pf,iP=ff,lP=mf,uP=gf,cP=yf,hP=xf,dP=lt(Fa,n=>{const t=Math.sign(n),e=Math.abs(n),s=1/(1+aP*e);return t*(1-((((hP*s+cP)*s+uP)*s+lP)*s+iP)*s*Math.exp(-e*e))}),pP={kernelName:Fa,backendName:"cpu",kernelFunc:dP},Gw=Gs(n=>Math.exp(n)),Hw=Dr(Oa,Gw,"float32"),fP={kernelName:Oa,backendName:"cpu",kernelFunc:Hw};function Oc(n){const{inputs:t,backend:e,attrs:s}=n,{input:r}=t,{dim:o}=s,a=r.shape.length,i=r.shape.slice();let l=o;return o<0&&(I(-(a+1)<=o,()=>`Axis must be in the interval [${-(a+1)}, ${a}]`),l=a+o+1),i.splice(l,0,1),yt({inputs:{x:r},backend:e,attrs:{shape:i}})}const mP={kernelName:_l,backendName:"cpu",kernelFunc:Oc},jw=Gs(n=>Math.expm1(n)),gP=Dr(La,jw),yP={kernelName:La,backendName:"cpu",kernelFunc:gP},xP=zt((n,t)=>n/t),Um=Qt(Ra,xP),Gm={kernelName:Ra,backendName:"cpu",kernelFunc:Um},Kw=zt((n,t)=>n-t),bP=zm((n,t,e,s)=>({real:n-e,imag:t-s})),Hm=Qt(ci,Kw,bP),wP={kernelName:ci,backendName:"cpu",kernelFunc:Hm};function qw(n,t,e){const s=n.shape,r=s[0],o=s[1],a=e.data.get(n.dataId),i=a.complexTensorInfos.real,l=a.complexTensorInfos.imag,u=[r,o],c=G(u),h=on("float32",c),d=on("float32",c);for(let m=0;m<r;m++){const y=go({inputs:{x:i},backend:e,attrs:{begin:[m,0],size:[1,o]}}),x=go({inputs:{x:l},backend:e,attrs:{begin:[m,0],size:[1,o]}}),b=Mn({inputs:{real:y,imag:x},backend:e}),{real:w,imag:S}=vP(b,t,e),C=Qs(w,S);for(let k=0;k<o;k++){const T=bf(C,k);h[m*o+k]=T.real,d[m*o+k]=T.imag}e.disposeIntermediateTensorInfo(y),e.disposeIntermediateTensorInfo(x),e.disposeIntermediateTensorInfo(b)}const p=e.makeTensorInfo(u,"float32",h),f=e.makeTensorInfo(u,"float32",d),g=Mn({inputs:{real:p,imag:f},backend:e});return e.disposeIntermediateTensorInfo(p),e.disposeIntermediateTensorInfo(f),g}function vP(n,t,e){const s=G(n.shape),r=e.data.get(n.dataId),o=e.data.get(r.complexTensorInfos.real.dataId).values,a=e.data.get(r.complexTensorInfos.imag.dataId).values;if(function SP(n){return 0==(n&n-1)}(s)){const i=jm(o,a,s,t,e),l=[n.shape[0],n.shape[1]];if(t){const u=e.makeTensorInfo(l,"float32",i.real),c=e.makeTensorInfo(l,"float32",i.imag),h=e.makeTensorInfo([],"float32",cr(s,"float32")),d=Hs({inputs:{x:h},backend:e}),p=Gm.kernelFunc({inputs:{a:u,b:h},backend:e}),f=Gm.kernelFunc({inputs:{a:c,b:d},backend:e}),g=e.data.get(p.dataId).values,m=e.data.get(f.dataId).values;return e.disposeIntermediateTensorInfo(u),e.disposeIntermediateTensorInfo(c),e.disposeIntermediateTensorInfo(h),e.disposeIntermediateTensorInfo(d),e.disposeIntermediateTensorInfo(p),e.disposeIntermediateTensorInfo(f),{real:g,imag:m}}return i}{const l=function IP(n,t,e){const s=new Float32Array(2*t);for(let r=0;r<t;r++){let o=0,a=0;for(let i=0;i<t;i++){const l=nb(r*i,t,e),u=bf(n,i);o+=u.real*l.real-u.imag*l.imag,a+=u.real*l.imag+u.imag*l.real}e&&(o/=t,a/=t),eb(s,o,a,r)}return s}(Qs(o,a),s,t);return Yx(l)}}function jm(n,t,e,s,r){if(1===e)return{real:n,imag:t};const o=Qs(n,t),a=e/2,i=Qx(o),l=i.real,u=i.imag,c=[l.length],h=r.makeTensorInfo(c,"float32",l),d=r.makeTensorInfo(c,"float32",u),p=Mn({inputs:{real:h,imag:d},backend:r}),f=Jx(o),g=f.real,m=f.imag,y=[g.length],x=r.makeTensorInfo(y,"float32",g),b=r.makeTensorInfo(y,"float32",m),w=Mn({inputs:{real:x,imag:b},backend:r}),S=jm(l,u,a,s,r),C=S.real,k=S.imag,T=[C.length],E=r.makeTensorInfo(T,"float32",C),R=r.makeTensorInfo(T,"float32",k),L=Mn({inputs:{real:E,imag:R},backend:r}),B=jm(g,m,a,s,r),U=B.real,H=B.imag,j=[U.length],Z=r.makeTensorInfo(j,"float32",U),Y=r.makeTensorInfo(j,"float32",H),K=Mn({inputs:{real:Z,imag:Y},backend:r}),Q=tb(e,s),se=[Q.real.length],re=r.makeTensorInfo(se,"float32",Q.real),le=r.makeTensorInfo(se,"float32",Q.imag),ie=Mn({inputs:{real:re,imag:le},backend:r}),fe=Fc({inputs:{a:ie,b:K},backend:r}),ue=ra({inputs:{a:L,b:fe},backend:r}),ye=Hm({inputs:{a:L,b:fe},backend:r}),Te=mo({inputs:{input:ue},backend:r}),Re=mo({inputs:{input:ye},backend:r}),Ae=oa({inputs:{input:ue},backend:r}),Ve=oa({inputs:{input:ye},backend:r}),Ue=aa({inputs:[Te,Re],backend:r,attrs:{axis:0}}),ut=aa({inputs:[Ae,Ve],backend:r,attrs:{axis:0}}),xt=r.data.get(Ue.dataId).values,Dt=r.data.get(ut.dataId).values;return r.disposeIntermediateTensorInfo(h),r.disposeIntermediateTensorInfo(d),r.disposeIntermediateTensorInfo(p),r.disposeIntermediateTensorInfo(x),r.disposeIntermediateTensorInfo(b),r.disposeIntermediateTensorInfo(w),r.disposeIntermediateTensorInfo(E),r.disposeIntermediateTensorInfo(R),r.disposeIntermediateTensorInfo(L),r.disposeIntermediateTensorInfo(Z),r.disposeIntermediateTensorInfo(Y),r.disposeIntermediateTensorInfo(K),r.disposeIntermediateTensorInfo(re),r.disposeIntermediateTensorInfo(le),r.disposeIntermediateTensorInfo(ie),r.disposeIntermediateTensorInfo(fe),r.disposeIntermediateTensorInfo(ue),r.disposeIntermediateTensorInfo(ye),r.disposeIntermediateTensorInfo(Te),r.disposeIntermediateTensorInfo(Ae),r.disposeIntermediateTensorInfo(Re),r.disposeIntermediateTensorInfo(Ve),r.disposeIntermediateTensorInfo(Ue),r.disposeIntermediateTensorInfo(ut),{real:xt,imag:Dt}}const CP={kernelName:"FFT",backendName:"cpu",kernelFunc:function NP(n){const{inputs:t,backend:e}=n,{input:s}=t,r=G(s.shape),o=s.shape[s.shape.length-1],i=yt({inputs:{x:s},backend:e,attrs:{shape:[r/o,o]}}),l=qw(i,!1,e),u=yt({inputs:{x:l},backend:e,attrs:{shape:s.shape}});return e.disposeIntermediateTensorInfo(i),e.disposeIntermediateTensorInfo(l),u}};function Km(n){const{backend:t,attrs:e}=n,{shape:s,value:r,dtype:o}=e,a=o||$o(r),i=Ft(a,G(s));return function TP(n,t,e){n.fill(t)}(i,r),t.makeTensorInfo(s,a,i)}const kP={kernelName:zh,backendName:"cpu",kernelFunc:Km},$P={kernelName:Mh,backendName:"cpu",kernelFunc:({inputs:n,backend:e})=>{const{image:s}=n,r=e,o=on(s.dtype,G(s.shape)),[a,i,l,u]=s.shape,c=r.data.get(s.dataId).values;for(let d=0;d<a;d++){const p=d*l*i*u;for(let f=0;f<i;f++){const g=f*(l*u);for(let m=0;m<l;m++){const y=m*u;for(let x=0;x<u;x++){const b=Math.round(l-m-1),w=p+g+y+x;let S=c[w];b>=0&&b<l&&(S=c[p+g+b*u+x]),o[w]=S}}}}return{dataId:r.write(o,s.shape,s.dtype),shape:s.shape,dtype:s.dtype}}},Xw=Gs(n=>Math.floor(n)),_P=Dr(Pa,Xw),EP={kernelName:Pa,backendName:"cpu",kernelFunc:_P},AP=zt((n,t)=>Math.floor(n/t)),RP=Qt(za,AP,null,"int32"),DP={kernelName:za,backendName:"cpu",kernelFunc:RP},OP={kernelName:mu,backendName:"cpu",kernelFunc:function FP(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,filter:o,bias:a,preluActivationWeights:i}=t,{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:d,activation:p,leakyreluAlpha:f}=s;let g=Bw({inputs:{x:r,filter:o},backend:e,attrs:{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:d}});if(a){const m=g;if("NCHW"===c&&1===a.shape.length&&1!==a.shape[0]){const y=yt({inputs:{x:a},backend:e,attrs:{shape:[a.shape[0],1,1]}});g=ra({inputs:{a:g,b:y},backend:e}),e.disposeIntermediateTensorInfo(y)}else g=ra({inputs:{a:g,b:a},backend:e});e.disposeIntermediateTensorInfo(m)}if(p){const m=g;if("NCHW"===c&&"prelu"===p&&1===i.shape.length&&1!==i.shape[0]){const y=yt({inputs:{x:i},backend:e,attrs:{shape:[i.shape[0],1,1]}});g=Rc(e,g,p,y,f),e.disposeIntermediateTensorInfo(y)}else g=Rc(e,g,p,i,f);e.disposeIntermediateTensorInfo(m)}return g}},PP={kernelName:gu,backendName:"cpu",kernelFunc:function LP(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,filter:o,bias:a,preluActivationWeights:i}=t,{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:d,activation:p,leakyreluAlpha:f}=s;let g=Vw({inputs:{x:r,filter:o},backend:e,attrs:{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:d}});if(a){const m=g;g=ra({inputs:{a:g,b:a},backend:e}),e.disposeIntermediateTensorInfo(m)}if(p){const m=g;g=Rc(e,g,p,i,f),e.disposeIntermediateTensorInfo(m)}return g}};function Zw(n,t,e,s,r,o,a,i,l){const u=Me([s,o],e);for(let c=0;c<s;c++){const h=[];let d=0;for(let p=0;p<r;p++){const f=n[c*r+p];d+=f*a[p],h.push(f)}if(d<0||d>=l/o)throw new Error(`Invalid indices: ${h} does not index into ${i}`);for(let p=0;p<o;p++)u.values[c*o+p]=t.get(...t.indexToLoc(d*o+p))}return u}const MP={kernelName:Bh,backendName:"cpu",kernelFunc:function zP(n){const{inputs:t,backend:e}=n,{params:s,indices:r}=t,o=G(s.shape),a=r.shape,i=a[a.length-1],[l,u,c,h]=df(s,r);if(0===u)return e.makeTensorInfo(l,s.dtype,[]);const f=Zw(e.data.get(r.dataId).values,e.bufferSync(s),s.dtype,u,i,c,h,s.shape,o);return e.makeTensorInfo(l,s.dtype,f.values)}};function Yw(n,t,e){const s=Me(e,n.dtype);for(let r=0;r<s.size;++r){const a=s.indexToLoc(r).slice(),u=t.locToIndex([a[0],a[2]]);a[2]=t.values[u];const c=n.locToIndex(a);0<=c&&c<n.values.length&&(s.values[r]=n.values[c])}return s}const VP={kernelName:Al,backendName:"cpu",kernelFunc:function BP(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,indices:o}=t,{axis:a,batchDims:i}=s;Se([r,o],"gatherV2");const l=Ge(a,r.shape)[0],u=e.data.get(o.dataId).values,c=r.shape[l];for(let w=0;w<u.length;++w){const S=u[w];I(S<=c-1&&S>=0,()=>`GatherV2: the index value ${S} is not in [0, ${c-1}]`)}let h=i;null==i&&(h=0);const d=G(o.shape),p=$f(r,o,l,h),f=yt({inputs:{x:r},backend:e,attrs:{shape:[p.batchSize,p.outerSize,p.dimSize,p.sliceSize]}}),g=yt({inputs:{x:o},backend:e,attrs:{shape:[p.batchSize,d/p.batchSize]}}),m=[p.batchSize,p.outerSize,d/p.batchSize,p.sliceSize],y=e.bufferSync(g),b=Yw(e.bufferSync(f),y,m);return e.disposeIntermediateTensorInfo(f),e.disposeIntermediateTensorInfo(g),e.makeTensorInfo(p.outputShape,b.dtype,b.values)}},Qw=zt((n,t)=>n>t?1:0),WP=Qt(Rl,Qw,null,"bool"),UP={kernelName:Rl,backendName:"cpu",kernelFunc:WP},Jw=zt((n,t)=>n>=t?1:0),GP=Qt(Ma,Jw,null,"bool"),HP={kernelName:Ma,backendName:"cpu",kernelFunc:GP},KP={kernelName:Vh,backendName:"cpu",kernelFunc:function jP(n){const{inputs:t,backend:e}=n,{input:s}=t,r=G(s.shape),o=s.shape[s.shape.length-1],i=yt({inputs:{x:s},backend:e,attrs:{shape:[r/o,o]}}),l=qw(i,!0,e),u=yt({inputs:{x:l},backend:e,attrs:{shape:s.shape}});return e.disposeIntermediateTensorInfo(i),e.disposeIntermediateTensorInfo(l),u}},qP=lt(Va,n=>Number.isFinite(n)?1:0,"bool"),XP={kernelName:Va,backendName:"cpu",kernelFunc:qP},ZP=lt(Wa,n=>Math.abs(n)===1/0?1:0,"bool"),YP={kernelName:Wa,backendName:"cpu",kernelFunc:ZP},QP=lt(Ua,n=>Number.isNaN(n)?1:0,"bool"),JP={kernelName:Ua,backendName:"cpu",kernelFunc:QP},ev=zt((n,t)=>n<t?1:0),e3=Qt(Fl,ev,null,"bool"),t3={kernelName:Fl,backendName:"cpu",kernelFunc:e3},tv=zt((n,t)=>n<=t?1:0),n3=Qt(Ol,tv,null,"bool"),s3={kernelName:Ol,backendName:"cpu",kernelFunc:n3};function nv(n,t,e){const s=(t-n)/(e-1),r=dn(e,"float32");r[0]=n;for(let o=1;o<r.length;o++)r[o]=r[o-1]+s;return r}const o3={kernelName:Uh,backendName:"cpu",kernelFunc:function r3(n){const{backend:t,attrs:e}=n,{start:s,stop:r,num:o}=e,a=nv(s,r,o);return t.makeTensorInfo([a.length],"float32",a)}},sv=Gs(n=>Math.log(n)),a3=Dr(Ga,sv),i3={kernelName:Ga,backendName:"cpu",kernelFunc:a3},l3=lt(Ha,n=>Math.log1p(n)),u3={kernelName:Ha,backendName:"cpu",kernelFunc:l3},c3=zt((n,t)=>n&&t),h3=Qt(Ll,c3,null,"bool"),d3={kernelName:Ll,backendName:"cpu",kernelFunc:h3},p3=lt(Pl,n=>n?0:1,"bool"),f3={kernelName:Pl,backendName:"cpu",kernelFunc:p3},m3=zt((n,t)=>n||t),g3=Qt(zl,m3,null,"bool"),y3={kernelName:zl,backendName:"cpu",kernelFunc:g3},b3={kernelName:Ml,backendName:"cpu",kernelFunc:function x3(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{depthRadius:o,bias:a,alpha:i,beta:l}=s;Se(r,"LRN");const u=r.shape[3],c=u-1,h=e.data.get(r.dataId).values,d=G(r.shape),p=new Float32Array(d);function f(g){const m=g%u;let y=g-m+Math.max(0,m-o);const x=g-m+Math.min(m+o,c);let b=0;for(;y<=x;y++){const w=h[y];b+=w*w}return b}for(let g=0;g<d;g++){const m=f(g),y=h[g]*Math.pow(a+i*m,-l);p[g]=y}return e.makeTensorInfo(r.shape,r.dtype,p)}},v3={kernelName:Gh,backendName:"cpu",kernelFunc:function w3(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,y:o,dy:a}=t,{depthRadius:i,bias:l,alpha:u,beta:c}=s;Se(a,"LRNGrad");const h=G(a.shape),d=a.shape[3],p=e.data.get(a.dataId).values,f=e.data.get(r.dataId).values,g=e.data.get(o.dataId).values,m=new Float32Array(h),y=h;for(let x=0;x<y;x++){const b=x%d,w=x-b+Math.max(0,b-i),S=x-b+Math.min(d,b+i+1);let C=0;for(let k=w;k<S;k++)C+=Math.pow(f[k],2);C=u*C+l;for(let k=w;k<S;k++){let T=-2*u*c*f[k]*g[x]/C;x===k&&(T+=Math.pow(C,-c)),T*=p[x],m[k]+=T}}return e.makeTensorInfo(a.shape,r.dtype,m)}};function rv(n,t,e,s){const r=on(s,G(e));for(let o=0;o<r.length;++o){const a=o*t;let i=n[a];for(let l=0;l<t;++l){const u=n[a+l];(Number.isNaN(u)||u>i)&&(i=u)}r[o]=i}return r}function ov(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{reductionIndices:o,keepDims:a}=s,i=e;let l=r.shape;const u=l.length,c=Ge(o,l);let h=c;const d=kt(h,u);let p=i.data.get(r.dataId).values;if(null!=d){const w=new Array(u);for(let S=0;S<w.length;S++)w[S]=l[d[S]];p=Mm(p,l,r.dtype,d,w),h=Lt(h.length,u),l=w}Se(r,"max"),ln("max",h,u);const[f,g]=nn(l,h),y=rv(p,G(g),f,r.dtype),x=i.write(y,f,r.dtype);let b=f;return a&&(b=Ot(f,c)),{dataId:x,shape:b,dtype:r.dtype}}const S3={kernelName:Bl,backendName:"cpu",kernelFunc:ov},av=zt((n,t)=>Math.max(n,t)),I3=Qt(ja,av),N3={kernelName:ja,backendName:"cpu",kernelFunc:I3},k3={kernelName:Vl,backendName:"cpu",kernelFunc:function C3(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t;Se(r,"maxPool");const{filterSize:o,strides:a,pad:i,dimRoundingMode:l}=s;I(an(a,1),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${a} and dilations '1'`);const c=os(r.shape,o,a,1,i,l);let h;if(1===c.filterWidth&&1===c.filterHeight&&Xe(c.inShape,c.outShape))h=Hs({inputs:{x:r},backend:e});else{const d=e.data.get(r.dataId).values,p=ke(r.shape),f=Bm(d,0,r.dtype,p,c,"max");h=e.makeTensorInfo(c.outShape,r.dtype,f.values)}return h}},$3={kernelName:Wl,backendName:"cpu",kernelFunc:function T3(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{filterSize:o,strides:a,pad:i,dimRoundingMode:l,dataFormat:u}=s;Se(r,"maxPool3d");const c=Xs(r.shape,o,a,1,i,l,u),d=Fw(e.data.get(r.dataId).values,0,r.dtype,ke(r.shape),c,"max");return e.makeTensorInfo(d.shape,"float32",d.values)}},E3={kernelName:jh,backendName:"cpu",kernelFunc:function _3(n){const{inputs:t,backend:e,attrs:s}=n,{dy:r,input:o}=t,{filterSize:a,strides:i,pad:l,dimRoundingMode:u}=s;Se([r,o],"maxPool3DGrad");const c=Xs(o.shape,a,i,1,l,u),d=function WO(n,t){const e=Me(t.outShape,"int32"),s=t.strideDepth,r=t.strideHeight,o=t.strideWidth,a=t.dilationDepth,i=t.dilationHeight,l=t.dilationWidth,u=t.effectiveFilterDepth,c=t.effectiveFilterHeight,h=t.effectiveFilterWidth,d=t.padInfo.front,p=t.padInfo.top,f=t.padInfo.left;for(let g=0;g<t.batchSize;++g)for(let m=0;m<t.inChannels;++m)for(let y=0;y<t.outDepth;++y){const x=y*s-d;let b=x;for(;b<0;)b+=a;const w=Math.min(t.inDepth,u+x);for(let S=0;S<t.outHeight;++S){const C=S*r-p;let k=C;for(;k<0;)k+=i;const T=Math.min(t.inHeight,c+C);for(let E=0;E<t.outWidth;++E){const R=E*o-f;let L=R;for(;L<0;)L+=l;const B=Math.min(t.inWidth,h+R);let U=Number.NEGATIVE_INFINITY,H=-1;for(let j=b;j<w;j+=a){const Z=j-x;for(let Y=k;Y<T;Y+=i){const K=Y-C;for(let Q=L;Q<B;Q+=l){const se=Q-R,re=n.get(g,j,Y,Q,m);re>=U&&(U=re,H=Z*c*h+K*c+se)}}}e.set(H,g,y,S,E,m)}}}return e}(e.bufferSync(o),c),p=c.strideDepth,f=c.strideHeight,g=c.strideWidth,m=c.dilationDepth,y=c.dilationHeight,x=c.dilationWidth,b=c.effectiveFilterDepth,w=c.effectiveFilterHeight,S=c.effectiveFilterWidth,C=b-1-c.padInfo.front,k=S-1-c.padInfo.left,T=w-1-c.padInfo.top,E=Me(o.shape,"float32"),R=e.bufferSync(r);for(let L=0;L<c.batchSize;++L)for(let B=0;B<c.inChannels;++B)for(let U=0;U<c.inDepth;++U)for(let H=0;H<c.inHeight;++H)for(let j=0;j<c.inWidth;++j){const Z=U-C,Y=H-T,K=j-k;let Q=0;for(let se=0;se<b;se+=m){const re=(Z+se)/p;if(!(re<0||re>=c.outDepth||Math.floor(re)!==re))for(let le=0;le<w;le+=y){const ie=(Y+le)/f;if(!(ie<0||ie>=c.outHeight||Math.floor(ie)!==ie))for(let fe=0;fe<S;fe+=x){const ue=(K+fe)/g;if(ue<0||ue>=c.outWidth||Math.floor(ue)!==ue)continue;const Re=b*w*S-1-d.get(L,re,ie,ue,B)===se*w*S+le*S+fe?1:0;0!==Re&&(Q+=R.get(L,re,ie,ue,B)*Re)}}}E.set(Q,L,U,H,j,B)}return e.makeTensorInfo(E.shape,E.dtype,E.values)}},R3={kernelName:Hh,backendName:"cpu",kernelFunc:function A3(n){const{inputs:t,backend:e,attrs:s}=n,{dy:r,input:o,output:a}=t,i=o;Se([o,a],"maxPoolGrad");const{filterSize:l,strides:u,pad:c,dimRoundingMode:h}=s,d=os(i.shape,l,u,1,c,h),p=e.data.get(i.dataId).values,f=Me(d.outShape,i.dtype,Dw(p,i.shape,i.dtype,d).values),g=d.strideHeight,m=d.strideWidth,y=d.dilationHeight,x=d.dilationWidth,b=d.effectiveFilterHeight,w=d.effectiveFilterWidth,S=w-1-d.padInfo.left,C=b-1-d.padInfo.top,k=Me(i.shape,"float32"),T=e.data.get(r.dataId).values,E=Me(r.shape,"float32",T);for(let R=0;R<d.batchSize;++R)for(let L=0;L<d.inChannels;++L)for(let B=0;B<d.inHeight;++B)for(let U=0;U<d.inWidth;++U){const H=B-C,j=U-S;let Z=0;for(let Y=0;Y<b;Y+=y){const K=(H+Y)/g;if(!(K<0||K>=d.outHeight||Math.floor(K)!==K))for(let Q=0;Q<w;Q+=x){const se=(j+Q)/m;if(se<0||se>=d.outWidth||Math.floor(se)!==se)continue;const ie=b*w-1-f.get(R,K,se,L)===Y*w+Q?1:0;0!==ie&&(Z+=E.get(R,K,se,L)*ie)}}k.set(Z,R,B,U,L)}return e.makeTensorInfo(k.shape,k.dtype,k.values)}},F3={kernelName:Kh,backendName:"cpu",kernelFunc:({inputs:n,attrs:t,backend:e})=>{const{x:s}=n,{filterSize:r,strides:o,pad:a,includeBatchInIndex:i}=t,l=e;Se(s,"MaxPoolWithArgmax");const u=l.data.get(s.dataId).values,c=os(s.shape,r,o,[1,1],a),[h,d]=function D3(n,t,e,s,r){const a=Bm(n,0,e,ke(t),r,"max"),i=Dw(n,t,e,r,!0,s);return[a.values,i.values]}(u,s.shape,s.dtype,i,c),p=l.write(h,c.outShape,s.dtype),f=l.write(d,c.outShape,s.dtype);return[{dataId:p,shape:c.outShape,dtype:s.dtype},{dataId:f,shape:c.outShape,dtype:"int32"}]}},L3={kernelName:Ul,backendName:"cpu",kernelFunc:function O3(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:o,keepDims:a}=s,i=Ge(o,r.shape),c=G(nn(r.shape,i)[1]),h=[],d=e.makeTensorInfo([],"float32",new Float32Array([c]));h.push(d);const p=Fr({inputs:{x:r},backend:e,attrs:{dtype:"float32"}});h.push(p);const f=Um({inputs:{a:p,b:d},backend:e});h.push(f);const g=Qi({inputs:{x:f},backend:e,attrs:{axis:o,keepDims:a}});return h.forEach(m=>e.disposeIntermediateTensorInfo(m)),g}},z3={kernelName:Gl,backendName:"cpu",kernelFunc:function P3(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:o,keepDims:a}=s;Se(r,"min");const i=Ge(o,r.shape);let l=i;const u=kt(l,r.shape.length);let c=r;null!=u&&(c=Rn({inputs:{x:r},backend:e,attrs:{perm:u}}),l=Lt(l.length,r.shape.length)),ln("min",l,c.shape.length);const[h,d]=nn(c.shape,l),p=G(d),f=dn(G(h),c.dtype),g=e.data.get(c.dataId).values;for(let y=0;y<f.length;++y){const x=y*p;let b=g[x];for(let w=0;w<p;++w){const S=g[x+w];(Number.isNaN(S)||S<b)&&(b=S)}f[y]=b}null!=u&&e.disposeIntermediateTensorInfo(c);const m=e.makeTensorInfo(h,c.dtype,f);if(a){const x=yt({inputs:{x:m},backend:e,attrs:{shape:Ot(h,i)}});return e.disposeIntermediateTensorInfo(m),x}return m}},iv=zt((n,t)=>Math.min(n,t)),M3=Qt(Ka,iv),B3={kernelName:Ka,backendName:"cpu",kernelFunc:M3},W3={kernelName:Hl,backendName:"cpu",kernelFunc:function V3(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{paddings:o,mode:a}=s;Se(r,"mirrorPad");const i=o.map((b,w)=>b[0]+r.shape[w]+b[1]),l=o.map(b=>b[0]),u=o.map((b,w)=>b[0]+r.shape[w]),c="reflect"===a?0:1,h=e.data.get(r.dataId).values,d=r.shape.length,p=ke(r.shape),f=G(i),g=i.length,m=ke(i),y=on(r.dtype,f);for(let b=0;b<f;b++){let w=_o(b,g,m);for(let C=0;C<g;C++)w[C]<l[C]?w[C]=2*l[C]-w[C]-c:w[C]>=u[C]&&(w[C]=2*(u[C]-1)-w[C]+c);w=w.map((C,k)=>C-l[k]);const S=_s(w,d,p);y[b]=h[S]}return{dataId:e.write(y,i,r.dtype),shape:i,dtype:r.dtype}}},U3=zt((n,t)=>{const e=n%t;return n<0&&t<0||n>=0&&t>=0?e:(e+t)%t}),G3=Qt(qa,U3),H3={kernelName:qa,backendName:"cpu",kernelFunc:G3};function lv(n){const{inputs:t,backend:e,attrs:s}=n,{logits:r}=t,{dim:o}=s,a=r.shape.length;let i=o;if(-1===i&&(i=a-1),i!==a-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${a} and dim was ${i}`);const l=Ge([i],r.shape),u=ov({inputs:{x:r},backend:e,attrs:{reductionIndices:l,keepDims:!1}}),c=Ot(u.shape,l),h=yt({inputs:{x:u},backend:e,attrs:{shape:c}}),d=Hm({inputs:{a:r,b:h},backend:e}),p=Hw({inputs:{x:d},backend:e}),f=Qi({inputs:{x:p},backend:e,attrs:{axis:l,keepDims:!1}}),g=yt({inputs:{x:f},backend:e,attrs:{shape:c}}),m=Um({inputs:{a:p,b:g},backend:e});return e.disposeIntermediateTensorInfo(u),e.disposeIntermediateTensorInfo(h),e.disposeIntermediateTensorInfo(d),e.disposeIntermediateTensorInfo(p),e.disposeIntermediateTensorInfo(f),e.disposeIntermediateTensorInfo(g),m}const j3={kernelName:uu,backendName:"cpu",kernelFunc:lv},q3={kernelName:qh,backendName:"cpu",kernelFunc:function K3(n){const{inputs:t,backend:e,attrs:s}=n,{logits:r}=t,{numSamples:o,seed:a,normalized:i}=s;Se(r,"multinomial");const l=i?r:lv({inputs:{logits:r},backend:e,attrs:{dim:-1}}),u=l.shape[0],c=l.shape[1],h=e.data.get(l.dataId).values,d=[u,o],p=dn(G(d),"int32");for(let f=0;f<u;++f){const g=f*c,m=new Float32Array(c-1);m[0]=h[g];for(let b=1;b<m.length;++b)m[b]=m[b-1]+h[g+b];const y=Wu.alea(a.toString()),x=f*o;for(let b=0;b<o;++b){const w=y();p[x+b]=m.length;for(let S=0;S<m.length;S++)if(w<m[S]){p[x+b]=S;break}}}return i||e.disposeIntermediateTensorInfo(l),e.makeTensorInfo(d,"int32",p)}};function uv(n,t,e){const s=cr(-1,e);return Wm([],t,s,n,e)}const Z3={kernelName:jl,backendName:"cpu",kernelFunc:function X3(n){const{inputs:t,backend:e}=n,{x:s}=t;Se(s,"neg");const r=e.data.get(s.dataId).values,[o,a]=uv(r,s.shape,s.dtype);return e.makeTensorInfo(a,s.dtype,o)}},Y3=Qp,J3={kernelName:Xh,backendName:"cpu",kernelFunc:function Q3(n){const{inputs:t,backend:e,attrs:s}=n,{boxes:r,scores:o}=t,{maxOutputSize:a,iouThreshold:i,scoreThreshold:l}=s;Se(r,"NonMaxSuppression");const u=e.data.get(r.dataId).values,c=e.data.get(o.dataId).values,{selectedIndices:h}=Y3(u,c,a,i,l);return e.makeTensorInfo([h.length],"int32",new Int32Array(h))}},ez=Jp,nz={kernelName:Zh,backendName:"cpu",kernelFunc:function tz(n){const{inputs:t,backend:e,attrs:s}=n,{boxes:r,scores:o}=t,{maxOutputSize:a,iouThreshold:i,scoreThreshold:l,padToMaxOutputSize:u}=s;Se(r,"NonMaxSuppressionPadded");const c=e.data.get(r.dataId).values,h=e.data.get(o.dataId).values,{selectedIndices:d,validOutputs:p}=ez(c,h,a,i,l,u);return[e.makeTensorInfo([d.length],"int32",new Int32Array(d)),e.makeTensorInfo([],"int32",new Int32Array([p]))]}},sz=ef,oz={kernelName:Yh,backendName:"cpu",kernelFunc:function rz(n){const{inputs:t,backend:e,attrs:s}=n,{boxes:r,scores:o}=t,{maxOutputSize:a,iouThreshold:i,scoreThreshold:l,softNmsSigma:u}=s;Se(r,"NonMaxSuppressionWithScore");const c=e.data.get(r.dataId).values,h=e.data.get(o.dataId).values,d=a,p=i,f=l,g=u,{selectedIndices:m,selectedScores:y}=sz(c,h,d,p,f,g);return[e.makeTensorInfo([m.length],"int32",new Int32Array(m)),e.makeTensorInfo([y.length],"float32",new Float32Array(y))]}},cv=zt((n,t)=>n!==t?1:0),az=Qt(Kl,cv,null,"bool"),iz={kernelName:Kl,backendName:"cpu",kernelFunc:az},uz={kernelName:Xl,backendName:"cpu",kernelFunc:function lz(n){const{inputs:t,backend:e,attrs:s}=n,{indices:r}=t,{dtype:o,depth:a,onValue:i,offValue:l}=s;Se(r,"oneHot");const u=G(r.shape),c=new Float32Array(u*a);c.fill(l);const h=e.data.get(r.dataId).values;for(let d=0;d<u;++d)h[d]>=0&&h[d]<a&&(c[d*a+h[d]]=i);return e.makeTensorInfo([...r.shape,a],o,c)}};function Lc(n){const{inputs:t,backend:e}=n,{x:s}=t;if("string"===s.dtype)throw new Error("zerosLike is not supported for string tensors");if("complex64"===s.dtype){const r=mo({inputs:{input:s},backend:e}),o=Lc({inputs:{x:r},backend:e}),a=oa({inputs:{input:s},backend:e}),i=Lc({inputs:{x:a},backend:e}),l=Mn({inputs:{real:o,imag:i},backend:e});return e.disposeIntermediateTensorInfo(r),e.disposeIntermediateTensorInfo(o),e.disposeIntermediateTensorInfo(a),e.disposeIntermediateTensorInfo(i),l}return Km({backend:e,attrs:{shape:s.shape,value:0,dtype:s.dtype}})}const cz={kernelName:pu,backendName:"cpu",kernelFunc:Lc},hz={kernelName:ql,backendName:"cpu",kernelFunc:function hv(n){const{inputs:t,backend:e}=n,{x:s}=t;if("string"===s.dtype)throw new Error("onesLike is not supported for string tensors");if("complex64"===s.dtype){const r=mo({inputs:{input:s},backend:e}),o=hv({inputs:{x:r},backend:e}),a=oa({inputs:{input:s},backend:e}),i=Lc({inputs:{x:a},backend:e}),l=Mn({inputs:{real:o,imag:i},backend:e});return e.disposeIntermediateTensorInfo(r),e.disposeIntermediateTensorInfo(o),e.disposeIntermediateTensorInfo(a),e.disposeIntermediateTensorInfo(i),l}return Km({backend:e,attrs:{shape:s.shape,value:1,dtype:s.dtype}})}};function dv(n){const{inputs:t,backend:e,attrs:s}=n,{axis:r}=s;if(1===t.length)return Oc({inputs:{input:t[0]},backend:e,attrs:{dim:r}});const o=t[0].shape,a=t[0].dtype;t.forEach(c=>{Dn(o,c.shape,"All tensors passed to stack must have matching shapes"),I(a===c.dtype,()=>"All tensors passed to stack must have matching dtypes")});const i=[],u=aa({inputs:t.map(c=>{const h=Oc({inputs:{input:c},backend:e,attrs:{dim:r}});return i.push(h),h}),backend:e,attrs:{axis:r}});return i.forEach(c=>e.disposeIntermediateTensorInfo(c)),u}const dz={kernelName:Zl,backendName:"cpu",kernelFunc:dv},pv={kernelName:Yl,backendName:"cpu",kernelFunc:function pz(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{paddings:o,constantValue:a}=s;Se(r,"pad");const i=o.map((x,b)=>x[0]+r.shape[b]+x[1]),l=o.map(x=>x[0]),u=e.data.get(r.dataId).values,c=G(r.shape),h=r.shape.length,d=ke(r.shape),p=G(i),f=i.length,g=ke(i),m=on(r.dtype,p);0!==a&&m.fill(a);for(let x=0;x<c;x++)m[_s(_o(x,h,d).map((C,k)=>C+l[k]),f,g)]=u[x];return{dataId:e.write(m,i,r.dtype),shape:i,dtype:r.dtype}}},fz=zt((n,t)=>Math.pow(n,t)),mz=Qt(Za,fz),gz={kernelName:Za,backendName:"cpu",kernelFunc:mz};function fv(n,t,e,s){const[r,o]=nn(n,s),a=Fn(t,"int32"),i=dn(G(r),a),l=G(o);for(let u=0;u<i.length;++u){const c=u*l;let h=1;for(let d=0;d<l;++d)h*=e[c+d];i[u]=h}return{outVals:i,outShape:r,outDtype:a}}const xz={kernelName:Jl,backendName:"cpu",kernelFunc:function yz(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:o,keepDims:a}=s;Se(r,"prod");const i=r.shape.length,l=Ge(o,r.shape),u=kt(l,i);let c=l,h=r;const d=[];null!=u&&(h=Rn({inputs:{x:r},backend:e,attrs:{perm:u}}),d.push(h),c=Lt(c.length,i));const p=e.data.get(h.dataId).values,{outVals:f,outShape:g,outDtype:m}=fv(h.shape,h.dtype,p,c);let y=g;return a&&(y=Ot(g,l)),d.forEach(x=>e.disposeIntermediateTensorInfo(x)),e.makeTensorInfo(y,m,f)}};function mv(n,t){const e=n.slice(0,t);for(;e.length<t;)e.push(1);for(let s=t;s<n.length;s++)e[t-1]*=n[s];return e}function gv(n,t,e,s,r,o,a,i){if(0===n.length)throw new Error("paramsNestedSplits must be non empty");if(0===t[0].length)throw new Error("Split tensors must not be scalars");if(function bz(n,t,e){n.forEach((s,r)=>{if(s<0||s>=e){const o=_o(r,t.length,ke(t)).join(",");throw new Error(`indices[${o}] = ${s} is not in [0, ${e})`)}})}(o,a,t[0][0]-1),0===s.length)throw new Error("params.rank must be nonzero");const u=s[0],{outSplits:c,valueSlices:h,numValues:d}=function vz(n,t,e,s){const r=[];let o=0;const i=new Array(t.length-1+e.length).fill(null).map(()=>[0]);!function wz(n,t){for(let e=0;e<n.length;++e){const s=n[e],r=e===n.length-1?t:n[e+1].length;if(0===s.length)throw new Error("Ragged splits may not be empty");if(s[0]<0)throw new Error("Ragged splits must be non-negative");if(s[s.length-1]>r)throw new Error("Ragged splits must not point past values");for(let o=1;o<s.length;++o)if(s[o-1]>s[o])throw new Error("Ragged splits must be sorted in ascending order")}}(e,s);let l=1;for(let u=0;u<t.length-1;++u){l*=t[u];const c=t[u+1];for(let h=1;h<l+1;++h)i[u].push(h*c)}for(let u=0;u<n.length;++u){let c=n[u],h=n[u]+1;for(let d=0;d<e.length;++d){const p=e[d],f=d+t.length-1;if(f>=0){const g=i[f],m=g[g.length-1]-p[c];for(let y=c;y<h;++y)i[f].push(p[y+1]+m)}c=p[c],h=p[h]}h!==c&&(r.push([c,h]),o+=h-c)}return{outSplits:i,valueSlices:r,numValues:o}}(o,a,n,u),p=function Sz(n){const t=[];for(let e=0;e<n.length;++e){const r=Ft("int32",n[e].length);t.push(r),n[e].forEach((o,a)=>r[a]=o)}return t}(c),f=function Nz(n,t,e,s,r){const o=t.slice();o[0]=r;const a=Ft(e,G(o)),i=n.length;return function Iz(n,t,e,s,r,o){const a=mv(t,2)[1],i=mv(o,2)[1];let l=0;for(const u of e)for(let c=u[0];c<u[1];++c){for(let h=0;h<s;++h)r[l*i+h]=n[c*a+h];++l}}(n,t,s,0===i?0:i/t[0],a,o),[a,o]}(e,s,r,h,d);return[p,f[0],f[1]]}const kz={kernelName:Qh,backendName:"cpu",kernelFunc:function Cz(n){const{inputs:t,backend:e,attrs:s}=n,{paramsNestedSplits:r,paramsDenseValues:o,indices:a}=t,l=r.map(y=>e.data.get(y.dataId).values),u=r.map(y=>y.shape),c=e.data.get(o.dataId).values,h=e.data.get(a.dataId).values,[d,p,f]=gv(l,u,c,o.shape,o.dtype,h,a.shape),g=d.map(y=>e.makeTensorInfo([y.length],"int32",y)),m=e.makeTensorInfo(f,o.dtype,p);return g.concat([m])}},yv=2147483647;function xv(n,t,e,s,r,o,a){if(t.length>1)throw new Error("starts must be a scalar or vector");if(r.length>1)throw new Error("limits must be a scalar or vector");if(a.length>1)throw new Error("deltas must be a scalar or vector");const i=0===t.length,l=0===r.length,u=0===a.length,c=[];i||c.push(t[0]),l||c.push(r[0]),u||c.push(a[0]);for(let m=1;m<c.length;++m)if(c[m]!==c[m-1])throw new Error("starts, limits, and deltas must have the same shape");const h=0===c.length?1:c[0],d=Ft("int32",h+1);d[0]=0;for(let m=0;m<h;++m){const y=i?n[0]:n[m],x=l?s[0]:s[m],b=u?o[0]:o[m];if(0===b)throw new Error("Requires delta != 0");let w;if(b>0&&x<y||b<0&&x>y)w=0;else if(w=Math.ceil(Math.abs((x-y)/b)),w>yv)throw new Error(`Requires ((limit - start) / delta) <= ${yv}`);d[m+1]=d[m]+w}const f=Ft(e,d[h]);let g=0;for(let m=0;m<h;++m){const y=d[m+1]-d[m];let x=i?n[0]:n[m];const b=u?o[0]:o[m];for(let w=0;w<y;++w)f[g++]=x,x+=b}return[d,f]}const $z={kernelName:Jh,backendName:"cpu",kernelFunc:function Tz(n){const{inputs:t,backend:e}=n,{starts:s,limits:r,deltas:o}=t,a=e.data.get(s.dataId).values,i=e.data.get(r.dataId).values,l=e.data.get(o.dataId).values,[u,c]=xv(a,s.shape,s.dtype,i,r.shape,l,o.shape);return[e.makeTensorInfo([u.length],"int32",u),e.makeTensorInfo([c.length],s.dtype,c)]}};var ps=Ps;class Pc{constructor(t,e,s,r,o,a,i,l,u,c){this.shape=t,this.shapeShape=e,this.values=s,this.valuesShape=r,this.valuesDType=o,this.defaultValue=a,this.defaultValueShape=i,this.rowPartitionValues=l,this.rowPartitionValuesShapes=u,this.rowPartitionTypes=qx(c),this.raggedRank=Xx(this.rowPartitionTypes)}getRowPartitionTypeByDimension(t){return this.rowPartitionTypes[0]===ps.FIRST_DIM_SIZE?this.rowPartitionTypes[t+1]:this.rowPartitionTypes[t]}getRowPartitionTensor(t){return this.rowPartitionTypes[0]===ps.FIRST_DIM_SIZE?this.rowPartitionValues[t+1]:this.rowPartitionValues[t]}getMaxWidth(t){const e=this.getRowPartitionTensor(t-1);switch(this.getRowPartitionTypeByDimension(t-1)){case ps.VALUE_ROWIDS:return Pc.getMaxWidthValueRowID(e);case ps.ROW_SPLITS:return Pc.getMaxWidthRowSplit(e);default:throw new Error(`Cannot handle partition type ${ps[this.getRowPartitionTypeByDimension(t-1)]}`)}}static getMaxWidthRowSplit(t){const e=t.length;if(0===e||1===e)return 0;let s=0;for(let r=0;r<e-1;++r){const o=t[r+1]-t[r];o>s&&(s=o)}return s}static getMaxWidthValueRowID(t){const e=t.length;if(0===e)return 0;let s=0,r=t[0],o=0;for(let a=1;a<e;++a){const i=t[a];i!==r&&(r=i,o=Math.max(a-s,o),s=a)}return Math.max(e-s,o)}tensorShapeFromTensor(t,e,s=!0){if(0===e.length){if(-1===t[0])return[];throw new Error("The only valid scalar shape tensor is the fully unknown shape specified as -1.")}return wv(t,s)}calculateOutputSize(t){const e=this.valuesShape;Zx(this.defaultValueShape,e);const r=this.tensorShapeFromTensor(this.shape,this.shapeShape),a=Kx(this.raggedRank,r,e);a[0]<0&&(a[0]=t);for(let i=1;i<=this.raggedRank;++i)a[i]<0&&(a[i]=this.getMaxWidth(i));return a}calculateFirstParentOutputIndex(t,e,s){const r=Math.min(t,s),o=[];let a=0;for(let i=0;i<r;++i,a+=e)o.push(a);for(let i=r;i<t;++i)o.push(-1);return I(o.length===t,()=>"Final length of result must be equal to firstDimension."),o}calculateOutputIndexRowSplit(t,e,s,r){const o=t.length,a=[];for(let i=0;i<o-1;++i){const l=t[i+1]-t[i];let u=Math.min(r,l),c=e[i];-1===c&&(u=0);for(let h=0;h<u;++h)a.push(c),c+=s;for(let h=0;h<l-u;++h)a.push(-1)}if(o>0&&a.length!==t[o-1])throw new Error("Invalid row split size.");return a}calculateOutputIndexValueRowID(t,e,s,r){const o=t.length,a=[];if(0===o)return[];let i=0,l=t[0];if(l>=e.length)throw new Error(`Got currentValueRowId=${l}, which is not less than ${e.length}`);let u=e[l];a.push(u);for(let c=1;c<o;++c){const h=t[c];if(h===l)u>=0&&(++i,i<r?u+=s:u=-1);else{if(i=0,l=h,h>=e.length)throw new Error(`Got nextValueRowId=${h} which is not less than ${e.length}`);u=e[h]}a.push(u)}if(a.length!==t.length)throw new Error("Invalid row ids.");return a}calculateOutputIndex(t,e,s,r){const o=this.getRowPartitionTensor(t),a=this.getRowPartitionTypeByDimension(t);switch(a){case ps.VALUE_ROWIDS:return this.calculateOutputIndexValueRowID(o,e,s,r);case ps.ROW_SPLITS:if(o.length-1>e.length)throw new Error(`Row partition size is greater than output size: ${o.length-1} > ${e.length}`);return this.calculateOutputIndexRowSplit(o,e,s,r);default:throw new Error(`Unsupported partition type: ${ps[a]}`)}}getFirstDimensionSize(){const t=this.rowPartitionValues[0];if(0===this.rowPartitionTypes.length)throw new Error("No row_partition_types given.");const e=this.rowPartitionTypes[0];switch(e){case ps.FIRST_DIM_SIZE:return t[0];case ps.VALUE_ROWIDS:throw new Error("Cannot handle VALUE_ROWIDS in first dimension.");case ps.ROW_SPLITS:return this.rowPartitionValuesShapes[0][0]-1;default:throw new Error(`Cannot handle type ${ps[e]}`)}}compute(){if(this.rowPartitionValues[0].length<=0)throw new Error("Invalid first partition input. Tensor requires at least one element.");const e=this.getFirstDimensionSize(),s=this.calculateOutputSize(e),r=new Array(this.raggedRank+1);r[r.length-1]=1;for(let l=r.length-2;l>=0;--l)r[l]=r[l+1]*s[l+1];const o=wv(s,!1),a=Ft(this.valuesDType,G(o));if(r[0]*s[0]>0){let l=this.calculateFirstParentOutputIndex(e,r[0],s[0]);for(let u=1;u<=this.raggedRank;++u)l=this.calculateOutputIndex(u-1,l,r[u],s[u]);this.setOutput(this.raggedRank,l,a,o)}return[o,a]}setOutput(t,e,s,r){if(0===s.length)return;const o=this.values,a=s;let i=r.slice();i=i.slice(t+1);const l=G(i),u=e.length;let c=this.defaultValue;if(c.length!==l&&1!==c.length){const f=this.defaultValueShape;P(()=>{const g=F(c,f);c=Uo(g,i).dataSync()})}let h=0,d=0,p=0;for(let f=0;f<=u;++f){let g=f<u?e[f]:-1;if(g!==p){if(d<p){const m=o.subarray(h*l);bv(a.subarray(d*l),m,(p-d)*l)}if(f>=u&&(g=Math.floor(s.length/l)),g>p)if(1===this.defaultValue.length)a.subarray(p*l,g*l).fill(this.defaultValue[0]),p=g;else for(;g>p;)bv(a.slice(p*l),c,l),++p;g<0?(h=f+1,d=p):(h=f,d=p,p=d+1)}else++p}}}function bv(n,t,e){for(let s=0;s<e;s++)n[s]=t[s]}function wv(n,t){const e=[];for(let s of n){if(s<0){if(!t)throw new Error(`Dimension ${s} must be >= 0`);if(s<-1)throw new Error(`Dimension ${s} must be >= -1`);s=-1}e.push(s)}return e}function vv(n,t,e,s,r,o,a,i,l,u){return new Pc(n,t,e,s,r,o,a,i,l,u).compute()}const Ez={kernelName:ed,backendName:"cpu",kernelFunc:function _z(n){const{inputs:t,backend:e,attrs:s}=n,{shape:r,values:o,defaultValue:a,rowPartitionTensors:i}=t,{rowPartitionTypes:l}=s,u=e.data.get(r.dataId).values,c=e.data.get(o.dataId).values,h=e.data.get(a.dataId).values,d=i.map(m=>e.data.get(m.dataId).values),p=i.map(m=>m.shape),[f,g]=vv(u,r.shape,c,o.shape,o.dtype,h,a.shape,d,p,l);return e.makeTensorInfo(f,o.dtype,g)}};function Sv(n,t,e,s){if(n===t||n<t&&e<0||t<n&&e>1)return dn(0,s);const l=dn(Math.abs(Math.ceil((t-n)/e)),s);t<n&&1===e&&(e=-1),l[0]=n;for(let u=1;u<l.length;u++)l[u]=l[u-1]+e;return l}const Rz={kernelName:td,backendName:"cpu",kernelFunc:function Az(n){const{backend:t,attrs:e}=n,{start:s,stop:r,dtype:o,step:a}=e,i=Sv(s,r,a,o);return t.makeTensorInfo([i.length],o,i)}},Dz=lt(Ya,n=>1/n),Fz={kernelName:Ya,backendName:"cpu",kernelFunc:Dz},Lz={kernelName:nu,backendName:"cpu",kernelFunc:function Oz(n){const{inputs:t,backend:e,attrs:s}=n,{images:r}=t,{alignCorners:o,halfPixelCenters:a,size:i}=s;Se(r,"resizeBilinear");const l=ke(r.shape),[u,c]=i,[h,d,p,f]=r.shape,g=e.data.get(r.dataId).values,m=new Float32Array(G([h,u,c,f])),y=[o&&u>1?d-1:d,o&&c>1?p-1:p],x=[o&&u>1?u-1:u,o&&c>1?c-1:c];let b=0;const w=y[0]/x[0],S=y[1]/x[1];for(let C=0;C<h;C++)for(let k=0;k<u;k++){let T;T=a?w*(k+.5)-.5:w*k;const E=Math.max(0,Math.floor(T)),R=T-E,L=Math.min(d-1,Math.ceil(T)),B=C*l[0]+E*l[1],U=C*l[0]+L*l[1];for(let H=0;H<c;H++){let j;j=a?S*(H+.5)-.5:S*H;const Z=Math.max(0,Math.floor(j)),Y=j-Z,K=Math.min(p-1,Math.ceil(j)),Q=B+Z*l[2],se=U+Z*l[2],re=B+K*l[2],le=U+K*l[2];for(let ie=0;ie<f;ie++){const fe=g[Q+ie],ue=g[se+ie],Re=fe+(g[re+ie]-fe)*Y;m[b++]=Re+(ue+(g[le+ie]-ue)*Y-Re)*R}}}return e.makeTensorInfo([h,u,c,f],"float32",m)}},zz={kernelName:rd,backendName:"cpu",kernelFunc:function Pz(n){const{inputs:t,backend:e,attrs:s}=n,{images:r,dy:o}=t,{alignCorners:a}=s;Se([o,r],"resizeBilinearGrad");const i=ke(r.shape),[l,u,c,h]=r.shape,[,d,p]=o.shape,f=new Float32Array(l*u*c*h),g=[a&&d>1?u-1:u,a&&p>1?c-1:c],m=[a&&d>1?d-1:d,a&&p>1?p-1:p],y=g[0]/m[0],x=g[1]/m[1],b=e.data.get(o.dataId).values;let w=0;for(let S=0;S<l;S++){const C=S*i[0];for(let k=0;k<d;k++){const T=k*y,E=Math.floor(T),R=Math.min(Math.ceil(T),u-1),L=C+E*i[1],B=C+R*i[1],U=T-E,H=1-U;for(let j=0;j<p;j++){const Z=j*x,Y=Math.floor(Z),K=Math.min(Math.ceil(Z),c-1),Q=Z-Y,se=1-Q,re=L+Y*i[2],le=L+K*i[2],ie=B+Y*i[2],fe=B+K*i[2],ue=H*se,ye=H*Q,Te=U*se,Re=U*Q;for(let Ae=0;Ae<h;Ae++){const Ve=b[w++];f[re+Ae]+=Ve*ue,f[le+Ae]+=Ve*ye,f[ie+Ae]+=Ve*Te,f[fe+Ae]+=Ve*Re}}}}return e.makeTensorInfo([l,c,u,h],"float32",f)}},Bz={kernelName:tu,backendName:"cpu",kernelFunc:function Mz(n){const{inputs:t,backend:e,attrs:s}=n,{images:r}=t,{alignCorners:o,halfPixelCenters:a,size:i}=s;Se(r,"resizeNearestNeighbor");const l=ke(r.shape),[u,c]=i,[h,d,p,f]=r.shape,g=e.data.get(r.dataId).values,m=new Float32Array(h*u*c*f),y=[o&&u>1?d-1:d,o&&c>1?p-1:p],x=[o&&u>1?u-1:u,o&&c>1?c-1:c],b=y[0]/x[0],w=y[1]/x[1];let S=0;for(let C=0;C<h;C++){const k=C*l[0];for(let T=0;T<u;T++){const E=a?b*(T+.5):b*T;let R=Math.min(d-1,o?Math.round(E):Math.floor(E));a&&(R=Math.max(0,R));const L=k+R*l[1];for(let B=0;B<c;B++){const U=a?w*(B+.5):w*B;let H=Math.min(p-1,o?Math.round(U):Math.floor(U));a&&(H=Math.max(0,H));const j=L+H*l[2];for(let Z=0;Z<f;Z++)m[S++]=g[j+Z]}}}return e.makeTensorInfo([h,u,c,f],r.dtype,m)}},Wz={kernelName:sd,backendName:"cpu",kernelFunc:function Vz(n){const{inputs:t,backend:e,attrs:s}=n,{images:r,dy:o}=t,{alignCorners:a}=s;Se([o,r],"resizeNearestNeighborGrad");const i=ke(r.shape),l=ke(o.shape),[u,c,h,d]=r.shape,[,p,f]=o.shape,g=new Float32Array(u*c*h*d),m=e.data.get(o.dataId).values,y=[a&&p>1?c-1:c,a&&f>1?h-1:h],x=[a&&p>1?p-1:p,a&&f>1?f-1:f],b=y[0]/x[0],w=y[1]/x[1],S=1/b,C=1/w,k=2*Math.ceil(S)+2,T=2*Math.ceil(C)+2;for(let E=0;E<u;E++){const R=E*i[0];for(let L=0;L<c;L++){const B=R+L*i[1],U=Math.floor(L*S),H=Math.floor(U-k/2);for(let j=0;j<h;j++){const Z=B+j*i[2],Y=Math.floor(j*C),K=Math.floor(Y-T/2);for(let Q=0;Q<d;Q++){let se=0;for(let re=0;re<k;re++){const le=re+H;if(le<0||le>=p)continue;const ie=R+le*l[1],fe=le*b;if(L===Math.min(c-1,a?Math.round(fe):Math.floor(fe)))for(let ye=0;ye<T;ye++){const Te=ye+K;if(Te<0||Te>=f)continue;const Re=ie+Te*l[2],Ae=Te*w;j===Math.min(h-1,a?Math.round(Ae):Math.floor(Ae))&&(se+=m[Re+Q])}}g[Z+Q]=se}}}}return e.makeTensorInfo(r.shape,r.dtype,g)}},Gz={kernelName:su,backendName:"cpu",kernelFunc:function Uz(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{dims:o}=s;Se(r,"reverse");const a=r.shape.length,i=Ge(o,r.shape);if(0===a)return Hs({inputs:{x:r},backend:e});const l=new Gt(r.shape,r.dtype),u=e.bufferSync(r);for(let c=0;c<l.size;c++){const h=l.indexToLoc(c),d=h.slice();i.forEach(p=>d[p]=r.shape[p]-1-d[p]),l.set(u.get(...d),...h)}return e.makeTensorInfo(l.shape,l.dtype,l.values)}},Hz={kernelName:Sd,backendName:"cpu",kernelFunc:({inputs:n,attrs:t,backend:e})=>{const{image:s}=n,{radians:r,fillValue:o,center:a}=t,i=e,l=on(s.dtype,G(s.shape)),[u,c,h,d]=s.shape,[p,f]=uf(a,c,h),m=Math.sin(r),y=Math.cos(r),x=i.data.get(s.dataId).values;for(let w=0;w<u;w++){const S=w*h*c*d;for(let C=0;C<c;C++){const k=C*(h*d);for(let T=0;T<h;T++){const E=T*d;for(let R=0;R<d;R++){const L=[u,C,T,R],B=L[2],U=L[1];let H=(B-p)*y-(U-f)*m,j=(B-p)*m+(U-f)*y;H=Math.round(H+p),j=Math.round(j+f);let Z=o;"number"!=typeof o&&(Z=3===R?255:o[R]),H>=0&&H<h&&j>=0&&j<c&&(Z=x[S+j*(h*d)+H*d+R]),l[S+k+E+R]=Z}}}}return{dataId:i.write(l,s.shape,s.dtype),shape:s.shape,dtype:s.dtype}}},jz=lt(ei,n=>{const t=Math.floor(n);return n-t<.5?Math.floor(n):n-t>.5?Math.ceil(n):t%2==0?t:t+1}),Kz={kernelName:ei,backendName:"cpu",kernelFunc:jz},Iv=Gs(n=>1/Math.sqrt(n)),qz=Dr(ti,Iv),Xz={kernelName:ti,backendName:"cpu",kernelFunc:qz};function yo(n,t,e,s,r,o,a,i,l,u){const c=[s/r,r],h=n.values,d=t.values;if(0===s)return Me(e,t.dtype);const p=l instanceof Gt?l:Me(c,t.dtype);"string"==typeof l||"number"==typeof l?p.values.fill(l):"boolean"==typeof l&&p.values.fill(+l);for(let f=0;f<o;f++){const g=[];let m=0;for(let y=0;y<a;y++){const x=h[f*a+y];g.push(x),m+=x*i[y]}if(m<0||m>=s/r)throw new Error(`Invalid indices: ${g} does not index into ${e}`);for(let y=0;y<r;y++)u?p.values[m*r+y]+=d[f*r+y]:p.values[m*r+y]=0===t.rank?d[0]:d[f*r+y]}return p}const Yz={kernelName:od,backendName:"cpu",kernelFunc:function Zz(n){const{inputs:t,backend:e,attrs:s}=n,{indices:r,updates:o}=t,{shape:a}=s,{sliceRank:i,numUpdates:l,sliceSize:u,strides:c,outputSize:h}=ro(0,r,a),g=yo(e.bufferSync(r),e.bufferSync(o),a,h,u,l,i,c,0,!0);return e.makeTensorInfo(a,g.dtype,g.values)}};function Qz(n,t){let e=0,s=n.length,r=0;for(;e<s;)r=Math.floor((e+s)/2),n[r]<t?e=r+1:s=r;return s}function Jz(n,t){let e=0,s=n.length,r=0;for(;e<s;)r=Math.floor((e+s)/2),n[r]<=t?e=r+1:s=r;return s}const nM={kernelName:id,backendName:"cpu",kernelFunc:function tM(n){const{inputs:t,backend:e,attrs:s}=n,{sortedSequence:r,values:o}=t,{side:a}=s,u=function eM(n,t,e,s,r,o){const a=Ft("int32",e*r);for(let i=0;i<e;++i){const l=n.slice(i*s,(i+1)*s),u=i*r;for(let c=0;c<r;++c)a[u+c]="left"===o?Qz(l,t[c+u]):Jz(l,t[c+u])}return a}(e.data.get(r.dataId).values,e.data.get(o.dataId).values,r.shape[0],r.shape[1],o.shape[1],a);return e.makeTensorInfo(o.shape,"int32",u)}},rM={kernelName:ru,backendName:"cpu",kernelFunc:function sM(n){const{inputs:t,backend:e}=n,{condition:s,t:r,e:o}=t;Se([s,r,o],"select");const a=s.shape.length,i=e.data.get(s.dataId).values,l=e.data.get(r.dataId).values,u=e.data.get(o.dataId).values,c=Fn(r.dtype,o.dtype),h=dn(G(r.shape),c);let d=0;const p=0===a||a>1||1===r.shape.length?1:G(r.shape.slice(1));for(let f=0;f<i.length;f++)for(let g=0;g<p;g++)h[d++]=1===i[f]?l[f]:u[f];return e.makeTensorInfo(r.shape,c,h)}},oM=Ju,aM=ec,iM=lt(ni,n=>n>=0?aM*n:oM*(Math.exp(n)-1)),lM={kernelName:ni,backendName:"cpu",kernelFunc:iM},uM=lt(oi,n=>n<0?-1:n>0?1:0),cM={kernelName:oi,backendName:"cpu",kernelFunc:uM},hM=lt(si,n=>Math.sin(n)),dM={kernelName:si,backendName:"cpu",kernelFunc:hM},pM=lt(ri,n=>Math.sinh(n)),fM={kernelName:ri,backendName:"cpu",kernelFunc:pM},Nv=Math.log(1.1920928955078125e-7)+2,mM=lt(ii,n=>{const t=n>-Nv,e=n<Nv,s=Math.exp(n);let r;return r=e?s:t?n:Math.log(1+s),r}),gM={kernelName:ii,backendName:"cpu",kernelFunc:mM},xM={kernelName:iu,backendName:"cpu",kernelFunc:function yM(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{blockShape:o,paddings:a}=s;Se([r],"spaceToBatchND");const i=G(o),l=[[0,0]];l.push(...a);for(let C=1+o.length;C<r.shape.length;++C)l.push([0,0]);const u=pv.kernelFunc({inputs:{x:r},backend:e,attrs:{paddings:l,constantValue:0}}),c=Oi(u.shape,o,i,!1),h=Li(c.length,o.length,!1),d=Pi(u.shape,o,i,!1),g=yt({inputs:{x:u},backend:e,attrs:{shape:c}}),x=Rn({inputs:{x:g},backend:e,attrs:{perm:h}}),S=yt({inputs:{x},backend:e,attrs:{shape:d}});return e.disposeIntermediateTensorInfo(u),e.disposeIntermediateTensorInfo(g),e.disposeIntermediateTensorInfo(x),S}};function Cv(n,t,e,s,r,o,a){const i=t[0],l=o[0],u=new Array(l),c=new Array(i),h=t[1];if(0===l){if(0!==i)throw new Error(ob(i));return[Ft(e,0),[0,h],Ft(r,0),u,c]}let d=!0,p=0;const f=new Array(l).fill(0);for(let m=0;m<i;++m){const y=n[m*h];if(y<0)throw new Error(ab(m,y));if(y>=l)throw new Error(ib(m,y,l));++f[y],d=d&&y>=p,p=y}let g=!0;for(let m=0;m<l;++m){const y=0===f[m];u[m]=y,g=g&&!y,f[m]=Math.max(f[m],1),m>0&&(f[m]+=f[m-1])}if(g&&d){const m=n,y=s;for(let x=0;x<i;++x)c[x]=x;return[m,[i,h],y,u,c]}{const m=f[l-1],y=Ft(e,m*h),x=Ft(r,m),b=new Array(l).fill(0);for(let w=0;w<i;++w){const S=n[w*h],k=(0===S?0:f[S-1])+b[S];b[S]++;for(let T=0;T<h;++T)y[k*h+T]=n[w*h+T];x[k]=s[w],c[w]=k}for(let w=0;w<l;++w)if(0===b[w]){const C=0===w?0:f[w-1];y[C*h+0]=w;for(let k=1;k<h;++k)y[C*h+k]=0;x[C]=a}return[y,[m,h],x,u,c]}}const wM={kernelName:ld,backendName:"cpu",kernelFunc:function bM(n){const{inputs:t,backend:e}=n,{indices:s,values:r,denseShape:o,defaultValue:a}=t;if(1!==o.shape.length)throw new Error(`Dense shape must be a vector, saw:\n        ${o.shape}`);if(2!==s.shape.length)throw new Error(`Indices must be a matrix, saw:\n        ${s.shape}`);if(1!==r.shape.length)throw new Error(`Values must be a vector, saw:\n        ${r.shape}`);if(0!==a.shape.length)throw new Error(`Default value must be a scalar, saw:\n        ${a.shape}`);const i=e.data.get(s.dataId).values,l=e.data.get(r.dataId).values,u=e.data.get(o.dataId).values,c=e.data.get(a.dataId).values[0],[h,d,p,f,g]=Cv(i,s.shape,s.dtype,l,r.dtype,u,c);return[e.makeTensorInfo(d,s.dtype,h),e.makeTensorInfo([d[0]],r.dtype,p),e.makeTensorInfo([f.length],"bool",new Uint8Array(f.map(m=>Number(m)))),e.makeTensorInfo([g.length],s.dtype,new Int32Array(g))]}};function kv(n,t,e,s,r){const o=G(s),a=t[0],i=r.length,l=[];let u=1,c=-1;for(let m=0;m<i;++m){const y=r[m];if(-1===y){if(-1!==c)throw new Error(lb(c,m));c=m,l.push(1)}else{if(y<0)throw new Error(ub(m,y));u*=y,l.push(y)}}if(-1!==c){if(u<=0)throw new Error("reshape cannot infer the missing input size for an empty tensor unless all specified input sizes are non-zero");const m=Math.trunc(o/u);if(u*m!==o)throw new Error(hb(s,l));l[c]=m}if(G(l)!==o)throw new Error(db(s,l));const d=s.length,p=[];if(d>0){p[d-1]=1;for(let m=d-2;m>=0;--m)p[m]=p[m+1]*s[m+1]}const f=[];if(i>0){f[i-1]=1;for(let m=i-2;m>=0;--m)f[m]=f[m+1]*l[m+1]}const g=Ft(e,a*i);for(let m=0;m<a;++m){let y=0;for(let x=0;x<d;++x)y+=n[m*d+x]*p[x];for(let x=0;x<i;++x)g[m*i+x]=Math.trunc(y/f[x]),y%=f[x]}return[g,[a,i],l]}const SM={kernelName:ud,backendName:"cpu",kernelFunc:function vM(n){const{inputs:t,backend:e}=n,{inputIndices:s,inputShape:r,newShape:o}=t;if(2!==s.shape.length)throw new Error(`Input indices should be a matrix but received shape\n        ${s.shape}`);if(1!==r.shape.length)throw new Error(`Input shape should be a vector but received shape\n        ${r.shape}`);if(1!==o.shape.length)throw new Error(`Target shape should be a vector but received shape ${o.shape}`);const a=Array.from(e.data.get(r.dataId).values),i=e.data.get(s.dataId).values,l=Array.from(e.data.get(o.dataId).values),[u,c,h]=kv(i,s.shape,s.dtype,a,l);return[e.makeTensorInfo(c,s.dtype,u),e.makeTensorInfo([h.length],o.dtype,new Int32Array(h))]}};function qm(n,t,e,s,r,o=!1,a=0){const i=s.length,l=[t[0],n.length/t[0]],u=l[1],h=i>0?r[i-1]+1:0;if(h<0)throw new Error("segment ids must be >= 0");const d=t.slice();d[0]=h;const f=Ft(e,d.reduce((b,w)=>b*w,1));if(0===i)return h>0&&f.fill(a),[f,d];if(h<=0)throw new Error("segment ids must be >= 0");let g=0,m=1,y=0,x=r[g];for(;;){let b=0;if(m<i){if(b=r[m],x===b){++m;continue}if(x>=b)throw new Error("segment ids are not increasing")}if(x<0||x>=h)throw new Error(fb(x,h));x>y&&f.fill(a,y*u,x*u);for(let w=g;w<m;++w){const S=s[w];if(S<0||S>=l[0])throw new Error(mb(w,s[w],l[0]));for(let C=0;C<u;C++)f[x*u+C]+=n[S*u+C]}if(o)for(let w=0;w<u;w++)f[x*u+w]/=m-g;if(g=m,++m,y=x+1,x=b,m>i)break}return y<h&&f.fill(a,y*u,h*u),[f,d]}const NM={kernelName:cd,backendName:"cpu",kernelFunc:function IM(n){const{inputs:t,backend:e}=n,{data:s,indices:r,segmentIds:o}=t;if(s.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==r.shape.length)throw new Error(`Indices should be a vector but received shape\n          ${r.shape}`);if(1!==o.shape.length)throw new Error(`Segment ids should be a vector but received shape\n          ${o.shape}`);if(r.shape[0]!==o.shape[0])throw new Error("segmentIds and indices should have same size.");const a=e.data.get(s.dataId).values,i=e.data.get(r.dataId).values,l=e.data.get(o.dataId).values,[u,c]=qm(a,s.shape,s.dtype,i,l,!0);return e.makeTensorInfo(c,s.dtype,u)}},kM={kernelName:hd,backendName:"cpu",kernelFunc:function CM(n){const{inputs:t,backend:e}=n,{data:s,indices:r,segmentIds:o}=t;if(s.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==r.shape.length)throw new Error(`Indices should be a vector but received shape\n         ${r.shape}`);if(1!==o.shape.length)throw new Error(`Segment ids should be a vector but received shape\n         ${o.shape}`);if(r.shape[0]!==o.shape[0])throw new Error("segmentIds and indices should have same size.");const a=e.data.get(s.dataId).values,i=e.data.get(r.dataId).values,l=e.data.get(o.dataId).values,[u,c]=qm(a,s.shape,s.dtype,i,l);return e.makeTensorInfo(c,s.dtype,u)}},$M={kernelName:dd,backendName:"cpu",kernelFunc:function TM(n){const{inputs:t,backend:e,attrs:s}=n,{sparseIndices:r,sparseValues:o,defaultValue:a}=t,{outputShape:i}=s,{sliceRank:l,numUpdates:u,sliceSize:c,strides:h,outputSize:d}=ro(0,r,i),p=!1,f=e.bufferSync(r);let g;switch(o.dtype){case"bool":g=yo(f,e.bufferSync(o),i,d,c,u,l,h,!!e.data.get(a.dataId).values[0],p);break;case"float32":case"int32":g=yo(f,e.bufferSync(o),i,d,c,u,l,h,e.data.get(a.dataId).values[0],p);break;case"string":g=yo(f,e.bufferSync(o),i,d,c,u,l,h,dr(e.data.get(a.dataId).values[0]),p);break;default:throw new Error(`Unsupported type ${o.dtype}`)}return e.makeTensorInfo(i,g.dtype,g.values)}},EM={kernelName:lu,backendName:"cpu",kernelFunc:function _M(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{numOrSizeSplits:o,axis:a}=s,i=Ge(a,r.shape)[0],l=kf(r,o,i),u=new Array(r.shape.length).fill(0),c=r.shape.slice();return l.map(h=>{const d=[...c];d[i]=h;const p=go({inputs:{x:r},backend:e,attrs:{begin:u,size:d}});return u[i]+=h,p})}},AM=Gs(n=>Math.sqrt(n)),RM=lt(li,n=>Math.sqrt(n)),DM={kernelName:li,backendName:"cpu",kernelFunc:RM},FM={kernelName:pd,backendName:"cpu",kernelFunc:({inputs:n,backend:t})=>{const{x:e}=n,s=t;Se(e,"square");const r=s.data.get(e.dataId).values,o=new Float32Array(r.length);for(let i=0;i<r.length;++i){const l=r[i];o[i]=l*l}return{dataId:s.write(o,e.shape,e.dtype),shape:e.shape,dtype:e.dtype}}},OM=zt((n,t)=>{const e=n-t;return e*e}),LM=Qt(ui,OM),PM={kernelName:ui,backendName:"cpu",kernelFunc:LM},Tv=Gs((n,t)=>{const{pattern:e,replaceGlobal:s,rewrite:r}=t;return n.replace(new RegExp(e,s?"g":""),r)}),zM=Dr(cu,Tv),MM={kernelName:cu,backendName:"cpu",kernelFunc:zM},BM=lt(fi,(n,t)=>{const e=t;return isNaN(n)?NaN:n>0?1:e.alpha}),VM={kernelName:fi,backendName:"cpu",kernelFunc:BM};function $v(n,t,e,s){const r=Me(n,t.dtype);for(let o=0;o<r.size;o++){const a=r.indexToLoc(o),i=new Array(a.length);for(let l=0;l<i.length;l++)i[l]=a[l]*e[l]+s[l];r.set(t.get(...i),...a)}return r}const UM={kernelName:fd,backendName:"cpu",kernelFunc:function WM(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{begin:o,end:a,strides:i,beginMask:l,endMask:u,ellipsisMask:c,newAxisMask:h,shrinkAxisMask:d}=s;Se(r,"stridedSlice");const{finalShapeSparse:p,finalShape:f,isIdentity:g,sliceDim0:m,isSimpleSlice:y,begin:x,end:b,strides:w}=cp(r.shape,o,a,i,l,u,c,h,d);let S;if(g)S=yt({inputs:{x:r},backend:e,attrs:{shape:f}});else if(m||y){I(r.shape.length>=1,()=>`Input must have rank at least 1, got: ${r.shape.length}`);const C=ip(x,b,w),k=go({inputs:{x:r},backend:e,attrs:{begin:x,size:C}});S=yt({inputs:{x:k},backend:e,attrs:{shape:f}}),e.disposeIntermediateTensorInfo(k)}else{const k=$v(p,e.bufferSync(r),w,x);S=e.makeTensorInfo(f,k.dtype,k.values)}return S}};class GM{constructor(t,e,s,r,o,a){this.separator=hr(t),this.nGramWidths=e,this.leftPad=hr(s),this.rightPad=hr(r),this.padWidth=o,this.preserveShort=a}getPadWidth(t){return Math.min(this.padWidth<0?t-1:this.padWidth,t-1)}getNumNGrams(t,e){const s=this.getPadWidth(e);return Math.max(0,t+2*s-e+1)}createNGrams(t,e,s,r,o,a){for(let i=0;i<o;++i){const l=this.getPadWidth(a),u=Math.max(0,l-i),c=Math.max(0,l-(o-(i+1))),h=a-(u+c),d=e+(u>0?0:i-l);let p=0;p+=u*this.leftPad.length;for(let x=0;x<h;++x)p+=t[d+x].length;p+=c*this.rightPad.length,p+=(u+c+h-1)*this.separator.length,s[r+i]=new Uint8Array(p);const g=s[r+i];let m=0;const y=x=>x.forEach(b=>g[m++]=b);for(let x=0;x<u;++x)y(this.leftPad),y(this.separator);for(let x=0;x<h-1;++x)y(t[d+x]),y(this.separator);if(h>0){y(t[d+h-1]);for(let x=0;x<c;++x)y(this.separator),y(this.rightPad)}else{for(let x=0;x<c-1;++x)y(this.rightPad),y(this.separator);y(this.rightPad)}}}compute(t,e){const s=t.length,r=e.length;if(r>0){let l=e[0];if(0!==l)throw new Error(`First split value must be 0, got ${l}`);for(let u=1;u<r;++u){let c=e[u]>=l;if(c=c&&e[u]<=s,!c)throw new Error(`Invalid split value ${e[u]}, must be in [${l}, ${s}]`);l=e[u]}if(l!==s)throw new Error(`Last split value must be data size. Expected ${s}, got ${l}`)}const o=r-1,a=Ft("int32",r);if(0===s||0===r){const l=new Array(s);for(let u=0;u<=o;++u)a[u]=0;return[l,a]}a[0]=0;for(let l=1;l<=o;++l){const u=e[l]-e[l-1];let c=0;this.nGramWidths.forEach(h=>{c+=this.getNumNGrams(u,h)}),this.preserveShort&&u>0&&0===c&&(c=1),a[l]=a[l-1]+c}const i=new Array(a[o]);for(let l=0;l<o;++l){const u=e[l];let c=a[l];if(this.nGramWidths.forEach(h=>{const p=this.getNumNGrams(e[l+1]-e[l],h);this.createNGrams(t,u,i,c,p,h),c+=p}),this.preserveShort&&c===a[l]){const h=e[l+1]-e[l];if(0===h)continue;this.createNGrams(t,u,i,c,1,h+2*this.padWidth)}}return[i,a]}}function _v(n,t,e,s,r,o,a,i){return new GM(e,s,r,o,a,i).compute(n,t)}const jM={kernelName:md,backendName:"cpu",kernelFunc:function HM(n){const{inputs:t,backend:e,attrs:s}=n,{separator:r,nGramWidths:o,leftPad:a,rightPad:i,padWidth:l,preserveShortSequences:u}=s,{data:c,dataSplits:h}=t,d=e.data.get(c.dataId).values,p=e.data.get(h.dataId).values,[f,g]=_v(d,p,r,o,a,i,l,u);return[e.makeTensorInfo([f.length],"string",f),e.makeTensorInfo(h.shape,"int32",g)]}};function KM(n,t,e,s){if(!n.length)return;if(0===t.length){for(let o=0;o<n.length;++o)s.push(n.subarray(o,o+1));return}if(1===t.length){const o=t[0];let a=n.indexOf(o);for(;-1!==a;){const i=n.subarray(0,a);(!e||0!==i.length)&&s.push(i),a=(n=n.subarray(a+1)).indexOf(o)}return void((!e||0!==n.length)&&s.push(n))}let r=0;for(let o=0;o<n.length+1;o++)if(o===n.length||-1!==t.indexOf(n[o])){const a=n.subarray(r,o);(!e||0!==a.length)&&s.push(a),r=o+1}}function Ev(n,t,e){const s=n.length,r=[];let o=0,a=0;const i=new Array(s);for(let d=0;d<s;++d){const p=r.length;KM(n[d],t,e,r);const f=r.length-p;i[d]=f,o+=f,a=Math.max(a,f)}const l=Ft("int32",2*o),u=new Array(o),c=[s,a];let h=0;for(let d=0;d<s;++d)for(let p=0;p<i[d];++p)l[2*h]=d,l[2*h+1]=p,u[h]=r[h],++h;return[l,u,c]}const XM={kernelName:gd,backendName:"cpu",kernelFunc:function qM(n){const{inputs:t,backend:e,attrs:s}=n,{skipEmpty:r}=s,{input:o,delimiter:a}=t;if("string"!==o.dtype)throw new Error("Input must be of datatype string");if(1!==o.shape.length)throw new Error(`Input must be a vector, got shape: ${o.shape}`);if(0!==a.shape.length)throw new Error(`Delimiter must be a scalar, got shape: ${a.shape}`);const i=e.data.get(o.dataId).values,l=e.data.get(a.dataId).values[0],[u,c,h]=Ev(i,l,r),d=c.length;return[e.makeTensorInfo([d,2],"int32",u),e.makeTensorInfo([d],"string",c),e.makeTensorInfo([2],"int32",new Int32Array(h))]}};function Av(n,t){const e=Ft("int32",n.length);for(let s=0;s<n.length;++s)e[s]=CS(n[s]).modulo(t).getLowBitsUnsigned();return e}const YM={kernelName:yd,backendName:"cpu",kernelFunc:function ZM(n){const{inputs:t,backend:e,attrs:s}=n,{numBuckets:r}=s,{input:o}=t;if("string"!==o.dtype)throw new Error("Input must be of datatype string");if(r<=0)throw new Error("Number of buckets must be at least 1");const i=Av(e.data.get(o.dataId).values,r);return e.makeTensorInfo(o.shape,"int32",i)}},QM=lt(hi,n=>Math.tan(n)),JM={kernelName:hi,backendName:"cpu",kernelFunc:QM},eB=lt(di,n=>Math.tanh(n));function Rv(n,t){const e=new Array(n.rank);for(let r=0;r<e.length;r++)e[r]=n.shape[r]*t[r];const s=Me(e,n.dtype);for(let r=0;r<s.values.length;++r){const o=s.indexToLoc(r),a=new Array(n.rank);for(let l=0;l<a.length;l++)a[l]=o[l]%n.shape[l];const i=n.locToIndex(a);s.values[r]=n.values[i]}return s}const Ji=(n,t)=>{const e=t.value-n.value;return 0===e?n.index-t.index:e};function Dv(n,t,e=0,s=n.length-1){for(;s>e;){if(s-e>600){const i=s-e+1,l=t-e+1,u=Math.log(i),c=.5*Math.exp(2*u/3),h=.5*Math.sqrt(u*c*(i-c)/i)*Math.sign(l-i/2);Dv(n,t,Math.max(e,Math.floor(t-l*c/i+h)),Math.min(s,Math.floor(t+(i-l)*c/i+h)))}const r=n[t];let o=e,a=s;for(ir(n,e,t),Ji(n[s],r)>0&&ir(n,e,s);o<a;){for(ir(n,o,a),o++,a--;Ji(n[o],r)<0;)o+=1;for(;Ji(n[a],r)>0;)a-=1}0===Ji(n[e],r)?ir(n,e,a):(a+=1,ir(n,a,s)),a<=t&&(e=a+1),t<=a&&(s=a-1)}}function Fv(n,t,e,s,r){const o=t[t.length-1],[a,i]=[n.length/o,o],l=on(e,a*s),u=on("int32",a*s);for(let h=0;h<a;h++){const d=h*i,p=n.subarray(d,d+i);let f=new Array(p.length);p.forEach((x,b)=>f[b]={value:x,index:b}),s<f.length&&(Dv(f,s),f=f.slice(0,s)),r&&f.sort(Ji);const g=h*s,m=l.subarray(g,g+s),y=u.subarray(g,g+s);for(let x=0;x<s;x++)m[x]=f[x].value,y[x]=f[x].index}const c=t.slice();return c[c.length-1]=s,[Me(c,e,l),Me(c,"int32",u)]}function Ov(n,t,e){switch(e){case"reflect":return function cB(n,t){let e=n;if(e<0)if(t<=1)e=0;else{const s=2*t;e<s&&(e=s*Math.trunc(-e/s)+e),e=e<-t?e+s:-e-1}else if(e>t-1)if(t<=1)e=0;else{const s=2*t;e-=s*Math.trunc(e/s),e>=t&&(e=s-e-1)}return Ur(0,e,t-1)}(n,t);case"wrap":return function hB(n,t){let e=n;return e<0?t<=1?e=0:e+=t*(Math.trunc(-e/(t-1))+1):e>t-1&&(t<=1?e=0:e-=t*Math.trunc(e/(t-1))),Ur(0,e,t-1)}(n,t);case"nearest":return function pB(n,t){return Ur(0,n,t-1)}(n,t);default:return function dB(n,t){return n}(n)}}function el(n,t,e,s,r,o,a,i,l,u,c){return 0<=i&&i<t&&0<=l&&l<e?n[a*s+i*r+l*o+u]:c}function fB(n,t,e,s,r,o,a,i,l,u,c){return el(n,t,e,s,r,o,a,Math.round(i),Math.round(l),u,c)}function mB(n,t,e,s,r,o,a,i,l,u,c){const h=Math.floor(i),d=Math.floor(l),p=h+1,f=d+1;return(p-i)*((f-l)*el(n,t,e,s,r,o,a,h,d,u,c)+(l-d)*el(n,t,e,s,r,o,a,h,f,u,c))+(i-h)*((f-l)*el(n,t,e,s,r,o,a,p,d,u,c)+(l-d)*el(n,t,e,s,r,o,a,p,f,u,c))}function Lv(n,t,e,s){const r=Ge(t,e)[0],o=[1,e[0],1];for(let f=0;f<r;f++)o[0]*=e[f];o[1]=e[r];for(let f=r+1;f<e.length;f++)o[2]*=e[f];const a=new Map,i=new Int32Array(e[r]),l=new Gt(o,s,n),u=[],c=1===o[0]&&1===o[2];for(let f=0;f<e[r];f++){let g;if(c)g=n[f].toString();else{const y=[];for(let x=0;x<o[0];x++)for(let b=0;b<o[2];b++)y.push(l.get(x,f,b));g=y.join(",")}const m=a.get(g);if(null!=m)i[f]=m;else{const y=a.size;a.set(g,y),i[f]=y,u.push(f)}}const h=o.slice();h[1]=a.size;const d=new Gt(h,s);u.forEach((f,g)=>{for(let m=0;m<o[0];m++)for(let y=0;y<o[2];y++)d.set(l.get(m,f,y),m,g,y)});const p=e.slice();return p[r]=h[1],{outputValues:d.values,outputShape:p,indices:i}}const SB=[fO,mO,yO,bO,cO,vO,NO,kO,$O,EO,RO,FO,LO,MO,VO,GO,jO,qO,ZO,dO,QO,tL,sL,oL,iL,lO,uL,hL,aO,dL,fL,mL,yL,bL,vL,IL,CL,TL,_L,AL,DL,OL,PL,ML,BL,WL,GL,jL,KL,qL,XL,YL,nP,YF,rP,oP,pP,fP,mP,yP,CP,kP,$P,EP,DP,OP,PP,MP,VP,UP,HP,QF,KP,pL,XP,YP,JP,JF,t3,s3,o3,i3,u3,d3,f3,y3,b3,v3,S3,N3,k3,$3,E3,R3,F3,L3,z3,B3,W3,H3,q3,JL,Z3,J3,nz,oz,iz,uz,hz,dz,pv,gz,tO,xz,kz,$z,Ez,Rz,iO,Gm,Fz,nO,sO,hO,Lz,zz,Bz,Wz,Gz,Hz,Kz,Xz,Yz,nM,rM,lM,oO,cM,dM,fM,JO,j3,gM,xM,wM,SM,NM,kM,$M,EM,DM,FM,PM,MM,VM,UM,jM,XM,YM,wP,eP,JM,{kernelName:di,backendName:"cpu",kernelFunc:eB},{kernelName:ad,backendName:"cpu",kernelFunc:function nB(n){const{inputs:t,backend:e}=n,{tensor:s,indices:r,updates:o}=t,{sliceRank:a,numUpdates:i,sliceSize:l,strides:u,outputSize:c}=ro(0,r,s.shape),d=e.bufferSync(r),p=e.bufferSync(o),f=e.bufferSync(s),g=yo(d,p,s.shape,c,l,i,a,u,f,!1);return e.makeTensorInfo(s.shape,g.dtype,g.values)}},{kernelName:pi,backendName:"cpu",kernelFunc:function rB(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{reps:o}=s;Se(r,"tile");const a=Rv(e.bufferSync(r),o);return e.makeTensorInfo(a.shape,a.dtype,a.values)}},{kernelName:xd,backendName:"cpu",kernelFunc:function aB(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{k:o,sorted:a}=s;Se(r,"topk");const i=e.data.get(r.dataId).values,[l,u]=Fv(i,r.shape,r.dtype,o,a);return[e.makeTensorInfo(l.shape,l.dtype,l.values),e.makeTensorInfo(u.shape,u.dtype,u.values)]}},{kernelName:bd,backendName:"cpu",kernelFunc:function lB(n){const{inputs:t,attrs:e,backend:s}=n,{image:r,transforms:o}=t,{interpolation:a,fillMode:i,fillValue:l,outputShape:u}=e,[c,h,d,p]=r.shape,[f,g]=null!=u?u:[h,d],m=[c,f,g,p],y=ke(r.shape),x=y[0],b=y[1],w=y[2],S=ke(m),C=S[0],k=S[1],T=S[2],E=on(r.dtype,G(m));E.fill(l);const R=s.data.get(r.dataId).values,L=s.data.get(o.dataId).values;for(let U=0;U<c;++U){const H=1===o.shape[0]?L:L.subarray(8*U,8*U+8);for(let j=0;j<f;++j)for(let Z=0;Z<g;++Z)for(let Y=0;Y<p;++Y){let K;const Q=H[6]*Z+H[7]*j+1;if(0===Q)continue;const re=(H[3]*Z+H[4]*j+H[5])/Q,le=Ov((H[0]*Z+H[1]*j+H[2])/Q,d,i),ie=Ov(re,h,i);switch(a){case"nearest":K=fB(R,h,d,x,b,w,U,ie,le,Y,l);break;case"bilinear":K=mB(R,h,d,x,b,w,U,ie,le,Y,l);break;default:throw new Error(`Error in Transform: Expect 'nearest' or 'bilinear', but got ${a}`)}E[U*C+j*k+Z*T+Y]=K}return s.makeTensorInfo(m,r.dtype,E)}return{dataId:s.write(E,m,r.dtype),shape:r.shape,dtype:r.dtype}}},SO,{kernelName:wd,backendName:"cpu",kernelFunc:function gB(n){const{inputs:t,attrs:e,backend:s}=n,{axis:r}=e,{x:o}=t;Se(o,"unique");const a=s.data.get(o.dataId).values,{outputValues:i,outputShape:l,indices:u}=Lv(a,r,o.shape,o.dtype);return[s.makeTensorInfo(l,o.dtype,i),s.makeTensorInfo([u.length],"int32",u)]}},{kernelName:hu,backendName:"cpu",kernelFunc:function xB(n){const{inputs:t,backend:e,attrs:s}=n,{value:r}=t;let{axis:o}=s;o<0&&(o+=r.shape.length);const a=r.shape.length,i=r.shape[o],l=new Array(a-1);let u=0;for(let p=0;p<a;p++)p!==o&&(l[u++]=r.shape[p]);const c=new Array(a).fill(0),h=r.shape.slice();h[o]=1;const d=new Array(i);for(let p=0;p<d.length;p++){c[o]=p;const f=go({inputs:{x:r},backend:e,attrs:{begin:c,size:h}});d[p]=yt({inputs:{x:f},backend:e,attrs:{shape:l}}),e.disposeIntermediateTensorInfo(f)}return d}},{kernelName:du,backendName:"cpu",kernelFunc:function wB(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,segmentIds:o}=t,{numSegments:a}=s;Se(r,"unsortedSegmentSum");const u=[],c=[],h=r.shape.length-o.shape.length;let d=o;for(let f=0;f<h;++f){const g=Oc({inputs:{input:d},backend:e,attrs:{dim:f+1}});d=g,c.push(g)}for(let f=0;f<a;++f){const g=cr(f,"int32"),m=e.makeTensorInfo([],"int32",g),y=Uw({inputs:{a:m,b:d},backend:e}),x=Fr({inputs:{x:y},backend:e,attrs:{dtype:"float32"}}),b=Fc({inputs:{a:x,b:r},backend:e}),w=Qi({inputs:{x:b},backend:e,attrs:{axis:0,keepDims:!1}});u.push(w),c.push(m),c.push(y),c.push(x),c.push(b),c.push(w)}const p=dv({inputs:u,backend:e,attrs:{axis:0}});return c.forEach(f=>e.disposeIntermediateTensorInfo(f)),p}},cz];for(const n of SB)Nd(n);const Or={},zc={alpha:!1,antialias:!1,premultipliedAlpha:!1,preserveDrawingBuffer:!1,depth:!1,stencil:!1,failIfMajorPerformanceCaveat:!0};function Ts(n,t){if(!(n in Or)||null!=t){const s=function CB(n,t){if(1!==n&&2!==n)throw new Error("Cannot get WebGL rendering context, WebGL is disabled.");const e=null==t?function NB(n){if(!z().getBool("IS_SAFARI")&&typeof OffscreenCanvas<"u"&&2===n)return new OffscreenCanvas(300,150);if(typeof document<"u")return document.createElement("canvas");throw new Error("Cannot create a canvas in this context")}(n):t;return e.addEventListener("webglcontextlost",s=>{s.preventDefault(),delete Or[n]},!1),z().getBool("SOFTWARE_WEBGL_ENABLED")&&(zc.failIfMajorPerformanceCaveat=!1),1===n?e.getContext("webgl",zc)||e.getContext("experimental-webgl",zc):e.getContext("webgl2",zc)}(n,t);if(null===s)return console.log("Could not get context for WebGL version",n),null;Or[n]=s}const e=Or[n];return null==e||e.isContextLost()?(delete Or[n],Ts(n)):(e.disable(e.DEPTH_TEST),e.disable(e.STENCIL_TEST),e.disable(e.BLEND),e.disable(e.DITHER),e.disable(e.POLYGON_OFFSET_FILL),e.disable(e.SAMPLE_COVERAGE),e.enable(e.SCISSOR_TEST),e.enable(e.CULL_FACE),e.cullFace(e.BACK),Or[n])}var Mc=function(n){return n[n.DENSE=0]="DENSE",n[n.SHARED_BATCH=1]="SHARED_BATCH",n}(Mc||{}),fs=function(n){return n[n.RENDER=0]="RENDER",n[n.UPLOAD=1]="UPLOAD",n[n.PIXELS=2]="PIXELS",n[n.DOWNLOAD=3]="DOWNLOAD",n}(fs||{}),gn=function(n){return n[n.UNPACKED_FLOAT16=0]="UNPACKED_FLOAT16",n[n.UNPACKED_FLOAT32=1]="UNPACKED_FLOAT32",n[n.PACKED_4X1_UNSIGNED_BYTE=2]="PACKED_4X1_UNSIGNED_BYTE",n[n.PACKED_2X2_FLOAT32=3]="PACKED_2X2_FLOAT32",n[n.PACKED_2X2_FLOAT16=4]="PACKED_2X2_FLOAT16",n}(gn||{});function tl(n,t){return[t,n]}function Bc(n){const t=G(n);return lh(Math.ceil(t/4))}function ia(n,t){return[Math.max(1,Math.ceil(t/2)),Math.max(1,Math.ceil(n/2))]}function Xm(n,t){const e=n;let s,r,o,a,i,l,u,c,h,d;return 2===z().getNumber("WEBGL_VERSION")?(s=e.R32F,r=e.R16F,o=e.RGBA16F,a=e.RGBA32F,i=e.RED,u=4,c=1,h=e.HALF_FLOAT,d=e.FLOAT,l=e.RGBA8):(s=n.RGBA,r=n.RGBA,o=n.RGBA,a=e.RGBA,i=n.RGBA,u=4,c=4,h=null!=t?t.HALF_FLOAT_OES:null,d=n.FLOAT,l=n.RGBA),{internalFormatFloat:s,internalFormatHalfFloat:r,internalFormatPackedHalfFloat:o,internalFormatPackedFloat:a,textureFormatFloat:i,downloadTextureFormat:l,downloadUnpackNumChannels:u,defaultNumChannels:c,textureTypeHalfFloat:h,textureTypeFloat:d}}function de(n,t){const e=t();return z().getBool("DEBUG")&&function $B(n){const t=n.getError();if(t!==n.NO_ERROR)throw new Error("WebGL Error: "+function RB(n,t){switch(t){case n.NO_ERROR:return"NO_ERROR";case n.INVALID_ENUM:return"INVALID_ENUM";case n.INVALID_VALUE:return"INVALID_VALUE";case n.INVALID_OPERATION:return"INVALID_OPERATION";case n.INVALID_FRAMEBUFFER_OPERATION:return"INVALID_FRAMEBUFFER_OPERATION";case n.OUT_OF_MEMORY:return"OUT_OF_MEMORY";case n.CONTEXT_LOST_WEBGL:return"CONTEXT_LOST_WEBGL";default:return`Unknown error code ${t}`}}(n,t))}(n),e}function AB(n){return!!(z().getBool("WEBGL_RENDER_FLOAT32_ENABLED")||0===n||5.96e-8<Math.abs(n)&&Math.abs(n)<65504)}function Vc(n,t){return rr(n,()=>n.getExtension(t),'Extension "'+t+'" not supported on this browser.')}const OB=/ERROR: [0-9]+:([0-9]+):/g;function Pv(n,t){const e=OB.exec(t);if(null==e)return console.log(`Couldn't parse line number in error: ${t}`),void console.log(n);const s=+e[1],r=n.split("\n"),o=r.length.toString().length+2,a=r.map((h,d)=>To((d+1).toString(),o)+h);let i=0;for(let h=0;h<a.length;h++)i=Math.max(a[h].length,i);const l=a.slice(0,s-1),u=a.slice(s-1,s),c=a.slice(s);console.log(l.join("\n")),console.log(t.split("\n")[0]),console.log(`%c ${To(u[0],i)}`,"border:1px solid red; background-color:#e3d2d2; color:#a61717"),console.log(c.join("\n"))}function Zm(n,t){if(de(n,()=>n.validateProgram(t)),!1===n.getProgramParameter(t,n.VALIDATE_STATUS))throw console.log(n.getProgramInfoLog(t)),new Error("Shader program validation failed.")}function zv(n,t,e,s,r,o,a){const i=n.getAttribLocation(t,e);return-1!==i&&(de(n,()=>n.bindBuffer(n.ARRAY_BUFFER,s)),de(n,()=>n.vertexAttribPointer(i,r,n.FLOAT,!1,o,a)),de(n,()=>n.enableVertexAttribArray(i)),!0)}function jB(n,t,e,s){de(n,()=>function UB(n,t,e){(function Bv(n,t){const e=n.MAX_COMBINED_TEXTURE_IMAGE_UNITS-1,s=t+n.TEXTURE0;if(s<n.TEXTURE0||s>e)throw new Error(`textureUnit must be in [gl.TEXTURE0, gl.TEXTURE${e}].`)})(n,e),de(n,()=>n.activeTexture(n.TEXTURE0+e)),de(n,()=>n.bindTexture(n.TEXTURE_2D,t))}(n,t,s)),de(n,()=>n.uniform1i(e,s))}function Ym(n,t,e){de(n,()=>n.bindFramebuffer(n.FRAMEBUFFER,e)),de(n,()=>n.framebufferTexture2D(n.FRAMEBUFFER,n.COLOR_ATTACHMENT0,n.TEXTURE_2D,t,0))}function Mv(n,t){de(n,()=>n.bindFramebuffer(n.FRAMEBUFFER,t)),de(n,()=>n.framebufferTexture2D(n.FRAMEBUFFER,n.COLOR_ATTACHMENT0,n.TEXTURE_2D,null,0))}function Wc(n){const t=n.checkFramebufferStatus(n.FRAMEBUFFER);if(t!==n.FRAMEBUFFER_COMPLETE)throw new Error("Error binding framebuffer: "+function KB(n,t){switch(t){case n.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_ATTACHMENT";case n.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT";case n.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:return"FRAMEBUFFER_INCOMPLETE_DIMENSIONS";case n.FRAMEBUFFER_UNSUPPORTED:return"FRAMEBUFFER_UNSUPPORTED";default:return`unknown error ${t}`}}(n,t))}function rr(n,t,e){const s=de(n,()=>t());if(null==s)throw new Error(e);return s}function la(n,t=2){return G(n.slice(0,n.length-t))}function ua(n){if(0===n.length)throw Error("Cannot get rows and columns of an empty shape array.");return[n.length>1?n[n.length-2]:1,n[n.length-1]]}function Uc(n){let t=[1,1,1];return 0===n.length||1===n.length&&1===n[0]||(t=[la(n),...ua(n)]),t}function Gc(n){return n%2==0}function Hc(n,t){if(Xe(n=n.slice(-2),t=t.slice(-2))||!n.length||!t.length||0===n[0]||0===n[1]||0===t[0]||0===t[1])return!0;if(n.length!==t.length){const e=n[n.length-1],s=t[t.length-1];if(e===s||Gc(e)&&Gc(s)&&(1===n[0]||1===t[0]))return!0}return n[1]===t[1]&&Gc(n[0])&&Gc(t[0])}let jc,Kc;function ms(n,t){return null!=n.getExtension(t)}function Vv(n){try{if(null!=Ts(n))return!0}catch(t){return console.log("Error when getting WebGL context: ",t),!1}return!1}function Qm(n){const t=Xm(n),e=n.createTexture();n.bindTexture(n.TEXTURE_2D,e),n.texImage2D(n.TEXTURE_2D,0,t.internalFormatFloat,1,1,0,t.textureFormatFloat,t.textureTypeFloat,null);const o=n.createFramebuffer();n.bindFramebuffer(n.FRAMEBUFFER,o),n.framebufferTexture2D(n.FRAMEBUFFER,n.COLOR_ATTACHMENT0,n.TEXTURE_2D,e,0);const a=n.checkFramebufferStatus(n.FRAMEBUFFER)===n.FRAMEBUFFER_COMPLETE;return n.bindTexture(n.TEXTURE_2D,null),n.bindFramebuffer(n.FRAMEBUFFER,null),n.deleteTexture(e),n.deleteFramebuffer(o),a}function nl(n,t){Array.isArray(n)||(n=[n]),n.forEach(e=>{null!=e&&I("complex64"!==e.dtype,()=>`${t} does not support complex64 tensors in the WebGL backend.`)})}const Ie=z();function Nn(){let n,t,e,s,r,o,a,i,l,u;return 2===z().getNumber("WEBGL_VERSION")?(n="#version 300 es",t="in",e="out",s="in",r="texture",o="outputColor",a="out vec4 outputColor;",i=z().getBool("WEBGL2_ISNAN_CUSTOM")?"\n      bool isnan_custom(float val) {\n        uint floatToUint = floatBitsToUint(val);\n        return (floatToUint & 0x7fffffffu) > 0x7f800000u;\n      }\n\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan_custom(val.x),\n          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));\n      }\n\n      #define isnan(value) isnan_custom(value)\n    ":"",l="",u="\n      #define round(value) newRound(value)\n      int newRound(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 newRound(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "):(n="",t="attribute",e="varying",s="varying",r="texture2D",o="gl_FragColor",a="",i="\n      #define isnan(value) isnan_custom(value)\n      bool isnan_custom(float val) {\n        return (val > 0. || val < 1. || val == 0.) ? false : true;\n      }\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));\n      }\n    ",l="\n      uniform float INFINITY;\n\n      bool isinf(float val) {\n        return abs(val) == INFINITY;\n      }\n      bvec4 isinf(vec4 val) {\n        return equal(abs(val), vec4(INFINITY));\n      }\n    ",u="\n      int round(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 round(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "),{version:n,attribute:t,varyingVs:e,varyingFs:s,texture2D:r,output:o,defineOutput:a,defineSpecialNaN:i,defineSpecialInf:l,defineRound:u}}function xo(n,t,e="index"){const s=ke(t);return s.map((r,o)=>`int ${n[o]} = ${e} / ${r}; ${o===s.length-1?`int ${n[o+1]} = ${e} - ${n[o]} * ${r}`:`index -= ${n[o]} * ${r}`};`).join("")}function qc(n,t,e="index"){const s=ke(t);return s.map((r,o)=>`int ${n[o]} = ${e} / outShapeStrides[${o}]; ${o===s.length-1?`int ${n[o+1]} = ${e} - ${n[o]} * outShapeStrides[${o}]`:`index -= ${n[o]} * outShapeStrides[${o}]`};`).join("")}function Jm(n){const t=ke(n).map(e=>e.toString());return`\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * ${t[0]} + coords.y * ${t[1]} + coords.z;\n  }\n`}Ie.registerFlag("HAS_WEBGL",()=>Ie.getNumber("WEBGL_VERSION")>0),Ie.registerFlag("WEBGL_VERSION",()=>Vv(2)?2:Vv(1)?1:0),Ie.registerFlag("WEBGL_CHECK_NUMERICAL_PROBLEMS",()=>!1),Ie.registerFlag("WEBGL_BUFFER_SUPPORTED",()=>2===Ie.get("WEBGL_VERSION")),Ie.registerFlag("WEBGL_CPU_FORWARD",()=>!0),Ie.registerFlag("WEBGL_FORCE_F16_TEXTURES",()=>!1),Ie.registerFlag("WEBGL_PACK",()=>Ie.getBool("HAS_WEBGL")),Ie.registerFlag("WEBGL_PACK_NORMALIZATION",()=>Ie.getBool("WEBGL_PACK")),Ie.registerFlag("WEBGL_PACK_CLIP",()=>Ie.getBool("WEBGL_PACK")),Ie.registerFlag("WEBGL_PACK_DEPTHWISECONV",()=>Ie.getBool("WEBGL_PACK")),Ie.registerFlag("WEBGL_PACK_BINARY_OPERATIONS",()=>Ie.getBool("WEBGL_PACK")),Ie.registerFlag("WEBGL_PACK_UNARY_OPERATIONS",()=>Ie.getBool("WEBGL_PACK")),Ie.registerFlag("WEBGL_PACK_ARRAY_OPERATIONS",()=>Ie.getBool("WEBGL_PACK")),Ie.registerFlag("WEBGL_PACK_IMAGE_OPERATIONS",()=>Ie.getBool("WEBGL_PACK")),Ie.registerFlag("WEBGL_PACK_REDUCE",()=>Ie.getBool("WEBGL_PACK")),Ie.registerFlag("WEBGL_LAZILY_UNPACK",()=>Ie.getBool("WEBGL_PACK")),Ie.registerFlag("WEBGL_CONV_IM2COL",()=>Ie.getBool("WEBGL_PACK")),Ie.registerFlag("WEBGL_MAX_TEXTURE_SIZE",()=>function XB(n){if(null==jc){const t=Ts(n);jc=t.getParameter(t.MAX_TEXTURE_SIZE)}return jc}(Ie.getNumber("WEBGL_VERSION"))),Ie.registerFlag("WEBGL_MAX_TEXTURES_IN_SHADER",()=>function ZB(n){if(null==Kc){const t=Ts(n);Kc=t.getParameter(t.MAX_TEXTURE_IMAGE_UNITS)}return Math.min(16,Kc)}(Ie.getNumber("WEBGL_VERSION"))),Ie.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION",()=>{const n=Ie.getNumber("WEBGL_VERSION");return 0===n?0:function YB(n){if(0===n)return 0;let t;const e=Ts(n);return t=ms(e,"EXT_disjoint_timer_query_webgl2")&&2===n?2:ms(e,"EXT_disjoint_timer_query")?1:0,t}(n)}),Ie.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE",()=>Ie.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0&&!Wg()),Ie.registerFlag("WEBGL_RENDER_FLOAT32_CAPABLE",()=>function QB(n){if(0===n)return!1;const t=Ts(n);if(1===n){if(!ms(t,"OES_texture_float"))return!1}else if(!ms(t,"EXT_color_buffer_float"))return!1;return Qm(t)}(Ie.getNumber("WEBGL_VERSION"))),Ie.registerFlag("WEBGL_RENDER_FLOAT32_ENABLED",()=>!Ie.getBool("WEBGL_FORCE_F16_TEXTURES")&&Ie.getBool("WEBGL_RENDER_FLOAT32_CAPABLE")),Ie.registerFlag("WEBGL_DOWNLOAD_FLOAT_ENABLED",()=>function JB(n){if(0===n)return!1;const t=Ts(n);if(1!==n){if(ms(t,"EXT_color_buffer_float"))return Qm(t);const s="EXT_color_buffer_half_float";if(ms(t,s)){const r=t.getExtension(s);return function eV(n,t){const e=Xm(n,t),s=n.createTexture();n.bindTexture(n.TEXTURE_2D,s),n.texImage2D(n.TEXTURE_2D,0,e.internalFormatHalfFloat,1,1,0,e.textureFormatFloat,e.textureTypeHalfFloat,null);const a=n.createFramebuffer();n.bindFramebuffer(n.FRAMEBUFFER,a),n.framebufferTexture2D(n.FRAMEBUFFER,n.COLOR_ATTACHMENT0,n.TEXTURE_2D,s,0);const i=n.checkFramebufferStatus(n.FRAMEBUFFER)===n.FRAMEBUFFER_COMPLETE;return n.bindTexture(n.TEXTURE_2D,null),n.bindFramebuffer(n.FRAMEBUFFER,null),n.deleteTexture(s),n.deleteFramebuffer(a),i}(t,r)}return!1}return!(!ms(t,"OES_texture_float")||!ms(t,"WEBGL_color_buffer_float"))&&Qm(t)}(Ie.getNumber("WEBGL_VERSION"))),Ie.registerFlag("WEBGL_FENCE_API_ENABLED",()=>function tV(n){return 2===n&&null!=Ts(n).fenceSync}(Ie.getNumber("WEBGL_VERSION"))),Ie.registerFlag("WEBGL_SIZE_UPLOAD_UNIFORM",()=>Ie.getBool("WEBGL_RENDER_FLOAT32_ENABLED")?4:0),Ie.registerFlag("WEBGL_DELETE_TEXTURE_THRESHOLD",()=>-1,n=>{if("number"!=typeof n)throw new Error(`WEBGL_DELETE_TEXTURE_THRESHOLD must be a number but got ${n}.`);if(n<0&&-1!==n)throw new Error(`WEBGL_DELETE_TEXTURE_THRESHOLD must be -1 (indicating never delete) or at least 0, but got ${n}.`)}),Ie.registerFlag("WEBGL_FLUSH_THRESHOLD",()=>Wg()?1:-1,n=>{if("number"!=typeof n)throw new Error(`WEBGL_FLUSH_THRESHOLD must be a number but got ${n}.`);if(n<0&&-1!==n)throw new Error(`WEBGL_FLUSH_THRESHOLD must be -1 (indicating never manual flush) or at least 0, but got ${n}.`)}),Ie.registerFlag("CPU_HANDOFF_SIZE_THRESHOLD",()=>128),Ie.registerFlag("WEBGL_USE_SHAPES_UNIFORMS",()=>!1),Ie.registerFlag("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD",()=>1e5),Ie.registerFlag("TOPK_K_CPU_HANDOFF_THRESHOLD",()=>128),Ie.registerFlag("WEBGL_EXP_CONV",()=>!1),Ie.registerFlag("SOFTWARE_WEBGL_ENABLED",()=>Ie.getBool("IS_TEST")),Ie.registerFlag("WEBGL_MAX_SIZE_FOR_NARROW_TEXTURE",()=>1/0),Ie.registerFlag("WEBGL_AUTO_SQUARIFY_NARROW_TEXTURE_SHAPE",()=>!1),Ie.registerFlag("WEBGL2_ISNAN_CUSTOM",()=>!1),Ie.registerFlag("ENGINE_COMPILE_ONLY",()=>!1);const Wv="\n  const float FLOAT_MAX = 1.70141184e38;\n  const float FLOAT_MIN = 1.17549435e-38;\n\n  lowp vec4 encode_float(highp float v) {\n    if (isnan(v)) {\n      return vec4(255, 255, 255, 255);\n    }\n\n    highp float av = abs(v);\n\n    if(av < FLOAT_MIN) {\n      return vec4(0.0, 0.0, 0.0, 0.0);\n    } else if(v > FLOAT_MAX) {\n      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n    } else if(v < -FLOAT_MAX) {\n      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n    }\n\n    highp vec4 c = vec4(0,0,0,0);\n\n    highp float e = floor(log2(av));\n    highp float m = exp2(fract(log2(av))) - 1.0;\n\n    c[2] = floor(128.0 * m);\n    m -= c[2] / 128.0;\n    c[1] = floor(32768.0 * m);\n    m -= c[1] / 32768.0;\n    c[0] = floor(8388608.0 * m);\n\n    highp float ebias = e + 127.0;\n    c[3] = floor(ebias / 2.0);\n    ebias -= c[3] * 2.0;\n    c[2] += floor(ebias) * 128.0;\n\n    c[3] += 128.0 * step(0.0, -v);\n\n    return c / 255.0;\n  }\n",{getBroadcastDims:Uv}=We;function rV(n,t,e){const s=[];if(n.forEach(p=>{const f=G(p.shapeInfo.logicalShape);if(p.shapeInfo.isUniform?s.push(`uniform float ${p.name}${f>1?`[${f}]`:""};`):(s.push(`uniform sampler2D ${p.name};`),s.push(`uniform int offset${p.name};`)),e.enableShapeUniforms){const{uniformShape:g}=tg(e.packedInputs,p.shapeInfo.logicalShape,p.shapeInfo.texShape);switch(g.length){case 1:s.push(`uniform int ${p.name}Shape;`);break;case 2:s.push(`uniform ivec2 ${p.name}Shape;`);break;case 3:s.push(`uniform ivec3 ${p.name}Shape;`);break;case 4:s.push(`uniform ivec4 ${p.name}Shape;`)}s.push(`uniform ivec2 ${p.name}TexShape;`)}}),e.enableShapeUniforms){switch(t.logicalShape.length){case 1:s.push("uniform int outShape;");break;case 2:s.push("uniform ivec2 outShape;"),s.push("uniform int outShapeStrides;");break;case 3:s.push("uniform ivec3 outShape;"),s.push("uniform ivec2 outShapeStrides;");break;case 4:s.push("uniform ivec4 outShape;"),s.push("uniform ivec3 outShapeStrides;")}s.push("uniform ivec2 outTexShape;")}e.customUniforms&&e.customUniforms.forEach(p=>{s.push(`uniform ${p.type} ${p.name}${p.arrayIndex?`[${p.arrayIndex}]`:""};`)});const r=s.join("\n"),o=n.map(p=>function oV(n,t,e=!1,s){let r="";r+=e?Gv(n,s):ca(n,s);return n.shapeInfo.logicalShape.length<=t.logicalShape.length&&(r+=e?function zV(n,t){const e=n.name,s=e.charAt(0).toUpperCase()+e.slice(1),r="get"+s+"AtOutCoords",o=n.shapeInfo.logicalShape.length,a=t.logicalShape.length,i=Uv(n.shapeInfo.logicalShape,t.logicalShape),l=ct(a),u=a-o;let c;const h=["x","y","z","w","u","v"];c=0===o?"":a<2&&i.length>=1?"coords = 0;":i.map(x=>`coords.${h[x+u]} = 0;`).join("\n");let d="";d=a<2&&o>0?"coords":n.shapeInfo.logicalShape.map((x,b)=>`coords.${h[b+u]}`).join(", ");let p="return outputValue;";const g=1===G(n.shapeInfo.logicalShape),y=1===G(t.logicalShape);if(1!==o||g||y){if(g&&!y)p=1===a?"\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\n      ":"\n        return vec4(outputValue.x);\n      ";else if(i.length){const x=o-2,b=o-1;i.indexOf(x)>-1&&i.indexOf(b)>-1?p="return vec4(outputValue.x);":i.indexOf(x)>-1?p="return vec4(outputValue.x, outputValue.y, outputValue.x, outputValue.y);":i.indexOf(b)>-1&&(p="return vec4(outputValue.xx, outputValue.zz);")}}else p="\n      return vec4(outputValue.xy, outputValue.xy);\n    ";return`\n    vec4 ${r}() {\n      ${l} coords = getOutputCoords();\n      ${c}\n      vec4 outputValue = get${s}(${d});\n      ${p}\n    }\n  `}(n,t):function MV(n,t){const e=n.name,s=e.charAt(0).toUpperCase()+e.slice(1),r="get"+s+"AtOutCoords",i=n.shapeInfo.logicalShape.length,l=t.logicalShape.length;if(!n.shapeInfo.isUniform&&i===l&&null==n.shapeInfo.flatOffset&&Xe(n.shapeInfo.texShape,t.texShape))return`\n      float ${r}() {\n        return sampleTexture(${e}, resultUV);\n      }\n    `;const u=ct(l),c=Uv(n.shapeInfo.logicalShape,t.logicalShape),h=l-i;let d;const p=["x","y","z","w","u","v"];d=0===i?"":l<2&&c.length>=1?"coords = 0;":c.map(g=>`coords.${p[g+h]} = 0;`).join("\n");let f="";return f=l<2&&i>0?"coords":n.shapeInfo.logicalShape.map((g,m)=>`coords.${p[m+h]}`).join(", "),`\n    float ${r}() {\n      ${u} coords = getOutputCoords();\n      ${d}\n      return get${s}(${f});\n    }\n  `}(n,t)),r}(p,t,e.packedInputs,e.enableShapeUniforms)).join("\n"),a=t.texShape,i=Nn(),l=function lV(n){return`\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\n      return ${n.texture2D}(textureSampler, uv).r;\n    }\n  `}(i);let u,c,h=function hV(n){return`${n.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${n.varyingFs} vec2 resultUV;\n    ${n.defineOutput}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    uniform float NAN;\n    ${n.defineSpecialNaN}\n    ${n.defineSpecialInf}\n    ${n.defineRound}\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    int idiv(int a, int b, float sign) {\n      int res = a / b;\n      int mod = imod(a, b);\n      if (sign < 0. && mod != 0) {\n        res -= 1;\n      }\n      return res;\n    }\n\n    //Based on the work of Dave Hoskins\n    //https://www.shadertoy.com/view/4djSRW\n    #define HASHSCALE1 443.8975\n    float random(float seed){\n      vec2 p = resultUV * seed;\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n      p3 += dot(p3, p3.yzx + 19.19);\n      return fract((p3.x + p3.y) * p3.z);\n    }\n\n    ${dV}\n    ${pV}\n    ${fV}\n  `}(i);return t.isPacked?(u=function aV(n,t,e){switch(n.length){case 0:return"\n    int getOutputCoords() {\n      return 0;\n    }\n  ";case 1:return function gV(n,t,e){const s=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)];return 1===s[0]?e?"\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ceil(float(outTexShape[1]) / 2.0));\n      }\n    ":`\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ${s[1]}.0);\n      }\n    `:1===s[1]?e?"\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ceil(float(outTexShape[0]) / 2.0));\n      }\n    ":`\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ${s[0]}.0);\n      }\n    `:e?"\n    int getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      return 2 * (resTexRC.x * packedTexShape[1] + resTexRC.y);\n    }\n  ":`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${s[0]}, ${s[1]}));\n      return 2 * (resTexRC.x * ${s[1]} + resTexRC.y);\n    }\n  `}(0,t,e);case 2:return function NV(n,t,e){const s=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)];if(Xe(n,t))return e?"\n      ivec2 getOutputCoords() {\n        ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n        return 2 * ivec2(resultUV.yx * vec2(packedTexShape[0], packedTexShape[1]));\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        return 2 * ivec2(resultUV.yx * vec2(${s[0]}, ${s[1]}));\n      }\n    `;const r=Math.ceil(n[1]/2);return e?"\n    ivec2 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      int texelsInLogicalRow = int(ceil(float(outShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec2(r, c);\n    }\n  ":`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${s[0]}, ${s[1]}));\n\n      int index = resTexRC.x * ${s[1]} + resTexRC.y;\n      int r = 2 * (index / ${r});\n      int c = imod(index, ${r}) * 2;\n\n      return ivec2(r, c);\n    }\n  `}(n,t,e);case 3:return function xV(n,t,e){if(e)return"\n    ivec3 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      int texelsInLogicalRow = int(ceil(float(outShape[2]) / 2.0));\n      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n\n      int b = index / texelsInBatch;\n      index -= b * texelsInBatch;\n\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec3(b, r, c);\n    }\n  ";const s=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)],r=Math.ceil(n[2]/2),o=r*Math.ceil(n[1]/2);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${s[0]}, ${s[1]}));\n      int index = resTexRC.x * ${s[1]} + resTexRC.y;\n\n      int b = index / ${o};\n      index -= b * ${o};\n\n      int r = 2 * (index / ${r});\n      int c = imod(index, ${r}) * 2;\n\n      return ivec3(b, r, c);\n    }\n  `}(n,t,e);default:return function wV(n,t,e){if(e)return"\n    ivec4 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n\n      int texelsInLogicalRow = int(ceil(float(outShape[3]) / 2.0));\n      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[2]) / 2.0));\n      int texelsInBatchN = texelsInBatch * outShape[1];\n\n      int b2 = index / texelsInBatchN;\n      index -= b2 * texelsInBatchN;\n\n      int b = index / texelsInBatch;\n      index -= b * texelsInBatch;\n\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec4(b2, b, r, c);\n    }\n  ";const s=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)],r=Math.ceil(n[n.length-1]/2),o=r*Math.ceil(n[n.length-2]/2);let a=o,i="",l="b, r, c";for(let u=2;u<n.length-1;u++)a*=n[n.length-u-1],i=`\n      int b${u} = index / ${a};\n      index -= b${u} * ${a};\n    `+i,l=`b${u}, `+l;return`\n    ivec${n.length} getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${s[0]}, ${s[1]}));\n      int index = resTexRC.x * ${s[1]} + resTexRC.y;\n\n      ${i}\n\n      int b = index / ${o};\n      index -= b * ${o};\n\n      int r = 2 * (index / ${r});\n      int c = imod(index, ${r}) * 2;\n\n      return ivec${n.length}(${l});\n    }\n  `}(n,t,e)}}(t.logicalShape,a,e.enableShapeUniforms),c=function cV(n){return`\n    void setOutput(vec4 val) {\n      ${n.output} = val;\n    }\n  `}(i)):(u=function iV(n,t,e){switch(n.length){case 0:return"\n    int getOutputCoords() {\n      return 0;\n    }\n  ";case 1:return function yV(n,t,e){return 1===t[0]?e?"\n      int getOutputCoords() {\n        return int(resultUV.x * float(outTexShape[1]));\n      }\n    ":`\n      int getOutputCoords() {\n        return int(resultUV.x * ${t[1]}.0);\n      }\n    `:1===t[1]?e?"\n      int getOutputCoords() {\n        return int(resultUV.y * float(outTexShape[0]));\n      }\n    ":`\n      int getOutputCoords() {\n        return int(resultUV.y * ${t[0]}.0);\n      }\n    `:e?"\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(outTexShape[0], outTexShape[1]));\n      return resTexRC.x * outTexShape[1] + resTexRC.y;\n    }\n  ":`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      return resTexRC.x * ${t[1]} + resTexRC.y;\n    }\n  `}(0,t,e);case 2:return function CV(n,t,e){return Xe(n,t)?e?"\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(outTexShape[0], outTexShape[1]));\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(${t[0]}, ${t[1]}));\n      }\n    `:1===n[1]?e?"\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(outTexShape[0], outTexShape[1]));\n        int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${t[0]}, ${t[1]}));\n        int index = resTexRC.x * ${t[1]} + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    `:1===n[0]?e?"\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(outTexShape[0], outTexShape[1]));\n        int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n        return ivec2(0, index);\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${t[0]}, ${t[1]}));\n        int index = resTexRC.x * ${t[1]} + resTexRC.y;\n        return ivec2(0, index);\n      }\n    `:e?"\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(outTexShape[0], outTexShape[1]));\n      int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n      int r = index / outShape[1];\n      int c = index - r * outShape[1];\n      return ivec2(r, c);\n    }\n  ":`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      int r = index / ${n[1]};\n      int c = index - r * ${n[1]};\n      return ivec2(r, c);\n    }\n  `}(n,t,e);case 3:return function bV(n,t,e){if(e)return`\n  ivec3 getOutputCoords() {\n    ivec2 resTexRC = ivec2(resultUV.yx *\n                           vec2(outTexShape[0], outTexShape[1]));\n    int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n    ${qc(["r","c","d"],n)}\n    return ivec3(r, c, d);\n  }\n`;const s=xo(["r","c","d"],n);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      ${s}\n      return ivec3(r, c, d);\n    }\n  `}(n,t,e);case 4:return function vV(n,t,e){if(e)return`\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(outTexShape[0], outTexShape[1]));\n      int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n      ${qc(["r","c","d","d2"],n)}\n      return ivec4(r, c, d, d2);\n    }\n  `;const s=xo(["r","c","d","d2"],n);return`\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      ${s}\n      return ivec4(r, c, d, d2);\n    }\n  `}(n,t,e);case 5:return function SV(n,t){const e=xo(["r","c","d","d2","d3"],n);return`\n    ivec5 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${t[0]},\n                             ${t[1]}));\n\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n\n      ${e}\n\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\n      return outShape;\n    }\n  `}(n,t);case 6:return function IV(n,t){const e=xo(["r","c","d","d2","d3","d4"],n);return`\n    ivec6 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n\n      ${e}\n\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\n      return result;\n    }\n  `}(n,t);default:throw new Error(`${n.length}-D output sampling is not yet supported`)}}(t.logicalShape,a,e.enableShapeUniforms),c=function uV(n){return`\n    void setOutput(float val) {\n      ${n.output} = vec4(val, 0, 0, 0);\n    }\n  `}(i)),e.packedInputs&&(h+=mV),[h,l,c,r,u,o,e.userCode].join("\n")}function ca(n,t=!1){const e=n.shapeInfo.logicalShape;switch(e.length){case 0:return function TV(n,t){const e=n.name,s="get"+e.charAt(0).toUpperCase()+e.slice(1);if(n.shapeInfo.isUniform)return`float ${s}() {return ${e};}`;const[r,o]=n.shapeInfo.texShape;if(1===r&&1===o)return`\n      float ${s}() {\n        return sampleTexture(${e}, halfCR);\n      }\n    `;const a=bo(e);if(t)return`\n    float ${s}() {\n      vec2 uv = uvFromFlat(${e}TexShape[0], ${e}TexShape[1], ${a});\n      return sampleTexture(${e}, uv);\n    }\n  `;const[i,l]=n.shapeInfo.texShape;return`\n    float ${s}() {\n      vec2 uv = uvFromFlat(${i}, ${l}, ${a});\n      return sampleTexture(${e}, uv);\n    }\n  `}(n,t);case 1:return function _V(n,t){const e=n.name,s="get"+e.charAt(0).toUpperCase()+e.slice(1);if(n.shapeInfo.isUniform)return`\n      float ${s}(int index) {\n        ${ha(n)}\n      }\n    `;const r=n.shapeInfo.texShape,o=r[0],a=r[1];if(1===a&&1===o)return`\n      float ${s}(int index) {\n        return sampleTexture(${e}, halfCR);\n      }\n    `;const i=bo(e);return 1===a?t?`\n      float ${s}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${i}) + 0.5) / float(${e}TexShape[0]));\n        return sampleTexture(${e}, uv);\n      }\n    `:`\n      float ${s}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${i}) + 0.5) / ${o}.0);\n        return sampleTexture(${e}, uv);\n      }\n    `:1===o?t?`\n      float ${s}(int index) {\n        vec2 uv = vec2((float(index + ${i}) + 0.5) / float(${e}TexShape[1]), 0.5);\n        return sampleTexture(${e}, uv);\n      }\n    `:`\n      float ${s}(int index) {\n        vec2 uv = vec2((float(index + ${i}) + 0.5) / ${a}.0, 0.5);\n        return sampleTexture(${e}, uv);\n      }\n    `:t?`\n    float ${s}(int index) {\n      vec2 uv = uvFromFlat(${e}TexShape[0], ${e}TexShape[1], index + ${i});\n      return sampleTexture(${e}, uv);\n    }\n  `:`\n    float ${s}(int index) {\n      vec2 uv = uvFromFlat(${o}, ${a}, index + ${i});\n      return sampleTexture(${e}, uv);\n    }\n  `}(n,t);case 2:return function AV(n,t){const e=n.shapeInfo.logicalShape,s=n.name,r="get"+s.charAt(0).toUpperCase()+s.slice(1),o=n.shapeInfo.texShape;if(null!=o&&Xe(e,o))return t?`\n      float ${r}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${s}TexShape[1], ${s}TexShape[0]);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n    float ${r}(int row, int col) {\n      vec2 uv = (vec2(col, row) + halfCR) / vec2(${o[1]}.0, ${o[0]}.0);\n      return sampleTexture(${s}, uv);\n    }\n  `;const{newShape:a,keptDims:i}=lr(e);if(a.length<e.length){const p=["row","col"];return`\n      ${ca(da(n,a),t)}\n      float ${r}(int row, int col) {\n        return ${r}(${pa(p,i)});\n      }\n    `}if(n.shapeInfo.isUniform)return`\n      float ${r}(int row, int col) {\n        int index = round(dot(vec2(row, col), vec2(${e[1]}, 1)));\n        ${ha(n)}\n      }\n    `;const u=o[0],c=o[1],h=bo(s);return 1===c?t?`\n      float ${r}(int row, int col) {\n        float index = dot(vec3(row, col, ${h}), vec3(${s}Shape[1], 1, 1));\n        vec2 uv = vec2(0.5, (index + 0.5) / float(${s}TexShape[0]));\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n    float ${r}(int row, int col) {\n      float index = dot(vec3(row, col, ${h}), vec3(${e[1]}, 1, 1));\n      vec2 uv = vec2(0.5, (index + 0.5) / ${u}.0);\n      return sampleTexture(${s}, uv);\n    }\n  `:1===u?t?`\n      float ${r}(int row, int col) {\n        float index = dot(vec3(row, col, ${h}), vec3(${s}Shape[1], 1, 1));\n        vec2 uv = vec2((index + 0.5) / float(${s}TexShape[1]), 0.5);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n    float ${r}(int row, int col) {\n      float index = dot(vec3(row, col, ${h}), vec3(${e[1]}, 1, 1));\n      vec2 uv = vec2((index + 0.5) / ${c}.0, 0.5);\n      return sampleTexture(${s}, uv);\n    }\n  `:t?`\n      float ${r}(int row, int col) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${s}Shape[1] + col + ${h};\n        vec2 uv = uvFromFlat(${s}TexShape[0], ${s}TexShape[1], index);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n  float ${r}(int row, int col) {\n    // Explicitly use integer operations as dot() only works on floats.\n    int index = row * ${e[1]} + col + ${h};\n    vec2 uv = uvFromFlat(${u}, ${c}, index);\n    return sampleTexture(${s}, uv);\n  }\n`}(n,t);case 3:return function DV(n,t){const e=n.shapeInfo.logicalShape,s=n.name,r="get"+s.charAt(0).toUpperCase()+s.slice(1),o=e[1]*e[2],a=e[2],{newShape:i,keptDims:l}=lr(e);if(i.length<e.length){const m=["row","col","depth"];return`\n        ${ca(da(n,i),t)}\n        float ${r}(int row, int col, int depth) {\n          return ${r}(${pa(m,l)});\n        }\n      `}if(n.shapeInfo.isUniform)return`\n      float ${r}(int row, int col, int depth) {\n        int index = round(dot(vec3(row, col, depth),\n                          vec3(${o}, ${a}, 1)));\n        ${ha(n)}\n      }\n    `;const c=n.shapeInfo.texShape,h=c[0],d=c[1],p=n.shapeInfo.flatOffset;if(d===o&&null==p)return t?`\n      float ${r}(int row, int col, int depth) {\n        int stride1 = ${s}Shape[2];\n        float texR = float(row);\n        float texC = dot(vec2(col, depth), vec2(stride1, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${s}TexShape[1], ${s}TexShape[0]);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n        float ${r}(int row, int col, int depth) {\n          float texR = float(row);\n          float texC = dot(vec2(col, depth), vec2(${a}, 1));\n          vec2 uv = (vec2(texC, texR) + halfCR) /\n                     vec2(${d}.0, ${h}.0);\n          return sampleTexture(${s}, uv);\n        }\n      `;if(d===a&&null==p)return t?`\n      float ${r}(int row, int col, int depth) {\n        float texR = dot(vec2(row, col), vec2(${s}Shape[1], 1));\n        float texC = float(depth);\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${s}TexShape[1], ${s}TexShape[0]);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n    float ${r}(int row, int col, int depth) {\n      float texR = dot(vec2(row, col), vec2(${e[1]}, 1));\n      float texC = float(depth);\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${d}.0, ${h}.0);\n      return sampleTexture(${s}, uv);\n    }\n  `;const f=bo(s);return t?`\n    float ${r}(int row, int col, int depth) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int stride0 = ${s}Shape[1] * ${s}Shape[2];\n      int stride1 = ${s}Shape[2];\n      int index = row * stride0 + col * stride1 + depth + ${f};\n      vec2 uv = uvFromFlat(${s}TexShape[0], ${s}TexShape[1], index);\n      return sampleTexture(${s}, uv);\n    }\n    `:`\n      float ${r}(int row, int col, int depth) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${o} + col * ${a} + depth + ${f};\n        vec2 uv = uvFromFlat(${h}, ${d}, index);\n        return sampleTexture(${s}, uv);\n      }\n  `}(n,t);case 4:return function OV(n,t){const e=n.shapeInfo.logicalShape,s=n.name,r="get"+s.charAt(0).toUpperCase()+s.slice(1),o=e[3],a=e[2]*o,i=e[1]*a,{newShape:l,keptDims:u}=lr(e);if(l.length<e.length){const b=["row","col","depth","depth2"];return`\n      ${ca(da(n,l),t)}\n      float ${r}(int row, int col, int depth, int depth2) {\n        return ${r}(${pa(b,u)});\n      }\n    `}if(n.shapeInfo.isUniform)return`\n      float ${r}(int row, int col, int depth, int depth2) {\n        int index = round(dot(vec4(row, col, depth, depth2),\n                          vec4(${i}, ${a}, ${o}, 1)));\n        ${ha(n)}\n      }\n    `;const c=n.shapeInfo.flatOffset,h=n.shapeInfo.texShape,d=h[0],p=h[1],f=`int stride2 = ${s}Shape[3];`,g=`int stride1 = ${s}Shape[2] * stride2;`,m=`int stride0 = ${s}Shape[1] * stride1;`;if(p===i&&null==c)return t?`\n      float ${r}(int row, int col, int depth, int depth2) {\n        ${f}\n        ${g}\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(stride1, stride2, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${s}TexShape[1], ${s}TexShape[0]);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n      float ${r}(int row, int col, int depth, int depth2) {\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(${a}, ${o}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${p}.0, ${d}.0);\n        return sampleTexture(${s}, uv);\n      }\n    `;if(p===o&&null==c)return t?`\n      float ${r}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${s}Shape[1] * ${s}Shape[2], ${s}Shape[2], 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${s}TexShape[1], ${s}TexShape[0]);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n      float ${r}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${e[1]*e[2]}, ${e[2]}, 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${p}.0, ${d}.0);\n        return sampleTexture(${s}, uv);\n      }\n    `;const y=bo(s);return t?`\n    float ${r}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      ${f}\n      ${g}\n      ${m}\n      int index = row * stride0 + col * stride1 +\n          depth * stride2 + depth2;\n      vec2 uv = uvFromFlat(${s}TexShape[0], ${s}TexShape[1], index + ${y});\n      return sampleTexture(${s}, uv);\n    }\n  `:`\n    float ${r}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${i} + col * ${a} +\n          depth * ${o} + depth2;\n      vec2 uv = uvFromFlat(${d}, ${p}, index + ${y});\n      return sampleTexture(${s}, uv);\n    }\n  `}(n,t);case 5:return function LV(n){const t=n.shapeInfo.logicalShape,e=n.name,s="get"+e.charAt(0).toUpperCase()+e.slice(1),r=t[4],o=t[3]*r,a=t[2]*o,i=t[1]*a,{newShape:l,keptDims:u}=lr(t);if(l.length<t.length){const m=["row","col","depth","depth2","depth3"];return`\n      ${ca(da(n,l))}\n      float ${s}(int row, int col, int depth, int depth2, int depth3) {\n        return ${s}(${pa(m,u)});\n      }\n    `}if(n.shapeInfo.isUniform)return`\n      float ${s}(int row, int col, int depth, int depth2, int depth3) {\n        float index = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${i}, ${a}, ${o}, ${r})) +\n          depth3;\n        ${ha(n)}\n      }\n    `;const c=n.shapeInfo.flatOffset,h=n.shapeInfo.texShape,d=h[0],p=h[1];if(p===i&&null==c)return`\n      float ${s}(int row, int col, int depth, int depth2, int depth3) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n                         vec4(${a}, ${o}, ${r}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${p}.0, ${d}.0);\n        return sampleTexture(${e}, uv);\n      }\n    `;if(p===r&&null==c)return`\n      float ${s}(int row, int col, int depth, int depth2, int depth3) {\n        float texR = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${t[1]*t[2]*t[3]},\n               ${t[2]*t[3]}, ${t[3]}, 1));\n        int texC = depth3;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${p}.0, ${d}.0);\n        return sampleTexture(${e}, uv);\n      }\n    `;return`\n    float ${s}(int row, int col, int depth, int depth2, int depth3) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${i} + col * ${a} + depth * ${o} +\n          depth2 * ${r} + depth3 + ${bo(e)};\n      vec2 uv = uvFromFlat(${d}, ${p}, index);\n      return sampleTexture(${e}, uv);\n    }\n  `}(n);case 6:return function PV(n){const t=n.shapeInfo.logicalShape,e=n.name,s="get"+e.charAt(0).toUpperCase()+e.slice(1),{newShape:r,keptDims:o}=lr(t);if(r.length<t.length){const y=["row","col","depth","depth2","depth3","depth4"];return`\n      ${ca(da(n,r))}\n      float ${s}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        return ${s}(${pa(y,o)});\n      }\n    `}const a=t[5],i=t[4]*a,l=t[3]*i,u=t[2]*l,c=t[1]*u;if(n.shapeInfo.isUniform)return`\n      float ${s}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n        int index = round(dot(\n          vec4(row, col, depth, depth2),\n          vec4(${c}, ${u}, ${l}, ${i})) +\n          dot(\n            vec2(depth3, depth4),\n            vec2(${a}, 1)));\n        ${ha(n)}\n      }\n    `;const h=n.shapeInfo.flatOffset,d=n.shapeInfo.texShape,p=d[0],f=d[1];if(f===c&&null==h)return`\n      float ${s}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n          vec4(${u}, ${l}, ${i}, ${a})) +\n               float(depth4);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${f}.0, ${p}.0);\n        return sampleTexture(${e}, uv);\n      }\n    `;if(f===a&&null==h)return`\n      float ${s}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        float texR = dot(vec4(row, col, depth, depth2),\n          vec4(${t[1]*t[2]*t[3]*t[4]},\n               ${t[2]*t[3]*t[4]},\n               ${t[3]*t[4]},\n               ${t[4]})) + float(depth3);\n        int texC = depth4;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${f}.0, ${p}.0);\n        return sampleTexture(${e}, uv);\n      }\n    `;return`\n    float ${s}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${c} + col * ${u} + depth * ${l} +\n          depth2 * ${i} + depth3 * ${a} + depth4 + ${bo(e)};\n      vec2 uv = uvFromFlat(${p}, ${f}, index);\n      return sampleTexture(${e}, uv);\n    }\n  `}(n);default:throw new Error(`${e.length}-D input sampling is not yet supported`)}}function Gv(n,t){switch(n.shapeInfo.logicalShape.length){case 0:return function kV(n){const t=n.name;return`\n    vec4 ${"get"+t.charAt(0).toUpperCase()+t.slice(1)}() {\n      return ${Nn().texture2D}(${t}, halfCR);\n    }\n  `}(n);case 1:return function $V(n,t){const e=n.name,s="get"+e.charAt(0).toUpperCase()+e.slice(1),r=n.shapeInfo.texShape,o=Nn();if(t)return`\n    vec4 ${s}(int index) {\n      ivec2 packedTexShape = ivec2(ceil(float(${e}TexShape[0]) / 2.0), ceil(float(${e}TexShape[1]) / 2.0));\n      vec2 uv = packedUVfrom1D(\n        packedTexShape[0], packedTexShape[1], index);\n      return ${o.texture2D}(${e}, uv);\n    }\n  `;const a=[Math.ceil(r[0]/2),Math.ceil(r[1]/2)];return`\n    vec4 ${s}(int index) {\n      vec2 uv = packedUVfrom1D(\n        ${a[0]}, ${a[1]}, index);\n      return ${o.texture2D}(${e}, uv);\n    }\n  `}(n,t);case 2:return function EV(n,t){const e=n.shapeInfo.logicalShape,s=n.name,r="get"+s.charAt(0).toUpperCase()+s.slice(1),o=n.shapeInfo.texShape,a=o[0],i=o[1],l=Nn();if(null!=o&&Xe(e,o))return t?`\n      vec4 ${r}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${s}TexShape[1], ${s}TexShape[0]);\n\n        return ${l.texture2D}(${s}, uv);\n      }\n    `:`\n      vec4 ${r}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${i}.0, ${a}.0);\n\n        return ${l.texture2D}(${s}, uv);\n      }\n    `;if(t)return`\n    vec4 ${r}(int row, int col) {\n      ivec2 packedTexShape = ivec2(ceil(float(${s}TexShape[0]) / 2.0), ceil(float(${s}TexShape[1]) / 2.0));\n      int valuesPerRow = int(ceil(float(${s}Shape[1]) / 2.0));\n      vec2 uv = packedUVfrom2D(valuesPerRow, packedTexShape[0], packedTexShape[1], row, col);\n      return ${l.texture2D}(${s}, uv);\n    }\n  `;const u=[Math.ceil(o[0]/2),Math.ceil(o[1]/2)];return`\n    vec4 ${r}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${Math.ceil(e[1]/2)}, ${u[0]}, ${u[1]}, row, col);\n      return ${l.texture2D}(${s}, uv);\n    }\n  `}(n,t);case 3:return function RV(n,t){const e=n.shapeInfo.logicalShape,s=n.name,r="get"+s.charAt(0).toUpperCase()+s.slice(1),o=n.shapeInfo.texShape,a=[Math.ceil(o[0]/2),Math.ceil(o[1]/2)];if(1===e[0]){const p=[1,2],g=["b","row","col"];return`\n        ${Gv(da(n,e.slice(1)),t)}\n        vec4 ${r}(int b, int row, int col) {\n          return ${r}(${pa(g,p)});\n        }\n      `}const i=Nn();if(t)return`\n    vec4 ${r}(int b, int row, int col) {\n      ivec2 packedTexShape = ivec2(ceil(float(${s}TexShape[0]) / 2.0), ceil(float(${s}TexShape[1]) / 2.0));\n      int valuesPerRow = int(ceil(float(${s}Shape[2]) / 2.0));\n      int texelsInBatch = valuesPerRow * int(ceil(float(${s}Shape[1]) / 2.0));\n      vec2 uv = packedUVfrom3D(\n        packedTexShape[0], packedTexShape[1], texelsInBatch, valuesPerRow, b, row, col);\n      return ${i.texture2D}(${s}, uv);\n    }\n  `;const l=a[0],u=a[1],c=Math.ceil(e[2]/2);return`\n    vec4 ${r}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${l}, ${u}, ${c*Math.ceil(e[1]/2)}, ${c}, b, row, col);\n      return ${i.texture2D}(${s}, uv);\n    }\n  `}(n,t);default:return function FV(n,t){const e=n.name,s="get"+e.charAt(0).toUpperCase()+e.slice(1),r=Nn();if(t)return`\n    vec4 ${s}(int b2, int b, int row, int col) {\n      int valuesPerRow = int(ceil(float(${e}Shape[3]) / 2.0));\n      int texelsInBatch = valuesPerRow * int(ceil(float(${e}Shape[2]) / 2.0));\n      int index = b * texelsInBatch + (row / 2) * valuesPerRow + (col / 2);\n      texelsInBatch *= ${e}Shape[1];\n      index = b2 * texelsInBatch + index;\n      ivec2 packedTexShape = ivec2(ceil(float(${e}TexShape[0]) / 2.0), ceil(float(${e}TexShape[1]) / 2.0));\n      int texR = index / packedTexShape[1];\n      int texC = index - texR * packedTexShape[1];\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(packedTexShape[1], packedTexShape[0]); return ${r.texture2D}(${e}, uv);\n    }\n  `;const o=n.shapeInfo.logicalShape,a=o.length,i=n.shapeInfo.texShape,l=[Math.ceil(i[0]/2),Math.ceil(i[1]/2)],u=l[0],c=l[1],h=Math.ceil(o[a-1]/2);let d=h*Math.ceil(o[a-2]/2),p="int b, int row, int col",f=`b * ${d} + (row / 2) * ${h} + (col / 2)`;for(let g=2;g<a-1;g++)p=`int b${g}, `+p,d*=o[a-g-1],f=`b${g} * ${d} + `+f;return`\n    vec4 ${s}(${p}) {\n      int index = ${f};\n      int texR = index / ${c};\n      int texC = index - texR * ${c};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${c}, ${u});\n      return ${r.texture2D}(${e}, uv);\n    }\n  `}(n,t)}}const dV="\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n  int texelIndex = index / 2;\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",pV="\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\n  int texNumC, int row, int col) {\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",fV="\nvec2 packedUVfrom3D(int texNumR, int texNumC,\n    int texelsInBatch, int texelsInLogicalRow, int b,\n    int row, int col) {\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",mV="\n  float getChannel(vec4 frag, vec2 innerDims) {\n    vec2 modCoord = mod(innerDims, 2.);\n    return modCoord.x == 0. ?\n      (modCoord.y == 0. ? frag.r : frag.g) :\n      (modCoord.y == 0. ? frag.b : frag.a);\n  }\n  float getChannel(vec4 frag, int dim) {\n    float modCoord = mod(float(dim), 2.);\n    return modCoord == 0. ? frag.r : frag.g;\n  }\n";function bo(n){return`offset${n}`}function ha(n){const t=n.name,e=G(n.shapeInfo.logicalShape);return e<2?`return ${t};`:`\n    for (int i = 0; i < ${e}; i++) {\n      if (i == index) {\n        return ${t}[i];\n      }\n    }\n  `}function ct(n){if(n<=1)return"int";if(2===n)return"ivec2";if(3===n)return"ivec3";if(4===n)return"ivec4";if(5===n)return"ivec5";if(6===n)return"ivec6";throw Error(`GPU for rank ${n} is not yet supported`)}function tg(n,t,e){const{newShape:s,keptDims:r}=lr(t),o=t.length,a=n&&3===o&&1===t[0],i=a?t.slice(1):s,l=!n&&o>1&&!Xe(t,e)&&s.length<o||a;return{useSqueezeShape:l,uniformShape:l?i:t,keptDims:r}}function da(n,t){const e=JSON.parse(JSON.stringify(n));return e.shapeInfo.logicalShape=t,e}function pa(n,t){return t.map(e=>n[e]).join(", ")}function jv(n,t,e){const s=[],r=[];let o,a,i,l=null,u=null;u=n.getUniformLocation(e,"NAN",!1),1===z().getNumber("WEBGL_VERSION")&&(l=n.getUniformLocation(e,"INFINITY",!1));const c=!1;for(const h of t.variableNames){const d={name:h,uniform:n.getUniformLocation(e,h,c),offset:n.getUniformLocation(e,`offset${h}`,c)};t.enableShapeUniforms&&(d.shape=n.getUniformLocation(e,`${h}Shape`,c),d.texShape=n.getUniformLocation(e,`${h}TexShape`,c)),s.push(d)}if(t.enableShapeUniforms&&(o=n.getUniformLocation(e,"outShape",c),i=n.getUniformLocation(e,"outShapeStrides",c),a=n.getUniformLocation(e,"outTexShape",c)),t.customUniforms)for(const h of t.customUniforms)r.push(n.getUniformLocation(e,h.name,c));return{variablesLocations:s,customUniformLocations:r,infLoc:l,nanLoc:u,outShapeLocation:o,outShapeStridesLocation:i,outTexShapeLocation:a}}function Kv(n,t){if(n.length!==t.length)throw Error(`Binary was compiled with ${n.length} inputs, but was executed with ${t.length} inputs`);n.forEach((e,s)=>{const r=e.logicalShape,o=t[s],a=o.shape;if(!Xe(r,a))throw Error(`Binary was compiled with different shapes than the current args. Shapes ${r} and ${a} must match`);if(e.isUniform&&o.isUniform)return;const i=e.texShape,l=o.isUniform?null:o.texData.texShape;if(!Xe(i,l))throw Error(`Binary was compiled with different texture shapes than the current args. Shape ${i} and ${l} must match`)})}function yn(n){return z().getBool("WEBGL_USE_SHAPES_UNIFORMS")&&n<=4}class UV{constructor(t){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outPackingScheme=Mc.DENSE,this.customUniforms=[{name:"texShape",type:"ivec2"}];const e=Nn();this.outputShape=t,this.enableShapeUniforms=yn(this.outputShape.length),this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${this.enableShapeUniforms?qc(["r","c","d"],t):xo(["r","c","d"],t)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));\n        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getA(rc.x, rc.y, rc.z);\n        }\n\n        ${e.output} = result;\n      }\n    `}}class GV{constructor(t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outPackingScheme=Mc.DENSE,this.customUniforms=[{name:"texShape",type:"ivec2"}];const e=Nn();this.outputShape=t,this.enableShapeUniforms=yn(this.outputShape.length),this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${this.enableShapeUniforms?qc(["r","c","d"],t):xo(["r","c","d"],t)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));\n        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));\n        }\n\n        ${e.output} = result;\n      }\n    `}}class HV{constructor(t){this.variableNames=["A"],this.outTexUsage=fs.DOWNLOAD;const e=Nn();this.outputShape=t,this.userCode=`\n      ${Wv}\n\n      void main() {\n        float x = getAAtOutCoords();\n        ${e.output} = encode_float(x);\n      }\n    `}}class jV{constructor(t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outTexUsage=fs.DOWNLOAD;const e=Nn();this.outputShape=t,this.userCode=`\n      ${Wv}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));\n        ${e.output} = encode_float(x);\n      }\n    `}}const KV={R:0,G:1,B:2,A:3};class qv{constructor(t,e=!1,s="RGBA"){this.variableNames=["A"],this.customUniforms=[{name:"texShape",type:"ivec2"}];const r=Nn();this.outputShape=t,this.enableShapeUniforms=yn(this.outputShape.length);let o="result";e&&(o="floor(result * 255. + 0.5)");let a="";for(let i=0;i<s.length;i++)a+=`\n          if(offset == ${i}) {\n            result = values[${KV[s[i]]}];\n          }`;this.userCode=`\n      ${this.enableShapeUniforms?"\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\n  }\n":Jm(t)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int flatIndex = getFlatIndex(coords);\n        float result = 0.;\n        int offset = imod(flatIndex, ${s.length});\n\n        flatIndex = idiv(flatIndex, ${s.length}, 1.);\n\n        int r = flatIndex / texShape[1];\n        if (r < texShape[0]) {\n          int c = imod(flatIndex, texShape[1]);\n          vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);\n          vec4 values = ${r.texture2D}(A, uv);\n          ${a}\n        }\n        ${r.output} = vec4(${o}, 0., 0., 0.);\n      }\n    `}}class qV{constructor(t,e=!1){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.customUniforms=[{name:"texShape",type:"ivec2"}];const s=Nn();this.outputShape=t,this.enableShapeUniforms=yn(this.outputShape.length);let r="",o="result";e&&(o="floor(result * 255. + 0.5)");for(let a=0;a<=1;a++)for(let i=0;i<=1;i++){const l=2*a+i;r+=`\n          localCoords = coords;\n          if(localCoords[2] + ${i} < ${this.enableShapeUniforms?"outShape[2]":`${t[2]}`}) {\n          localCoords[2] += ${i};\n          if (localCoords[1] + ${a} < ${this.enableShapeUniforms?"outShape[1]":`${t[1]}`}) {\n            localCoords[1] += ${a};\n\n            flatIndex = getFlatIndex(localCoords);\n            offset = imod(flatIndex, 4);\n\n            flatIndex = idiv(flatIndex, 4, 1.);\n\n            int r = flatIndex / texShape[1];\n            int c = imod(flatIndex, texShape[1]);\n            vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);\n            values = ${s.texture2D}(A, uv);\n\n            if (offset == 0) {\n              result[${l}] = values[0];\n            } else if (offset == 1) {\n              result[${l}] = values[1];\n            } else if (offset == 2) {\n              result[${l}] = values[2];\n            } else {\n              result[${l}] = values[3];\n            }\n          }\n        }\n        `}this.userCode=`\n        ${this.enableShapeUniforms?"\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\n  }\n":Jm(t)}\n\n        void main() {\n          ivec3 coords = getOutputCoords();\n\n          vec4 result = vec4(0.);\n          int flatIndex, r, c, offset;\n          ivec3 localCoords;\n          vec2 uv;\n          vec4 values;\n\n          ${r}\n\n          ${s.output} = ${o};\n        }\n    `}}function sl(n,t,e,s,r,o){!function VB(n,t){const e=z().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(n<=0||t<=0)throw new Error(`Requested texture size [${n}x${t}] is invalid.`);if(n>e||t>e)throw new Error(`Requested texture size [${n}x${t}] greater than WebGL maximum on this browser / GPU [${e}x${e}].`)}(t,e);const a=function BB(n){return rr(n,()=>n.createTexture(),"Unable to create WebGLTexture.")}(n),i=n.TEXTURE_2D;return de(n,()=>n.bindTexture(i,a)),de(n,()=>n.texParameteri(i,n.TEXTURE_WRAP_S,n.CLAMP_TO_EDGE)),de(n,()=>n.texParameteri(i,n.TEXTURE_WRAP_T,n.CLAMP_TO_EDGE)),de(n,()=>n.texParameteri(i,n.TEXTURE_MIN_FILTER,n.NEAREST)),de(n,()=>n.texParameteri(i,n.TEXTURE_MAG_FILTER,n.NEAREST)),1===z().getNumber("WEBGL_VERSION")?de(n,()=>n.texImage2D(i,0,s,t,e,0,r,o,null)):de(n,()=>n.texStorage2D(i,1,s,t,e)),de(n,()=>n.bindTexture(n.TEXTURE_2D,null)),{texture:a,texShape:[e,t]}}function Xv(n){return n.internalFormatFloat}function Zv(n){return n.internalFormatHalfFloat}function Yv(n){return n.downloadTextureFormat}function Qv(n){return n.internalFormatPackedFloat}function Jv(n){return n.internalFormatPackedHalfFloat}class ng{constructor(t){this.outputTexture=null,this.program=null,this.disposed=!1,this.itemsToPoll=[];const e=z().getNumber("WEBGL_VERSION");if(null!=t?(this.gl=t,function IB(n,t){Or[n]=t}(e,t)):this.gl=Ts(e),t=this.gl,2===z().getNumber("WEBGL_VERSION")){const o=t;this.createVertexArray=()=>de(o,()=>o.createVertexArray()),this.bindVertexArray=a=>de(o,()=>o.bindVertexArray(a)),this.deleteVertexArray=a=>de(o,()=>o.deleteVertexArray(a)),this.getVertexArray=()=>de(o,()=>o.getParameter(o.VERTEX_ARRAY_BINDING))}else if(null!=t){const o=t.getExtension("OES_vertex_array_object");if(null==o)throw new Error("All WebGL1 implementations are expected to offer OES_vertex_array_object.");this.createVertexArray=()=>de(t,()=>o.createVertexArrayOES()),this.bindVertexArray=a=>de(t,()=>o.bindVertexArrayOES(a)),this.deleteVertexArray=a=>de(t,()=>o.deleteVertexArrayOES(a)),this.getVertexArray=()=>de(t,()=>t.getParameter(o.VERTEX_ARRAY_BINDING_OES))}let s="WEBGL_color_buffer_float";const r="EXT_color_buffer_half_float";if(this.parallelCompilationExtension=this.gl.getExtension("KHR_parallel_shader_compile"),1===z().getNumber("WEBGL_VERSION")){const a="OES_texture_half_float";if(this.textureFloatExtension=Vc(this.gl,"OES_texture_float"),ms(this.gl,a))this.textureHalfFloatExtension=Vc(this.gl,a);else if(z().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support half float textures, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.");if(this.colorBufferFloatExtension=this.gl.getExtension(s),ms(this.gl,r))this.colorBufferHalfFloatExtension=Vc(this.gl,r);else if(z().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support color renderable half floats, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.")}else if(s="EXT_color_buffer_float",ms(this.gl,s))this.colorBufferFloatExtension=this.gl.getExtension(s);else{if(!ms(this.gl,r))throw new Error("GL context does not support color renderable floats");this.colorBufferHalfFloatExtension=this.gl.getExtension(r)}this.vertexBuffer=function ZV(n){return function zB(n,t){const e=rr(n,()=>n.createBuffer(),"Unable to create WebGLBuffer");return de(n,()=>n.bindBuffer(n.ARRAY_BUFFER,e)),de(n,()=>n.bufferData(n.ARRAY_BUFFER,t,n.STATIC_DRAW)),e}(n,new Float32Array([-1,1,0,0,1,-1,-1,0,0,0,1,1,0,1,1,1,-1,0,1,0]))}(this.gl),this.indexBuffer=function YV(n){return function MB(n,t){const e=rr(n,()=>n.createBuffer(),"Unable to create WebGLBuffer");return de(n,()=>n.bindBuffer(n.ELEMENT_ARRAY_BUFFER,e)),de(n,()=>n.bufferData(n.ELEMENT_ARRAY_BUFFER,t,n.STATIC_DRAW)),e}(n,new Uint16Array([0,1,2,2,1,3]))}(this.gl),this.framebuffer=function WB(n){return rr(n,()=>n.createFramebuffer(),"Unable to create WebGLFramebuffer.")}(this.gl),this.textureConfig=Xm(this.gl,this.textureHalfFloatExtension)}get debug(){return z().getBool("DEBUG")}dispose(){if(this.disposed)return;null!=this.program&&console.warn("Disposing a GPGPUContext that still has a bound WebGLProgram. This is probably a resource leak, delete the program with GPGPUContext.deleteProgram before disposing."),null!=this.outputTexture&&console.warn("Disposing a GPGPUContext that still has a bound output matrix texture.  This is probably a resource leak, delete the output matrix texture with GPGPUContext.deleteMatrixTexture before disposing.");const t=this.gl;de(t,()=>t.finish()),de(t,()=>t.bindFramebuffer(t.FRAMEBUFFER,null)),de(t,()=>t.deleteFramebuffer(this.framebuffer)),de(t,()=>t.bindBuffer(t.ARRAY_BUFFER,null)),de(t,()=>t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,null)),de(t,()=>t.deleteBuffer(this.indexBuffer)),this.disposed=!0}createFloat32MatrixTexture(t,e){return this.throwIfDisposed(),function QV(n,t,e,s){const[r,o]=tl(t,e);return sl(n,r,o,Xv(s),s.textureFormatFloat,n.FLOAT)}(this.gl,t,e,this.textureConfig)}createFloat16MatrixTexture(t,e){return this.throwIfDisposed(),function JV(n,t,e,s){const[r,o]=tl(t,e);return sl(n,r,o,Zv(s),s.textureFormatFloat,s.textureTypeHalfFloat)}(this.gl,t,e,this.textureConfig)}createUnsignedBytesMatrixTexture(t,e){return this.throwIfDisposed(),function eW(n,t,e,s){const[r,o]=tl(t,e);return sl(n,r,o,Yv(s),n.RGBA,n.UNSIGNED_BYTE)}(this.gl,t,e,this.textureConfig)}uploadPixelDataToTexture(t,e){this.throwIfDisposed(),function oW(n,t,e){de(n,()=>n.bindTexture(n.TEXTURE_2D,t)),e.data instanceof Uint8Array?2===z().getNumber("WEBGL_VERSION")?de(n,()=>n.texSubImage2D(n.TEXTURE_2D,0,0,0,e.width,e.height,n.RGBA,n.UNSIGNED_BYTE,e.data)):de(n,()=>n.texImage2D(n.TEXTURE_2D,0,n.RGBA,e.width,e.height,0,n.RGBA,n.UNSIGNED_BYTE,e.data)):2===z().getNumber("WEBGL_VERSION")?de(n,()=>n.texSubImage2D(n.TEXTURE_2D,0,0,0,n.RGBA,n.UNSIGNED_BYTE,e)):de(n,()=>n.texImage2D(n.TEXTURE_2D,0,n.RGBA,n.RGBA,n.UNSIGNED_BYTE,e)),de(n,()=>n.bindTexture(n.TEXTURE_2D,null))}(this.gl,t,e)}uploadDenseMatrixToTexture(t,e,s,r){this.throwIfDisposed(),function rW(n,t,e,s,r,o){let a,i,l;de(n,()=>n.bindTexture(n.TEXTURE_2D,t)),r instanceof Uint8Array?(a=new Uint8Array(e*s*4),i=n.UNSIGNED_BYTE,l=n.RGBA):(a=new Float32Array(e*s*4),i=n.FLOAT,l=o.internalFormatPackedFloat),a.set(r),2===z().getNumber("WEBGL_VERSION")?de(n,()=>n.texSubImage2D(n.TEXTURE_2D,0,0,0,e,s,n.RGBA,i,a)):de(n,()=>n.texImage2D(n.TEXTURE_2D,0,l,e,s,0,n.RGBA,i,a)),de(n,()=>n.bindTexture(n.TEXTURE_2D,null))}(this.gl,t,e,s,r,this.textureConfig)}createFloat16PackedMatrixTexture(t,e){return this.throwIfDisposed(),function nW(n,t,e,s){const[r,o]=ia(t,e);return sl(n,r,o,Jv(s),n.RGBA,s.textureTypeHalfFloat)}(this.gl,t,e,this.textureConfig)}createPackedMatrixTexture(t,e){return this.throwIfDisposed(),function tW(n,t,e,s){const[r,o]=ia(t,e);return sl(n,r,o,Qv(s),n.RGBA,n.FLOAT)}(this.gl,t,e,this.textureConfig)}deleteMatrixTexture(t){this.throwIfDisposed(),this.outputTexture===t&&(Mv(this.gl,this.framebuffer),this.outputTexture=null),de(this.gl,()=>this.gl.deleteTexture(t))}downloadByteEncodedFloatMatrixFromOutputTexture(t,e,s){return this.downloadMatrixDriver(t,()=>function lW(n,t,e,s){const[r,o]=tl(t,e),i=new Uint8Array(function kB(n,t){return n*t}(t*e,4));return de(n,()=>n.readPixels(0,0,r,o,s.downloadTextureFormat,n.UNSIGNED_BYTE,i)),new Float32Array(i.buffer)}(this.gl,e,s,this.textureConfig))}downloadPackedMatrixFromBuffer(t,e,s,r,o,a){return function uW(n,t,e,s,r,o,a,i){const l=n,u=new Float32Array(function TB(n,t){const[e,s]=ia(n,t);return e*s*4}(o,a));return l.bindBuffer(l.PIXEL_PACK_BUFFER,t),l.getBufferSubData(l.PIXEL_PACK_BUFFER,0,u),l.bindBuffer(l.PIXEL_PACK_BUFFER,null),u}(this.gl,t,0,0,0,o,a)}downloadFloat32MatrixFromBuffer(t,e){return function iW(n,t,e){const s=n,r=new Float32Array(e);return s.bindBuffer(s.PIXEL_PACK_BUFFER,t),s.getBufferSubData(s.PIXEL_PACK_BUFFER,0,r),s.bindBuffer(s.PIXEL_PACK_BUFFER,null),r}(this.gl,t,e)}createBufferFromTexture(t,e,s){this.bindTextureToFrameBuffer(t);const r=function aW(n,t,e,s){const r=n.createBuffer();de(n,()=>n.bindBuffer(n.PIXEL_PACK_BUFFER,r));const i=16*t*e;return de(n,()=>n.bufferData(n.PIXEL_PACK_BUFFER,i,n.STREAM_READ)),de(n,()=>n.readPixels(0,0,e,t,n.RGBA,n.FLOAT,0)),de(n,()=>n.bindBuffer(n.PIXEL_PACK_BUFFER,null)),r}(this.gl,e,s);return this.unbindTextureToFrameBuffer(),r}createAndWaitForFence(){const t=this.createFence(this.gl);return this.pollFence(t)}createFence(t){let e,s;if(z().getBool("WEBGL_FENCE_API_ENABLED")){const r=t,o=r.fenceSync(r.SYNC_GPU_COMMANDS_COMPLETE,0);t.flush(),s=()=>{const a=r.clientWaitSync(o,0,0);return a===r.ALREADY_SIGNALED||a===r.CONDITION_SATISFIED},e=o}else z().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0?(e=this.beginQuery(),this.endQuery(),s=()=>this.isQueryAvailable(e,z().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))):s=()=>!0;return{query:e,isFencePassed:s}}downloadMatrixFromPackedTexture(t,e,s){return this.downloadMatrixDriver(t,()=>function cW(n,t,e){const s=new Float32Array(t*e*4);return de(n,()=>n.readPixels(0,0,e,t,n.RGBA,n.FLOAT,s)),s}(this.gl,e,s))}createProgram(t){this.throwIfDisposed();const e=this.gl;null==this.vertexShader&&(this.vertexShader=function XV(n){const t=Nn();return function DB(n,t){const e=rr(n,()=>n.createShader(n.VERTEX_SHADER),"Unable to create vertex WebGLShader.");if(de(n,()=>n.shaderSource(e,t)),de(n,()=>n.compileShader(e)),!1===n.getShaderParameter(e,n.COMPILE_STATUS))throw console.log(n.getShaderInfoLog(e)),new Error("Failed to compile vertex shader.");return e}(n,`${t.version}\n    precision highp float;\n    ${t.attribute} vec3 clipSpacePos;\n    ${t.attribute} vec2 uv;\n    ${t.varyingVs} vec2 resultUV;\n\n    void main() {\n      gl_Position = vec4(clipSpacePos, 1);\n      resultUV = uv;\n    }`)}(e));const s=function LB(n){return rr(n,()=>n.createProgram(),"Unable to create WebGLProgram.")}(e);de(e,()=>e.attachShader(s,this.vertexShader)),de(e,()=>e.attachShader(s,t)),function PB(n,t){if(de(n,()=>n.linkProgram(t)),!z().get("ENGINE_COMPILE_ONLY")&&!1===n.getProgramParameter(t,n.LINK_STATUS))throw console.log(n.getProgramInfoLog(t)),new Error("Failed to link vertex and fragment shaders.")}(e,s);const r=Object.assign(s,{vao:this.createVertexArray()});return this.debug&&Zm(e,r),r}buildVao(t){this.setProgram(t),this.bindVertexArray(t.vao);const e=this.gl;de(e,()=>e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,this.indexBuffer)),function sW(n,t,e){de(n,()=>n.bindBuffer(n.ARRAY_BUFFER,e)),zv(n,t,"clipSpacePos",e,3,20,0)&&zv(n,t,"uv",e,2,20,12)}(e,t,this.vertexBuffer)}deleteProgram(t){this.throwIfDisposed(),t===this.program&&(this.program=null),null!=t&&(de(this.gl,()=>this.gl.deleteProgram(t)),this.deleteVertexArray(t.vao))}setProgram(t){this.throwIfDisposed(),this.program=t,null!=this.program&&this.debug&&Zm(this.gl,this.program),de(this.gl,()=>this.gl.useProgram(t))}getUniformLocation(t,e,s=!0){return this.throwIfDisposed(),s?function GB(n,t,e){return rr(n,()=>n.getUniformLocation(t,e),'uniform "'+e+'" not present in program.')}(this.gl,t,e):function HB(n,t,e){return n.getUniformLocation(t,e)}(this.gl,t,e)}getAttributeLocation(t,e){return this.throwIfDisposed(),de(this.gl,()=>this.gl.getAttribLocation(t,e))}getUniformLocationNoThrow(t,e){return this.throwIfDisposed(),this.gl.getUniformLocation(t,e)}setInputMatrixTexture(t,e,s){this.throwIfDisposed(),this.throwIfNoProgram(),jB(this.gl,t,e,s)}setOutputMatrixTexture(t,e,s){this.setOutputMatrixTextureDriver(t,s,e)}setOutputPackedMatrixTexture(t,e,s){this.throwIfDisposed();const[r,o]=ia(e,s);this.setOutputMatrixTextureDriver(t,r,o)}setOutputMatrixWriteRegion(t,e,s,r){this.setOutputMatrixWriteRegionDriver(s,t,r,e)}setOutputPackedMatrixWriteRegion(t,e,s,r){throw new Error("setOutputPackedMatrixWriteRegion not implemented.")}debugValidate(){null!=this.program&&Zm(this.gl,this.program),Wc(this.gl)}executeProgram(){this.throwIfDisposed(),this.throwIfNoProgram();const t=this.gl;if(this.debug){const e=this.getVertexArray();console.assert(e===this.program.vao,"VAO changed between setProgram and executeProgram!"),this.debugValidate()}de(t,()=>t.drawElements(t.TRIANGLES,6,t.UNSIGNED_SHORT,0))}blockUntilAllProgramsCompleted(){this.throwIfDisposed(),de(this.gl,()=>this.gl.finish())}getQueryTimerExtension(){return null==this.disjointQueryTimerExtension&&(this.disjointQueryTimerExtension=Vc(this.gl,2===z().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")?"EXT_disjoint_timer_query_webgl2":"EXT_disjoint_timer_query")),this.disjointQueryTimerExtension}getQueryTimerExtensionWebGL2(){return this.getQueryTimerExtension()}getQueryTimerExtensionWebGL1(){return this.getQueryTimerExtension()}beginQuery(){if(2===z().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const s=this.gl,r=this.getQueryTimerExtensionWebGL2(),o=s.createQuery();return s.beginQuery(r.TIME_ELAPSED_EXT,o),o}const t=this.getQueryTimerExtensionWebGL1(),e=t.createQueryEXT();return t.beginQueryEXT(t.TIME_ELAPSED_EXT,e),e}endQuery(){if(2===z().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const e=this.gl,s=this.getQueryTimerExtensionWebGL2();return void e.endQuery(s.TIME_ELAPSED_EXT)}const t=this.getQueryTimerExtensionWebGL1();t.endQueryEXT(t.TIME_ELAPSED_EXT)}waitForQueryAndGetTime(t){var e=this;return(0,W.Z)(function*(){return yield mg(()=>e.disposed||e.isQueryAvailable(t,z().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))),e.getQueryTime(t,z().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))})()}getQueryTime(t,e){if(0===e)return null;if(2===e){const s=this.gl;return s.getQueryParameter(t,s.QUERY_RESULT)/1e6}{const s=this.getQueryTimerExtensionWebGL1();return s.getQueryObjectEXT(t,s.QUERY_RESULT_EXT)/1e6}}isQueryAvailable(t,e){if(0===e)return!0;if(2===e){const s=this.gl,r=this.getQueryTimerExtensionWebGL2(),o=s.getQueryParameter(t,s.QUERY_RESULT_AVAILABLE);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(r.GPU_DISJOINT_EXT)),o&&!this.disjoint}{const s=this.getQueryTimerExtensionWebGL1(),r=s.getQueryObjectEXT(t,s.QUERY_RESULT_AVAILABLE_EXT);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(s.GPU_DISJOINT_EXT)),r&&!this.disjoint}}pollFence(t){return new Promise(e=>{this.addItemToPoll(()=>t.isFencePassed(),()=>e())})}pollItems(){const t=function hW(n){let t=0;for(;t<n.length&&n[t]();++t);return t-1}(this.itemsToPoll.map(e=>e.isDoneFn));for(let e=0;e<=t;++e){const{resolveFn:s}=this.itemsToPoll[e];s()}this.itemsToPoll=this.itemsToPoll.slice(t+1)}addItemToPoll(t,e){if(this.itemsToPoll.push({isDoneFn:t,resolveFn:e}),this.itemsToPoll.length>1)return;let s;"setTimeoutCustom"in z().platform&&(s=z().platform.setTimeoutCustom.bind(z().platform)),mg(()=>(this.pollItems(),0===this.itemsToPoll.length),()=>0,null,s)}bindTextureToFrameBuffer(t){this.throwIfDisposed(),Ym(this.gl,t,this.framebuffer),this.debug&&Wc(this.gl)}unbindTextureToFrameBuffer(){null!=this.outputTexture?(Ym(this.gl,this.outputTexture,this.framebuffer),this.debug&&Wc(this.gl)):Mv(this.gl,this.framebuffer)}downloadMatrixDriver(t,e){this.bindTextureToFrameBuffer(t);const s=e();return this.unbindTextureToFrameBuffer(),s}setOutputMatrixTextureDriver(t,e,s){this.throwIfDisposed();const r=this.gl;Ym(r,t,this.framebuffer),this.debug&&Wc(r),this.outputTexture=t,de(r,()=>r.viewport(0,0,e,s)),de(r,()=>r.scissor(0,0,e,s))}setOutputMatrixWriteRegionDriver(t,e,s,r){this.throwIfDisposed(),de(this.gl,()=>this.gl.scissor(t,e,s,r))}throwIfDisposed(){if(this.disposed)throw new Error("Attempted to use disposed GPGPUContext.")}throwIfNoProgram(){if(null==this.program)throw new Error("No GPU program is currently set.")}}const{addImpl:dW,bincountImpl:e1,bincountReduceImpl:pW,bitwiseAndImpl:fW,castImpl:mW,ceilImpl:gW,concatImpl:yW,equalImpl:xW,expImpl:bW,expm1Impl:wW,floorImpl:vW,gatherNdImpl:SW,gatherV2Impl:IW,greaterImpl:NW,greaterEqualImpl:CW,lessImpl:kW,lessEqualImpl:TW,linSpaceImpl:$W,logImpl:_W,maxImpl:EW,maximumImpl:AW,minimumImpl:RW,multiplyImpl:DW,negImpl:FW,notEqualImpl:OW,prodImpl:LW,raggedGatherImpl:PW,raggedRangeImpl:zW,raggedTensorToTensorImpl:MW,rangeImpl:BW,rsqrtImpl:VW,scatterImpl:WW,sigmoidImpl:UW,simpleAbsImpl:t1,sliceImpl:GW,sparseFillEmptyRowsImpl:HW,sparseReshapeImpl:jW,sparseSegmentReductionImpl:n1,sqrtImpl:KW,staticRegexReplaceImpl:qW,stridedSliceImpl:XW,stringNGramsImpl:ZW,stringSplitImpl:YW,stringToHashBucketFastImpl:QW,subImpl:JW,tileImpl:e4,topKImpl:t4,transposeImpl:sg,uniqueImpl:n4}=$;function s1(n,t){return["x","y","z","w","u","v"].slice(0,t).map(e=>`${n}.${e}`)}function Cn(n,t){return 1===t?[n]:s1(n,t)}class r4{constructor(t){if(this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outputShape=t,this.rank=t.length,this.enableShapeUniforms=yn(this.outputShape.length),0===this.rank)this.userCode="\n        void main() {\n          setOutput(vec4(getA(), 0., 0., 0.));\n        }\n      ";else{const e=Cn("rc",this.rank),s=ct(this.rank),r=this.getOutOfBoundsCondition(e),o=this.getSetup(e),a=this.getOutput(e);this.userCode=`\n        void main() {\n          ${s} rc = getOutputCoords();\n\n          if(${r}) {\n            setOutput(vec4(0));\n          } else {\n            ${o}\n\n            setOutput(vec4(${a}));\n          }\n        }\n      `}}getSourceCoordsArr(t){const e=[];for(let s=0;s<=1;s++)for(let r=0;r<=1;r++){let o=`${0===s?"r":"rp1"}, ${0===r?"c":"cp1"}`;for(let a=2;a<this.rank;a++)o=`${t[t.length-1-a]},`+o;e.push(o)}return e}getOutOfBoundsCondition(t){if(1===this.rank)return`rc > ${this.enableShapeUniforms?"outShape":this.outputShape[0]}`;let e="";for(let s=this.rank-2;s<this.rank;s++)e+=`${t[s]} >= ${this.enableShapeUniforms?`outShape[${s}]`:this.outputShape[s]}`,s<this.rank-1&&(e+="||");return e}getSetup(t){if(1===this.rank)return"";const e=t.slice(-2);return`\n      int r = ${e[0]};\n      int c = ${e[1]};\n      int rp1 = r + 1;\n      int cp1 = c + 1;\n\n      bool cEdge = cp1 >= ${this.enableShapeUniforms?`outShape[${this.rank} - 1]`:this.outputShape[this.rank-1]};\n      bool rEdge = rp1 >= ${this.enableShapeUniforms?`outShape[${this.rank} - 2]`:this.outputShape[this.rank-2]};\n    `}getOutput(t){const e=this.getSourceCoordsArr(t);return 1===this.rank?`getA(rc), (rc + 1 >= ${this.enableShapeUniforms?"outShape":this.outputShape[0]} ? 0. : getA(rc + 1)), 0, 0`:`getA(${e[0]}),\n            cEdge ? 0. : getA(${e[1]}),\n            rEdge ? 0. : getA(${e[2]}),\n            rEdge || cEdge ? 0. : getA(${e[3]})`}}class r1{constructor(t,e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"inputShape",type:"ivec3"}],this.outputShape=t,this.enableShapeUniforms=yn(this.outputShape.length);let s="";for(let r=0;r<4;r++){let o="thisRC = rc;";r%2==1&&(o+="thisRC.z += 1;"),r>1&&(o+="thisRC.y += 1;"),s+=`\n        ${o}\n        ${r>0?"if(thisRC.y < rows && thisRC.z < cols){":""}\n          int flatIndex = getFlatIndex(thisRC);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);\n          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[${r}] =\n            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);\n        ${r>0?"}":""}\n      `}this.userCode=`\n      ${function o4(n,t){return`\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      ${t?function sV(n,t,e="index"){const r=function nV(n,t){const e=n.length,s=n.map(o=>`${t}[${o}]`),r=new Array(e-1);r[e-2]=s[e-1];for(let o=e-3;o>=0;--o)r[o]=`(${r[o+1]} * ${s[o+1]})`;return r}(n.map((o,a)=>a),t);return r.map((o,a)=>`int ${n[a]} = ${e} / ${r[a]}; ${a===r.length-1?`int ${n[a+1]} = ${e} - ${n[a]} * ${r[a]}`:`index -= ${n[a]} * ${r[a]}`};`).join("")}(["r","c","d"],"inputShape"):xo(["r","c","d"],n)}\n      return ivec3(r, c, d);\n    }\n  `}(e,this.enableShapeUniforms)}\n      ${this.enableShapeUniforms?"\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\n  }\n":Jm(t)}\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.);\n\n        ivec3 thisRC;\n        int rows = ${this.enableShapeUniforms?"outShape[1]":t[1]};\n        int cols = ${this.enableShapeUniforms?"outShape[2]":t[2]};\n\n        ${s}\n\n        setOutput(result);\n      }\n    `}}class a4{constructor(t){this.gpgpu=t,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0,this.freeTextures={},this.usedTextures={},this.logEnabled=!1}acquireTexture(t,e,s){const r=a1(e,s),o=i1(t,r,s);o in this.freeTextures||(this.freeTextures[o]=[]),o in this.usedTextures||(this.usedTextures[o]=[]);const a=o1(t,r,this.gpgpu.gl,this.gpgpu.textureConfig,s);if(this.freeTextures[o].length>0){this.numFreeTextures--,this.numUsedTextures++,this._numBytesFree-=a,this.log();const l=this.freeTextures[o].pop();return this.usedTextures[o].push(l),l}let i;return r===gn.PACKED_2X2_FLOAT32?i=this.gpgpu.createPackedMatrixTexture(t[0],t[1]):r===gn.PACKED_2X2_FLOAT16?i=this.gpgpu.createFloat16PackedMatrixTexture(t[0],t[1]):r===gn.UNPACKED_FLOAT32?i=this.gpgpu.createFloat32MatrixTexture(t[0],t[1]):r===gn.UNPACKED_FLOAT16?i=this.gpgpu.createFloat16MatrixTexture(t[0],t[1]):r===gn.PACKED_4X1_UNSIGNED_BYTE&&(i=this.gpgpu.createUnsignedBytesMatrixTexture(t[0],t[1])),this.usedTextures[o].push(i),this.numUsedTextures++,this._numBytesAllocated+=a,this.log(),i}releaseTexture(t,e,s,r){if(null==this.freeTextures)return;const o=a1(s,r),a=i1(e,o,r);a in this.freeTextures||(this.freeTextures[a]=[]);const i=o1(e,o,this.gpgpu.gl,this.gpgpu.textureConfig,r),l=z().getNumber("WEBGL_DELETE_TEXTURE_THRESHOLD");-1!==l&&this._numBytesAllocated>l?(this.gpgpu.deleteMatrixTexture(t.texture),this._numBytesAllocated-=i):(this.freeTextures[a].push(t),this.numFreeTextures++,this._numBytesFree+=i),this.numUsedTextures--;const u=this.usedTextures[a],c=u&&u.indexOf(t);if(null==c||c<0)throw new Error("Cannot release a texture that was never provided by this texture manager");u[c]=u[u.length-1],u.pop(),this.log()}log(){if(!this.logEnabled)return;console.log("Free/Used",`${this.numFreeTextures} / ${this.numUsedTextures}`,`(${this.numFreeTextures+this.numUsedTextures})`);const e=this._numBytesFree/this._numBytesAllocated;console.log(`Bytes allocated: ${this._numBytesAllocated}`),console.log(`Bytes unused: ${this._numBytesFree} (${Math.round(100*e)}%)`)}get numBytesAllocated(){return this._numBytesAllocated}get numBytesFree(){return this._numBytesFree}getNumUsedTextures(){return this.numUsedTextures}getNumFreeTextures(){return this.numFreeTextures}dispose(){if(null!=this.freeTextures){for(const t in this.freeTextures)this.freeTextures[t].forEach(e=>{this.gpgpu.deleteMatrixTexture(e.texture)});for(const t in this.usedTextures)this.usedTextures[t].forEach(e=>{this.gpgpu.deleteMatrixTexture(e.texture)});this.freeTextures=null,this.usedTextures=null,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0}}}function o1(n,t,e,s,r){const o=function l4(n,t){switch(n){case gn.PACKED_2X2_FLOAT32:return Qv(t);case gn.PACKED_2X2_FLOAT16:return Jv(t);case gn.UNPACKED_FLOAT32:return Xv(t);case gn.UNPACKED_FLOAT16:return Zv(t);case gn.PACKED_4X1_UNSIGNED_BYTE:return Yv(t);default:throw new Error(`Unknown physical texture type ${n}`)}}(t,s);let a;if(r){const[l,u]=ia(n[0],n[1]);a=l*u}else{const[l,u]=tl(n[0],n[1]);a=l*u}const i=function i4(n,t){if(t===n.R32F)return 4;if(t===n.R16F)return 2;if(t===n.RGBA32F)return 16;if(t===n.RGBA)return 16;if(t===n.RGBA16F)return 8;if(t===n.RGBA8)return 4;throw new Error(`Unknown internal format ${t}`)}(e,o);return a*i}function a1(n,t){if(n===fs.UPLOAD)return gn.PACKED_2X2_FLOAT32;if(n===fs.RENDER||null==n)return function u4(n){return z().getBool("WEBGL_RENDER_FLOAT32_ENABLED")?n?gn.PACKED_2X2_FLOAT32:gn.UNPACKED_FLOAT32:n?gn.PACKED_2X2_FLOAT16:gn.UNPACKED_FLOAT16}(t);if(n===fs.DOWNLOAD||n===fs.PIXELS)return gn.PACKED_4X1_UNSIGNED_BYTE;throw new Error(`Unknown logical texture type ${n}`)}function i1(n,t,e){return`${n[0]}_${n[1]}_${t}_${e}`}class js{constructor(t,e){this.variableNames=["A"],this.outputShape=t,this.enableShapeUniforms=yn(this.outputShape.length),this.userCode=`\n      float unaryOperation(float x) {\n        ${e}\n      }\n\n      void main() {\n        float x = getAAtOutCoords();\n        float y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}const Jn="if (isnan(x)) return x;",c4="return x;",l1="return abs(x);",h4="return (x >= 0.0) ? x : (exp(x) - 1.0);",d4=Jn+"\n  return (x < 0.0) ? 0.0 : x;\n",p4=Jn+"\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n",Lr="return x;",f4="return 1.0 / (1.0 + exp(-1.0 * x));",m4="return x;",g4="\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n",y4="\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",x4="\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",b4="return 1.0 / (1.0 + exp(-1.0 * x));";class Pr{constructor(t,e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t,this.enableShapeUniforms=yn(this.outputShape.length),this.userCode=`\n      vec4 unaryOperation(vec4 x) {\n        ${e}\n      }\n\n      void main() {\n        vec4 x = getAAtOutCoords();\n        vec4 y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}class w4{constructor(t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outputShape=t,this.enableShapeUniforms=yn(this.outputShape.length);const e=t.length,s=Cn("rc",e),r=ct(e),o=function s4(n,t){if(1===n)return"rc";let e="";for(let s=0;s<n;s++)e+=t[s],s<n-1&&(e+=",");return e}(e,s),a=s.slice(-2),i=e<=1?"rc":`vec2(${a.join(",")})`;this.userCode=`\n      void main() {\n        ${r} rc = getOutputCoords();\n        vec4 packedInput = getA(${o});\n\n        setOutput(getChannel(packedInput, ${i}));\n      }\n    `}}const v4=Gp,Zc={},C4=z().getNumber("CPU_HANDOFF_SIZE_THRESHOLD");let $4=(()=>{class n extends xn{nextDataId(){return n.nextDataId++}constructor(e){if(super(),this.pendingRead=new WeakMap,this.pendingDisposal=new WeakSet,this.dataRefCount=new WeakMap,this.numBytesInGPU=0,this.uploadWaitMs=0,this.downloadWaitMs=0,this.lastGlFlushTime=0,this.warnedAboutMemory=!1,this.pendingDeletes=0,this.disposed=!1,!z().getBool("HAS_WEBGL"))throw new Error("WebGL is not supported on this device");let s;if(null!=e){if(e instanceof ng)s=e;else{const r=Ts(z().getNumber("WEBGL_VERSION"),e);s=new ng(r)}this.binaryCache={},this.gpgpuCreatedLocally=!1}else{const r=Ts(z().getNumber("WEBGL_VERSION"));s=new ng(r),this.binaryCache=function N4(n){return n in Zc||(Zc[n]={}),Zc[n]}(z().getNumber("WEBGL_VERSION")),this.gpgpuCreatedLocally=!0}this.gpgpu=s,this.canvas=this.gpgpu.gl.canvas,this.textureManager=new a4(this.gpgpu),this.numMBBeforeWarning=function T4(){return null==z().global.screen?1024:z().global.screen.height*z().global.screen.width*window.devicePixelRatio*600/1024/1024}(),this.texData=new _t(this,As())}numDataIds(){return this.texData.numDataIds()-this.pendingDeletes}writeTexture(e,s,r,o,a,i){const l=this.makeTensorInfo(s,r),u=this.texData.get(l.dataId);u.isPacked=!1,u.texture={texture:e,texShape:[o,a]},u.texShape=[o,a];const c=Uc(s),h=new qv(c,!1,i),d=this.runWebGLProgram(h,[l],r,[[o,a]]);return d.shape=s,u.texture=null,this.disposeIntermediateTensorInfo(l),d.dataId}write(e,s,r){if((z().getBool("WEBGL_CHECK_NUMERICAL_PROBLEMS")||z().getBool("DEBUG"))&&this.checkNumericalProblems(e),"complex64"===r&&null!=e)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");const o={id:this.nextDataId()};return this.texData.set(o,{shape:s,dtype:r,values:e,usage:fs.UPLOAD,refCount:1}),o}refCount(e){return this.texData.has(e)?this.texData.get(e).refCount:0}incRef(e){this.texData.get(e).refCount++}decRef(e){this.texData.has(e)&&this.texData.get(e).refCount--}move(e,s,r,o,a){if(z().getBool("DEBUG")&&this.checkNumericalProblems(s),"complex64"===o)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");this.texData.set(e,{shape:r,dtype:o,values:s,usage:fs.UPLOAD,refCount:a})}disposeIntermediateTensorInfo(e){this.disposeData(e.dataId)}readSync(e){const s=this.texData.get(e),{values:r,dtype:o,complexTensorInfos:a,slice:i,shape:l,isPacked:u}=s;if(null!=i){let p;p=u?new Pr(l,Lr):new js(l,Lr);const f=this.runWebGLProgram(p,[{dataId:e,shape:l,dtype:o}],o),g=this.readSync(f.dataId);return this.disposeIntermediateTensorInfo(f),g}if(null!=r)return this.convertAndCacheOnCPU(e);if("string"===o)return r;const c=null!=this.activeTimers;let h,d;return c&&(h=Tn()),d="complex64"===o?Qs(this.readSync(a.real.dataId),this.readSync(a.imag.dataId)):this.getValuesFromTexture(e),c&&(this.downloadWaitMs+=Tn()-h),this.convertAndCacheOnCPU(e,d)}read(e){var s=this;return(0,W.Z)(function*(){if(s.pendingRead.has(e)){const m=s.pendingRead.get(e);return new Promise(y=>m.push(y))}const r=s.texData.get(e),{values:o,shape:a,slice:i,dtype:l,complexTensorInfos:u,isPacked:c}=r;if(null!=i){let m;m=c?new Pr(a,Lr):new js(a,Lr);const y=s.runWebGLProgram(m,[{dataId:e,shape:a,dtype:l}],l),x=s.read(y.dataId);return s.disposeIntermediateTensorInfo(y),x}if(null!=o)return s.convertAndCacheOnCPU(e);if(z().getBool("DEBUG")&&!z().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")&&2===z().getNumber("WEBGL_VERSION"))throw new Error("tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and WEBGL_VERSION=2 not yet supported.");let d,p,h=null;if("complex64"!==l&&z().get("WEBGL_BUFFER_SUPPORTED")){d=s.decode(e);const m=s.texData.get(d.dataId);h=s.gpgpu.createBufferFromTexture(m.texture.texture,...Bc(a))}if(s.pendingRead.set(e,[]),"complex64"!==l&&(yield s.gpgpu.createAndWaitForFence()),"complex64"===l){const m=yield Promise.all([s.read(u.real.dataId),s.read(u.imag.dataId)]);p=Qs(m[0],m[1])}else if(null==h)p=s.getValuesFromTexture(e);else{const m=G(a);p=s.gpgpu.downloadFloat32MatrixFromBuffer(h,m)}if(null!=d&&s.disposeIntermediateTensorInfo(d),null!=h){const m=s.gpgpu.gl;de(m,()=>m.deleteBuffer(h))}const f=s.convertAndCacheOnCPU(e,p),g=s.pendingRead.get(e);return s.pendingRead.delete(e),g.forEach(m=>m(f)),s.pendingDisposal.has(e)&&(s.pendingDisposal.delete(e),s.disposeData(e)&&As().removeDataId(e,s),s.pendingDeletes--),f})()}readToGPU(e,s={}){const r=this.texData.get(e),{values:o,shape:a,slice:i,dtype:l,isPacked:u,texture:c}=r;if("complex64"===l)throw new Error("Does not support reading texture for complex64 dtype.");if(null!=i){let f;f=u?new Pr(a,Lr):new js(a,Lr);const g=this.runWebGLProgram(f,[{dataId:e,shape:a,dtype:l}],l),m=this.readToGPU(g,s);return this.disposeIntermediateTensorInfo(g),m}if(null==c)throw null!=o?new Error("Data is not on GPU but on CPU."):new Error("There is no data on GPU or CPU.");const h=this.decode(e,s.customTexShape),d=As().makeTensorFromTensorInfo(h),p=this.texData.get(h.dataId);return Object.assign({tensorRef:d},p.texture)}bufferSync(e){const s=this.readSync(e.dataId);if("string"===e.dtype)try{const r=s.map(o=>dr(o));return Me(e.shape,e.dtype,r)}catch{throw new Error("Failed to decode encoded string bytes into utf-8")}return Me(e.shape,e.dtype,s)}checkNumericalProblems(e){if(null!=e)for(let s=0;s<e.length;s++){const r=e[s];if(!AB(r))throw z().getBool("WEBGL_RENDER_FLOAT32_CAPABLE")?Error(`The value ${r} cannot be represented with your current settings. Consider enabling float32 rendering: 'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`):Error(`The value ${r} cannot be represented on this device.`)}}getValuesFromTexture(e){const{shape:s,dtype:r,isPacked:o}=this.texData.get(e),a=G(s);if(z().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")){const p=this.decode(e),f=this.texData.get(p.dataId),g=this.gpgpu.downloadMatrixFromPackedTexture(f.texture.texture,...Bc(s)).subarray(0,a);return this.disposeIntermediateTensorInfo(p),g}const i=z().getBool("WEBGL_PACK")&&!0===o,l=i?Uc(s):s,u=i?new jV(l):new HV(l),c=this.runWebGLProgram(u,[{shape:l,dtype:r,dataId:e}],"float32"),h=this.texData.get(c.dataId),d=this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(h.texture.texture,h.texShape[0],h.texShape[1]).subarray(0,a);return this.disposeIntermediateTensorInfo(c),d}timerAvailable(){return z().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0}time(e){var s=this;const r=this.activeTimers,o=[];let a=!1;null==this.programTimersStack?(this.programTimersStack=o,a=!0):this.activeTimers.push(o),this.activeTimers=o,e();const i=qr(this.activeTimers.map(c=>c.query)).filter(c=>null!=c),l=qr(this.activeTimers.map(c=>c.name)).filter(c=>null!=c);this.activeTimers=r,a&&(this.programTimersStack=null);const u={uploadWaitMs:this.uploadWaitMs,downloadWaitMs:this.downloadWaitMs,kernelMs:null,wallMs:null};return(0,W.Z)(function*(){if(z().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0){const c=yield Promise.all(i);u.kernelMs=function sS(n){let t=0;for(let e=0;e<n.length;e++)t+=n[e];return t}(c),u.getExtraProfileInfo=()=>c.map((h,d)=>({name:l[d],ms:h})).map(h=>`${h.name}: ${h.ms}`).join(", ")}else u.kernelMs={error:"WebGL query timers are not supported in this environment."};return s.uploadWaitMs=0,s.downloadWaitMs=0,u})()}memory(){return{unreliable:!1,numBytesInGPU:this.numBytesInGPU,numBytesInGPUAllocated:this.textureManager.numBytesAllocated,numBytesInGPUFree:this.textureManager.numBytesFree}}startTimer(){return z().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?this.gpgpu.beginQuery():{startMs:Tn(),endMs:null}}endTimer(e){return z().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?(this.gpgpu.endQuery(),e):(e.endMs=Tn(),e)}getQueryTime(e){var s=this;return(0,W.Z)(function*(){return z().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?s.gpgpu.waitForQueryAndGetTime(e):e.endMs-e.startMs})()}disposeData(e,s=!1){if(this.pendingDisposal.has(e))return!1;if(!this.texData.has(e))return!0;if(s?this.texData.get(e).refCount=0:this.texData.get(e).refCount--,!s&&this.texData.get(e).refCount>0)return!1;if(this.pendingRead.has(e))return this.pendingDisposal.add(e),this.pendingDeletes++,!1;this.releaseGPUData(e);const{complexTensorInfos:r}=this.texData.get(e);return null!=r&&(this.disposeData(r.real.dataId,s),this.disposeData(r.imag.dataId,s)),this.texData.delete(e),!0}releaseGPUData(e){const{texture:s,dtype:r,texShape:o,usage:a,isPacked:i,slice:l}=this.texData.get(e),u=l&&l.origDataId||e,c=this.dataRefCount.get(u);c>1?this.dataRefCount.set(u,c-1):(this.dataRefCount.delete(u),null!=s&&(this.numBytesInGPU-=this.computeBytes(o,r),this.textureManager.releaseTexture(s,o,a,i)));const h=this.texData.get(e);h.texture=null,h.texShape=null,h.isPacked=!1,h.slice=null}getTexture(e){return this.uploadToGPU(e),this.texData.get(e).texture.texture}getDataInfo(e){return this.texData.get(e)}shouldExecuteOnCPU(e,s=C4){return z().getBool("WEBGL_CPU_FORWARD")&&e.every(r=>null==this.texData.get(r.dataId).texture&&G(r.shape)<s)}getGPGPUContext(){return this.gpgpu}where(e){Un("tf.where() in webgl locks the UI thread. Call tf.whereAsync() instead");const s=e.dataSync();return v4(e.shape,s)}packedUnaryOp(e,s,r){const o=new Pr(e.shape,s),a=this.compileAndRun(o,[e],r);return As().makeTensorFromTensorInfo(a)}abs(e){if(this.shouldExecuteOnCPU([e])&&"complex64"!==e.dtype){const o=t1(this.texData.get(e.dataId).values);return this.makeOutput(e.shape,e.dtype,o)}if(z().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(e,l1,e.dtype);const s=new js(e.shape,l1),r=this.compileAndRun(s,[e]);return As().makeTensorFromTensorInfo(r)}makeTensorInfo(e,s,r){let o;if("string"===s&&null!=r&&r.length>0&&ba(r[0])){const a=r.map(i=>hr(i));o=this.write(a,e,s)}else o=this.write(r,e,s);return this.texData.get(o).usage=null,{dataId:o,shape:e,dtype:s}}makeOutput(e,s,r){return As().makeTensorFromTensorInfo(this.makeTensorInfo(e,s,r),this)}unpackTensor(e){const s=new w4(e.shape);return this.runWebGLProgram(s,[e],e.dtype)}packTensor(e){const s=new r4(e.shape);return this.runWebGLProgram(s,[e],e.dtype,null,!0)}packedReshape(e,s){const r=[la(e.shape),...ua(e.shape)],o={dtype:e.dtype,shape:r,dataId:e.dataId},a=[la(s),...ua(s)],i=new r1(a,r),c=this.runWebGLProgram(i,[o],e.dtype,[r],!0);return{dataId:c.dataId,shape:s,dtype:c.dtype}}decode(e,s){const r=this.texData.get(e),{isPacked:o,shape:a,dtype:i}=r;null!=s&&I(G(a)<=s[0]*s[1]*4,()=>"customTexShape is too small. Row * Column * 4 should be equal or larger than the size of the tensor data.");const l=Uc(a);let u;u=o?new GV(l):new UV(l);const h=[null!=s?s:Bc(l)];return{dtype:i,shape:a,dataId:this.runWebGLProgram(u,[{shape:l,dtype:i,dataId:e}],i,h,!0,s).dataId}}runWebGLProgram(e,s,r,o,a=!1,i){const l=this.makeTensorInfo(e.outputShape,r),u=this.texData.get(l.dataId);if(e.packedOutput&&(u.isPacked=!0),e.outPackingScheme===Mc.DENSE){const x=null!=i?i:Bc(e.outputShape);u.texShape=x.map(b=>2*b)}if(null!=e.outTexUsage&&(u.usage=e.outTexUsage),0===G(l.shape))return u.values=on(l.dtype,0),l;const c=[],h=s.map(x=>{if("complex64"===x.dtype)throw new Error("GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.");let b=this.texData.get(x.dataId);if(null==b.texture){if(!e.packedInputs&&G(x.shape)<=z().getNumber("WEBGL_SIZE_UPLOAD_UNIFORM"))return{shape:x.shape,texData:null,isUniform:!0,uniformValues:b.values};e.packedInputs&&(b.isPacked=!0,b.shape=x.shape)}if(this.uploadToGPU(x.dataId),!!b.isPacked!=!!e.packedInputs)x=b.isPacked?this.unpackTensor(x):this.packTensor(x),c.push(x),b=this.texData.get(x.dataId);else if(b.isPacked&&!Hc(b.shape,x.shape)){const w=x,S=x.shape;x.shape=b.shape,x=this.packedReshape(x,S),c.push(x),b=this.texData.get(x.dataId),w.shape=S}return{shape:x.shape,texData:b,isUniform:!1}});this.uploadToGPU(l.dataId);const d={shape:l.shape,texData:u,isUniform:!1},p=function WV(n,t,e){let s="";t.concat(e).forEach(a=>{const i=null!=a.texData&&null!=a.texData.slice&&a.texData.slice.flatOffset>0;if(n.enableShapeUniforms&&!a.isUniform){const l=a.texData.texShape,{useSqueezeShape:u,uniformShape:c,keptDims:h}=tg(n.packedInputs,a.shape,l);let d="",p="",f="";if(1===c.length&&n.packedInputs){const S=[Math.ceil(l[0]/2),Math.ceil(l[1]/2)];d=`${S[0]>1}_${S[1]>1}`}else if(2!==c.length||n.packedInputs){if(c.length>2&&!n.packedInputs){const S=ke(c);f=`${S[0]===l[1]}_${S[S.length-1]===l[1]}`}}else p=`${c[0]>1}_${c[1]>1}`;const g=a.shape.length,m=2===c.length&&Xe(a.shape,l),y=1===G(a.shape),x=Bo(a.shape,e.shape),b=!n.packedInputs&&g===e.shape.length&&Xe(l,e.texData.texShape);s+=`${g}_${b}_${u?h:""}_${c.length}_${y}_${x}_${m}_${d}_${p}_${f}_${n.packedInputs||c.length>2?"":`${l[0]>1}_${l[1]>1}`}_${i}`}else s+=`${a.shape}_${a.isUniform?"uniform":a.texData.texShape}_${i}`});let o=n.constructor.name;return o+="_"+s+"_"+n.userCode+`${z().getNumber("WEBGL_VERSION")}`,o}(e,h,d),f=this.getAndSaveBinary(p,()=>function BV(n,t,e,s){const r=e.map((c,h)=>{const d={logicalShape:c.shape,texShape:c.isUniform?null:c.texData.texShape,isUniform:c.isUniform,isPacked:!c.isUniform&&c.texData.isPacked,flatOffset:null};return null!=c.texData&&null!=c.texData.slice&&c.texData.slice.flatOffset>0&&(d.flatOffset=c.texData.slice.flatOffset),{name:t.variableNames[h],shapeInfo:d}}),o=r.map(c=>c.shapeInfo),a={logicalShape:s.shape,texShape:s.texData.texShape,isUniform:!1,isPacked:s.texData.isPacked,flatOffset:null},i=rV(r,a,t),l=function FB(n,t){const e=rr(n,()=>n.createShader(n.FRAGMENT_SHADER),"Unable to create fragment WebGLShader.");if(de(n,()=>n.shaderSource(e,t)),de(n,()=>n.compileShader(e)),z().get("ENGINE_COMPILE_ONLY"))return e;if(!1===n.getShaderParameter(e,n.COMPILE_STATUS))throw Pv(t,n.getShaderInfoLog(e)),new Error("Failed to compile fragment shader.");return e}(n.gl,i),u=n.createProgram(l);return z().get("ENGINE_COMPILE_ONLY")?{program:t,fragmentShader:l,source:i,webGLProgram:u,inShapeInfos:o,outShapeInfo:a,variablesLocations:null,customUniformLocations:null,infLoc:null,nanLoc:null,outShapeLocation:null,outShapeStridesLocation:null,outTexShapeLocation:null}:(n.buildVao(u),Object.assign({program:t,fragmentShader:l,source:i,webGLProgram:u,inShapeInfos:o,outShapeInfo:a},jv(n,t,u)))}(this.gpgpu,e,h,d)),g=null!=this.activeTimers;let m;g&&(m=this.startTimer()),z().get("ENGINE_COMPILE_ONLY")||function VV(n,t,e,s,r){t.program.enableShapeUniforms||(Kv(t.inShapeInfos,e),Kv([t.outShapeInfo],[s]));const o=s.texData.texture,a=s.texData.texShape;s.texData.isPacked?n.setOutputPackedMatrixTexture(o.texture,a[0],a[1]):n.setOutputMatrixTexture(o.texture,a[0],a[1]),n.setProgram(t.webGLProgram),n.bindVertexArray(t.webGLProgram.vao),1===z().getNumber("WEBGL_VERSION")&&null!==t.infLoc&&n.gl.uniform1f(t.infLoc,1/0),null!==t.nanLoc&&n.gl.uniform1f(t.nanLoc,NaN);for(let l=0;l<e.length;++l){const u=e[l],{uniform:c,offset:h,shape:d,texShape:p}=t.variablesLocations[l];if(d){const{uniformShape:f}=tg(t.program.packedInputs,u.shape,u.texData.texShape);switch(f.length){case 1:n.gl.uniform1iv(d,new Int32Array(f));break;case 2:n.gl.uniform2iv(d,new Int32Array(f));break;case 3:n.gl.uniform3iv(d,new Int32Array(f));break;case 4:n.gl.uniform4iv(d,new Int32Array(f))}}if(p&&n.gl.uniform2i(p,u.texData.texShape[0],u.texData.texShape[1]),null!=c){if(u.isUniform){if(G(u.shape)<2)n.gl.uniform1f(c,u.uniformValues[0]);else{let f=u.uniformValues;f instanceof Float32Array||(f=new Float32Array(f)),n.gl.uniform1fv(c,f)}continue}null!=u.texData.slice&&null!=h&&n.gl.uniform1i(h,u.texData.slice.flatOffset),n.setInputMatrixTexture(u.texData.texture.texture,c,l)}}const i=t.outShapeLocation;if(i)switch(s.shape.length){case 1:n.gl.uniform1iv(i,new Int32Array(s.shape));break;case 2:n.gl.uniform2iv(i,new Int32Array(s.shape));break;case 3:n.gl.uniform3iv(i,new Int32Array(s.shape));break;case 4:n.gl.uniform4iv(i,new Int32Array(s.shape))}if(t.outShapeStridesLocation){const l=ke(s.shape);switch(s.shape.length){case 2:n.gl.uniform1iv(t.outShapeStridesLocation,new Int32Array(l));break;case 3:n.gl.uniform2iv(t.outShapeStridesLocation,new Int32Array(l));break;case 4:n.gl.uniform3iv(t.outShapeStridesLocation,new Int32Array(l))}}if(t.outTexShapeLocation&&n.gl.uniform2i(t.outTexShapeLocation,s.texData.texShape[0],s.texData.texShape[1]),t.program.customUniforms&&r)for(let l=0;l<t.program.customUniforms.length;++l){const u=t.program.customUniforms[l],c=t.customUniformLocations[l],h=r[l];if("float"===u.type)n.gl.uniform1fv(c,h);else if("vec2"===u.type)n.gl.uniform2fv(c,h);else if("vec3"===u.type)n.gl.uniform3fv(c,h);else if("vec4"===u.type)n.gl.uniform4fv(c,h);else if("int"===u.type)n.gl.uniform1iv(c,h);else if("ivec2"===u.type)n.gl.uniform2iv(c,h);else if("ivec3"===u.type)n.gl.uniform3iv(c,h);else{if("ivec4"!==u.type)throw Error(`uniform type ${u.type} is not supported yet.`);n.gl.uniform4iv(c,h)}}n.executeProgram()}(this.gpgpu,f,h,d,o),c.forEach(x=>this.disposeIntermediateTensorInfo(x)),g&&(m=this.endTimer(m),this.activeTimers.push({name:e.constructor.name,query:this.getQueryTime(m)}));const y=z().getNumber("WEBGL_FLUSH_THRESHOLD");if(y>0){const x=Tn();x-this.lastGlFlushTime>y&&(this.gpgpu.gl.flush(),this.lastGlFlushTime=x)}if(!z().getBool("WEBGL_LAZILY_UNPACK")&&u.isPacked&&!1===a){const x=this.unpackTensor(l);return this.disposeIntermediateTensorInfo(l),x}return l}compileAndRun(e,s,r,o,a=!1){return this.runWebGLProgram(e,s,r=r||s[0].dtype,o,a)}getAndSaveBinary(e,s){return e in this.binaryCache||(this.binaryCache[e]=s()),this.binaryCache[e]}getTextureManager(){return this.textureManager}dispose(){this.disposed||(z().getBool("IS_TEST")||Object.keys(this.binaryCache).forEach(s=>{this.gpgpu.deleteProgram(this.binaryCache[s].webGLProgram),delete this.binaryCache[s]}),this.textureManager.dispose(),null!=this.canvas&&typeof HTMLCanvasElement<"u"&&this.canvas instanceof HTMLCanvasElement?this.canvas.remove():this.canvas=null,this.gpgpuCreatedLocally&&(this.gpgpu.program=null,this.gpgpu.dispose()),this.disposed=!0)}floatPrecision(){return null==this.floatPrecisionValue&&(this.floatPrecisionValue=P(()=>{if(!z().get("WEBGL_RENDER_FLOAT32_ENABLED")){const e=z().getBool("DEBUG");z().set("DEBUG",!1);const s=this.abs($e(1e-8)).dataSync()[0];if(z().set("DEBUG",e),s>0)return 32}return 16})),this.floatPrecisionValue}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}uploadToGPU(e){const s=this.texData.get(e),{shape:r,dtype:o,values:a,texture:i,usage:l,isPacked:u}=s;if(null!=i)return;const c=null!=this.activeTimers;let h;c&&(h=Tn());let d=s.texShape;if(null==d&&(d=function qB(n,t=!1){let e=z().getNumber("WEBGL_MAX_TEXTURE_SIZE"),s=z().getNumber("WEBGL_MAX_SIZE_FOR_NARROW_TEXTURE");s===1/0&&z().getBool("WEBGL_AUTO_SQUARIFY_NARROW_TEXTURE_SHAPE")&&(s=e/2),t&&(e*=2,s*=2,1===(n=n.map((i,l)=>l>=n.length-2?ih(n[l]):n[l])).length&&(n=[2,n[0]])),2!==n.length&&(n=lr(n).newShape);let r=G(n),o=null;n.length<=1&&r<=e?o=[1,r]:2===n.length&&n[0]<=e&&n[1]<=e?o=n:3===n.length&&n[0]*n[1]<=e&&n[2]<=e?o=[n[0]*n[1],n[2]]:3===n.length&&n[0]<=e&&n[1]*n[2]<=e?o=[n[0],n[1]*n[2]]:4===n.length&&n[0]*n[1]*n[2]<=e&&n[3]<=e?o=[n[0]*n[1]*n[2],n[3]]:4===n.length&&n[0]<=e&&n[1]*n[2]*n[3]<=e&&(o=[n[0],n[1]*n[2]*n[3]]);const a=null!=o&&Math.max(...o)>s&&Math.min(...o)<=(t?2:1)&&Math.min(...o)>0;if(null==o||a)if(t){const i=la(n);let l=2,u=2;n.length&&([l,u]=ua(n)),r=i*(l/2)*(u/2),o=lh(r).map(c=>2*c)}else o=lh(r);return o}(r,u),s.texShape=d),null!=a){const p=Uc(r);let f,g=d[1],m=d[0];const y=a instanceof Uint8Array||a instanceof Uint8ClampedArray;(u||!y)&&([g,m]=ia(d[0],d[1])),f=u?new qV(p,y):new qv(p,y);const x=y?[m,g]:d,b=this.makeTensorInfo(x,o),w=this.texData.get(b.dataId);w.usage=y?fs.PIXELS:fs.UPLOAD,w.texShape=x,this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(b.dataId),g,m,a);const k=this.runWebGLProgram(f,[b],o,[[m,g]],!0),T=this.texData.get(k.dataId);s.texShape=T.texShape,s.isPacked=T.isPacked,s.usage=T.usage,z().get("ENGINE_COMPILE_ONLY")?this.disposeData(k.dataId):(s.texture=T.texture,s.values=null,this.texData.delete(k.dataId)),this.disposeIntermediateTensorInfo(b),c&&(this.uploadWaitMs+=Tn()-h)}else{const p=this.acquireTexture(d,l,o,u);s.texture=p}}convertAndCacheOnCPU(e,s){const r=this.texData.get(e),{dtype:o}=r;return null!=s&&(r.values=function _4(n,t){if("float32"===t||"complex64"===t)return n;if("int32"===t||"bool"===t){const e="int32"===t?new Int32Array(n.length):new Uint8Array(n.length);for(let s=0;s<e.length;++s)e[s]=Math.round(n[s]);return e}throw new Error(`Unknown dtype ${t}`)}(s,o)),r.values}acquireTexture(e,s,r,o){if(this.numBytesInGPU+=this.computeBytes(e,r),!this.warnedAboutMemory&&this.numBytesInGPU>1024*this.numMBBeforeWarning*1024){const a=(this.numBytesInGPU/1024/1024).toFixed(2);this.warnedAboutMemory=!0,console.warn(`High memory usage in GPU: ${a} MB, most likely due to a memory leak`)}return this.textureManager.acquireTexture(e,s,o)}computeBytes(e,s){return e[0]*e[1]*cl(s)}checkCompileCompletion(){for(const[,e]of Object.entries(this.binaryCache))this.checkCompletion_(e)}checkCompileCompletionAsync(){var e=this;return(0,W.Z)(function*(){const s=[];if(e.gpgpu.parallelCompilationExtension){for(const[,r]of Object.entries(e.binaryCache))s.push(e.checkCompletionAsync_(r));return Promise.all(s)}for(const[,r]of Object.entries(e.binaryCache)){const o=new Promise(a=>{try{e.checkCompletion_(r),a(!0)}catch(i){throw i}});s.push(o)}return Promise.all(s)})()}checkCompletionAsync_(e){var s=this;return(0,W.Z)(function*(){return s.gpgpu.gl.getProgramParameter(e.webGLProgram,s.gpgpu.parallelCompilationExtension.COMPLETION_STATUS_KHR)?s.checkCompletion_(e):(yield jx(),s.checkCompletionAsync_(e))})()}checkCompletion_(e){if(!1===this.gpgpu.gl.getProgramParameter(e.webGLProgram,this.gpgpu.gl.LINK_STATUS))throw console.log(this.gpgpu.gl.getProgramInfoLog(e.webGLProgram)),!1===this.gpgpu.gl.getShaderParameter(e.fragmentShader,this.gpgpu.gl.COMPILE_STATUS)?(Pv(e.source,this.gpgpu.gl.getShaderInfoLog(e.fragmentShader)),new Error("Failed to compile fragment shader.")):new Error("Failed to link vertex and fragment shaders.");return!0}getUniformLocations(){for(const e of Object.values(this.binaryCache)){this.gpgpu.buildVao(e.webGLProgram);const{variablesLocations:s,customUniformLocations:r,infLoc:o,nanLoc:a,outShapeLocation:i,outShapeStridesLocation:l,outTexShapeLocation:u}=jv(this.gpgpu,e.program,e.webGLProgram);e.variablesLocations=s,e.customUniformLocations=r,e.infLoc=o,e.nanLoc=a,e.outShapeLocation=i,e.outShapeStridesLocation=l,e.outTexShapeLocation=u}}createTensorFromGPUData(e,s,r){e.channels=e.channels||"RGBA";const{texture:o,height:a,width:i,channels:l}=e,u=As().backend;if(!u.gpgpu.gl.isTexture(o))throw new Error("The texture is invalid. Also, please make sure the texture and the TFJS WebGL backend are using the same canvas. If you want to use your own custom canvas, you have to create and use the custom TFJS WebGL backend created from the canvas through 'new tf.MathBackendWebGL(customCanvas)'.");const c=u.writeTexture(o,s,r,a,i,l);return As().makeTensorFromDataId(c,s,r,u)}}return n.nextDataId=0,n})();Ug()&&uy("webgl",()=>new $4,2);const rg="\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n";class wo{constructor(t,e,s){this.variableNames=["A","B"],this.outputShape=Le(e,s),this.enableShapeUniforms=yn(this.outputShape.length),this.userCode=`\n      float binaryOperation(float a, float b) {\n        ${t}\n      }\n\n      void main() {\n        float a = getAAtOutCoords();\n        float b = getBAtOutCoords();\n        setOutput(binaryOperation(a, b));\n      }\n    `}}const vo="\n  result.r = isNaN.r ? NAN : result.r;\n  result.g = isNaN.g ? NAN : result.g;\n  result.b = isNaN.b ? NAN : result.b;\n  result.a = isNaN.a ? NAN : result.a;\n";class fa{constructor(t,e,s,r=!1){this.variableNames=["A","B"],this.supportsBroadcasting=!0,this.packedInputs=!0,this.packedOutput=!0,this.outputShape=Le(e,s);const o=this.outputShape.length;this.enableShapeUniforms=yn(o);let a="";if(r)if(0===o||1===G(this.outputShape))a="\n          result.y = 0.;\n          result.z = 0.;\n          result.w = 0.;\n        ";else if(a=`\n          ${ct(o)} coords = getOutputCoords();\n        `,1===o)a+=this.enableShapeUniforms?"\n            result.y = (coords + 1) >= outShape ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          ":`\n            result.y = (coords + 1) >= ${this.outputShape[0]} ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          `;else{const l=Cn("coords",o);a+=this.enableShapeUniforms?`\n            bool nextRowOutOfBounds =\n              (${l[o-2]} + 1) >= outShape[${o} - 2];\n            bool nextColOutOfBounds =\n              (${l[o-1]} + 1) >= outShape[${o} - 1];\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `:`\n            bool nextRowOutOfBounds =\n              (${l[o-2]} + 1) >= ${this.outputShape[o-2]};\n            bool nextColOutOfBounds =\n              (${l[o-1]} + 1) >= ${this.outputShape[o-1]};\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `}this.userCode=`\n      vec4 binaryOperation(vec4 a, vec4 b) {\n        ${t}\n      }\n\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n\n        vec4 result = binaryOperation(a, b);\n        ${a}\n\n        setOutput(result);\n      }\n    `}}function Bn(n){const{inputs:t,backend:e}=n,{x:s}=t;return e.incRef(s.dataId),{dataId:s.dataId,shape:s.shape,dtype:s.dtype}}const R4={kernelName:Ba,backendName:"webgl",kernelFunc:Bn};function zr(n){const{inputs:t,backend:e}=n,{real:s,imag:r}=t,o=e.makeTensorInfo(s.shape,"complex64"),a=e.texData.get(o.dataId),i=Bn({inputs:{x:s},backend:e}),l=Bn({inputs:{x:r},backend:e});return a.complexTensorInfos={real:i,imag:l},o}const D4={kernelName:vh,backendName:"webgl",kernelFunc:zr},u1="return (a < 0.) ? b * a : a;",c1="\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n",O4={kernelName:Dl,backendName:"webgl",kernelFunc:function F4(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{alpha:o}=s,a=e.makeTensorInfo([],"float32",cr(o,"float32")),i=z().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new fa(c1,r.shape,a.shape):new wo(u1,r.shape,a.shape),l=e.runWebGLProgram(i,[r,a],"float32");return e.disposeIntermediateTensorInfo(a),l}},h1="return (a < 0.) ? b * a : a;",d1="\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n",P4={kernelName:Ql,backendName:"webgl",kernelFunc:function L4(n){const{inputs:t,backend:e}=n,{x:s,alpha:r}=t,o=z().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new fa(d1,s.shape,r.shape):new wo(h1,s.shape,r.shape);return e.runWebGLProgram(o,[s,r],"float32")}},ma="if (isnan(x)) return x;";function et({opSnippet:n,packedOpSnippet:t,cpuKernelImpl:e,dtype:s}){return({inputs:r,backend:o})=>{const{x:a}=r,i=o,l=s||a.dtype;if(i.shouldExecuteOnCPU([a])&&null!=e){const h=i.texData.get(a.dataId),d=e(h.values,l);return i.makeTensorInfo(a.shape,l,d)}let c;return c=z().getBool("WEBGL_PACK_UNARY_OPERATIONS")&&null!=t?new Pr(a.shape,t):new js(a.shape,n),i.runWebGLProgram(c,[a],l)}}function cn({opSnippet:n,packedOpSnippet:t,checkOutOfBounds:e=!1,supportsComplex:s=!1,cpuKernelImpl:r,dtype:o}){return({inputs:a,backend:i})=>{const{a:l,b:u}=a,c=i;if(s&&"complex64"===l.dtype){const f=c.texData.get(l.dataId),g=c.texData.get(u.dataId),[m,y]=[[f.complexTensorInfos.real,g.complexTensorInfos.real],[f.complexTensorInfos.imag,g.complexTensorInfos.imag]].map(b=>{const[w,S]=b,C={dataId:w.dataId,dtype:w.dtype,shape:l.shape},k={dataId:S.dataId,dtype:S.dtype,shape:u.shape},T=new wo(n,l.shape,u.shape);return c.runWebGLProgram(T,[C,k],Fn(w.dtype,S.dtype))}),x=zr({inputs:{real:m,imag:y},backend:c});return c.disposeIntermediateTensorInfo(m),c.disposeIntermediateTensorInfo(y),x}const h=o||Fn(l.dtype,u.dtype);if(("string"===l.dtype||"string"===u.dtype||c.shouldExecuteOnCPU([l,u]))&&null!=r){const f=c.texData.get(l.dataId).values,g=c.texData.get(u.dataId).values,m="string"===l.dtype?Js(f):f,y="string"===l.dtype?Js(g):g,[x,b]=r(l.shape,u.shape,m,y,h),w=c.makeTensorInfo(b,h);return c.texData.get(w.dataId).values=x,w}let p;return p=z().getBool("WEBGL_PACK_BINARY_OPERATIONS")&&null!=t?new fa(t,l.shape,u.shape,e):new wo(n,l.shape,u.shape),c.runWebGLProgram(p,[l,u],h)}}function rl(n,t=!1){if("linear"===n)return t?m4:c4;if("relu"===n)return t?y4:d4;if("elu"===n)return t?g4:h4;if("relu6"===n)return t?x4:p4;if("prelu"===n)return t?d1:h1;if("leakyrelu"===n)return t?c1:u1;if("sigmoid"===n)return t?b4:f4;throw new Error(`Activation ${n} has not been implemented for the WebGL backend.`)}class p1{constructor(t,e,s,r=!1,o=!1,a=!1,i=null,l=!1,u=!1){this.variableNames=["matrixA","matrixB"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=s,this.enableShapeUniforms=yn(this.outputShape.length);const h=Math.ceil((r?t[1]:t[2])/2),d=r?"i * 2, rc.y":"rc.y, i * 2",p=o?"rc.z, i * 2":"i * 2, rc.z",f=r?["a.xxyy","a.zzww"]:["a.xxzz","a.yyww"],g=o?["b.xzxz","b.ywyw"]:["b.xyxy","b.zwzw"];let m="",y="";i&&(m=l?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${i}\n        }`:u?`vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${i}\n        }`:`vec4 activation(vec4 x) {\n          ${i}\n        }`,y="result = activation(result);");const x=a?"result += getBiasAtOutCoords();":"";a&&this.variableNames.push("bias"),l&&this.variableNames.push("preluActivationWeights"),u&&this.variableNames.push("leakyreluAlpha");let b="rc.x",w="rc.x";t[0]<e[0]?b=`imod(rc.x, ${t[0]})`:e[0]<t[0]&&(w=`imod(rc.x, ${e[0]})`),this.userCode=`\n      ${m}\n      // Don't use uniform for sharedDimensionPacked for performance.\n      const float sharedDimension = ${h}.0;\n\n      vec4 dot2x2ARowBCol(ivec3 rc) {\n        vec4 result = vec4(0);\n        int batchA = ${b};\n        int batchB = ${w};\n        for (int i = 0; i < ${h}; i++) {\n          vec4 a = getMatrixA(batchA, ${d});\n          vec4 b = getMatrixB(batchB, ${p});\n\n          // These swizzled products need to be separately added.\n          // See: https://github.com/tensorflow/tfjs/issues/1735\n          result += (${f[0]} * ${g[0]});\n          result += (${f[1]} * ${g[1]});\n        }\n        return result;\n      }\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n        vec4 result = dot2x2ARowBCol(rc);\n\n        ${x}\n\n        ${y}\n\n        setOutput(result);\n      }\n    `}}const f1={REAL:"return areal * breal - aimag * bimag;",IMAG:"return areal * bimag + aimag * breal;"};class m1{constructor(t,e,s){this.variableNames=["AReal","AImag","BReal","BImag"],this.outputShape=Le(e,s),this.userCode=`\n      float binaryOpComplex(\n          float areal, float aimag, float breal, float bimag) {\n        ${t}\n      }\n\n      void main() {\n        float areal = getARealAtOutCoords();\n        float aimag = getAImagAtOutCoords();\n        float breal = getBRealAtOutCoords();\n        float bimag = getBImagAtOutCoords();\n        setOutput(binaryOpComplex(areal, aimag, breal, bimag));\n      }\n    `}}const g1="return a * b;";function og(n){const{inputs:t,backend:e}=n,{a:s,b:r}=t,o=Fn(s.dtype,r.dtype);if("complex64"===s.dtype){const i=e.texData.get(s.dataId),l=e.texData.get(r.dataId),u=new m1(f1.REAL,s.shape,r.shape),c=new m1(f1.IMAG,s.shape,r.shape),h=[{dataId:i.complexTensorInfos.real.dataId,dtype:i.complexTensorInfos.real.dtype,shape:s.shape},{dataId:i.complexTensorInfos.imag.dataId,dtype:i.complexTensorInfos.imag.dtype,shape:s.shape},{dataId:l.complexTensorInfos.real.dataId,dtype:l.complexTensorInfos.real.dtype,shape:r.shape},{dataId:l.complexTensorInfos.imag.dataId,dtype:l.complexTensorInfos.imag.dtype,shape:r.shape}],d=e.runWebGLProgram(u,h,"float32"),p=e.runWebGLProgram(c,h,"float32"),f=zr({inputs:{real:d,imag:p},backend:e});return e.disposeIntermediateTensorInfo(d),e.disposeIntermediateTensorInfo(p),f}if(e.shouldExecuteOnCPU([s,r])){const i=e.texData.get(s.dataId),l=e.texData.get(r.dataId),[u,c]=DW(s.shape,r.shape,i.values,l.values,o),h=e.makeTensorInfo(c,o);return e.texData.get(h.dataId).values=u,h}let a;return a=z().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new fa(g1,s.shape,r.shape):new wo(g1,s.shape,r.shape),e.runWebGLProgram(a,[s,r],o)}const z4={kernelName:Xa,backendName:"webgl",kernelFunc:og};function ce(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{shape:o}=s,a=e,i=G(r.shape),l=gg(o,i),u=G(l);I(i===u,()=>`The new shape (${l}) has ${u} elements and the old shape (${r.shape}) has ${i} elements. The new shape and old shape must have the same number of elements.`);const c=a.texData.get(r.dataId);return!c.isPacked||Hc(r.shape,l)||null!==c.texture&&Hc(c.shape,l)?(a.incRef(r.dataId),{dataId:r.dataId,shape:l,dtype:r.dtype}):function M4(n,t,e){const s=[la(n.shape),...ua(n.shape)],r={dtype:n.dtype,shape:s,dataId:n.dataId},o=[la(t),...ua(t)],a=new r1(o,s),u=e.runWebGLProgram(a,[r],n.dtype,[s],!0);return{dataId:u.dataId,shape:t,dtype:u.dtype}}(r,l,a)}const B4={kernelName:eu,backendName:"webgl",kernelFunc:ce};class y1{constructor(t,e){this.variableNames=["x"];const{windowSize:s,batchSize:r,inSize:o,outSize:a}=t;this.outputShape=[r,a];const i=4*Math.floor(s/4),l=s%4;let u="sumValue += dot(values, ones);";if(null!=e){const h=1/e;u=`sumValue += dot(values * ${ko(h)?h.toPrecision(2):h}, ones);`}let c="";o%s>0&&(c=`\n        if (inIdx < 0 || inIdx >= ${o}) {\n          return 0.0;\n        }\n      `),this.userCode=`\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${c}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${s};\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${i}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${u}\n        }\n\n        int inIdx = inOffset + ${i};\n        if (${1===l}) {\n          vec4 values = vec4(getValue(batch, inIdx), 0.0, 0.0, 0.0);\n\n          ${u}\n        } else if (${2===l}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1), 0.0, 0.0);\n\n          ${u}\n        } else if (${3===l}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2), 0.0);\n\n          ${u}\n        }\n        setOutput(sumValue);\n      }\n    `}}class V4{constructor(t,e){this.variableNames=["x"];const{windowSize:s,batchSize:r,inSize:o,outSize:a}=t;this.outputShape=[r,a];let i="0.0",l="";"prod"===e?i="1.0":"min"===e?(i="1.0 / 1e-20",l="min"):"max"===e&&(i="-1.0 / 1e-20",l="max");let u=`${e}(${e}(${e}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"sum"===e?u="sumValue":"prod"===e?u="prodValue":"all"===e?u="allValue":"any"===e&&(u="anyValue");const c=4*Math.floor(s/4),h=s%4;let d=`\n      if (${"sum"===e}) {\n        sumValue += dot(values, ones);\n      } else if (${"prod"===e}) {\n        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);\n        prodValue *= tmp[0] * tmp[1];\n      } else {\n        minMaxValue = ${l}(values, minMaxValue);\n        if (${"min"===e} || ${"max"===e}) {\n          minMaxValue = ${l}(values, minMaxValue);\n          bvec4 isNaN = isnan(values);\n          if (isNaN.r || isNaN.g || isNaN.b || isNaN.a) {\n            minMaxValue = vec4(NAN);\n          }\n        }\n      }\n    `,p="vec4";"all"===e?(i="1.0",d="\n        bool reducedAllValue = all(values);\n        float floatedReducedAllValue = float(reducedAllValue);\n        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);\n      ",p="bvec4"):"any"===e&&(i="0.0",d="\n        bool reducedAnyValue = any(values);\n        float floatedReducedAnyValue = float(reducedAnyValue);\n        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);\n      ",p="bvec4");let f="";o%s>0&&(f=`\n        if (inIdx < 0 || inIdx >= ${o}) {\n          return initializationValue;\n        }\n      `),this.userCode=`\n      const float initializationValue = ${i};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${f}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${s};\n\n        vec4 minMaxValue = vec4(${i});\n        float prodValue = 1.0;\n        float sumValue = 0.0;\n        float allValue = 1.0;\n        float anyValue = 0.0;\n\n        for (int i = 0; i < ${c}; i += 4) {\n          int inIdx = inOffset + i;\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${d}\n        }\n\n        int inIdx = inOffset + ${c};\n        if (${1===h}) {\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          ${d}\n        } else if (${2===h}) {\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          ${d}\n        } else if (${3===h}) {\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          ${d}\n        }\n        setOutput(${u});\n      }\n    `}}function So(n,t,e,s){const r=function W4(n){const t=[];for(;0===t.length||1!==t[t.length-1].outSize;){const e=t.length?t[t.length-1].outSize:n[1],s=Qu(e);t.push({inSize:e,windowSize:s,outSize:Math.ceil(e/s)})}return t}(n.shape);let o=n;for(let a=0;a<r.length;a++){const{inSize:i,windowSize:l,outSize:u}=r[a];let c,h;c="mean"===e?0===a?new y1({windowSize:l,inSize:i,batchSize:n.shape[0],outSize:u},i):new y1({windowSize:l,inSize:i,batchSize:n.shape[0],outSize:u}):new V4({windowSize:l,inSize:i,batchSize:n.shape[0],outSize:u},e),h=o,o=s.runWebGLProgram(c,[o],t),h.dataId!==n.dataId&&s.disposeIntermediateTensorInfo(h)}return o}class U4{constructor(t,e){this.variableNames=["A"];const s=new Array(t.length);for(let a=0;a<s.length;a++)s[a]=t[e[a]];this.outputShape=s,this.rank=s.length;const r=ct(this.rank),o=function G4(n){const t=n.length;if(t>6)throw Error(`Transpose for rank ${t} is not yet supported`);const e=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u","resRC.v"],s=new Array(t);for(let r=0;r<n.length;r++)s[n[r]]=e[r];return s.join()}(e);this.userCode=`\n    void main() {\n      ${r} resRC = getOutputCoords();\n      setOutput(getA(${o}));\n    }\n    `}}class H4{constructor(t,e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0;const s=new Array(t.length);for(let c=0;c<s.length;c++)s[c]=t[e[c]];if(this.outputShape=s,this.rank=s.length,this.rank>6)throw Error(`Packed transpose for rank ${this.rank} is not yet supported.`);const r=ct(this.rank),o=s1("rc",this.rank),a=new Array(this.rank);for(let c=0;c<e.length;c++)a[e[c]]=o[c];const i=`vec2(${a.slice(-2).join()})`,l=`++${o[this.rank-1]} < ${s[this.rank-1]}`,u=`getChannel(getA(${a.join()}), ${i})`;this.userCode=`\n    void main() {\n      ${r} rc = getOutputCoords();\n      vec4 result = vec4(0.);\n      result[0] = ${u};\n      if(${l}) {\n        result[1] = ${u};\n      }\n      --${o[this.rank-1]};\n      if(++${o[this.rank-2]} < ${s[this.rank-2]}) {\n        result[2] = ${u};\n        if(${l}) {\n          result[3] = ${u};\n        }\n      }\n      setOutput(result);\n    }\n    `}}function Yc(n,t,e){const s=z().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new H4(n.shape,t):new U4(n.shape,t);return e.runWebGLProgram(s,[n],n.dtype)}function Qc(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:o,keepDims:a}=s;return function j4(n,t,e,s){const o=n.shape.length,a=Ge(t,n.shape);let i=a;const l=kt(i,o),u=null!=l;let c=n;u&&(c=Yc(n,l,s),i=Lt(i.length,o)),ln("sum",i,o);const[h,d]=nn(c.shape,i);let p=h;e&&(p=Ot(h,a));const f=G(d),y=ce({inputs:{x:c},attrs:{shape:[G(n.shape)/f,f]},backend:s}),b=So(y,$d(n.dtype),"sum",s),w=ce({inputs:{x:b},attrs:{shape:p},backend:s});return s.disposeIntermediateTensorInfo(y),s.disposeIntermediateTensorInfo(b),u&&s.disposeIntermediateTensorInfo(c),w}(r,o,a,e)}const K4={kernelName:au,backendName:"webgl",kernelFunc:Qc};function kn(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{perm:o}=s,a=e,l=new Array(r.shape.length);for(let c=0;c<l.length;c++)l[c]=r.shape[o[c]];let u;if(a.shouldExecuteOnCPU([r])){const h=a.texData.get(r.dataId).values,d=sg(h,r.shape,r.dtype,o,l);u=a.makeTensorInfo(l,r.dtype),a.texData.get(u.dataId).values=d}else u=Yc(r,o,a);return u}const q4={kernelName:Ao,backendName:"webgl",kernelFunc:kn},x1=1e3;function Jc({a:n,b:t,transposeA:e,transposeB:s,backend:r,bias:o=null,preluActivationWeights:a=null,leakyreluAlpha:i=0,activation:l=null}){const u=n.shape.length,c=t.shape.length,h=e?n.shape[u-2]:n.shape[u-1],d=s?t.shape[c-1]:t.shape[c-2],p=e?n.shape[u-1]:n.shape[u-2],f=s?t.shape[c-2]:t.shape[c-1],g=n.shape.slice(0,-2),m=t.shape.slice(0,-2),y=G(g),x=G(m),w=Le(n.shape.slice(0,-2),t.shape.slice(0,-2)).concat([p,f]);I(h===d,()=>`Error in matMul: inner shapes (${h}) and (${d}) of Tensors with shapes ${n.shape} and ${t.shape} and transposeA=${e} and transposeB=${s} must match.`);const S=e?[y,h,p]:[y,p,h],C=s?[x,f,d]:[x,d,f],k=ce({inputs:{x:n},backend:r,attrs:{shape:S}}),T=ce({inputs:{x:t},backend:r,attrs:{shape:C}}),E=[k,T],R=Math.max(y,x),L=e?k.shape[1]:k.shape[2],B=null!=o,U=null!=a,H="leakyrelu"===l,j=null!=l?rl(l,!0):null;let Y;if((1===p||1===f)&&L>x1&&!1===(B||U||H||null!=j)){let Q=k,se=T;e&&(Q=kn({inputs:{x:k},backend:r,attrs:{perm:[0,2,1]}}),E.push(Q)),s&&(se=kn({inputs:{x:T},backend:r,attrs:{perm:[0,2,1]}}),E.push(se));const le=1===f;let ie=Q;1!==f&&(ie=ce({inputs:{x:Q},backend:r,attrs:{shape:[R,L,1]}}),E.push(ie));const fe=1===f?2:1;let ue=se;le&&(ue=ce({inputs:{x:se},backend:r,attrs:{shape:[R,1,L]}}),E.push(ue));const ye=og({inputs:{a:ie,b:ue},backend:r});Y=Qc({inputs:{x:ye},backend:r,attrs:{axis:fe,keepDims:!0}}),E.push(ye)}else{const Q=Fn(n.dtype,t.dtype),se=new p1(S,C,[R,p,f],e,s,B,j,U,H),re=[k,T];if(null!=o&&re.push(o),U&&re.push(a),H){const le=r.makeTensorInfo([],"float32",cr(i,"float32"));re.push(le),E.push(le)}Y=r.runWebGLProgram(se,re,Q)}const K=ce({inputs:{x:Y},backend:r,attrs:{shape:w}});E.push(Y);for(const Q of E)r.disposeIntermediateTensorInfo(Q);return K}const Z4={kernelName:fu,backendName:"webgl",kernelFunc:function X4(n){const{inputs:t,backend:e,attrs:s}=n,{a:r,b:o,bias:a,preluActivationWeights:i}=t,{transposeA:l,transposeB:u,activation:c,leakyreluAlpha:h}=s;return Jc({a:r,b:o,transposeA:l,transposeB:u,backend:e,bias:a,preluActivationWeights:i,leakyreluAlpha:h,activation:c})}},b1="return abs(x);",Q4={kernelName:hl,backendName:"webgl",kernelFunc:function Y4(n){const{inputs:t,backend:e}=n,{x:s}=t;if(e.shouldExecuteOnCPU([s])&&"complex64"!==s.dtype){const o=e.texData.get(s.dataId),a=t1(o.values);return e.makeTensorInfo(s.shape,s.dtype,a)}let r;return r=z().getBool("WEBGL_PACK_UNARY_OPERATIONS")?new Pr(s.shape,b1):new js(s.shape,b1),e.runWebGLProgram(r,[s],s.dtype)}},eU=et({opSnippet:Jn+"\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return acos(x);\n"}),tU={kernelName:wa,backendName:"webgl",kernelFunc:eU},sU=et({opSnippet:Jn+"\n  if (x < 1.0) return NAN;\nreturn log(x + sqrt(x * x - 1.0));"}),rU={kernelName:va,backendName:"webgl",kernelFunc:sU},w1="return a + b;",oU=cn({opSnippet:w1,packedOpSnippet:w1,supportsComplex:!0,cpuKernelImpl:dW}),aU={kernelName:Eo,backendName:"webgl",kernelFunc:oU};class iU{constructor(t,e){this.outputShape=[],this.outputShape=t,this.variableNames=e.map((o,a)=>`T${a}`);const s=[];this.variableNames.forEach(o=>{s.push(`float v${o} = get${o}AtOutCoords();`)});const r=this.variableNames.map(o=>`v${o}`).join(" + ");this.userCode=`\n      void main() {\n        ${s.join("\n        ")}\n\n        float result = ${r};\n        setOutput(result);\n      }\n    `}}class lU{constructor(t,e){this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t,this.variableNames=e.map((o,a)=>`T${a}`);const s=[];this.variableNames.forEach(o=>{s.push(`vec4 v${o} = get${o}AtOutCoords();`)});const r=this.variableNames.map(o=>`v${o}`).join(" + ");this.userCode=`\n      void main() {\n        ${s.join("\n        ")}\n\n        vec4 result = ${r};\n        setOutput(result);\n      }\n    `}}const uU={kernelName:dl,backendName:"webgl",kernelFunc:function eh(n){const{inputs:t,backend:e}=n,s=t;if(1===s.length)return Bn({inputs:{x:s[0]},backend:e});if(s.length>z().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER")){const l=Math.floor(s.length/2),u=eh({inputs:s.slice(0,l),backend:e}),c=eh({inputs:s.slice(l),backend:e});return eh({inputs:[u,c],backend:e})}const r=s.map(l=>l.dtype).reduce((l,u)=>Fn(l,u)),o=s.map(l=>l.shape),i=z().getBool("WEBGL_PACK")?new lU(s[0].shape,o):new iU(s[0].shape,o);return e.runWebGLProgram(i,s,r)}},hU={kernelName:"All",backendName:"webgl",kernelFunc:function cU(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:o,keepDims:a}=s,i=r.shape.length,l=Ge(o,r.shape);let u=l;const c=kt(u,i);let h=r;null!=c&&(h=kn({inputs:{x:r},backend:e,attrs:{perm:c}}),u=Lt(u.length,i)),ln("all",u,i);const[d,p]=nn(h.shape,u),g=ce({inputs:{x:h},backend:e,attrs:{shape:[-1,G(p)]}}),m=So(g,g.dtype,"all",e);let y;return y=ce(a?{inputs:{x:m},backend:e,attrs:{shape:Ot(d,l)}}:{inputs:{x:m},backend:e,attrs:{shape:d}}),e.disposeIntermediateTensorInfo(g),e.disposeIntermediateTensorInfo(m),null!=c&&e.disposeIntermediateTensorInfo(h),y}},pU={kernelName:"Any",backendName:"webgl",kernelFunc:function dU(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:o,keepDims:a}=s,i=r.shape.length,l=Ge(o,r.shape);let u=l;const c=kt(u,i);let h=r;null!=c&&(h=kn({inputs:{x:r},backend:e,attrs:{perm:c}}),u=Lt(u.length,i)),ln("any",u,i);const[d,p]=nn(h.shape,u),g=ce({inputs:{x:h},backend:e,attrs:{shape:[-1,G(p)]}}),m=So(g,g.dtype,"any",e);let y;return y=ce(a?{inputs:{x:m},backend:e,attrs:{shape:Ot(d,l)}}:{inputs:{x:m},backend:e,attrs:{shape:d}}),e.disposeIntermediateTensorInfo(g),e.disposeIntermediateTensorInfo(m),null!=c&&e.disposeIntermediateTensorInfo(h),y}};class fU{constructor(t,e,s){this.variableNames=["A"];const{windowSize:r,batchSize:o,outSize:a}=t;s||this.variableNames.push("bestIndicesA"),this.outputShape=[o,a],this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${r};\n\n        int bestIndex = inOffset;\n        float bestValue = getA(batch, bestIndex);\n\n        for (int i = 0; i < ${r}; i++) {\n          int inIdx = ${s?"inOffset + i;":"round(getBestIndicesA(batch, inOffset + i));"};\n          float candidate = getA(batch, inIdx);\n          if (candidate ${"max"===e?">":"<"} bestValue) {\n            bestValue = candidate;\n            bestIndex = inIdx;\n          }\n        }\n        setOutput(float(bestIndex));\n      }\n    `}}class mU{constructor(t,e,s,r){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,I(t.length>2,()=>`Packed arg${s.charAt(0).toUpperCase()+s.slice(1)} supports only inputs with rank above 2.`);const a=Math.ceil(t[t.length-1]/e);this.outputShape=t.slice(0,-1),a>1&&this.outputShape.push(a),r||this.variableNames.push("bestIndicesA");const i=this.outputShape,l=i.length,u=ct(l),c=Cn("coords",l);let h,d;if(1===a){d=l+1;const T=ct(d);h=`\n        ${T} sourceLocR = ${T}(${c.join()}, 0);\n        ++${c[l-1]};\n        ${T} sourceLocG = ${T}(${c.join()}, 0);\n        ++${c[l-2]};\n        ${T} sourceLocA = ${T}(${c.join()}, 0);\n        --${c[l-1]};\n        ${T} sourceLocB = ${T}(${c.join()}, 0);\n        --${c[l-2]};`}else d=l,h=`\n        ${u} sourceLocR = coords;\n        ++${c[l-1]};\n        ${u} sourceLocG = coords;\n        ++${c[l-2]};\n        ${u} sourceLocA = coords;\n        --${c[l-1]};\n        ${u} sourceLocB = coords;\n        --${c[l-2]};`;const p=["x","y","z","w","u","v"].slice(0,d),f="."+p[d-1],g=p.map(T=>"int "+T),m=Cn("sourceLocR",d-1).concat("inIdx.r"),y=Cn("sourceLocG",d-1).concat("inIdx.g"),x=Cn("sourceLocB",d-1).concat("inIdx.b"),b=Cn("sourceLocA",d-1).concat("inIdx.a"),w="max"===s?"greaterThan":"lessThan",S=r?"":`\n          inIdx = round(vec4(getBestIndicesAChannel(${m.join()}),\n                             getBestIndicesAChannel(${y.join()}),\n                             getBestIndicesAChannel(${x.join()}),\n                             getBestIndicesAChannel(${b.join()})));`,C=`vec4(\n            getAChannel(${m.join()}),\n            hasNextCol ? getAChannel(${y.join()}) : 0.,\n            hasNextRow ? getAChannel(${x.join()}) : 0.,\n            hasNextRow && hasNextCol ? getAChannel(${b.join()}) : 0.)`,k=r?"":`\n      float getBestIndicesAChannel(${g.join()}) {\n        return getChannel(getBestIndicesA(${p.join()}),\n                                          vec2(${p.slice(-2).join()}));\n      }`;this.userCode=`\n      float getAChannel(${g.join()}) {\n        return getChannel(getA(${p.join()}),\n                               vec2(${p.slice(-2).join()}));\n      }\n      ${k}\n      void main() {\n        ${u} coords = getOutputCoords();\n        bool hasNextCol = ${c[l-1]} < ${i[l-1]-1};\n        bool hasNextRow = ${c[l-2]} < ${i[l-2]-1};\n        ${h}\n        ivec4 srcIdx = ivec4(sourceLocR${f}, sourceLocG${f},\n          sourceLocB${f}, sourceLocA${f}) * ${e};\n        ivec4 inIdx = srcIdx;\n        vec4 bestIndex = vec4(inIdx);\n        vec4 bestValue = ${C};\n\n        for (int i = 0; i < ${e}; i++) {\n          inIdx = srcIdx;\n          ${S}\n          vec4 candidate = ${C};\n          bvec4 nan = isnan(candidate);\n          bvec4 replace = bvec4(\n            vec4(${w}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));\n\n          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,\n                           replace.y  ? candidate.y : bestValue.y,\n                           replace.z  ? candidate.z : bestValue.z,\n                           replace.w  ? candidate.w : bestValue.w);\n          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));\n          srcIdx++;\n        }\n        setOutput(bestIndex);\n      }\n    `}}function v1(n,t,e,s=null){let r=t.shape[0],o=t.shape[1];null!=s&&(r=s.shape[0],o=s.shape[1]);const a=Qu(o),i={windowSize:a,inSize:o,batchSize:r,outSize:Math.ceil(o/a)},l=new fU(i,e,null==s),u=[t];null!=s&&u.push(s);const c=n.runWebGLProgram(l,u,"int32");if(1===c.shape[1])return c;const h=v1(n,t,e,c);return n.disposeIntermediateTensorInfo(c),h}function S1(n,t,e,s=null){const r=null!=s?s.shape:t.shape,a=Qu(r[r.length-1]),i=new mU(r,a,e,null==s),u=n.runWebGLProgram(i,null==s?[t]:[t,s],"int32");if(u.shape.length===t.shape.length){const c=S1(n,t,e,u);return n.disposeIntermediateTensorInfo(u),c}return u}function I1(n,t,e,s){const r=[e];if(ln("arg"+s.charAt(0).toUpperCase()+s.slice(1),r,t.shape.length),!z().getBool("WEBGL_PACK_REDUCE")||t.shape.length<=2){const o=[],a=n.texData.get(t.dataId);let l=t;null!==a&&a.isPacked&&(l=n.unpackTensor(t),o.push(l));const[u,c]=nn(l.shape,r),h=G(c),d=ce({inputs:{x:l},backend:n,attrs:{shape:[-1,h]}});o.push(d);const p=v1(n,d,s);o.push(p);const f=ce({inputs:{x:p},backend:n,attrs:{shape:u}});return o.forEach(g=>n.disposeIntermediateTensorInfo(g)),f}return S1(n,t,s)}const yU={kernelName:pl,backendName:"webgl",kernelFunc:function gU(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:o}=s;let a=Ge(o,r.shape);const i=kt(a,r.shape.length);let l=r;const u=[];null!=i&&(l=kn({inputs:{x:r},backend:e,attrs:{perm:i}}),u.push(l),a=Lt(a.length,l.shape.length)),ln("argMax",[a[0]],l.shape.length);const c=I1(e,l,a[0],"max");return u.forEach(h=>e.disposeIntermediateTensorInfo(h)),c}},bU={kernelName:fl,backendName:"webgl",kernelFunc:function xU(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:o}=s;let a=Ge(o,r.shape);const i=kt(a,r.shape.length);let l=r;const u=[];null!=i&&(l=kn({inputs:{x:r},backend:e,attrs:{perm:i}}),u.push(l),a=Lt(a.length,l.shape.length)),ln("argMin",[a[0]],l.shape.length);const c=I1(e,l,a[0],"min");return u.forEach(h=>e.disposeIntermediateTensorInfo(h)),c}},vU=et({opSnippet:Jn+"\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return asin(x);\n"}),SU={kernelName:Sa,backendName:"webgl",kernelFunc:vU},NU=et({opSnippet:Jn+"return log(x + sqrt(x * x + 1.0));"}),CU={kernelName:Ia,backendName:"webgl",kernelFunc:NU},TU=et({opSnippet:Jn+"\n  return atan(x);\n"}),$U={kernelName:Na,backendName:"webgl",kernelFunc:TU},AU=cn({opSnippet:rg+"\n  return atan(a, b);\n",packedOpSnippet:"\n  vec4 result = atan(a, b);\n  bvec4 isNaNA = isnan(a);\n  bvec4 isNaNB = isnan(b);\n  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);\n  "+vo+"\n  return result;\n"}),RU={kernelName:ka,backendName:"webgl",kernelFunc:AU},FU=et({opSnippet:Jn+"\n  if ((x < -1.0) || (x > 1.0)) return NAN;\nreturn (log(1.0 + x) - log(1.0 - x)) / 2.0;"}),OU={kernelName:Ca,backendName:"webgl",kernelFunc:FU};class ol{constructor(t,e,s,r=!1,o=!1){if(this.variableNames=["x"],"avg"===e&&s)throw new Error("Cannot compute positions for average pool.");const a=t.filterWidth,i=t.strideHeight,l=t.strideWidth,u=t.dilationHeight,c=t.dilationWidth,h=t.effectiveFilterHeight,d=t.effectiveFilterWidth,p=t.padInfo.top,f=t.padInfo.left;this.outputShape=t.outShape;const g="avg"===e;let x="0.0";if(g||(x="-1.0 / 1e-20"),s)return void(this.userCode=`\n        const ivec2 strides = ivec2(${i}, ${l});\n        const ivec2 pads = ivec2(${p}, ${f});\n\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int batch = coords[0];\n          int d = coords[3];\n\n          ivec2 xRCCorner = coords.yz * strides - pads;\n          int xRCorner = xRCCorner.x;\n          int xCCorner = xRCCorner.y;\n\n          // max/min x(?, ?, d) to get y(yR, yC, d).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n          float avgValue = 0.0;\n\n          for (int wR = 0; wR < ${h};\n              wR += ${u}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${t.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${d};\n                wC += ${c}) {\n              int xC = xCCorner + wC;\n\n              if (xC < 0 || xC >= ${t.inWidth}) {\n                continue;\n              }\n\n              float value = getX(batch, xR, xC, d);\n\n              // If a min / max value has already been found, use it. If not,\n              // use the current value.\n              float currMinMaxValue = mix(\n                  value, minMaxValue, minMaxValueFound);\n              if (value >= currMinMaxValue) {\n                minMaxValue = value;\n                minMaxValueFound = 1.0;\n                minMaxPosition = ${r?o?`((batch  * ${t.inHeight} + xR) * ${t.inWidth} + xC) * ${t.inChannels} + d`:`(xR * ${t.inWidth} + xC) * ${t.inChannels} + d`:`wR * ${d} + wC`};\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `);let w=`${e}(${e}(${e}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===e&&(w="avgValue / max(count, 1.0)");const S=4*Math.floor(a/4),C=a%4,k=`\n      if (${g}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec2 strides = ivec2(${i}, ${l});\n      const ivec2 pads = ivec2(${p}, ${f});\n      const float initializationValue = ${x};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xR, int xC, int d) {\n        if (xC < 0 || xC >= ${t.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xR, xC, d);\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d = coords[3];\n\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // max/min x(?, ?, d) to get y(yR, yC, d).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${x});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wR = 0; wR < ${h};\n            wR += ${u}) {\n          int xR = xRCorner + wR;\n\n          if (xR < 0 || xR >= ${t.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${S}; wC += 4) {\n            int xC = xCCorner + wC * ${c};\n\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${c}, d),\n              getValue(batch, xR, xC + 2 * ${c}, d),\n              getValue(batch, xR, xC + 3 * ${c}, d)\n            );\n\n            ${k}\n          }\n\n          int xC = xCCorner + ${S};\n          if (${1===C}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              initializationValue,\n              initializationValue,\n              initializationValue\n            );\n\n            ${k}\n          } else if (${2===C}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${c}, d),\n              initializationValue,\n              initializationValue\n            );\n\n            ${k}\n          } else if (${3===C}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${c}, d),\n              getValue(batch, xR, xC + 2 * ${c}, d),\n              initializationValue\n            );\n\n            ${k}\n          }\n        }\n        setOutput(${w});\n      }\n    `}}class ag{constructor(t,e,s,r=!1,o=!1){if(this.variableNames=["x"],"avg"===e&&s)throw new Error("Cannot compute positions for average pool.");const a=t.filterWidth,i=t.strideDepth,l=t.strideHeight,u=t.strideWidth,c=t.dilationDepth,h=t.dilationHeight,d=t.dilationWidth,p=t.effectiveFilterDepth,f=t.effectiveFilterHeight,g=t.effectiveFilterWidth,m=t.padInfo.front,y=t.padInfo.top,x=t.padInfo.left;this.outputShape=t.outShape;const b="avg"===e;let w="0.0";if(b||(w="-1.0 / 1e-20"),s)return void(this.userCode=`\n        const ivec3 strides =\n            ivec3(${i}, ${l}, ${u});\n        const ivec3 pads = ivec3(${m}, ${y}, ${x});\n\n        void main() {\n          ivec5 coords = getOutputCoords();\n          int batch = coords.x;\n          int ch = coords.u;\n\n          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n          int xDCorner = xCorner.x;\n          int xRCorner = xCorner.y;\n          int xCCorner = xCorner.z;\n\n          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n\n          for (int wD = 0; wD < ${p};\n              wD += ${c}) {\n            int xD = xDCorner + wD;\n\n            if (xD < 0 || xD >= ${t.inDepth}) {\n              continue;\n            }\n\n            for (int wR = 0; wR < ${f};\n                wR += ${h}) {\n              int xR = xRCorner + wR;\n\n              if (xR < 0 || xR >= ${t.inHeight}) {\n                continue;\n              }\n\n              for (int wC = 0; wC < ${g};\n                  wC += ${d}) {\n                int xC = xCCorner + wC;\n\n                if (xC < 0 || xC >= ${t.inWidth}) {\n                  continue;\n                }\n\n                float value = getX(batch, xD, xR, xC, ch);\n\n                // If a min / max value has already been found, use it. If not,\n                // use the current value.\n                float currMinMaxValue = mix(\n                    value, minMaxValue, minMaxValueFound);\n                if (value >= currMinMaxValue) {\n                  minMaxValue = value;\n                  minMaxValueFound = 1.0;\n                  minMaxPosition = ${r?o?`(((batch * ${t.inDepth} + xD) * ${t.inHeight} + xR) * ${t.inWidth} + xC) * ${t.inChannels} + ch`:`((xD * ${t.inHeight} + xR) * ${t.inWidth} + xC) * ${t.inChannels} + ch`:`wD * ${f} * ${g} +\n                      wR * ${g} + wC`};\n                }\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `);let C=`${e}(${e}(${e}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===e&&(C="avgValue / max(count, 1.0)");const k=4*Math.floor(a/4),T=a%4,E=`\n      if (${b}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec3 strides =\n        ivec3(${i}, ${l}, ${u});\n      const ivec3 pads = ivec3(${m}, ${y}, ${x});\n      const float initializationValue = ${w};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xD, int xR, int xC, int ch) {\n        if (xC < 0 || xC >= ${t.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xD, xR, xC, ch);\n      }\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xDCorner = xCorner.x;\n        int xRCorner = xCorner.y;\n        int xCCorner = xCorner.z;\n\n        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${w});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wD = 0; wD < ${p};\n            wD += ${c}) {\n          int xD = xDCorner + wD;\n\n          if (xD < 0 || xD >= ${t.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${f};\n            wR += ${h}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${t.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${k}; wC += 4) {\n              int xC = xCCorner + wC * ${d};\n\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${d}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${d}, ch),\n                getValue(batch, xD, xR, xC + 3 * ${d}, ch)\n              );\n\n              ${E}\n            }\n\n            int xC = xCCorner + ${k};\n            if (${1===T}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                initializationValue,\n                initializationValue,\n                initializationValue\n              );\n\n              ${E}\n            } else if (${2===T}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${d}, ch),\n                initializationValue,\n                initializationValue\n              );\n\n              ${E}\n            } else if (${3===T}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${d}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${d}, ch),\n                initializationValue\n              );\n\n              ${E}\n            }\n          }\n        }\n        setOutput(${C});\n      }\n    `}}const PU={kernelName:ml,backendName:"webgl",kernelFunc:function LU(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t;nl(r,"avgPool");const{filterSize:o,strides:a,pad:i,dimRoundingMode:l}=s;I(an(a,1),()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${a} and dilations '1'`);const c=os(r.shape,o,a,1,i,l);if(1===c.filterWidth&&1===c.filterHeight&&Xe(c.inShape,c.outShape))return Bn({inputs:{x:r},backend:e});const h=new ol(c,"avg",!1);return e.runWebGLProgram(h,[r],"float32")}},MU={kernelName:gl,backendName:"webgl",kernelFunc:function zU(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{filterSize:o,strides:a,pad:i,dimRoundingMode:l,dataFormat:u}=s,h=Xs(r.shape,o,a,[1,1,1],i,l,u),d=new ag(h,"avg",!1);return e.runWebGLProgram(d,[r],"float32")}};class BU{constructor(t){this.variableNames=["dy"],this.outputShape=t.inShape;const l=t.effectiveFilterHeight,u=t.effectiveFilterWidth;this.userCode=`\n      const ivec2 pads = ivec2(${l-1-t.padInfo.top}, ${u-1-t.padInfo.left});\n      const float avgMultiplier = float(${1/(t.filterHeight*t.filterWidth)});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${l};\n            wR += ${t.dilationHeight}) {\n          float dyR = float(dyRCorner + wR) / ${t.strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${u};\n            wC+= ${t.dilationWidth}) {\n            float dyC = float(dyCCorner + wC) / ${t.strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n\n            dotProd += dyValue * avgMultiplier;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class VU{constructor(t){this.variableNames=["dy"],this.outputShape=t.inShape;const h=t.effectiveFilterDepth,d=t.effectiveFilterHeight,p=t.effectiveFilterWidth;this.userCode=`\n      const ivec3 pads = ivec3(${h-1-t.padInfo.front}, ${d-1-t.padInfo.top}, ${p-1-t.padInfo.left});\n      const float avgMultiplier = float(${1/(t.filterDepth*t.filterHeight*t.filterWidth)});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${h};\n            wD += ${t.dilationDepth}) {\n          float dyD = float(dyDCorner + wD) / ${t.strideDepth}.0;\n\n          if (dyD < 0.0 || dyD >= ${t.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${d};\n              wR += ${t.dilationHeight}) {\n            float dyR = float(dyRCorner + wR) / ${t.strideHeight}.0;\n\n            if (dyR < 0.0 || dyR >= ${t.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${p};\n                wC += ${t.dilationWidth}) {\n              float dyC = float(dyCCorner + wC) / ${t.strideWidth}.0;\n\n              if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n\n              dotProd += dyValue * avgMultiplier;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const UU={kernelName:xh,backendName:"webgl",kernelFunc:function WU(n){const{inputs:t,backend:e,attrs:s}=n,{dy:r,input:o}=t,a=o,{filterSize:i,strides:l,pad:u,dimRoundingMode:c}=s,d=Xs(a.shape,i,l,[1,1,1],u,c),p=new VU(d);return e.runWebGLProgram(p,[r],a.dtype)}},HU={kernelName:yh,backendName:"webgl",kernelFunc:function GU(n){const{inputs:t,backend:e,attrs:s}=n,{dy:r,input:o}=t,a=o;nl([r,o],"avgPoolGrad");const{filterSize:i,strides:l,pad:u}=s,c=os(a.shape,i,l,1,u),h=new BU(c);return e.runWebGLProgram(h,[r],a.dtype)}},KU={kernelName:yl,backendName:"webgl",kernelFunc:function jU(n){const{inputs:t,backend:e,attrs:s}=n,{a:r,b:o}=t,{transposeA:a,transposeB:i}=s;return Jc({a:r,b:o,transposeA:a,transposeB:i,backend:e})}};class qU{constructor(t,e,s,r,o,a){this.outputShape=[],this.variableNames=["x","mean","variance"],Le(t,e),Le(t,s);let i="0.0";null!=r&&(Le(t,r),this.variableNames.push("offset"),i="getOffsetAtOutCoords()");let l="1.0";null!=o&&(Le(t,o),this.variableNames.push("scale"),l="getScaleAtOutCoords()"),this.outputShape=t,this.userCode=`\n      void main() {\n        float x = getXAtOutCoords();\n        float mean = getMeanAtOutCoords();\n        float variance = getVarianceAtOutCoords();\n        float offset = ${i};\n        float scale = ${l};\n        float inv = scale * inversesqrt(variance + float(${a}));\n        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));\n      }\n    `}}class XU{constructor(t,e,s,r,o,a){this.packedInputs=!0,this.packedOutput=!0,this.variableNames=["x","mean","variance"],Le(t,e),Le(t,s);let i="vec4(0.0)";null!=r&&(Le(t,r),this.variableNames.push("offset"),i="getOffsetAtOutCoords()");let l="vec4(1.0)";null!=o&&(Le(t,o),this.variableNames.push("scale"),l="getScaleAtOutCoords()"),this.outputShape=t,this.userCode=`\n      void main() {\n        vec4 offset = ${i};\n        vec4 scale = ${l};\n\n        vec4 x = getXAtOutCoords();\n        vec4 mean = getMeanAtOutCoords();\n        vec4 variance = getVarianceAtOutCoords();\n\n        vec4 inv = scale * inversesqrt(variance + vec4(${a}));\n\n        setOutput((x - mean) * inv + offset);\n      }\n    `}}const ZU={kernelName:El,backendName:"webgl",kernelFunc:({inputs:n,backend:t,attrs:e})=>{const{x:s,mean:r,variance:o,offset:a,scale:i}=n;I(r.shape.length===o.shape.length,()=>"Batch normalization gradient requires mean and variance to have equal ranks."),I(null==a||r.shape.length===a.shape.length,()=>"Batch normalization gradient requires mean and offset to have equal ranks."),I(null==i||r.shape.length===i.shape.length,()=>"Batch normalization gradient requires mean and scale to have equal ranks.");let{varianceEpsilon:l}=e;null==l&&(l=.001);const u=[s,r,o];let c=null;null!=a&&(c=a.shape,u.push(a));let h=null;null!=i&&(h=i.shape,u.push(i));const d=z().getBool("WEBGL_PACK_NORMALIZATION")?new XU(s.shape,r.shape,o.shape,c,h,l):new qU(s.shape,r.shape,o.shape,c,h,l);return t.runWebGLProgram(d,u,u[0].dtype)}};class YU{constructor(t){this.variableNames=["source"],this.outputShape=t,this.rank=t.length;const e=ct(this.rank);this.customUniforms=[{name:"start",arrayIndex:this.rank,type:"int"}];const s=function QU(n){if(1===n)return"sourceLoc";if(n<=6)return ig.slice(0,n).map(t=>"sourceLoc."+t).join(",");throw Error(`Slicing for rank ${n} is not yet supported`)}(this.rank);let r;r=`\n        ${e} sourceLoc;\n        ${e} coords = getOutputCoords();\n        ${t.map((a,i)=>`sourceLoc.${ig[i]} = start[${i}] + coords.${ig[i]};`).join("\n")}\n      `,this.userCode=`\n      void main() {\n        ${r}\n        setOutput(getSource(${s}));\n      }\n    `}}const ig=["x","y","z","w","u","v"];class JU{constructor(t){this.variableNames=["source"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t,this.rank=t.length,this.customUniforms=[{name:"start",arrayIndex:this.rank,type:"int"}];const e=ct(this.rank),s=Cn("coords",this.rank),r=Cn("sourceLoc",this.rank),o=1===this.rank?"sourceLoc":`vec2(${r.slice(-2).join()})`,a=`getChannel(getSource(${r.join()}), ${o})`,i=`\n      result.x = ${a};\n      if (++${s[this.rank-1]} < ${t[this.rank-1]}) {\n        ++${r[this.rank-1]};\n        result.y = ${a};\n        --${r[this.rank-1]};\n      }\n    `,l=1===this.rank?"":`\n      --${s[this.rank-1]};\n      if (++${s[this.rank-2]} < ${t[this.rank-2]}) {\n        ++${r[this.rank-2]};\n        result.z = ${a};\n        if (++${s[this.rank-1]} < ${t[this.rank-1]}) {\n          ++${r[this.rank-1]};\n          result.w = ${a};\n        }\n      }\n    `,u=this.rank<=4?`sourceLoc = coords +\n            ${e}(${t.map((c,h)=>`start[${h}]`).join()});`:t.map((c,h)=>`${r[h]} = ${s[h]} + start[${h}];`).join("\n");this.userCode=`\n      void main() {\n        ${e} coords = getOutputCoords();\n        ${e} sourceLoc;\n        ${u}\n        vec4 result = vec4(0.);\n        ${i}\n        ${l}\n        setOutput(result);\n      }\n    `}}function ga(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{begin:o,size:a}=s,[i,l]=Tu(r,o,a);if(ap(r,i,l),0===G(l))return e.makeTensorInfo(l,r.dtype,[]);if(e.shouldExecuteOnCPU([r])||"string"===r.dtype){const h=e.texData.get(r.dataId),d=GW(h.values,i,l,r.shape,r.dtype);return e.makeTensorInfo(l,r.dtype,d)}const{isPacked:u}=e.texData.get(r.dataId),c=lp(r.shape,i,l);if(u||!c){const h=z().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new JU(l):new YU(l);return e.runWebGLProgram(h,[r],r.dtype,[i])}return e.uploadToGPU(r.dataId),function eG(n,t,e,s){const r=s.texData.get(n.dataId),o=s.makeTensorInfo(e,n.dtype),a=s.texData.get(o.dataId);Object.assign(a,r),a.refCount=1,a.shape=e,a.dtype=n.dtype;let i=up(t,ke(n.shape));r.slice&&(i+=r.slice.flatOffset),a.slice={flatOffset:i,origDataId:r.slice&&r.slice.origDataId||n.dataId};const l=s.dataRefCount.get(a.slice.origDataId)||1;return s.dataRefCount.set(a.slice.origDataId,l+1),o}(r,i,l,e)}const tG={kernelName:ou,backendName:"webgl",kernelFunc:ga},nG={kernelName:xl,backendName:"webgl",kernelFunc:n=>{const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{blockShape:o,crops:a}=s;I(r.shape.length<=4,()=>"batchToSpaceND for rank > 4 with a WebGL backend not implemented yet");const i=o.reduce((x,b)=>x*b),l=Oi(r.shape,o,i),u=Li(l.length,o.length),c=Pi(r.shape,o,i),h=cf(a,o.length),d=hf(c,a,o.length),p=[],f=ce({inputs:{x:r},backend:e,attrs:{shape:l}}),g=kn({inputs:{x:f},backend:e,attrs:{perm:u}}),m=ce({inputs:{x:g},backend:e,attrs:{shape:c}}),y=ga({inputs:{x:m},backend:e,attrs:{begin:h,size:d}});return p.push(f),p.push(g),p.push(m),p.forEach(x=>e.disposeIntermediateTensorInfo(x)),y}},rG={kernelName:bh,backendName:"webgl",kernelFunc:function sG(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,weights:o}=t,{size:a}=s,i=e.readSync(r.dataId),l=e.readSync(o.dataId),u=e1(i,l,o.dtype,o.shape,a);return e.makeTensorInfo([a],o.dtype,u)}},lG={kernelName:bl,backendName:"webgl",kernelFunc:function iG(n){const{inputs:t,backend:e}=n,{a:s,b:r}=t,o=z().getBool("WEBGL_PACK_BINARY_OPERATIONS"),a=z().getNumber("WEBGL_VERSION");if(e.shouldExecuteOnCPU([s,r])||1===a){const l=e.texData.get(s.dataId).values,u=e.texData.get(r.dataId).values,[c,h]=fW(s.shape,r.shape,l,u,s.dtype),d=e.makeTensorInfo(h,s.dtype);return e.texData.get(d.dataId).values=c,d}let i;return i=o?new fa("\n  int r = int(a.r) & int(b.r);\n  int g = int(a.g) & int(b.g);\n  int rb = int(a.b) & int(b.b);\n  int ra = int(a.a) & int(b.a);\n  return vec4(r, g, rb, ra);\n",s.shape,r.shape,!1):new wo("\n  return float(int(a.r) & int(b.r));\n",s.shape,r.shape),e.runWebGLProgram(i,[s,r],s.dtype)}},cG={kernelName:wh,backendName:"webgl",kernelFunc:function uG(n){const{inputs:t,backend:e}=n,{s0:s,s1:r}=t,o=e.readSync(s.dataId),a=e.readSync(r.dataId),i=Le(Array.from(o),Array.from(a));return e.makeTensorInfo([i.length],"int32",Int32Array.from(i))}},N1=cn({opSnippet:"return float(a != b);",cpuKernelImpl:OW,dtype:"bool"}),hG={kernelName:Kl,backendName:"webgl",kernelFunc:N1};function al(n){const{inputs:t,backend:e}=n,{input:s}=t;return Bn({inputs:{x:e.texData.get(s.dataId).complexTensorInfos.real},backend:e})}const dG={kernelName:nd,backendName:"webgl",kernelFunc:al},mG={kernelName:Ta,backendName:"webgl",kernelFunc:function lg(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{dtype:o}=s;if("complex64"===o){if("complex64"===r.dtype)return Bn({inputs:{x:r},backend:e});const a=Kt(r.shape),i=lg({inputs:{x:r},backend:e,attrs:{dtype:"float32"}}),l=zr({inputs:{real:i,imag:a},backend:e});return a.dispose(),e.disposeIntermediateTensorInfo(i),l}if("complex64"===r.dtype){const a=al({inputs:{input:r},backend:e}),i=lg({inputs:{x:a},backend:e,attrs:{dtype:o}});return e.disposeIntermediateTensorInfo(a),i}if(!yg(r.dtype,o)){const a=Bn({inputs:{x:r},backend:e});return{dataId:a.dataId,shape:a.shape,dtype:o}}if(e.shouldExecuteOnCPU([r])){const a=e.texData.get(r.dataId).values,[i,l,u]=mW(a,r.shape,r.dtype,o);return e.makeTensorInfo(i,l,u)}if("int32"===o)return function fG(n,t){const e=new js(n.shape,"return float(int(x));"),s=t.runWebGLProgram(e,[n],"int32");return{dataId:s.dataId,shape:s.shape,dtype:s.dtype}}(r,e);if("bool"===o){const a=e.makeTensorInfo([],"bool",on("bool",1)),l=N1({inputs:{a:r,b:a},backend:e});return e.disposeIntermediateTensorInfo(a),l}throw new Error(`Error in Cast: failed to cast ${r.dtype} to ${o}`)}},C1="return ceil(x);",gG=et({opSnippet:C1,packedOpSnippet:C1,cpuKernelImpl:gW}),yG={kernelName:$a,backendName:"webgl",kernelFunc:gG};class xG{constructor(t){this.variableNames=["A"],this.customUniforms=[{name:"minVal",type:"float"},{name:"maxVal",type:"float"}],this.outputShape=t,this.userCode="\n\n      void main() {\n        float value = getAAtOutCoords();\n        if (isnan(value)) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, minVal, maxVal));\n      }\n    "}}class bG{constructor(t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"minVal",type:"float"},{name:"maxVal",type:"float"}],this.outputShape=t,this.userCode="\n      void main() {\n        vec4 value = getAAtOutCoords();\n\n        if (any(isnan(value))) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));\n      }\n    "}}const vG={kernelName:_a,backendName:"webgl",kernelFunc:function wG(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{clipValueMin:o,clipValueMax:a}=s;let i;return i=z().getBool("WEBGL_PACK_CLIP")?new bG(r.shape):new xG(r.shape),e.runWebGLProgram(i,[r],r.dtype,[[o],[a]])}};class SG{constructor(t){this.variableNames=["real","imag"],this.outputShape=t,this.userCode="\n      void main() {\n        float re = abs(getRealAtOutCoords());\n        float im = abs(getImagAtOutCoords());\n        float mx = max(re, im);\n\n        // sadly the length function in glsl is not underflow-safe\n        // (at least not on Intel GPUs). So the safe solution is\n        // to ensure underflow-safety in all cases.\n        setOutput(\n          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))\n        );\n      }\n    "}}function k1(n,t){return{dataId:t.dataId,dtype:t.dtype,shape:n.shape}}const NG={kernelName:wl,backendName:"webgl",kernelFunc:function IG(n){const{inputs:t,backend:e}=n,{x:s}=t,r=e.texData.get(s.dataId),o=new SG(s.shape),a=[k1(s,r.complexTensorInfos.real),k1(s,r.complexTensorInfos.imag)];return e.runWebGLProgram(o,a,a[0].dtype)}};class CG{constructor(t){this.outputShape=[],this.outputShape=Ls(t,1),this.variableNames=t.map((a,i)=>`T${i}`);const e=new Array(t.length-1);e[0]=t[0][1];for(let a=1;a<e.length;a++)e[a]=e[a-1]+t[a][1];const s=[`if (yC < ${e[0]}) setOutput(getT0(yR, yC));`];for(let a=1;a<e.length;a++)s.push(`else if (yC < ${e[a]}) setOutput(getT${a}(yR, yC-${e[a-1]}));`);s.push(`else setOutput(getT${e.length}(yR, yC-${e[e.length-1]}));`),this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int yR = coords.x;\n        int yC = coords.y;\n\n        ${s.join("\n        ")}\n      }\n    `}}class kG{constructor(t,e){this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[],this.outputShape=Ls(t,e);const s=this.outputShape,r=s.length,o=ct(r),a=Cn("coords",r),i=["x","y","z","w","u","v"].slice(0,r);this.variableNames=t.map((g,m)=>`T${m}`);const l=new Array(t.length-1);l[0]=t[0][e];for(let g=1;g<l.length;g++)l[g]=l[g-1]+t[g][e];const u=i[e],c=i.slice(-2),h=i.join();let d=`if (${u} < ${l[0]}) {\n        return getChannel(\n            getT0(${h}), vec2(${c.join()}));\n        }`;for(let g=1;g<l.length;g++){const m=l[g-1];d+=`\n        if (${u} < ${l[g]}  && ${u} >= ${l[g-1]}) {\n          return getChannel(\n            getT${g}(${th(i,u,m)}),\n            vec2(${th(c,u,m)}));\n        }`}const f=l[l.length-1];d+=`\n        return getChannel(\n          getT${l.length}(${th(i,u,f)}),\n          vec2(${th(c,u,f)}));`,this.userCode=`\n      float getValue(${i.map(g=>"int "+g)}) {\n        ${d}\n      }\n\n      void main() {\n        ${o} coords = getOutputCoords();\n        vec4 result = vec4(getValue(${a}), 0., 0., 0.);\n\n        ${a[r-1]} = ${a[r-1]} + 1;\n        if (${a[r-1]} < ${s[r-1]}) {\n          result.g = getValue(${a});\n        }\n\n        ${a[r-2]} = ${a[r-2]} + 1;\n        if (${a[r-2]} < ${s[r-2]}) {\n          result.a = getValue(${a});\n        }\n\n        ${a[r-1]} = ${a[r-1]} - 1;\n        if (${a[r-2]} < ${s[r-2]} &&\n            ${a[r-1]} < ${s[r-1]}) {\n          result.b = getValue(${a});\n        }\n        setOutput(result);\n      }\n    `}}function th(n,t,e){const s=n.indexOf(t);return n.map((o,a)=>a===s?`${o} - ${e}`:o).join()}function nh(n){const{inputs:t,backend:e}=n,{input:s}=t;return Bn({inputs:{x:e.texData.get(s.dataId).complexTensorInfos.imag},backend:e})}const TG={kernelName:Wh,backendName:"webgl",kernelFunc:nh};function il(n,t,e){const s=n[0].dtype;if("complex64"===s){const p=n.map(x=>al({inputs:{input:x},backend:e})),f=n.map(x=>nh({inputs:{input:x},backend:e})),g=il(p,t,e),m=il(f,t,e),y=zr({inputs:{real:g,imag:m},backend:e});return p.forEach(x=>e.disposeIntermediateTensorInfo(x)),f.forEach(x=>e.disposeIntermediateTensorInfo(x)),e.disposeIntermediateTensorInfo(g),e.disposeIntermediateTensorInfo(m),y}let r=e.shouldExecuteOnCPU(n);if("string"===s&&(r=!0),r){const p=n.map(w=>{const C=[-1,G(w.shape.slice(t))];return ce({inputs:{x:w},backend:e,attrs:{shape:C}})}),f=p.map(w=>({vals:e.readSync(w.dataId),shape:w.shape})),g=Ls(p.map(w=>w.shape),1),y=yW(f,g,s,1===p[0].shape[0]),x=Ls(n.map(w=>w.shape),t),b=e.makeTensorInfo(x,s,y);return p.forEach(w=>e.disposeIntermediateTensorInfo(w)),b}const o=n.filter(p=>G(p.shape)>0),a=z().getBool("WEBGL_PACK_ARRAY_OPERATIONS")&&o[0].shape.length>1;if(1===o.length){const p=a?new js(n[0].shape,Lr):new Pr(n[0].shape,Lr);return e.runWebGLProgram(p,n,s)}const i=z().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER");if(o.length>i){const p=[];for(let g=0;g<o.length;g+=i){const m=o.slice(g,g+i);p.push(il(m,t,e))}const f=il(p,t,e);for(const g of p)e.disposeIntermediateTensorInfo(g);return f}if(a){const p=new kG(o.map(f=>f.shape),t);return e.runWebGLProgram(p,o,s)}const{tensors2D:l,outShape:u}=function $G(n,t,e){const s=Ls(n.map(o=>o.shape),t);return{tensors2D:n.map(o=>ce({inputs:{x:o},attrs:{shape:[-1,G(o.shape.slice(t))]},backend:e})),outShape:s}}(o,t,e),c=new CG(l.map(p=>p.shape)),h=e.runWebGLProgram(c,l,s);l.forEach(p=>e.disposeIntermediateTensorInfo(p));const d=ce({inputs:{x:h},attrs:{shape:u},backend:e});return e.disposeIntermediateTensorInfo(h),d}function T1(n){const{inputs:t,backend:e,attrs:s}=n,{axis:r}=s,o=Ge(r,t[0].shape)[0];af(t.map(u=>u.shape),o);const i=Ls(t.map(u=>u.shape),o);if(0===G(i))return e.makeTensorInfo(i,t[0].dtype,[]);const l=t.filter(u=>G(u.shape)>0);return 1===l.length?Bn({inputs:{x:l[0]},backend:e}):il(l,o,e)}const _G={kernelName:vl,backendName:"webgl",kernelFunc:T1};class $1{constructor(t,e=!1,s=null,r=!1,o=!1){this.variableNames=["x","W"],this.outputShape=t.outShape;const a=t.padInfo.top,i=t.padInfo.left,l=t.strideHeight,u=t.strideWidth,c=t.dilationHeight,h=t.dilationWidth,d=t.filterHeight,p=t.filterWidth,f=4*Math.floor(t.inChannels/4),g=t.inChannels%4,m="channelsLast"===t.dataFormat,y=m?1:2,x=m?2:3,b=m?3:1;let w="",S="";s&&(w=r?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${s}\n        }`:o?`float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${s}\n        }`:`\n          float activation(float x) {\n            ${s}\n          }\n        `,S="result = activation(result);");const C=e?"result += getBiasAtOutCoords();":"";e&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),o&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${w}\n\n      const ivec2 strides = ivec2(${l}, ${u});\n      const ivec2 pads = ivec2(${a}, ${i});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d2 = coords[${b}];\n\n        ivec2 xRCCorner =\n            ivec2(coords[${y}], coords[${x}]) * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${d}; wR++) {\n          int xR = xRCorner + wR * ${c};\n\n          if (xR < 0 || xR >= ${t.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${p}; wC++) {\n            int xC = xCCorner + wC * ${h};\n\n            if (xC < 0 || xC >= ${t.inWidth}) {\n              continue;\n            }\n\n            for (int d1 = 0; d1 < ${f}; d1 += 4) {\n              vec4 wValues = vec4(\n                getW(wR, wC, d1, d2),\n                getW(wR, wC, d1 + 1, d2),\n                getW(wR, wC, d1 + 2, d2),\n                getW(wR, wC, d1 + 3, d2)\n              );\n\n              if (${m}) {\n                vec4 xValues = vec4(\n                  getX(batch, xR, xC, d1),\n                  getX(batch, xR, xC, d1 + 1),\n                  getX(batch, xR, xC, d1 + 2),\n                  getX(batch, xR, xC, d1 + 3)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec4 xValues = vec4(\n                  getX(batch, d1, xR, xC),\n                  getX(batch, d1 + 1, xR, xC),\n                  getX(batch, d1 + 2, xR, xC),\n                  getX(batch, d1 + 3, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n\n            if (${1===g}) {\n\n              if (${m}) {\n                dotProd +=\n                    getX(batch, xR, xC, ${f}) *\n                    getW(wR, wC, ${f}, d2);\n              } else {\n                dotProd +=\n                    getX(batch, ${f}, xR, xC) *\n                    getW(wR, wC, ${f}, d2);\n              }\n\n            } else if (${2===g}) {\n              vec2 wValues = vec2(\n                getW(wR, wC, ${f}, d2),\n                getW(wR, wC, ${f} + 1, d2)\n              );\n\n              if (${m}) {\n                vec2 xValues = vec2(\n                  getX(batch, xR, xC, ${f}),\n                  getX(batch, xR, xC, ${f} + 1)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec2 xValues = vec2(\n                  getX(batch, ${f}, xR, xC),\n                  getX(batch, ${f} + 1, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            } else if (${3===g}) {\n              vec3 wValues = vec3(\n                getW(wR, wC, ${f}, d2),\n                getW(wR, wC, ${f} + 1, d2),\n                getW(wR, wC, ${f} + 2, d2)\n              );\n\n              if (${m}) {\n                vec3 xValues = vec3(\n                  getX(batch, xR, xC, ${f}),\n                  getX(batch, xR, xC, ${f} + 1),\n                  getX(batch, xR, xC, ${f} + 2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec3 xValues = vec3(\n                  getX(batch, ${f}, xR, xC),\n                  getX(batch, ${f} + 1, xR, xC),\n                  getX(batch, ${f} + 2, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            }\n          }\n        }\n\n        float result = dotProd;\n        ${C}\n        ${S}\n        setOutput(result);\n      }\n    `}}class EG{constructor(t){this.variableNames=["x","W"],this.outputShape=t.outShape;const e=t.padInfo.front,s=t.padInfo.top,r=t.padInfo.left,o=t.strideDepth,a=t.strideHeight,i=t.strideWidth,l=t.dilationDepth,u=t.dilationHeight,c=t.dilationWidth,h=t.filterDepth,d=t.filterHeight,p=t.filterWidth,f=4*Math.floor(t.inChannels/4),g=t.inChannels%4;this.userCode=`\n      const ivec3 strides = ivec3(${o}, ${a}, ${i});\n      const ivec3 pads = ivec3(${e}, ${s}, ${r});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d2 = coords.u;\n\n        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xFCorner = xFRCCorner.x;\n        int xRCorner = xFRCCorner.y;\n        int xCCorner = xFRCCorner.z;\n\n        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get\n        // y(yF, yR, yC, d2). ? = to be determined. : = across all\n        // values in that axis.\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${h}; wF++) {\n          int xF = xFCorner + wF * ${l};\n\n          if (xF < 0 || xF >= ${t.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${d}; wR++) {\n            int xR = xRCorner + wR * ${u};\n\n            if (xR < 0 || xR >= ${t.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${p}; wC++) {\n              int xC = xCCorner + wC * ${c};\n\n              if (xC < 0 || xC >= ${t.inWidth}) {\n                continue;\n              }\n\n              for (int d1 = 0; d1 < ${f}; d1 += 4) {\n                vec4 xValues = vec4(\n                  getX(batch, xF, xR, xC, d1),\n                  getX(batch, xF, xR, xC, d1 + 1),\n                  getX(batch, xF, xR, xC, d1 + 2),\n                  getX(batch, xF, xR, xC, d1 + 3)\n                );\n                vec4 wValues = vec4(\n                  getW(wF, wR, wC, d1, d2),\n                  getW(wF, wR, wC, d1 + 1, d2),\n                  getW(wF, wR, wC, d1 + 2, d2),\n                  getW(wF, wR, wC, d1 + 3, d2)\n                );\n\n                dotProd += dot(xValues, wValues);\n              }\n\n              if (${1===g}) {\n                dotProd +=\n                  getX(batch, xF, xR, xC, ${f}) *\n                  getW(wF, wR, wC, ${f}, d2);\n              } else if (${2===g}) {\n                vec2 xValues = vec2(\n                  getX(batch, xF, xR, xC, ${f}),\n                  getX(batch, xF, xR, xC, ${f} + 1)\n                );\n                vec2 wValues = vec2(\n                  getW(wF, wR, wC, ${f}, d2),\n                  getW(wF, wR, wC, ${f} + 1, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else if (${3===g}) {\n                vec3 xValues = vec3(\n                  getX(batch, xF, xR, xC, ${f}),\n                  getX(batch, xF, xR, xC, ${f} + 1),\n                  getX(batch, xF, xR, xC, ${f} + 2)\n                );\n                vec3 wValues = vec3(\n                  getW(wF, wR, wC, ${f}, d2),\n                  getW(wF, wR, wC, ${f} + 1, d2),\n                  getW(wF, wR, wC, ${f} + 2, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class _1{constructor(t,e=!1,s=null,r=!1,o=!1){this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=t.outShape,this.enableShapeUniforms=yn(this.outputShape.length);const a=t.padInfo.left,i=t.strideWidth,l=t.dilationWidth,u=t.filterHeight,c=t.filterWidth,h=c;let d="\n       int xR; int xC; int xCOffset;\n       vec4 wTexel; vec4 previous; vec4 final;";for(let m=0;m<c;m++)d+=`\n           vec4 xTexelC${2*m};\n           int xTexelC${2*m}Ready;\n           vec4 xTexelC${2*m+1};\n           int xTexelC${2*m+1}Ready;\n           vec4 xC${m};`;d+=`\n     for (int r = 0; r < ${u}; r++) {\n      for (int d1 = 0; d1 < ${t.inChannels}; d1 += 2) {\n       `;for(let m=0;m<c;m++)d+=`\n           xTexelC${2*m} = vec4(0.0);\n           xTexelC${2*m}Ready = 0;\n           xTexelC${2*m+1} = vec4(0.0);\n           xTexelC${2*m+1}Ready = 0;\n           xC${m} = vec4(0.0);`;d+="\n         xR = xRCorner + r * dilations[0];\n         if (xR >=0 && xR < inDims[0]) {\n       ";for(let m=0;m<(h+1)/2;m++){const y=2*m;if(d+=`\n           xC = xCCorner + ${y*l};\n           `,1===i){if(y<c&&(a%2==1?(d+=`\n                 xCOffset = xC + 1;\n                 if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${y}Ready == 0) {\n                   xTexelC${y} = getX(batch, xR, xCOffset, d1);\n\n                   // Need to manually clear unused channels in case\n                   // we're reading from recycled texture.\n                   if (xCOffset + 1 >= inDims[1]) {\n                     xTexelC${y}.zw = vec2(0.0);\n                   }\n                   xTexelC${y}Ready = 1;\n                 }\n               `,d+=1===l&&y>0?`\n                 xC${y} = vec4(xTexelC${y-2}.zw, xTexelC${y}.xy);\n                 `:`\n                   xCOffset = xC + 1 - 2;\n\n                   if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                     previous = getX(batch, xR, xCOffset, d1);\n\n                     // Need to manually clear unused channels in case\n                     // we're reading from recycled texture.\n                     if (xCOffset + 1 >= inDims[1]) {\n                       previous.zw = vec2(0.0);\n                     }\n\n                     xC${y} = vec4(previous.zw, xTexelC${y}.xy);\n                   } else {\n                     xC${y} = vec4(0.0, 0.0, xTexelC${y}.xy);\n                   }\n                   `):d+=`\n                 if (xC >= 0 && xC < inDims[1] && xTexelC${y}Ready == 0) {\n                   xTexelC${y} = getX(batch, xR, xC, d1);\n                   if (xC + 1 >= inDims[1]) {\n                     xTexelC${y}.zw = vec2(0.0);\n                   }\n                   xTexelC${y}Ready = 1;\n                 }\n\n                 xC${y} = xTexelC${y};\n                 `,y+1<c)){const x=a%2==0?ih(l):l;l%2==0&&a%2==1||l%2!=0&&a%2!=1?(d+=`\n                   xCOffset = xC + imod(pads[1], 2) + ${x};\n\n                   if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${y+1}Ready == 0) {\n                     xTexelC${y+1} = getX(batch, xR, xCOffset, d1);\n\n                     // Need to manually clear unused channels in case\n                     // we're reading from recycled texture.\n                     if (xCOffset + 1 >= inDims[1]) {\n                       xTexelC${y+1}.zw = vec2(0.0);\n                     }\n                     xTexelC${y+1}Ready = 1;\n                   }\n                   `,d+=l>1?`\n                     xCOffset -= 2;\n                     if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                      previous = getX(batch, xR, xCOffset, d1);\n                      xC${y+1} = vec4(previous.zw, xTexelC${y+1}.xy);\n                     } else {\n                      xC${y+1} = vec4(0.0, 0.0, xTexelC${y+1}.xy);\n                     }\n                     `:`\n                     xC${y+1} = vec4(xTexelC${y}.zw, xTexelC${y+1}.xy);\n                     `):d+=1===x?`\n                     xC${y+1} = xTexelC${y};\n                     `:`\n                     xCOffset = xC + ${x};\n\n                     if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${y+1}Ready == 0) {\n                       xTexelC${y+1} = getX(batch, xR, xCOffset, d1);\n                       if (xCOffset + 1 >= inDims[1]) {\n                         xTexelC${y+1}.zw = vec2(0.0);\n                       }\n                       xTexelC${y+1}Ready = 1;\n                     }\n\n                     xC${y+1} = xTexelC${y+1};\n                     `}}else y<c&&(a%2==1?(d+=`\n                 xCOffset = xC + 1 - strides[1];\n                 if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${y}Ready == 0) {\n                   xTexelC${y} = getX(batch, xR, xCOffset, d1);\n                   // Need to manually clear unused channels in case\n                   // we're reading from recycled texture.\n                   if (xCOffset + 1 >= inDims[1]) {\n                     xTexelC${y}.zw = vec2(0.0);\n                   }\n                   xTexelC${y}Ready = 1;\n                 }\n\n                 if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${y+1}Ready == 0) {\n                   xTexelC${y+1} = getX(batch, xR, xC + 1, d1);\n                   // Need to manually clear unused channels in case\n                   // we're reading from recycled texture.\n                   if (xC + 2 >= inDims[1]) {\n                     xTexelC${y+1}.zw = vec2(0.0);\n                   }\n                   xTexelC${y+1}Ready = 1;\n                 }\n\n                 xC${y} = vec4(xTexelC${y}.zw, xTexelC${y+1}.zw);\n               `,y+1<c&&(d+=`\n                   final = vec4(0.0);\n                   xCOffset = xC + 1 + strides[1];\n                   if(xCOffset >= 0 && xCOffset < inDims[1]) {\n                     final = getX(batch, xR, xCOffset, d1);\n                   }\n                   xC${y+1} = vec4(xTexelC${y+1}.xy, final.xy);\n                 `)):(d+=`\n                 if(xC >= 0 && xC < inDims[1] && xTexelC${y}Ready == 0) {\n                   xTexelC${y} = getX(batch, xR, xC, d1);\n                   if (xC + 1 >= inDims[1]) {\n                     xTexelC${y}.zw = vec2(0.0);\n                   }\n                   xTexelC${y}Ready = 1;\n                 }\n\n                 xCOffset = xC + strides[1];\n                 if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${y+1}Ready == 0) {\n                   xTexelC${y+1} = getX(batch, xR, xCOffset, d1);\n                   if (xCOffset + 1 >= inDims[1]) {\n                     xTexelC${y+1}.zw = vec2(0.);\n                   }\n                   xTexelC${y+1}Ready = 1;\n                 }\n\n                 xC${y} = vec4(\n                   xTexelC${y}.xy, xTexelC${y+1}.xy);\n               `,y+1<c&&(d+=`\n                   xC${y+1} = vec4(xTexelC${y}.zw, xTexelC${y+1}.zw);\n                 `)));y<c&&(d+=`\n             wTexel = getW(r, ${y}, d1, d2);\n             dotProd += xC${y}.xxzz * vec4(wTexel.xy, wTexel.xy);\n             if(d1 + 1 < ${t.inChannels}) {\n               dotProd += xC${y}.yyww * vec4(wTexel.zw, wTexel.zw);\n             }\n           `,y+1<c&&(d+=`\n               wTexel = getW(r, ${y+1}, d1, d2);\n               dotProd += xC${y+1}.xxzz * vec4(wTexel.xy, wTexel.xy);\n               if(d1 + 1 < ${t.inChannels}) {\n                 dotProd += xC${y+1}.yyww * vec4(wTexel.zw, wTexel.zw);\n               }\n             `))}d+="\n     }\n   ",d+="\n     }\n   ",d+="\n     }\n   ";let p="",f="";s&&(p=r?`vec4 activation(vec4 a) {\n           vec4 b = getPreluActivationWeightsAtOutCoords();\n           ${s}\n         }`:o?`vec4 activation(vec4 a) {\n           vec4 b = getLeakyreluAlphaAtOutCoords();\n           ${s}\n         }`:`vec4 activation(vec4 x) {\n           ${s}\n         }`,f="result = activation(result);");const g=e?"result += getBiasAtOutCoords();":"";e&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),o&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n       ${p}\n\n       void main() {\n         ivec4 coords = getOutputCoords();\n         int batch = coords.x;\n         ivec2 xRCCorner = coords.yz * strides - pads;\n         int d2 = coords.w;\n         int xRCorner = xRCCorner.x;\n         int xCCorner = xRCCorner.y;\n\n         //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.\n         vec4 dotProd = vec4(0.000000000000001);\n\n         ${d}\n\n         vec4 result = dotProd - vec4(0.000000000000001);\n         ${g}\n         ${f}\n         setOutput(result);\n       }\n     `}}class AG{constructor(t,e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"inputShape",type:"ivec4"},{name:"pad",type:"ivec2"},{name:"stride",type:"ivec2"},{name:"dilation",type:"ivec2"},{name:"inChannels",type:"int"},{name:"itemsPerBlockRow",type:"int"},{name:"outWidth",type:"int"}],this.outputShape=t,this.enableShapeUniforms=yn(this.outputShape.length);const{dataFormat:s}=e,r=Nn(),o="channelsLast"===s,a=o?1:2,i=o?2:3,l=this.enableShapeUniforms?"if(blockIndex < outShape[2] && pos < outShape[1]) {":`if(blockIndex < ${t[2]} && pos < ${t[1]}) {`;let u="";for(let c=0;c<=1;c++)for(let h=0;h<=1;h++)u+=`\n          blockIndex = rc.z + ${h};\n          pos = rc.y + ${c};\n\n          ${l}\n            offsetY = int(blockIndex / outWidth) * stride[0] - pad[0];\n            d0 = offsetY + dilation[0] * (pos / itemsPerBlockRow);\n\n            if(d0 < inputShape[${a}] && d0 >= 0) {\n              // Use custom imod instead mod. On Intel GPU, mod may generate\n              // unexpected value.\n              // https://github.com/tensorflow/tfjs/issues/5447\n              offsetX = imod(blockIndex, outWidth) * stride[1] - pad[1];\n              d1 = offsetX + dilation[1] * (imod(pos, itemsPerBlockRow) /\n                  inChannels);\n\n              if(d1 < inputShape[${i}] && d1 >= 0) {\n\n                ch = imod(pos, inChannels);\n\n                if (${o}) {\n                  innerDims = vec2(d1, ch);\n                  result[${2*c+h}] = getChannel(\n                    getA(rc.x, d0, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                } else {\n                  innerDims = vec2(d0, d1);\n                  result[${2*c+h}] = getChannel(\n                    getA(rc.x, ch, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                }\n              }\n            }\n          }\n        `;this.userCode=`\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0);\n\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n        vec2 innerDims;\n\n        ${u}\n\n        ${r.output} = result;\n      }\n    `}}function sh(n,t){const e=n.length;return e>=3?t?[...n.slice(0,-3),n[e-3]*n[e-2],n[e-1]]:[...n.slice(0,-3),n[e-3],n[e-2]*n[e-1]]:!t&&1===e&&n[0]>1?[n[0],1]:null}function E1({x:n,filter:t,convInfo:e,backend:s,bias:r=null,preluActivationWeights:o=null,leakyreluAlpha:a=0,activation:i=null}){const l=n.shape,u=s.texData.get(n.dataId),c=e.inChannels,h=l[0]*l[1]*l[2],d=e.outChannels,p="channelsLast"===e.dataFormat;let m;const y=[];if(null!=o){const w=sh(o.shape,p);null!=w&&(o=ce({inputs:{x:o},backend:s,attrs:{shape:w}}),y.push(o))}if(null!=r){const w=sh(r.shape,p);null!=w&&(r=ce({inputs:{x:r},backend:s,attrs:{shape:w}}),y.push(r))}if((1!==h&&1!==d||!(c>x1))&&u.isPacked&&p&&null!=u.texture&&l[2]%2!=0&&Xe(u.shape.slice(-3),l.slice(-3))){const S={dataId:n.dataId,shape:[1,l[0]*l[1]*(l[2]+1),e.inChannels],dtype:n.dtype},C=u.shape;u.shape=u.shape.slice(),u.shape[u.shape.length-2]++,I(Hc(u.shape,S.shape),()=>`packed reshape ${u.shape} to ${S.shape} isn't free`);const k=ce({inputs:{x:t},backend:s,attrs:{shape:[1,e.inChannels,e.outChannels]}});y.push(k);const T=Jc({a:S,b:k,backend:s,transposeA:!1,transposeB:!1,bias:r,activation:i,preluActivationWeights:o,leakyreluAlpha:a}),E=s.texData.get(T.dataId);I(E.isPacked,()=>"batchMatMul result is expected to be packed"),u.shape=C,E.shape=e.outShape,m=Bn({inputs:{x:T},backend:s}),m.shape=e.outShape,y.push(T)}else{const w=e.outHeight*e.outWidth,S=ce({inputs:{x:n},backend:s,attrs:{shape:p?[e.batchSize,w,e.inChannels]:[e.batchSize,e.inChannels,w]}}),C=ce({inputs:{x:t},backend:s,attrs:{shape:[1,e.inChannels,e.outChannels]}}),k=Jc({a:p?S:C,b:p?C:S,transposeA:!p,transposeB:!1,backend:s,bias:r,activation:i,preluActivationWeights:o,leakyreluAlpha:a});m=ce({inputs:{x:k},backend:s,attrs:{shape:e.outShape}}),y.push(S),y.push(C),y.push(k)}for(const w of y)s.disposeIntermediateTensorInfo(w);return m}function A1({x:n,filter:t,convInfo:e,backend:s,bias:r=null,preluActivationWeights:o=null,leakyreluAlpha:a=0,activation:i=null}){const{filterWidth:l,filterHeight:u,inChannels:c,outWidth:h,outHeight:d,dataFormat:p}=e,f="channelsLast"===p,g=l*u*c,m=d*h,y=[e.batchSize,g,m],w=[];if(null!=o){const K=sh(o.shape,f);null!=K&&(o=ce({inputs:{x:o},backend:s,attrs:{shape:K}}),w.push(o))}if(null!=r){const K=sh(r.shape,f);null!=K&&(r=ce({inputs:{x:r},backend:s,attrs:{shape:K}}),w.push(r))}const S=ce({inputs:{x:t},backend:s,attrs:{shape:[1,g,G(t.shape)/g]}});w.push(S);const C=new AG(y,e),T=s.runWebGLProgram(C,[n],"float32",[n.shape,[e.padInfo.top,e.padInfo.left],[e.strideHeight,e.strideWidth],[e.dilationHeight,e.dilationWidth],[e.inChannels],[e.filterWidth*e.inChannels],[e.outWidth]]),E=ce({inputs:{x:T},backend:s,attrs:{shape:y}});w.push(T),w.push(E);const R=null!=r,L=null!=o,B="leakyrelu"===i,U=i?rl(i,!0):null,H=new p1(f?E.shape:S.shape,f?S.shape:E.shape,f?[e.batchSize,m,e.outChannels]:[e.batchSize,e.outChannels,m],!0,!1,R,U,L,B),j=f?[E,S]:[S,E];if(r&&j.push(r),L&&j.push(o),B){const K=s.makeTensorInfo([],"float32",cr(a,"float32"));j.push(K),w.push(K)}const Z=s.runWebGLProgram(H,j,"float32"),Y=ce({inputs:{x:Z},backend:s,attrs:{shape:e.outShape}});w.push(Z);for(const K of w)s.disposeIntermediateTensorInfo(K);return Y}const DG={kernelName:Sl,backendName:"webgl",kernelFunc:function RG(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,filter:o}=t,{strides:a,pad:i,dataFormat:l,dilations:u,dimRoundingMode:c}=s,h=Zs(l),d=tn(r.shape,o.shape,a,u,i,c,!1,h);let p;if(1!==d.filterHeight||1!==d.filterWidth||1!==d.dilationHeight||1!==d.dilationWidth||1!==d.strideHeight||1!==d.strideWidth||"SAME"!==d.padInfo.type&&"VALID"!==d.padInfo.type)if(d.strideWidth<=2&&"channelsLast"===h&&z().getBool("WEBGL_EXP_CONV")){const g=new _1(d);p=e.runWebGLProgram(g,[r,o],"float32",[[d.padInfo.top,d.padInfo.left],[d.strideHeight,d.strideWidth],[d.dilationHeight,d.dilationWidth],[d.inHeight,d.inWidth]])}else if(z().getBool("WEBGL_CONV_IM2COL"))p=A1({x:r,filter:o,convInfo:d,backend:e});else{const g=new $1(d);p=e.runWebGLProgram(g,[r,o],"float32")}else p=E1({x:r,filter:o,convInfo:d,backend:e});const f=ce({inputs:{x:p},backend:e,attrs:{shape:d.outShape}});return e.disposeIntermediateTensorInfo(p),f}};class FG{constructor(t){this.variableNames=["x","dy"],this.outputShape=t.filterShape,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int d2 = coords.w;\n\n        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${t.batchSize}; b++) {\n          for (int yR = 0; yR < ${t.outHeight}; yR++) {\n            int xR = wR + yR * ${t.strideHeight} - ${t.padInfo.top};\n\n            if (xR < 0 || xR >= ${t.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${t.outWidth}; yC++) {\n              int xC = wC + yC * ${t.strideWidth} - ${t.padInfo.left};\n\n              if (xC < 0 || xC >= ${t.inWidth}) {\n                continue;\n              }\n\n              ${"channelsLast"===t.dataFormat?"float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);":"float dyValue = getDy(b, d2, yR, yC);\n              float xValue = getX(b, d1, xR, xC);\n              dotProd += (xValue * dyValue);"}\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class OG{constructor(t){this.variableNames=["dy","W"],this.outputShape=t.inShape;const e=t.filterHeight,s=t.filterWidth,a="channelsLast"===t.dataFormat;this.userCode=`\n      const ivec2 pads = ivec2(${e-1-t.padInfo.top}, ${s-1-t.padInfo.left});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[${a?3:1}];\n\n        ivec2 dyCorner = ivec2(coords[${a?1:2}], coords[${a?2:3}]) - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${e}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${t.strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${e} - 1 - wR;\n\n          for (int wC = 0; wC < ${s}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${t.strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${s} - 1 - wC;\n\n            for (int d2 = 0; d2 < ${t.outChannels}; d2++) {\n\n              if (${a}) {\n                float xValue = getDy(batch, idyR, idyC, d2);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              } else {\n                float xValue = getDy(batch, d2, idyR, idyC);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class LG{constructor(t){this.variableNames=["x","dy"],this.outputShape=t.filterShape,this.userCode=`\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int wF = coords.x;\n        int wR = coords.y;\n        int wC = coords.z;\n        int d1 = coords.w;\n        int d2 = coords.u;\n\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${t.batchSize}; b++) {\n          for (int yF = 0; yF < ${t.outDepth}; yF++) {\n            int xF = wF + yF * ${t.strideDepth} - ${t.padInfo.front};\n\n            if (xF < 0 || xF >= ${t.inDepth}) {\n              continue;\n            }\n\n            for (int yR = 0; yR < ${t.outHeight}; yR++) {\n              int xR = wR + yR * ${t.strideHeight} - ${t.padInfo.top};\n\n              if (xR < 0 || xR >= ${t.inHeight}) {\n                continue;\n              }\n\n              for (int yC = 0; yC < ${t.outWidth}; yC++) {\n                int xC = wC + yC * ${t.strideWidth} - ${t.padInfo.left};\n\n                if (xC < 0 || xC >= ${t.inWidth}) {\n                  continue;\n                }\n\n                float dyValue = getDy(b, yF, yR, yC, d2);\n                float xValue = getX(b, xF, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class PG{constructor(t){this.variableNames=["dy","W"],this.outputShape=t.inShape;const e=t.filterDepth,s=t.filterHeight,r=t.filterWidth;this.userCode=`\n      const ivec3 pads = ivec3(${e-1-t.padInfo.front}, ${s-1-t.padInfo.top}, ${r-1-t.padInfo.left});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.u;\n\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyFCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${e}; wF++) {\n          float dyF = float(dyFCorner + wF) / ${t.strideDepth}.0;\n\n          if (dyF < 0.0 || dyF >= ${t.outDepth}.0 || fract(dyF) > 0.0) {\n            continue;\n          }\n          int idyF = int(dyF);\n\n          int wFPerm = ${e} - 1 - wF;\n\n          for (int wR = 0; wR < ${s}; wR++) {\n            float dyR = float(dyRCorner + wR) / ${t.strideHeight}.0;\n\n            if (dyR < 0.0 || dyR >= ${t.outHeight}.0 ||\n              fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            int wRPerm = ${s} - 1 - wR;\n\n            for (int wC = 0; wC < ${r}; wC++) {\n              float dyC = float(dyCCorner + wC) / ${t.strideWidth}.0;\n\n              if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              int wCPerm = ${r} - 1 - wC;\n\n              for (int d2 = 0; d2 < ${t.outChannels}; d2++) {\n                float xValue = getDy(batch, idyF, idyR, idyC, d2);\n                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const MG={kernelName:Sh,backendName:"webgl",kernelFunc:function zG(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,dy:o}=t,{strides:a,pad:i,dataFormat:l,dimRoundingMode:u,filterShape:c}=s,h=Zs(l),d=tn(r.shape,c,a,1,i,u,!1,h),p=new FG(d);return e.runWebGLProgram(p,[r,o],"float32")}};class BG{constructor(t){this.variableNames=["dy","W"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"strides",type:"vec2"}],this.outputShape=t.inShape,this.enableShapeUniforms=yn(this.outputShape.length);const e=t.filterHeight,s=t.filterWidth;this.userCode=`\n      const ivec2 pads = ivec2(${e-1-t.padInfo.top}, ${s-1-t.padInfo.left});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n\n        ivec2 dyCorner = ivec2(coords[1], coords[2]) - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        vec4 result = vec4(0.);\n        for (int wR = 0; wR < ${e}; wR++) {\n          float dyR = float(dyRCorner + wR) / strides[0];\n          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n          int wRPerm = ${e} - 1 - wR;\n\n          for (int wC = 0; wC < ${s}; wC++) {\n            int wCPerm = ${s} - 1 - wC;\n\n            float dyC = float(dyCCorner + wC) / strides[1];\n            bool idyCVal = (dyC >= 0.0) && (dyC < ${t.outWidth}.0)\n              && (fract(dyC) == 0.0);\n            int idyC = int(dyC);\n\n            float dyC2 = float(dyCCorner + wC + 1) / strides[1];\n            bool idyCVal2 = (dyC2 >= 0.0) && (dyC2 < ${t.outWidth}.0)\n              && (fract(dyC2) == 0.0);\n            int idyC2 = int(dyC2);\n\n            if (idyCVal && idyCVal2) {\n              for (int d2 = 0; d2 < ${t.outChannels}; d2 += 2) {\n                vec4 wValue = getW(wRPerm, wCPerm, d1, d2);\n                vec4 dySample = getDy(batch, idyR, idyC, d2);\n                vec4 dySample2 = (idyC / 2 == idyC2 / 2) ?\n                  dySample : getDy(batch, idyR, idyC2, d2);\n\n                vec2 dyValue = mod(float(idyC), 2.) == 0. ?\n                  dySample.xy : dySample.zw;\n                result.xy += vec2(dot(dyValue, wValue.xy),\n                  dot(dyValue, wValue.zw));\n\n                dyValue = mod(float(idyC2), 2.) == 0. ?\n                  dySample2.xy : dySample2.zw;\n                result.zw += vec2(dot(dyValue, wValue.xy),\n                  dot(dyValue, wValue.zw));\n              }\n            } else if (idyCVal) {\n              for (int d2 = 0; d2 < ${t.outChannels}; d2 += 2) {\n                vec4 wValue = getW(wRPerm, wCPerm, d1, d2);\n                vec4 dySample = getDy(batch, idyR, idyC, d2);\n                vec2 dyValue = mod(float(idyC), 2.) == 0. ?\n                  dySample.xy : dySample.zw;\n                result.xy += vec2(dot(dyValue, wValue.xy),\n                  dot(dyValue, wValue.zw));\n              }\n            } else if (idyCVal2) {\n              for (int d2 = 0; d2 < ${t.outChannels}; d2 += 2) {\n                vec4 wValue = getW(wRPerm, wCPerm, d1, d2);\n                vec4 dySample = getDy(batch, idyR, idyC2, d2);\n                vec2 dyValue = mod(float(idyC2), 2.) == 0. ?\n                  dySample.xy : dySample.zw;\n                result.zw += vec2(dot(dyValue, wValue.xy),\n                  dot(dyValue, wValue.zw));\n              }\n            }\n          }\n        }\n        setOutput(result);\n      }\n    `}}const WG={kernelName:Il,backendName:"webgl",kernelFunc:function VG(n){const{inputs:t,backend:e,attrs:s}=n,{dy:r,filter:o}=t,{inputShape:a,strides:i,pad:l,dataFormat:u,dimRoundingMode:c}=s,h=Zs(u),d=tn(a,o.shape,i,1,l,c,!1,h);if(z().getBool("WEBGL_PACK")&&"channelsLast"===h){const p=[[d.strideHeight,d.strideWidth]],f=new BG(d);return e.runWebGLProgram(f,[r,o],"float32",p)}{const p=new OG(d);return e.runWebGLProgram(p,[r,o],"float32")}}},GG={kernelName:Nl,backendName:"webgl",kernelFunc:function UG(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,filter:o}=t,{strides:a,pad:i,dilations:l}=s,u=br(r.shape,o.shape,a,l,i),c=new EG(u);return e.runWebGLProgram(c,[r,o],"float32")}},jG={kernelName:Ih,backendName:"webgl",kernelFunc:function HG(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,dy:o}=t,{strides:a,pad:i,filterShape:l}=s,u=br(r.shape,l,a,1,i),c=new LG(u);return e.runWebGLProgram(c,[r,o],"float32")}},qG={kernelName:Nh,backendName:"webgl",kernelFunc:function KG(n){const{inputs:t,backend:e,attrs:s}=n,{dy:r,filter:o}=t,{pad:a,strides:i,inputShape:l}=s,u=br(l,o.shape,i,1,a),c=new PG(u);return e.runWebGLProgram(c,[r,o],"float32")}},YG=et({opSnippet:ma+"\n  return cos(x);\n",packedOpSnippet:`\n  vec4 result = cos(x);\n  bvec4 isNaN = isnan(x);\n  ${vo}\n  return result;\n`}),QG={kernelName:Ea,backendName:"webgl",kernelFunc:YG},JG=et({opSnippet:"\n  float e2x = exp(-x);\n  return (e2x + 1.0 / e2x) / 2.0;\n"}),eH={kernelName:Aa,backendName:"webgl",kernelFunc:JG};class tH{constructor(t,e,s,r,o){this.variableNames=["Image","Boxes","BoxInd"],this.outputShape=[];const[a,i,l,u]=t,[c]=e,[h,d]=s;this.outputShape=[c,h,d,u];const p="bilinear"===r?1:0,[f,g]=[i-1+".0",l-1+".0"],[m,y,x]=h>1?[""+(i-1)/(h-1),"(y2-y1) * height_ratio",`y1*${f} + float(y)*(height_scale)`]:["0.0","0.0",`0.5 * (y1+y2) * ${f}`],[b,w,S]=d>1?[""+(l-1)/(d-1),"(x2-x1) * width_ratio",`x1*${g} + float(x)*(width_scale)`]:["0.0","0.0",`0.5 * (x1+x2) * ${g}`];this.userCode=`\n      const float height_ratio = float(${m});\n      const float width_ratio = float(${b});\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int y = coords[1];\n        int x = coords[2];\n        int d = coords[3];\n\n        // get box vals\n        float y1 = getBoxes(b,0);\n        float x1 = getBoxes(b,1);\n        float y2 = getBoxes(b,2);\n        float x2 = getBoxes(b,3);\n\n        // get image in batch index\n        int bInd = round(getBoxInd(b));\n        if(bInd < 0 || bInd >= ${a}) {\n          return;\n        }\n\n        float height_scale = ${y};\n        float width_scale = ${w};\n\n        float in_y = ${x};\n        if( in_y < 0.0 || in_y > ${f} ) {\n          setOutput(float(${o}));\n          return;\n        }\n        float in_x = ${S};\n        if( in_x < 0.0 || in_x > ${g} ) {\n          setOutput(float(${o}));\n          return;\n        }\n\n        vec2 sourceFracIndexCR = vec2(in_x,in_y);\n        if(${p} == 1) {\n          // Compute the four integer indices.\n          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);\n          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));\n\n          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);\n          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);\n          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);\n          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);\n\n          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);\n\n          float top = topLeft + (topRight - topLeft) * fracCR.x;\n          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;\n          float newValue = top + (bottom - top) * fracCR.y;\n          setOutput(newValue);\n        } else {\n          // Compute the coordinators of nearest neighbor point.\n          ivec2 sourceNearestCR = ivec2(floor(\n            sourceFracIndexCR + vec2(0.5,0.5)));\n          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);\n          setOutput(newValue);\n        }\n      }\n    `}}const nH={kernelName:kh,backendName:"webgl",kernelFunc:n=>{const{inputs:t,backend:e,attrs:s}=n,{image:r,boxes:o,boxInd:a}=t,{cropSize:i,method:l,extrapolationValue:u}=s,c=new tH(r.shape,o.shape,i,l,u);return e.runWebGLProgram(c,[r,o,a],"float32")}};var rh=function(n){return n.Prod="*",n.Sum="+",n}(rh||{});class R1{constructor(t,e,s,r){this.op=t,this.outputShape=e,this.variableNames=["x"],this.customUniforms=[{name:"index",type:"float"}];const o=this.outputShape.length,i=s?this.op===rh.Prod?"1.0":"0.0":`getX(${D1(o,"coords",this.op)})`,l=this.outputShape[this.outputShape.length-1];let u="",c="";s?(u=r?"end != "+(l-1):"end != 0",c=r?"end + 1":"end - 1"):(u=r?`end + pow2 < ${l}`:"end >= pow2",c=r?"end + pow2":"end - pow2"),this.userCode=`\n      void main() {\n        ${ct(o)} coords = getOutputCoords();\n        int end = ${F1(o,"coords",this.op)};\n        float val = ${i};\n        int pow2 = int(pow(2.0, index));\n        if (${u}) {\n          int idx = ${c};\n          ${F1(o,"coords",this.op)} = idx;\n          val ${this.op}= getX(${D1(o,"coords",this.op)});\n        }\n        setOutput(val);\n      }\n    `}}function D1(n,t,e){if(1===n)return`${t}`;if(2===n)return`${t}.x, ${t}.y`;if(3===n)return`${t}.x, ${t}.y, ${t}.z`;if(4===n)return`${t}.x, ${t}.y, ${t}.z, ${t}.w`;throw new Error(`Cumulative ${e} for rank ${n} is not yet supported`)}function F1(n,t,e){if(1===n)return`${t}`;if(2===n)return`${t}.y`;if(3===n)return`${t}.z`;if(4===n)return`${t}.w`;throw new Error(`Cumulative ${e} for rank ${n} is not yet supported`)}function O1(n,t,e,s,r,o){const a=t.shape.length,i=kt([s],a);let l=t;null!=i&&(l=kn({inputs:{x:t},backend:e,attrs:{perm:i}}));const u=Lt(1,a)[0];if(u!==a-1)throw new Error(`WebGL cumprod shader expects an inner-most axis=${t.shape.length-1} but got axis=${s}`);const c=l.shape[u];let h=Bn({inputs:{x:l},backend:e});for(let d=0;d<=Math.ceil(Math.log2(c))-1;d++){const p=new R1(n,l.shape,!1,o),g=h;h=e.runWebGLProgram(p,[h],h.dtype,[[d]]),e.disposeIntermediateTensorInfo(g)}if(r){const d=new R1(n,l.shape,r,o),p=h;h=e.runWebGLProgram(d,[h],h.dtype),e.disposeIntermediateTensorInfo(p)}if(null!=i){const p=kn({inputs:{x:h},backend:e,attrs:{perm:Sr(i)}});return e.disposeIntermediateTensorInfo(h),e.disposeIntermediateTensorInfo(l),p}return h}const rH={kernelName:Ch,backendName:"webgl",kernelFunc:function sH(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:o,exclusive:a,reverse:i}=s;return O1(rh.Prod,r,e,o,a,i)}},aH={kernelName:Cl,backendName:"webgl",kernelFunc:function oH(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:o,exclusive:a,reverse:i}=s;return O1(rh.Sum,r,e,o,a,i)}},lH={kernelName:Th,backendName:"webgl",kernelFunc:function iH(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,weights:o}=t,{size:a,binaryOutput:i}=s;if(1===r.shape.length){const l=e.readSync(r.dataId),u=e.readSync(o.dataId),c=e1(l,u,o.dtype,o.shape,a);return e.makeTensorInfo([a],o.dtype,c)}if(2===r.shape.length){const l=e.bufferSync(r),u=e.bufferSync(o),c=pW(l,u,a,i);return e.makeTensorInfo(c.shape,o.dtype,c.values)}throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${r.shape.length}.`)}};class uH{constructor(t,e,s){this.variableNames=["x"],this.outputShape=[],this.outputShape=t,this.blockSize=e,this.dataFormat=s,this.userCode=`\n    void main() {\n      ivec4 coords = getOutputCoords();\n      int b = coords[0];\n      int h = ${this.getHeightCoordString()};\n      int w = ${this.getWidthCoordString()};\n      int d = ${this.getDepthCoordString()};\n\n      int in_h = h / ${e};\n      int offset_h = imod(h, ${e});\n      int in_w = w / ${e};\n      int offset_w = imod(w, ${e});\n      int offset_d = (offset_h * ${e} + offset_w) *\n        ${this.getOutputDepthSize()};\n      int in_d = d + offset_d;\n\n      float result = ${this.getInputSamplingString()};\n      setOutput(result);\n    }\n  `}getHeightCoordString(){return"NHWC"===this.dataFormat?"coords[1]":"coords[2]"}getWidthCoordString(){return"NHWC"===this.dataFormat?"coords[2]":"coords[3]"}getDepthCoordString(){return"NHWC"===this.dataFormat?"coords[3]":"coords[1]"}getOutputDepthSize(){return"NHWC"===this.dataFormat?this.outputShape[3]:this.outputShape[1]}getInputSamplingString(){return"NHWC"===this.dataFormat?"getX(b, in_h, in_w, in_d)":"getX(b, in_d, in_h, in_w)"}}const hH={kernelName:$h,backendName:"webgl",kernelFunc:function cH(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{blockSize:o,dataFormat:a}=s,i=r.shape[0],h=("NHWC"===a?r.shape[1]:r.shape[2])*o,d=("NHWC"===a?r.shape[2]:r.shape[3])*o,p=("NHWC"===a?r.shape[3]:r.shape[1])/(o*o),g=new uH("NHWC"===a?[i,h,d,p]:[i,p,h,d],o,a);return e.runWebGLProgram(g,[r],r.dtype)}};class L1{constructor(t,e=!1,s=null,r=!1,o=!1){this.variableNames=["x","W"],this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=t.outShape,this.enableShapeUniforms=yn(this.outputShape.length);const a=t.filterHeight,i=t.filterWidth,l=t.outChannels/t.inChannels;let u="",c="";s&&(u=r?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${s}\n        }`:o?`float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${s}\n        }`:`\n          float activation(float x) {\n            ${s}\n          }\n        `,c="result = activation(result);");const h=e?"result += getBiasAtOutCoords();":"";e&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),o&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${u}\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${l};\n        int q = d2 - d1 * ${l};\n\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.\n        for (int wR = 0; wR < ${a}; wR++) {\n          int xR = xRCorner + wR * dilations[0];\n\n          if (xR < 0 || xR >= inDims[0]) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${i}; wC++) {\n            int xC = xCCorner + wC * dilations[1];\n\n            if (xC < 0 || xC >= inDims[1]) {\n              continue;\n            }\n\n            float xVal = getX(batch, xR, xC, d1);\n            float wVal = getW(wR, wC, d1, q);\n            dotProd += xVal * wVal;\n          }\n        }\n\n        float result = dotProd;\n        ${h}\n        ${c}\n        setOutput(result);\n      }\n    `}}class P1{constructor(t,e=!1,s=null,r=!1,o=!1){this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=t.outShape,this.enableShapeUniforms=yn(this.outputShape.length);const a=t.outChannels/t.inChannels,i=t.padInfo.left,l=t.strideWidth,u=t.dilationWidth,c=t.filterHeight,h=t.filterWidth,d=h;let p="\n      int xR; int xC; int xCOffset;\n      vec4 wTexel; vec4 previous; vec4 final;";for(let y=0;y<h;y++)p+=`\n          vec4 xTexelC${2*y};\n          int xTexelC${2*y}Ready;\n          vec4 xTexelC${2*y+1};\n          int xTexelC${2*y+1}Ready;\n          vec4 xC${y};`;p+=`\n    for (int r = 0; r < ${c}; r++) {\n      `;for(let y=0;y<h;y++)p+=`\n          xTexelC${2*y} = vec4(0.0);\n          xTexelC${2*y}Ready = 0;\n          xTexelC${2*y+1} = vec4(0.0);\n          xTexelC${2*y+1}Ready = 0;\n          xC${y} = vec4(0.0);`;p+="\n        xR = xRCorner + r * dilations[0];\n        if (xR >=0 && xR < inDims[0]) {\n      ";for(let y=0;y<(d+1)/2;y++){const x=2*y;if(p+=`\n          xC = xCCorner + ${x*u};\n          `,1===l){if(x<h&&(i%2==1?(p+=`\n                xCOffset = xC + 1;\n                if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${x}Ready == 0) {\n                  xTexelC${x} = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${x}.zw = vec2(0.0);\n                  }\n                  xTexelC${x}Ready = 1;\n                }\n              `,p+=1===u&&x>0?`\n                xC${x} = vec4(xTexelC${x-2}.zw, xTexelC${x}.xy);\n                `:`\n                  xCOffset = xC + 1 - 2;\n\n                  if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                    previous = getX(batch, xR, xCOffset, d1);\n\n                    // Need to manually clear unused channels in case\n                    // we're reading from recycled texture.\n                    if (xCOffset + 1 >= inDims[1]) {\n                      previous.zw = vec2(0.0);\n                    }\n\n                    xC${x} = vec4(previous.zw, xTexelC${x}.xy);\n                  } else {\n                    xC${x} = vec4(0.0, 0.0, xTexelC${x}.xy);\n                  }\n                  `):p+=`\n                if (xC >= 0 && xC < inDims[1] && xTexelC${x}Ready == 0) {\n                  xTexelC${x} = getX(batch, xR, xC, d1);\n                  if (xC + 1 >= inDims[1]) {\n                    xTexelC${x}.zw = vec2(0.0);\n                  }\n                  xTexelC${x}Ready = 1;\n                }\n\n                xC${x} = xTexelC${x};\n                `,x+1<h)){const b=i%2==0?ih(u):u;u%2==0&&i%2==1||u%2!=0&&i%2!=1?(p+=`\n                  xCOffset = xC + imod(pads[1], 2) + ${b};\n\n                  if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${x+1}Ready == 0) {\n                    xTexelC${x+1} = getX(batch, xR, xCOffset, d1);\n\n                    // Need to manually clear unused channels in case\n                    // we're reading from recycled texture.\n                    if (xCOffset + 1 >= inDims[1]) {\n                      xTexelC${x+1}.zw = vec2(0.0);\n                    }\n                    xTexelC${x+1}Ready = 1;\n                  }\n                  `,p+=u>1?`\n                    xCOffset -= 2;\n                    if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                     previous = getX(batch, xR, xCOffset, d1);\n                     xC${x+1} = vec4(previous.zw, xTexelC${x+1}.xy);\n                    } else {\n                     xC${x+1} = vec4(0.0, 0.0, xTexelC${x+1}.xy);\n                    }\n                    `:`\n                    xC${x+1} = vec4(xTexelC${x}.zw, xTexelC${x+1}.xy);\n                    `):p+=1===b?`\n                    xC${x+1} = xTexelC${x};\n                    `:`\n                    xCOffset = xC + ${b};\n\n                    if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${x+1}Ready == 0) {\n                      xTexelC${x+1} = getX(batch, xR, xCOffset, d1);\n                      if (xCOffset + 1 >= inDims[1]) {\n                        xTexelC${x+1}.zw = vec2(0.0);\n                      }\n                      xTexelC${x+1}Ready = 1;\n                    }\n\n                    xC${x+1} = xTexelC${x+1};\n                    `}}else x<h&&(i%2==1?(p+=`\n                xCOffset = xC + 1 - strides[1];\n                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${x}Ready == 0) {\n                  xTexelC${x} = getX(batch, xR, xCOffset, d1);\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${x}.zw = vec2(0.0);\n                  }\n                  xTexelC${x}Ready = 1;\n                }\n\n                if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${x+1}Ready == 0) {\n                  xTexelC${x+1} = getX(batch, xR, xC + 1, d1);\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xC + 2 >= inDims[1]) {\n                    xTexelC${x+1}.zw = vec2(0.0);\n                  }\n                  xTexelC${x+1}Ready = 1;\n                }\n\n                xC${x} = vec4(xTexelC${x}.zw, xTexelC${x+1}.zw);\n              `,x+1<h&&(p+=`\n                  final = vec4(0.0);\n                  xCOffset = xC + 1 + strides[1];\n                  if(xCOffset >= 0 && xCOffset < inDims[1]) {\n                    final = getX(batch, xR, xCOffset, d1);\n                  }\n                  xC${x+1} = vec4(xTexelC${x+1}.xy, final.xy);\n                `)):(p+=`\n                if(xC >= 0 && xC < inDims[1] && xTexelC${x}Ready == 0) {\n                  xTexelC${x} = getX(batch, xR, xC, d1);\n                  if (xC + 1 >= inDims[1]) {\n                    xTexelC${x}.zw = vec2(0.0);\n                  }\n                  xTexelC${x}Ready = 1;\n                }\n\n                xCOffset = xC + strides[1];\n                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${x+1}Ready == 0) {\n                  xTexelC${x+1} = getX(batch, xR, xCOffset, d1);\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${x+1}.zw = vec2(0.);\n                  }\n                  xTexelC${x+1}Ready = 1;\n                }\n\n                xC${x} = vec4(\n                  xTexelC${x}.xy, xTexelC${x+1}.xy);\n              `,x+1<h&&(p+=`\n                  xC${x+1} = vec4(xTexelC${x}.zw, xTexelC${x+1}.zw);\n                `)));x<h&&(p+=`\n            wTexel = getW(r, ${x}, d1, q);\n            dotProd += xC${x} * vec4(wTexel.xz, wTexel.xz);\n          `,x+1<h&&(p+=`\n              wTexel = getW(r, ${x+1}, d1, q);\n              dotProd += xC${x+1} * vec4(wTexel.xz, wTexel.xz);\n            `))}p+="\n    }\n  ",p+="\n      }\n    ";let f="",g="";s&&(f=r?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${s}\n        }`:o?`vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${s}\n        }`:`vec4 activation(vec4 x) {\n          ${s}\n        }`,g="result = activation(result);");const m=e?"result += getBiasAtOutCoords();":"";e&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),o&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${f}\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${a};\n        int q = d2 - d1 * ${a};\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.\n        vec4 dotProd = vec4(0.000000000000001);\n\n        ${p}\n\n        vec4 result = dotProd - vec4(0.000000000000001);\n        ${m}\n        ${g}\n        setOutput(result);\n      }\n    `}}const pH={kernelName:kl,backendName:"webgl",kernelFunc:function dH(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,filter:o}=t,{strides:a,pad:i,dilations:l,dimRoundingMode:u}=s;let c=l;null==c&&(c=[1,1]),I(an(a,c),()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${a} and dilations '${c}'`);const h=tn(r.shape,o.shape,a,c,i,u,!0);let d;return d=z().getBool("WEBGL_PACK_DEPTHWISECONV")&&h.strideWidth<=2&&h.outChannels/h.inChannels==1?new P1(h):new L1(h),e.runWebGLProgram(d,[r,o],"float32",[[h.padInfo.top,h.padInfo.left],[h.strideHeight,h.strideWidth],[h.dilationHeight,h.dilationWidth],[h.inHeight,h.inWidth]])}};class fH{constructor(t){this.variableNames=["x","dy"],this.outputShape=t.filterShape,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int dm = coords.w;\n        int d2 = d1 * ${t.outChannels/t.inChannels} + dm;\n\n        float dotProd = 0.0;\n\n        // TO DO: Vec4 over the batch size\n        for (int b = 0; b < ${t.batchSize}; b++) {\n          for (int yR = 0; yR < ${t.outHeight}; yR++) {\n            int xR = wR + yR * ${t.strideHeight} - ${t.padInfo.top};\n\n            if (xR < 0 || xR >= ${t.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${t.outWidth}; yC++) {\n              int xC = wC + yC * ${t.strideWidth} - ${t.padInfo.left};\n\n              if (xC < 0 || xC >= ${t.inWidth}) {\n                continue;\n              }\n\n              float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class mH{constructor(t){this.variableNames=["dy","W"],this.outputShape=t.inShape;const e=t.filterHeight,s=t.filterWidth,l=t.outChannels/t.inChannels;this.userCode=`\n      const ivec2 pads = ivec2(${e-1-t.padInfo.top}, ${s-1-t.padInfo.left});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n        ivec2 dyCorner = coords.yz - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        float dotProd = 0.0;\n\n        for (int wR = 0; wR < ${e}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${t.strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${e} - 1 - wR;\n\n          for (int wC = 0; wC < ${s}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${t.strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${s} - 1 - wC;\n\n            // TO DO: Vec4 over the channelMul\n            for (int dm = 0; dm < ${l}; dm++) {\n              int d2 = d1 * ${l} + dm;\n              float xValue = getDy(batch, idyR, idyC, d2);\n              float wValue = getW(wRPerm, wCPerm, d1, dm);\n              dotProd += xValue * wValue;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const yH={kernelName:_h,backendName:"webgl",kernelFunc:function gH(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,dy:o}=t,{strides:a,dilations:i,pad:l,dimRoundingMode:u,filterShape:c}=s,h=tn(r.shape,c,a,i,l,u,!0),d=new fH(h);return e.runWebGLProgram(d,[r,o],"float32")}},bH={kernelName:Eh,backendName:"webgl",kernelFunc:function xH(n){const{inputs:t,backend:e,attrs:s}=n,{dy:r,filter:o}=t,{strides:a,dilations:i,pad:l,dimRoundingMode:u,inputShape:c}=s,h=tn(c,o.shape,a,i,l,u,!0),d=new mH(h);return e.runWebGLProgram(d,[r,o],"float32")}};class wH{constructor(t){this.variableNames=["X"],this.outputShape=[t,t],this.userCode="\n      void main() {\n          ivec2 coords = getOutputCoords();\n          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;\n          setOutput(val);\n      }\n    "}}const SH={kernelName:Ah,backendName:"webgl",kernelFunc:function vH(n){const{inputs:t,backend:e}=n,{x:s}=t,r=[...s.shape,...s.shape],o=G(s.shape),a=ce({inputs:{x:s},backend:e,attrs:{shape:[o]}}),i=new wH(o),l=e.runWebGLProgram(i,[a],a.dtype),u=ce({inputs:{x:l},backend:e,attrs:{shape:r}});return e.disposeIntermediateTensorInfo(a),e.disposeIntermediateTensorInfo(l),u}};class IH{constructor(t){this.variableNames=["x","W"],this.outputShape=t.outShape;const{inHeight:e,inWidth:s,padInfo:r,strideHeight:o,strideWidth:a,filterHeight:i,filterWidth:l,dilationHeight:u,dilationWidth:c}=t,{top:h,left:d}=r;this.userCode=`\n      const ivec2 strides = ivec2(${o}, ${a});\n      const ivec2 pads = ivec2(${h}, ${d});\n      const float neg_infinity = -3.4e38;\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.w;\n        ivec2 outTopLeftCorner =\n            coords.yz * strides - pads;\n        int hBeg = outTopLeftCorner.x;\n        int wBeg = outTopLeftCorner.y;\n\n        float curVal = neg_infinity;\n        for (int h = 0; h < ${i}; h++) {\n          int hIn = hBeg + h * ${u};\n\n          if (hIn >= 0 && hIn < ${e}) {\n            for (int w = 0; w < ${l}; w++) {\n              int wIn = wBeg + w * ${c};\n\n              if (wIn >= 0 && wIn < ${s}) {\n                float xVal = getX(batch, hIn, wIn, d1);\n                float wVal = getW(h, w, d1);\n\n                float val = xVal + wVal;\n                if (val > curVal) {\n                  curVal = val;\n                }\n              }\n            }\n          }\n        }\n\n        float result = curVal;\n        setOutput(result);\n      }\n    `}}const CH={kernelName:Tl,backendName:"webgl",kernelFunc:function NH(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,filter:o}=t,{strides:a,pad:i,dilations:l}=s,u=wi(r.shape,o.shape,a,i,"NHWC",l);let c;const h=new IH(u);c=e.runWebGLProgram(h,[r,o],"float32");const d=ce({inputs:{x:c},backend:e,attrs:{shape:u.outShape}});return e.disposeIntermediateTensorInfo(c),d}},TH={kernelName:Oh,backendName:"webgl",kernelFunc:function kH(n){const{inputs:t,backend:e,attrs:s}=n,{equation:r}=s,o=t,{allDims:a,summedDims:i,idDims:l}=vf(r,o.length);If(a.length,l,o);const{path:u,steps:c}=Nf(i,l),h=c.length;let d=null,p=a.length;const f=[];for(let g=0;g<h;++g){for(const m of c[g]){const{permutationIndices:y,expandDims:x}=Sf(p,l[m]);let b;Cf(y)?b=o[m]:(b=kn({inputs:{x:o[m]},backend:e,attrs:{perm:y}}),f.push(b));const w=b.shape.slice();for(let S=0;S<x.length;++S)w.splice(x[S],0,1);Xe(b.shape,w)||(b=ce({inputs:{x:b},backend:e,attrs:{shape:w}}),f.push(b)),null===d?d=b:(d=og({inputs:{a:b,b:d},backend:e}),f.push(d))}g<h-1&&(u[g]>=0&&(d=Qc({inputs:{x:d},backend:e,attrs:{axis:u[g]-(a.length-p),keepDims:!1}}),f.push(d)),p--)}for(const g of f)g!==d&&e.disposeIntermediateTensorInfo(g);return d}},$H=et({opSnippet:"return (x >= 0.0) ? x : (exp(x) - 1.0);",packedOpSnippet:"\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n"}),_H={kernelName:Da,backendName:"webgl",kernelFunc:$H},RH={kernelName:Lh,backendName:"webgl",kernelFunc:n=>{const{inputs:t,backend:e}=n,{dy:s,y:r}=t,o=z().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new fa("\n  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));\n  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));\n",s.shape,r.shape):new wo("return (b >= 0.0) ? a : a * (b + 1.0);",s.shape,r.shape);return e.runWebGLProgram(o,[s,r],s.dtype)}},DH=cn({opSnippet:"return float(a == b);",packedOpSnippet:"\n  return vec4(equal(a, b));\n",dtype:"bool",cpuKernelImpl:xW}),FH={kernelName:$l,backendName:"webgl",kernelFunc:DH},LH=et({opSnippet:`\n  // Error function is calculated approximately with elementary function.\n  // See "Handbook of Mathematical Functions with Formulas,\n  // Graphs, and Mathematical Tables", Abramowitz and Stegun.\n  float p = ${pf};\n  float a1 = ${ff};\n  float a2 = ${mf};\n  float a3 = ${gf};\n  float a4 = ${yf};\n  float a5 = ${xf};\n\n  float sign = sign(x);\n  x = abs(x);\n  float t = 1.0 / (1.0 + p * x);\n  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));\n`}),PH={kernelName:Fa,backendName:"webgl",kernelFunc:LH},z1=et({opSnippet:ma+"\n  return exp(x);\n",packedOpSnippet:"\n  vec4 result = exp(x);\n  bvec4 isNaN = isnan(x);\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",cpuKernelImpl:bW,dtype:"float32"}),MH={kernelName:Oa,backendName:"webgl",kernelFunc:z1};function ug(n){const{inputs:t,attrs:e,backend:s}=n,{dim:r}=e,{input:o}=t,a=o.shape.length,i=o.shape.slice();let l=r;return r<0&&(I(-(a+1)<=r,()=>`Axis must be in the interval [${-(a+1)}, ${a}]`),l=a+r+1),i.splice(l,0,1),ce({inputs:{x:o},backend:s,attrs:{shape:i}})}const BH={kernelName:_l,backendName:"webgl",kernelFunc:ug},M1="return exp(x) - 1.0;",VH=et({opSnippet:M1,packedOpSnippet:M1,cpuKernelImpl:wW}),WH={kernelName:La,backendName:"webgl",kernelFunc:VH};class B1{constructor(t,e,s){this.variableNames=["real","imag"];const r=e[1];this.outputShape=e;const o=s?`2.0 * ${Math.PI}`:`-2.0 * ${Math.PI}`,a=s?`${r}.0`:"1.0";let i;if("real"===t)i="return real * expR - imag * expI;";else{if("imag"!==t)throw new Error(`FFT component must be either "real" or "imag", got ${t}.`);i="return real * expI + imag * expR;"}this.userCode=`\n      const float exponentMultiplier = ${o};\n\n      float unaryOpComplex(float real, float expR, float imag, float expI) {\n        ${i}\n      }\n\n      float mulMatDFT(int batch, int index) {\n        float indexRatio = float(index) / float(${r});\n        float exponentMultiplierTimesIndexRatio =\n            exponentMultiplier * indexRatio;\n\n        float result = 0.0;\n\n        for (int i = 0; i < ${r}; i++) {\n          // x = (-2|2 * PI / N) * index * i;\n          float x = exponentMultiplierTimesIndexRatio * float(i);\n          float expR = cos(x);\n          float expI = sin(x);\n          float real = getReal(batch, i);\n          float imag = getImag(batch, i);\n\n          result +=\n              unaryOpComplex(real, expR, imag, expI) / ${a};\n        }\n\n        return result;\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        setOutput(mulMatDFT(coords[0], coords[1]));\n      }\n    `}}function V1(n,t,e){const s=e.texData.get(n.dataId),r=G(n.shape),o=n.shape[n.shape.length-1],i=ce({inputs:{x:n},backend:e,attrs:{shape:[r/o,o]}}),l=i.shape,u=new B1("real",l,t),c=new B1("imag",l,t),h=[{dataId:s.complexTensorInfos.real.dataId,dtype:s.complexTensorInfos.real.dtype,shape:l},{dataId:s.complexTensorInfos.imag.dataId,dtype:s.complexTensorInfos.imag.dtype,shape:l}],d=e.runWebGLProgram(u,h,"float32"),p=e.runWebGLProgram(c,h,"float32"),f=zr({inputs:{real:d,imag:p},backend:e});e.disposeIntermediateTensorInfo(d),e.disposeIntermediateTensorInfo(p);const g=ce({inputs:{x:f},backend:e,attrs:{shape:n.shape}});return e.disposeIntermediateTensorInfo(i),e.disposeIntermediateTensorInfo(f),g}const GH={kernelName:"FFT",backendName:"webgl",kernelFunc:function UH(n){const{inputs:t,backend:e}=n,{input:s}=t;return V1(s,!1,e)}};class HH{constructor(t,e){this.outputShape=[],this.customUniforms=[{name:"value",type:"float"}],this.variableNames=["x"],this.outputShape=t,this.userCode="\n      void main() {\n        // Input can be obtained from uniform value.\n        setOutput(value);\n      }\n    "}}function ll(n){const{backend:t,attrs:e}=n,{shape:s,value:r}=e;let{dtype:o}=e;if(o=o||$o(r),"string"===o){const a=Ft(o,G(s));return a.fill(r),t.makeTensorInfo(s,o,a)}{const a=new HH(s,r);return t.runWebGLProgram(a,[],o,[[r]])}}const jH={kernelName:zh,backendName:"webgl",kernelFunc:ll};class KH{constructor(t){this.variableNames=["Image"],this.outputShape=[];const e=t[2];this.outputShape=t,this.userCode=`\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n\n          int coordX = ${e} - x - 1;\n          float outputValue;\n          if(coordX >= 0 && coordX < ${e}) {\n            outputValue = getImage(coords[0], coords[1], coordX, coords[3]);\n          } else {\n            outputValue = getImage(coords[0], coords[1], coords[2], coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `}}const qH={kernelName:Mh,backendName:"webgl",kernelFunc:({inputs:n,backend:t})=>{const{image:e}=n,s=t,r=new KH(e.shape);return s.runWebGLProgram(r,[e],e.dtype)}},W1="return floor(x);",XH=et({opSnippet:W1,packedOpSnippet:W1,cpuKernelImpl:vW}),ZH={kernelName:Pa,backendName:"webgl",kernelFunc:XH},YH=cn({opSnippet:"\n  float s = sign(a) * sign(b);\n  int ia = round(a);\n  int ib = round(b);\n  if (ib != 0) {\n    // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n    return float(idiv(ia, ib, s));\n  } else {\n    return NAN;\n  }\n",packedOpSnippet:"\n  ivec4 ia = round(a);\n  ivec4 ib = round(b);\n  bvec4 cond = notEqual(ib, ivec4(0));\n  ivec4 result = ivec4(0);\n  vec4 s = sign(a) * sign(b);\n\n  // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n  if (cond[0]) {\n    result[0] = idiv(ia[0], ib[0], s[0]);\n  }\n  if (cond[1]) {\n    result[1] = idiv(ia[1], ib[1], s[1]);\n  }\n  if (cond[2]) {\n    result[2] = idiv(ia[2], ib[2], s[2]);\n  }\n  if (cond[3]) {\n    result[3] = idiv(ia[3], ib[3], s[3]);\n  }\n  return vec4(result);\n",dtype:"int32"}),QH={kernelName:za,backendName:"webgl",kernelFunc:YH};class JH{constructor(t){this.variableNames=["A"];const e=Nn(),[s,r]=t;this.outputShape=t,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${r}.0, ${s}.0);\n\n        vec4 values = ${e.texture2D}(A, uv);\n        float value;\n        if (depth == 0) {\n          value = values.r;\n        } else if (depth == 1) {\n          value = values.g;\n        } else if (depth == 2) {\n          value = values.b;\n        } else if (depth == 3) {\n          value = values.a;\n        }\n\n        setOutput(floor(value * 255.0 + 0.5));\n      }\n    `}}class ej{constructor(t){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0;const e=Nn(),[s,r]=t;this.outputShape=t,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n\n        vec4 result = vec4(0.);\n\n        for(int row=0; row<=1; row++) {\n          for(int col=0; col<=1; col++) {\n            texC = coords[1] + row;\n            depth = coords[2] + col;\n\n            vec2 uv = (vec2(texC, texR) + halfCR) /\n                       vec2(${r}.0, ${s}.0);\n            vec4 values = ${e.texture2D}(A, uv);\n            float value;\n            if (depth == 0) {\n              value = values.r;\n            } else if (depth == 1) {\n              value = values.g;\n            } else if (depth == 2) {\n              value = values.b;\n            } else if (depth == 3) {\n              value = values.a;\n            }\n\n            result[row * 2 + col] = floor(value * 255.0 + 0.5);\n          }\n        }\n\n        ${e.output} = result;\n      }\n    `}}const tj={kernelName:vd,backendName:"webgl",kernelFunc:function nj(n){const{inputs:t,backend:e,attrs:s}=n;let{pixels:r}=t;const{numChannels:o}=s,a=typeof HTMLVideoElement<"u"&&r instanceof HTMLVideoElement,i=typeof HTMLImageElement<"u"&&r instanceof HTMLImageElement,[l,u]=a?[r.videoWidth,r.videoHeight]:[r.width,r.height],c=[u,l],h=[u,l,o];if(i||a){const g=z().getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU");(null==ya||g!==cg)&&(cg=g,ya=document.createElement("canvas").getContext("2d",{willReadFrequently:cg})),ya.canvas.width=l,ya.canvas.height=u,ya.drawImage(r,0,0,l,u),r=ya.canvas}const d=e.makeTensorInfo(c,"int32");e.texData.get(d.dataId).usage=fs.PIXELS,e.gpgpu.uploadPixelDataToTexture(e.getTexture(d.dataId),r);const p=z().getBool("WEBGL_PACK")?new ej(h):new JH(h),f=e.runWebGLProgram(p,[d],"int32");return e.disposeData(d.dataId),f}};let ya,cg=z().getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU");const rj={kernelName:mu,backendName:"webgl",kernelFunc:function sj(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,filter:o,bias:a,preluActivationWeights:i}=t,{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:d,activation:p,leakyreluAlpha:f}=s,g=Zs(c),m=tn(r.shape,o.shape,l,h,u,d,!1,g);let y;const x=[],b=null!=a,w=null!=i,S="leakyrelu"===p,C=()=>{const T=[r,o],E=(R,L)=>{if("NCHW"===L&&1===R.shape.length&&1!==R.shape[0]){const B=ce({inputs:{x:R},backend:e,attrs:{shape:[R.shape[0],1,1]}});return x.push(B),B}return R};if(b&&T.push(E(a,c)),w&&T.push(E(i,c)),S){const R=e.makeTensorInfo([],"float32",cr(f,"float32"));T.push(R),x.push(R)}return T};if(1!==m.filterHeight||1!==m.filterWidth||1!==m.dilationHeight||1!==m.dilationWidth||1!==m.strideHeight||1!==m.strideWidth||"SAME"!==m.padInfo.type&&"VALID"!==m.padInfo.type)if(m.strideWidth<=2&&"channelsLast"===g&&z().getBool("WEBGL_EXP_CONV")){const T=p?rl(p,!0):null,E=new _1(m,b,T,w,S),R=[[m.padInfo.top,m.padInfo.left],[m.strideHeight,m.strideWidth],[m.dilationHeight,m.dilationWidth],[m.inHeight,m.inWidth]],L=C();y=e.runWebGLProgram(E,L,"float32",R)}else if(z().getBool("WEBGL_CONV_IM2COL"))y=A1({x:r,filter:o,convInfo:m,backend:e,bias:a,activation:p,preluActivationWeights:i,leakyreluAlpha:f});else{const T=p?rl(p,!1):null,E=new $1(m,b,T,w,S),R=C();y=e.runWebGLProgram(E,R,"float32")}else y=E1({x:r,filter:o,convInfo:m,backend:e,bias:a,activation:p,preluActivationWeights:i,leakyreluAlpha:f});const k=ce({inputs:{x:y},backend:e,attrs:{shape:m.outShape}});return x.push(y),x.forEach(T=>e.disposeIntermediateTensorInfo(T)),k}},aj={kernelName:gu,backendName:"webgl",kernelFunc:function oj(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,filter:o,bias:a,preluActivationWeights:i}=t,{strides:l,pad:u,dilations:c,dimRoundingMode:h,activation:d,leakyreluAlpha:p}=s,f=[];let g=c;null==g&&(g=[1,1]),I(an(l,g),()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${l} and dilations '${g}'`);const m=tn(r.shape,o.shape,l,g,u,h,!0),y=z().getBool("WEBGL_PACK_DEPTHWISECONV")&&m.strideWidth<=2&&m.outChannels/m.inChannels==1,x=d?rl(d,y):null,b=[r,o],w=null!=a,S=null!=i,C="leakyrelu"===d;if(w&&b.push(a),S&&b.push(i),C){const R=e.makeTensorInfo([],"float32",cr(p,"float32"));b.push(R),f.push(R)}let k;k=y?new P1(m,w,x,S,C):new L1(m,w,x,S,C);const E=e.runWebGLProgram(k,b,"float32",[[m.padInfo.top,m.padInfo.left],[m.strideHeight,m.strideWidth],[m.dilationHeight,m.dilationWidth],[m.inHeight,m.inWidth]]);return f.forEach(R=>e.disposeIntermediateTensorInfo(R)),E}};class ij{constructor(t,e,s,r){this.sliceDim=t,this.strides=e,this.paramsShape=r,this.variableNames=["x","indices"],this.outputShape=s;const o=ct(s.length);let a="\n    int index;";for(let i=0;i<this.sliceDim;i++)a+=`\n          index = round(getIndices(coords[0], ${i}));\n          out_of_bounds = out_of_bounds || index < 0;\n          out_of_bounds = out_of_bounds || index >= ${this.paramsShape[i]};\n          flattenIndex += index * ${this.strides[i]};`;this.userCode=`\n         void main() {\n          ${o} coords = getOutputCoords();\n          int flattenIndex = 0;\n          bool out_of_bounds = false;\n\n          ${a}\n\n          setOutput(out_of_bounds ? 0.0 : getX(flattenIndex, coords[1]));\n        }\n      `}}const uj={kernelName:Bh,backendName:"webgl",kernelFunc:function lj(n){const{inputs:t,backend:e}=n,{params:s,indices:r}=t,o=r.shape,a=o[o.length-1],i=G(s.shape),[l,u,c,h]=df(s,r),d=ce({inputs:{x:r},backend:e,attrs:{shape:[u,a]}}),p=ce({inputs:{x:s},backend:e,attrs:{shape:[G(s.shape)/c,c]}});if(e.shouldExecuteOnCPU([s,r])||"string"===s.dtype){const y=e.readSync(r.dataId),x=e.bufferSync(s),b=SW(y,x,s.dtype,u,a,c,h,s.shape,i);return e.makeTensorInfo(l,s.dtype,b.values)}const f=new ij(a,h,[u,c],s.shape),g=e.runWebGLProgram(f,[p,d],p.dtype),m=ce({inputs:{x:g},backend:e,attrs:{shape:l}});return e.disposeIntermediateTensorInfo(d),e.disposeIntermediateTensorInfo(p),e.disposeIntermediateTensorInfo(g),m}};class cj{constructor(t,e){this.variableNames=["A","indices"],this.outputShape=e,this.rank=e.length;const s=ct(this.rank),r=function hj(n,t){const e=["resRC.x","resRC.y","resRC.z","resRC.w"],s=[];for(let r=0;r<n.length;r++)s.push(2===r?"index":`${e[r]}`);return s.join()}(t);this.userCode=`\n      void main() {\n        ${s} resRC = getOutputCoords();\n        int index = int(getIndices(resRC.x, resRC.z));\n        float inBounds = (index >= 0) && (index < ${t[2]}) ? 1.0 : 0.0;\n        setOutput(inBounds * getA(${r}));\n      }\n    `}}function U1(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,indices:o}=t,{axis:a,batchDims:i}=s,l=Ge(a,r.shape)[0];if(z().get("DEBUG")){const x=e.readSync(o.dataId),b=r.shape[l];for(let w=0;w<x.length;++w){const S=x[w];I(S<=b-1&&S>=0,()=>`GatherV2: the index value ${S} is not in [0, ${b-1}]`)}}const u=$f(r,o,l,i),c=G(o.shape),h=[],d=ce({inputs:{x:r},backend:e,attrs:{shape:[u.batchSize,u.outerSize,u.dimSize,u.sliceSize]}}),p=ce({inputs:{x:o},backend:e,attrs:{shape:[u.batchSize,c/u.batchSize]}});h.push(d),h.push(p);const f=[u.batchSize,u.outerSize,c/u.batchSize,u.sliceSize];if(e.shouldExecuteOnCPU([r,o])||"string"===r.dtype){const x=e.bufferSync(p),b=e.bufferSync(d),w=IW(b,x,f);return h.forEach(S=>e.disposeIntermediateTensorInfo(S)),e.makeTensorInfo(u.outputShape,w.dtype,w.values)}const g=new cj(d.shape,f),m=e.runWebGLProgram(g,[d,p],d.dtype);h.push(m);const y=ce({inputs:{x:m},backend:e,attrs:{shape:u.outputShape}});return h.forEach(x=>e.disposeIntermediateTensorInfo(x)),y}const dj={kernelName:Al,backendName:"webgl",kernelFunc:U1},pj=cn({opSnippet:"return float(a > b);",packedOpSnippet:"\n  return vec4(greaterThan(a, b));\n",cpuKernelImpl:NW,dtype:"bool"}),fj={kernelName:Rl,backendName:"webgl",kernelFunc:pj},mj=cn({opSnippet:"return float(a >= b);",packedOpSnippet:"\n  return vec4(greaterThanEqual(a, b));\n",dtype:"bool",cpuKernelImpl:CW}),gj={kernelName:Ma,backendName:"webgl",kernelFunc:mj},xj={kernelName:Vh,backendName:"webgl",kernelFunc:function yj(n){const{inputs:t,backend:e}=n,{input:s}=t;return V1(s,!0,e)}},bj=et({opSnippet:"return float(!isnan(x) && !isinf(x));",dtype:"bool"}),wj={kernelName:Va,backendName:"webgl",kernelFunc:bj},vj=et({opSnippet:"return float(isinf(x));",dtype:"bool"}),Sj={kernelName:Wa,backendName:"webgl",kernelFunc:vj},Ij=et({opSnippet:"return float(isnan(x));",dtype:"bool"}),Nj={kernelName:Ua,backendName:"webgl",kernelFunc:Ij},Cj=cn({opSnippet:"return float(a < b);",packedOpSnippet:"\n  return vec4(lessThan(a, b));\n",cpuKernelImpl:kW,dtype:"bool"}),kj={kernelName:Fl,backendName:"webgl",kernelFunc:Cj},Tj=cn({opSnippet:"return float(a <= b);",packedOpSnippet:"\n  return vec4(lessThanEqual(a, b));\n",cpuKernelImpl:TW,dtype:"bool"}),$j={kernelName:Ol,backendName:"webgl",kernelFunc:Tj},Ej={kernelName:Uh,backendName:"webgl",kernelFunc:function _j(n){const{backend:t,attrs:e}=n,{start:s,stop:r,num:o}=e,a=$W(s,r,o);return t.makeTensorInfo([a.length],"float32",a)}},Rj=et({opSnippet:ma+"\n  return x < 0.0 ? 0./0. : log(x);\n",packedOpSnippet:"\n  vec4 result = log(x);\n  bvec4 isNaN = isnan(x);\n  result.r = isNaN.r ? x.r : (x.r < 0.0 ? 0./0. : result.r);\n  result.g = isNaN.g ? x.g : (x.g < 0.0 ? 0./0. : result.g);\n  result.b = isNaN.b ? x.b : (x.b < 0.0 ? 0./0. : result.b);\n  result.a = isNaN.a ? x.a : (x.a < 0.0 ? 0./0. : result.a);\n  return result;\n",cpuKernelImpl:_W}),Dj={kernelName:Ga,backendName:"webgl",kernelFunc:Rj},Oj=et({opSnippet:ma+"\n  return log(1.0 + x);\n"}),Lj={kernelName:Ha,backendName:"webgl",kernelFunc:Oj},Pj=cn({opSnippet:"return float(a >= 1.0 && b >= 1.0);",packedOpSnippet:"\n  return vec4(\n    vec4(greaterThanEqual(a, vec4(1.0))) *\n    vec4(greaterThanEqual(b, vec4(1.0))));\n",dtype:"bool"}),zj={kernelName:Ll,backendName:"webgl",kernelFunc:Pj},Mj=et({opSnippet:"return float(!(x >= 1.0));"}),Bj={kernelName:Pl,backendName:"webgl",kernelFunc:Mj},Vj=cn({opSnippet:"return float(a >= 1.0 || b >= 1.0);",packedOpSnippet:"\n  return min(\n    vec4(greaterThanEqual(a, vec4(1.0))) +\n    vec4(greaterThanEqual(b, vec4(1.0))),\n    vec4(1.0));\n",dtype:"bool"}),Wj={kernelName:zl,backendName:"webgl",kernelFunc:Vj};class Uj{constructor(t,e,s,r,o){this.variableNames=["x"],this.outputShape=[];const a=e,i=t[3]-1;let l;this.outputShape=t;const u=`float(${s}) + float(${r}) * sum`;l=.5===o?`inversesqrt(${u})`:1===o?`1.0/(${u})`:`exp(log(${u}) * float(-${o}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n        int d = coords[3];\n        float x = getX(b, r, c, d);\n        float sum = 0.0;\n        for (int j = -${a}; j <= ${a}; j++) {\n          int idx = d + j;\n          if (idx >= 0 && idx <=  ${i}) {\n            float z = getX(b, r, c, idx);\n            sum += z * z;\n          }\n        }\n        float val = x * ${l};\n        setOutput(val);\n      }\n    `}}class Gj{constructor(t,e,s,r,o){this.variableNames=["x"],this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0;const a=e,i=t[3]-1;let l;this.outputShape=t;const u=`float(${s}) + float(${r}) * sum`;l=.5===o?`inversesqrt(${u})`:1===o?`1.0/(${u})`:`exp(log(${u}) * float(-${o}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords.x;\n        int r = coords.y;\n        int c = coords.z;\n        int d = coords.w;\n\n        bool hasNextCol = d < ${this.outputShape[3]};\n        bool hasNextRow = c < ${this.outputShape[2]};\n\n        vec4 sum = vec4(0.);\n        vec4 xFragAtOutputCoords = getX(b, r, c, d);\n\n        vec4 xAtOutputCoords = vec4(\n          getChannel(xFragAtOutputCoords, vec2(c, d)),\n          hasNextCol ?\n            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,\n          hasNextRow ?\n            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0\n        );\n\n        int firstChannel = d - ${a};\n        vec2 cache = vec2(0.);\n        if(firstChannel >= 0){\n          vec4 firstChannelFrag = getX(b, r, c, firstChannel);\n          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));\n            if(hasNextRow){\n              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));\n            }\n        }\n\n        ivec2 depth = ivec2(d, d + 1);\n        for (int j = - ${a}; j <= ${a}; j++) {\n          ivec2 idx = depth + j;\n          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));\n          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(${i}));\n\n          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;\n          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;\n\n          if(depthInRange || depthPlusOneInRange){\n            vec4 z = vec4(0.);\n            vec4 xFragAtCurrentDepth;\n            z.xz = cache.xy;\n            if(depthPlusOneInRange && hasNextCol){\n              xFragAtCurrentDepth = idx.y != d ?\n                getX(b, r, c, idx.y) : xFragAtOutputCoords;\n              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));\n              if(hasNextRow){\n                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));\n              }\n            }\n            cache.xy = z.yw;\n            sum += z * z;\n          }\n        }\n        vec4 result = xAtOutputCoords * ${l};\n        setOutput(result);\n      }\n    `}}const Hj={kernelName:Ml,backendName:"webgl",kernelFunc:n=>{const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{depthRadius:o,bias:a,alpha:i,beta:l}=s,u=z().getBool("WEBGL_PACK_NORMALIZATION")?new Gj(r.shape,o,a,i,l):new Uj(r.shape,o,a,i,l);return e.runWebGLProgram(u,[r],r.dtype)}};class jj{constructor(t,e,s,r,o){this.variableNames=["inputImage","outputImage","dy"],this.outputShape=[],this.outputShape=t,this.depth=t[3],this.depthRadius=e,this.bias=s,this.alpha=r,this.beta=o,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n\n        float result = 0.0;\n        for (int d = 0; d < ${this.depth}; ++d) {\n          int depthBegin = int(max(0.0, float(d - ${e})));\n          int depthEnd = int(min(float(${this.depth}),\n              float(d + ${e} + 1)));\n\n          const int MIN_DEPTH_BEGIN = 0;\n          const int MAX_DEPTH_END = ${this.depth};\n\n          float norm = 0.0;\n          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd) {\n              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);\n            }\n            else {\n              break;\n            }\n          }\n\n          norm = float(${r}) * norm + float(${s});\n\n          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd){\n              float dyi = -2.0 * float(${r})\n                * float(${o})\n                * getInputImage(b, r, c, k) * getOutputImage(b, r, c, d)\n                / norm;\n              if (k == d) {\n                dyi += pow(norm, -1.0 * ${o});\n              }\n              if (k == coords[3]) {\n                dyi *= getDy(b, r, c, d);\n                result += dyi;\n              }\n            }\n            else {\n              break;\n            }\n          }\n      }\n      setOutput(result);\n      }\n    `}}const Kj={kernelName:Gh,backendName:"webgl",kernelFunc:n=>{const{inputs:t,backend:e,attrs:s}=n,{x:r,y:o,dy:a}=t,{depthRadius:i,bias:l,alpha:u,beta:c}=s,h=new jj(r.shape,i,l,u,c);return e.runWebGLProgram(h,[r,o,a],r.dtype)}};function G1(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{reductionIndices:o,keepDims:a}=s,i=r.shape.length,l=Ge(o,r.shape);let u=l;const c=kt(u,i),h=null!=c,d=e.shouldExecuteOnCPU([r]);let p=r;if(h){if(d){const b=e.texData.get(p.dataId).values,w=new Array(i);for(let k=0;k<w.length;k++)w[k]=r.shape[c[k]];const S=sg(b,r.shape,r.dtype,c,w);p=e.makeTensorInfo(w,r.dtype),e.texData.get(p.dataId).values=S}else p=Yc(r,c,e);u=Lt(u.length,i)}ln("max",u,i);const[f,g]=nn(p.shape,u);let y,m=f;if(a&&(m=Ot(f,l)),d){const b=e.texData.get(p.dataId).values,w=EW(b,G(g),m,r.dtype);y=e.makeTensorInfo(m,r.dtype),e.texData.get(y.dataId).values=w}else y=function qj(n,t,e,s){const r=G(t),i=ce({inputs:{x:n},attrs:{shape:[G(n.shape)/r,r]},backend:s}),l=So(i,n.dtype,"max",s),u=ce({inputs:{x:l},attrs:{shape:e},backend:s});return s.disposeIntermediateTensorInfo(i),s.disposeIntermediateTensorInfo(l),u}(p,g,m,e);return h&&e.disposeIntermediateTensorInfo(p),y}const Xj={kernelName:Bl,backendName:"webgl",kernelFunc:G1},Qj=cn({opSnippet:rg+"\n  return max(a, b);\n",packedOpSnippet:"\n  vec4 result = vec4(max(a, b));\n  bvec4 isNaNA = isnan(a);\n  bvec4 isNaNB = isnan(b);\n  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);\n  "+vo+"\n  return result;\n",cpuKernelImpl:AW}),Jj={kernelName:ja,backendName:"webgl",kernelFunc:Qj},tK={kernelName:Vl,backendName:"webgl",kernelFunc:function eK(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t;nl(r,"maxPool");const{filterSize:o,strides:a,pad:i,dimRoundingMode:l}=s;I(an(a,1),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${a} and dilations '1'`);const c=os(r.shape,o,a,1,i,l);if(1===c.filterWidth&&1===c.filterHeight&&Xe(c.inShape,c.outShape))return Bn({inputs:{x:r},backend:e});const h=new ol(c,"max",!1);return e.runWebGLProgram(h,[r],r.dtype)}},sK={kernelName:Wl,backendName:"webgl",kernelFunc:function nK(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{filterSize:o,strides:a,pad:i,dataFormat:l,dimRoundingMode:u}=s,h=Xs(r.shape,o,a,[1,1,1],i,u,l),d=new ag(h,"max",!1);return e.runWebGLProgram(d,[r],r.dtype)}};class rK{constructor(t){this.variableNames=["dy","maxPos"],this.outputShape=t.inShape;const o=t.effectiveFilterHeight,a=t.effectiveFilterWidth;this.userCode=`\n      const ivec2 pads = ivec2(${o-1-t.padInfo.top}, ${a-1-t.padInfo.left});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${o};\n          wR += ${t.dilationHeight}) {\n          float dyR = float(dyRCorner + wR) / ${t.strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${a}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${t.strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n            int maxPosValue = ${o*a-1} - int(getMaxPos(b, idyR, idyC, d));\n\n            // Get the current value, check it against the value from the\n            // position matrix.\n            int curPosValue = wR * ${a} + wC;\n            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n            dotProd += dyValue * mask;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class oK{constructor(t){this.variableNames=["dy","maxPos"],this.outputShape=t.inShape;const l=t.effectiveFilterDepth,u=t.effectiveFilterHeight,c=t.effectiveFilterWidth;this.userCode=`\n      const ivec3 pads = ivec3(${l-1-t.padInfo.front}, ${u-1-t.padInfo.top}, ${c-1-t.padInfo.left});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${l};\n           wD += ${t.dilationDepth}) {\n          float dyD = float(dyDCorner + wD) / ${t.strideDepth}.0;\n\n          if (dyD < 0.0 || dyD >= ${t.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${u};\n              wR += ${t.dilationHeight}) {\n            float dyR = float(dyRCorner + wR) / ${t.strideHeight}.0;\n\n            if (dyR < 0.0 || dyR >= ${t.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${c};\n                wC += ${t.dilationWidth}) {\n              float dyC = float(dyCCorner + wC) / ${t.strideWidth}.0;\n\n              if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n              int maxPosValue = ${l*u*c-1} -\n                  int(getMaxPos(batch, idyD, idyR, idyC, ch));\n\n              // Get the current value, check it against the value from the\n              // position matrix.\n              int curPosValue =\n                  wD * ${u} * ${c} +\n                  wR * ${c} + wC;\n              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n              dotProd += dyValue * mask;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const iK={kernelName:jh,backendName:"webgl",kernelFunc:function aK(n){const{inputs:t,backend:e,attrs:s}=n,{dy:r,input:o}=t,a=o,{filterSize:i,strides:l,pad:u,dimRoundingMode:c}=s,d=Xs(a.shape,i,l,[1,1,1],u,c),p=new ag(d,"max",!0),f=e.runWebGLProgram(p,[a],a.dtype),g=new oK(d),m=e.runWebGLProgram(g,[r,f],a.dtype);return e.disposeIntermediateTensorInfo(f),m}},uK={kernelName:Hh,backendName:"webgl",kernelFunc:function lK(n){const{inputs:t,backend:e,attrs:s}=n,{dy:r,input:o,output:a}=t,i=o;nl([o,a],"maxPoolGrad");const{filterSize:l,strides:u,pad:c,dimRoundingMode:h}=s,d=os(i.shape,l,u,1,c,h),f=new ol(d,"max",!0),g=e.runWebGLProgram(f,[i],i.dtype),m=new rK(d),y=e.runWebGLProgram(m,[r,g],i.dtype);return e.disposeIntermediateTensorInfo(g),y}},hK={kernelName:Kh,backendName:"webgl",kernelFunc:({inputs:n,attrs:t,backend:e})=>{const{x:s}=n,{filterSize:r,strides:o,pad:a,includeBatchInIndex:i}=t,l=e;I(4===s.shape.length,()=>`Error in maxPool: input must be rank 4 but got rank ${s.shape.length}.`);const u=[1,1];I(an(o,u),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${o} and dilations '${u}'`);const c=os(s.shape,r,o,u,a),[h,d]=function cK(n,t,e,s){let r=new ol(e,"max",!1);const o=s.runWebGLProgram(r,[n],"float32");return r=new ol(e,"max",!0,!0,t),[o,s.runWebGLProgram(r,[n],"float32")]}(s,i,c,l);return[h,d]}},pK={kernelName:Ul,backendName:"webgl",kernelFunc:({inputs:n,attrs:t,backend:e})=>{const{x:s}=n,{keepDims:r,axis:o}=t,a=e,i=s.shape.length,l=Ge(o,s.shape);let u=l;const c=kt(u,i),h=null!=c,d=a.shouldExecuteOnCPU([s]),p=[];let f=s;if(h){if(d){const w=a.texData.get(f.dataId).values,S=new Array(i);for(let T=0;T<S.length;T++)S[T]=s.shape[c[T]];const C=sg(w,s.shape,s.dtype,c,S);f=a.makeTensorInfo(S,s.dtype),a.texData.get(f.dataId).values=C}else f=Yc(s,c,a);p.push(f),u=Lt(u.length,i)}ln("sum",u,i);const[g,m]=nn(f.shape,u);let y=g;r&&(y=Ot(g,l));const x=function dK(n,t,e,s){const r=G(t),i=ce({inputs:{x:n},attrs:{shape:[G(n.shape)/r,r]},backend:s}),l=So(i,"float32","mean",s),u=ce({inputs:{x:l},attrs:{shape:e},backend:s});return s.disposeIntermediateTensorInfo(i),s.disposeIntermediateTensorInfo(l),u}(f,m,y,a);for(const b of p)a.disposeIntermediateTensorInfo(b);return x}},mK={kernelName:Gl,backendName:"webgl",kernelFunc:function fK(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:o,keepDims:a}=s,i=r.shape.length,l=Ge(o,r.shape);let u=l;const c=kt(u,i);let h=r;null!=c&&(h=kn({inputs:{x:r},backend:e,attrs:{perm:c}}),u=Lt(u.length,r.shape.length)),ln("min",u,i);const[d,p]=nn(h.shape,u),g=ce({inputs:{x:h},backend:e,attrs:{shape:[-1,G(p)]}}),m=So(g,g.dtype,"min",e);let y;return y=ce(a?{inputs:{x:m},backend:e,attrs:{shape:Ot(d,l)}}:{inputs:{x:m},backend:e,attrs:{shape:d}}),e.disposeIntermediateTensorInfo(g),e.disposeIntermediateTensorInfo(m),null!=c&&e.disposeIntermediateTensorInfo(h),y}},xK=cn({opSnippet:rg+"\n  return min(a, b);\n",packedOpSnippet:"\n  vec4 result = vec4(min(a, b));\n  bvec4 isNaNA = isnan(a);\n  bvec4 isNaNB = isnan(b);\n  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);\n  "+vo+"\n  return result;\n",cpuKernelImpl:RW}),bK={kernelName:Ka,backendName:"webgl",kernelFunc:xK};class wK{constructor(t,e,s){this.variableNames=["x"],this.outputShape=e.map((c,h)=>c[0]+t[h]+c[1]);const r=t.length,o=ct(r),a=e.map(c=>c[0]).join(","),i=e.map((c,h)=>c[0]+t[h]).join(","),l=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,r),u="reflect"===s?0:1;this.userCode=1!==r?`\n      ${o} start = ${o}(${a});\n      ${o} end = ${o}(${i});\n\n      void main() {\n        ${o} outC = getOutputCoords();\n        for (int i = 0; i < ${r}; i++) {\n          if (outC[i] < start[i]) {\n            outC[i] = start[i] * 2 - outC[i] - ${u};\n          } else if(outC[i] >= end[i]) {\n            outC[i] = (end[i] - 1) * 2 - outC[i] + ${u};\n          }\n        }\n        ${o} coords = outC - start;\n        setOutput(getX(${l}));\n      }\n    `:`\n        int start = ${a};\n        int end = ${i};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start) {\n            outC = start * 2 - outC - ${u};\n          } else if(outC >= end) {\n            outC = (end - 1) * 2 - outC + ${u};\n          }\n          setOutput(getX(outC - start));\n        }\n      `}}class vK{constructor(t,e,s){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e.map((f,g)=>f[0]+t[g]+f[1]);const r=t.length,o=ct(r),a=e.map(f=>f[0]).join(","),i=e.map((f,g)=>f[0]+t[g]).join(","),l=Cn("rc",r),u=Cn("source",r),c=`${l[r-1]} < ${this.outputShape[r-1]}`,h=1===r?"source":`vec2(${u.slice(-2).join()})`,d="reflect"===s?0:1;let p="";if(1===r){const f=`\n        ${o} source = rc;\n        if (source < start) {\n          source = start * 2 - source - ${d};\n        } else if (source >= end) {\n          source = (end - 1) * 2 - source + ${d};\n        }\n        source -= start;\n      `;p=`\n        ${o} rc = outputLoc;\n        ${f}\n        result[0] = getChannel(getX(${u.join()}), ${h});\n        ${l[r-1]} += 1;\n        if(${c}) {\n          ${f}\n          result[1] = getChannel(getX(${u.join()}), ${h});\n        }\n      `}else{const f=`\n        ${o} source = rc;\n        ${o} lt = ${o}(lessThan(source, start));\n        ${o} gte = ${o}(greaterThanEqual(source, end));\n        ${o} orig = 1 - (lt + gte);\n        source = orig * source +\n                lt * (start * 2 - source - ${d}) +\n                gte * ((end - 1) * 2 - source + ${d});\n        source -= start;\n      `;p=`\n        ${o} rc = outputLoc;\n        ${f}\n        result[0] = getChannel(getX(${u.join()}), ${h});\n        ${l[r-1]} += 1;\n        if(${c}) {\n          ${f}\n          result[1] = getChannel(getX(${u.join()}), ${h});\n        }\n        rc = outputLoc;\n        ${l[r-2]} += 1;\n        if(${l[r-2]} < ${this.outputShape[r-2]}) {\n          ${f}\n          result[2] = getChannel(getX(${u.join()}), ${h});\n          ${l[r-1]} += 1;\n          if(${c}) {\n            ${f}\n            result[3] = getChannel(getX(${u.join()}), ${h});\n          }\n        }\n      `}this.userCode=`\n      const ${o} start = ${o}(${a});\n      const ${o} end = ${o}(${i});\n\n      void main() {\n        ${o} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${p}\n        setOutput(result);\n      }\n    `}}const SK={kernelName:Hl,backendName:"webgl",kernelFunc:({inputs:n,backend:t,attrs:e})=>{const{x:s}=n,{paddings:r,mode:o}=e,a=z().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new vK(s.shape,r,o):new wK(s.shape,r,o);return t.runWebGLProgram(a,[s],s.dtype)}},CK=cn({opSnippet:"if (b == 0.0) return NAN;\n  return mod(a, b);",packedOpSnippet:"\n  vec4 result = mod(a, b);\n  bvec4 isNaN = equal(b, vec4(0.0));\n  "+vo+"\n  return result;\n"}),kK={kernelName:qa,backendName:"webgl",kernelFunc:CK};class TK{constructor(t,e,s){this.variableNames=["probs"],this.customUniforms=[{name:"seed",type:"float"}],this.outputShape=[t,s],this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n\n        float r = random(seed);\n        float cdf = 0.0;\n\n        for (int i = 0; i < ${e-1}; i++) {\n          cdf += getProbs(batch, i);\n\n          if (r < cdf) {\n            setOutput(float(i));\n            return;\n          }\n        }\n\n        // If no other event happened, last event happened.\n        setOutput(float(${e-1}));\n      }\n    `}}const H1=cn({opSnippet:"\nif (a == b) {\n  return 1.0;\n};\nreturn a / b;",packedOpSnippet:"\n  // vec4 one = vec4(equal(a, b));\n  // return one + (vec4(1.0) - one) * a / b;\n  vec4 result = a / b;\n  if(a.x == b.x) {\n    result.x = 1.;\n  }\n  if(a.y == b.y) {\n    result.y = 1.;\n  }\n  if(a.z == b.z) {\n    result.z = 1.;\n  }\n  if(a.w == b.w) {\n    result.w = 1.;\n  }\n\n  return result;\n",checkOutOfBounds:!0}),$K={kernelName:Ra,backendName:"webgl",kernelFunc:H1},j1="return a - b;",K1=cn({opSnippet:j1,packedOpSnippet:j1,supportsComplex:!0,cpuKernelImpl:JW}),_K={kernelName:ci,backendName:"webgl",kernelFunc:K1};function q1(n){const{inputs:t,backend:e,attrs:s}=n,{logits:r}=t,{dim:o}=s,a=Ge([o],r.shape),i=G1({inputs:{x:r},backend:e,attrs:{reductionIndices:a,keepDims:!1}}),l=Ot(i.shape,a),u=ce({inputs:{x:i},backend:e,attrs:{shape:l}}),c=K1({inputs:{a:r,b:u},backend:e}),h=z1({inputs:{x:c},backend:e}),d=Qc({inputs:{x:h},backend:e,attrs:{axis:a,keepDims:!1}}),p=ce({inputs:{x:d},backend:e,attrs:{shape:l}}),f=H1({inputs:{a:h,b:p},backend:e});return e.disposeIntermediateTensorInfo(i),e.disposeIntermediateTensorInfo(u),e.disposeIntermediateTensorInfo(c),e.disposeIntermediateTensorInfo(h),e.disposeIntermediateTensorInfo(d),e.disposeIntermediateTensorInfo(p),f}const EK={kernelName:uu,backendName:"webgl",kernelFunc:q1},RK={kernelName:qh,backendName:"webgl",kernelFunc:function AK(n){const{inputs:t,backend:e,attrs:s}=n,{logits:r}=t,{numSamples:o,seed:a,normalized:i}=s,l=i?r:q1({inputs:{logits:r},backend:e,attrs:{dim:r.shape.length-1}}),h=new TK(l.shape[0],l.shape[1],o),p=e.runWebGLProgram(h,[l],"int32",[[a]]);return i||e.disposeIntermediateTensorInfo(l),p}},DK=Jn+"\n  return -x;\n",LK={kernelName:jl,backendName:"webgl",kernelFunc:function OK(n){const{inputs:t,backend:e}=n,{x:s}=t;if(e.shouldExecuteOnCPU([s])){const o=e.texData.get(s.dataId),[a,i]=FW(o.values,s.shape,s.dtype);return e.makeTensorInfo(i,s.dtype,a)}let r;return r=z().getBool("WEBGL_PACK_UNARY_OPERATIONS")?new Pr(s.shape,"\n  vec4 result = -x;\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"):new js(s.shape,DK),e.runWebGLProgram(r,[s],s.dtype)}},PK=Qp,MK={kernelName:Xh,backendName:"webgl",kernelFunc:function zK(n){Un("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:e,attrs:s}=n,{boxes:r,scores:o}=t,{maxOutputSize:a,iouThreshold:i,scoreThreshold:l}=s,u=e.readSync(r.dataId),c=e.readSync(o.dataId),{selectedIndices:h}=PK(u,c,a,i,l);return e.makeTensorInfo([h.length],"int32",new Int32Array(h))}},BK=Jp,WK={kernelName:Zh,backendName:"webgl",kernelFunc:function VK(n){Un("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:e,attrs:s}=n,{boxes:r,scores:o}=t,{maxOutputSize:a,iouThreshold:i,scoreThreshold:l,padToMaxOutputSize:u}=s,c=e.readSync(r.dataId),h=e.readSync(o.dataId),{selectedIndices:d,validOutputs:p}=BK(c,h,a,i,l,u);return[e.makeTensorInfo([d.length],"int32",new Int32Array(d)),e.makeTensorInfo([],"int32",new Int32Array([p]))]}},UK=ef,HK={kernelName:Yh,backendName:"webgl",kernelFunc:function GK(n){Un("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:e,attrs:s}=n,{boxes:r,scores:o}=t,{maxOutputSize:a,iouThreshold:i,scoreThreshold:l,softNmsSigma:u}=s,c=e.readSync(r.dataId),h=e.readSync(o.dataId),d=a,p=i,f=l,g=u,{selectedIndices:m,selectedScores:y}=UK(c,h,d,p,f,g);return[e.makeTensorInfo([m.length],"int32",new Int32Array(m)),e.makeTensorInfo([y.length],"float32",new Float32Array(y))]}};class jK{constructor(t,e,s,r){this.variableNames=["indices"],this.outputShape=[t,e],this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int index = round(getIndices(coords.x));\n        setOutput(mix(float(${r}), float(${s}),\n                      float(index == coords.y)));\n      }\n    `}}const KK={kernelName:Xl,backendName:"webgl",kernelFunc:n=>{const{inputs:t,backend:e,attrs:s}=n,{indices:r}=t,{dtype:o,depth:a,onValue:i,offValue:l}=s,u=G(r.shape),c=new jK(u,a,i,l),h=ce({inputs:{x:r},backend:e,attrs:{shape:[u]}}),d=e.runWebGLProgram(c,[h],o);e.disposeIntermediateTensorInfo(h);const f=ce({inputs:{x:d},backend:e,attrs:{shape:[...r.shape,a]}});return e.disposeIntermediateTensorInfo(d),f}};function oh(n){const{inputs:t,backend:e}=n,{x:s}=t;if("complex64"===s.dtype){const r=al({inputs:{input:s},backend:e}),o=oh({inputs:{x:r},backend:e}),a=nh({inputs:{input:s},backend:e}),i=oh({inputs:{x:a},backend:e}),l=zr({inputs:{real:o,imag:i},backend:e});return e.disposeIntermediateTensorInfo(r),e.disposeIntermediateTensorInfo(o),e.disposeIntermediateTensorInfo(a),e.disposeIntermediateTensorInfo(i),l}return ll({attrs:{shape:s.shape,dtype:s.dtype,value:"string"===s.dtype?"":0},backend:e})}const qK={kernelName:pu,backendName:"webgl",kernelFunc:oh},XK={kernelName:ql,backendName:"webgl",kernelFunc:function X1(n){const{inputs:t,backend:e}=n,{x:s}=t;if("string"===s.dtype)throw new Error("onesLike is not supported under string dtype");if("complex64"===s.dtype){const r=al({inputs:{input:s},backend:e}),o=X1({inputs:{x:r},backend:e}),a=nh({inputs:{input:s},backend:e}),i=oh({inputs:{x:a},backend:e}),l=zr({inputs:{real:o,imag:i},backend:e});return e.disposeIntermediateTensorInfo(r),e.disposeIntermediateTensorInfo(o),e.disposeIntermediateTensorInfo(a),e.disposeIntermediateTensorInfo(i),l}return ll({attrs:{shape:s.shape,dtype:s.dtype,value:1},backend:e})}},YK={kernelName:Zl,backendName:"webgl",kernelFunc:function ZK(n){const{inputs:t,backend:e,attrs:s}=n,{axis:r}=s;if(1===t.length)return ug({inputs:{input:t[0]},backend:e,attrs:{dim:r}});const o=t[0].shape,a=t[0].dtype;t.forEach(c=>{Dn(o,c.shape,"All tensors passed to stack must have matching shapes"),I(a===c.dtype,()=>"All tensors passed to stack must have matching dtypes")});const i=[],u=T1({inputs:t.map(c=>{const h=ug({inputs:{input:c},backend:e,attrs:{dim:r}});return i.push(h),h}),backend:e,attrs:{axis:r}});return i.forEach(c=>e.disposeIntermediateTensorInfo(c)),u}};class QK{constructor(t,e,s){this.variableNames=["x"],this.customUniforms=[{name:"value",type:"float"}],this.outputShape=e.map((u,c)=>u[0]+t[c]+u[1]);const r=t.length,o=ct(r),a=e.map(u=>u[0]).join(","),i=e.map((u,c)=>u[0]+t[c]).join(","),l=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,r);this.userCode=1!==r?`\n      ${o} start = ${o}(${a});\n      ${o} end = ${o}(${i});\n\n      void main() {\n        ${o} outC = getOutputCoords();\n        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {\n          setOutput(value);\n        } else {\n          ${o} coords = outC - start;\n          setOutput(getX(${l}));\n        }\n      }\n    `:`\n        int start = ${a};\n        int end = ${i};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start || outC >= end) {\n            setOutput(value);\n          } else {\n            setOutput(getX(outC - start));\n          }\n        }\n      `}}class JK{constructor(t,e,s){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"value",type:"float"}],this.outputShape=e.map((g,m)=>g[0]+t[m]+g[1]);const r=t.length,o=ct(r),a=e.map(g=>g[0]).join(","),i=e.map((g,m)=>g[0]+t[m]).join(","),l=Cn("rc",r),u=Cn("source",r),c=`${l[r-1]} < ${this.outputShape[r-1]}`,h=1===r?"source":`vec2(${u.slice(-2).join()})`,d=[`${o} rc = outputLoc;`,`${l[r-1]} += 1;\n       if(${c}) {\n      `,1===r?"":`}\n       rc = outputLoc;\n       ${l[r-2]} += 1;\n       if(${l[r-2]} < ${this.outputShape[r-2]}) {`,1===r?"":`  ${l[r-1]} += 1;\n         if(${c}) {`],p=1===r?"rc < start || rc >= end":"any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))";let f="";for(let g=0,m=1===r?2:4;g<m;g++)f+=`\n        ${d[g]}\n        if (${p}) {\n          result[${g}] = float(value);\n        } else {\n          ${o} source = rc - start;\n          result[${g}] = getChannel(getX(${u.join()}), ${h});\n        }\n      `;f+=1===r?"} ":"}}",this.userCode=`\n      const ${o} start = ${o}(${a});\n      const ${o} end = ${o}(${i});\n\n      void main() {\n        ${o} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${f}\n        setOutput(result);\n      }\n    `}}const Z1=n=>{const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{paddings:o,constantValue:a}=s;if(0===G(r.shape))return ll({backend:e,attrs:{shape:o.map((c,h)=>c[0]+r.shape[h]+c[1]),value:a,dtype:r.dtype}});const i=z().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new JK(r.shape,o,a):new QK(r.shape,o,a);return e.runWebGLProgram(i,[r],r.dtype,[[a]])},eq={kernelName:Yl,backendName:"webgl",kernelFunc:Z1},sq=cn({opSnippet:"\n  if(a < 0.0 && floor(b) < b){\n    return NAN;\n  }\n  if (b == 0.0) {\n    return 1.0;\n  }\n  return (round(mod(b, 2.0)) != 1) ?\n      pow(abs(a), b) : sign(a) * pow(abs(a), b);\n",packedOpSnippet:"\n  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.\n  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));\n  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);\n  vec4 result = multiplier * pow(abs(a), b);\n\n  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS\n  bvec4 isExpZero = equal(b, vec4(0.0));\n  result.r = isExpZero.r ? 1.0 : result.r;\n  result.g = isExpZero.g ? 1.0 : result.g;\n  result.b = isExpZero.b ? 1.0 : result.b;\n  result.a = isExpZero.a ? 1.0 : result.a;\n\n  bvec4 isNaN1 = lessThan(a, vec4(0.0));\n  bvec4 isNaN2 = lessThan(floor(b), b);\n  bvec4 isNaN = bvec4(isNaN1.x && isNaN2.x, isNaN1.y && isNaN2.y, isNaN1.z && isNaN2.z, isNaN1.w && isNaN2.w);\n  "+vo+"\n  return result;\n"}),rq={kernelName:Za,backendName:"webgl",kernelFunc:sq},aq={kernelName:Jl,backendName:"webgl",kernelFunc:function oq(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:o,keepDims:a}=s,i=r.shape.length,l=[],u=Ge(o,r.shape);let c=u;const h=kt(c,i);let p,d=r;if(null!=h&&(d=kn({inputs:{x:r},backend:e,attrs:{perm:h}}),c=Lt(c.length,i),l.push(d)),ln("prod",c,i),e.shouldExecuteOnCPU([d])){const f=e.texData.get(d.dataId).values,{outVals:g,outShape:m,outDtype:y}=LW(d.shape,d.dtype,f,c);p=e.makeTensorInfo(m,y,g)}else{const[f,g]=nn(d.shape,c),m=G(g),y=ce({inputs:{x:d},backend:e,attrs:{shape:[-1,m]}}),b=So(y,$d(r.dtype),"prod",e);p=ce({inputs:{x:b},backend:e,attrs:{shape:f}}),l.push(y),l.push(b)}if(a){l.push(p);const f=Ot(p.shape,u);p=ce({inputs:{x:p},backend:e,attrs:{shape:f}})}return l.forEach(f=>e.disposeIntermediateTensorInfo(f)),p}},lq={kernelName:Qh,backendName:"webgl",kernelFunc:function iq(n){const{inputs:t,backend:e,attrs:s}=n,{paramsNestedSplits:r,paramsDenseValues:o,indices:a}=t,{outputRaggedRank:i}=s,l=r.map(y=>e.readSync(y.dataId)),u=r.map(y=>y.shape),c=e.readSync(o.dataId),h=e.readSync(a.dataId),[d,p,f]=PW(l,u,c,o.shape,o.dtype,h,a.shape,i),g=d.map(y=>e.makeTensorInfo([y.length],"int32",y)),m=e.makeTensorInfo(f,o.dtype,p);return g.concat([m])}},cq={kernelName:Jh,backendName:"webgl",kernelFunc:function uq(n){const{inputs:t,backend:e}=n,{starts:s,limits:r,deltas:o}=t,a=e.readSync(s.dataId),i=e.readSync(r.dataId),l=e.readSync(o.dataId),[u,c]=zW(a,s.shape,s.dtype,i,r.shape,l,o.shape);return[e.makeTensorInfo([u.length],"int32",u),e.makeTensorInfo([c.length],s.dtype,c)]}},dq={kernelName:ed,backendName:"webgl",kernelFunc:function hq(n){const{inputs:t,backend:e,attrs:s}=n,{shape:r,values:o,defaultValue:a,rowPartitionTensors:i}=t,{rowPartitionTypes:l}=s,u=e.readSync(r.dataId),c=e.readSync(o.dataId),h=e.readSync(a.dataId),d=i.map(m=>e.readSync(m.dataId)),p=i.map(m=>m.shape),[f,g]=MW(u,r.shape,c,o.shape,o.dtype,h,a.shape,d,p,l);return e.makeTensorInfo(f,o.dtype,g)}},Y1=n=>{const{backend:t,attrs:e}=n,{start:s,stop:r,step:o,dtype:a}=e,i=BW(s,r,o,a);return t.makeTensorInfo([i.length],a,i)},pq={kernelName:td,backendName:"webgl",kernelFunc:Y1},fq=et({opSnippet:"return 1.0 / x;"}),mq={kernelName:Ya,backendName:"webgl",kernelFunc:fq},yq=et({opSnippet:Jn+"\n  return (x < 0.0) ? 0.0 : x;\n",packedOpSnippet:"\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"}),xq={kernelName:Qa,backendName:"webgl",kernelFunc:yq},wq=et({opSnippet:Jn+"\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n",packedOpSnippet:"\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"}),vq={kernelName:Ja,backendName:"webgl",kernelFunc:wq};class Sq{constructor(t,e,s,r,o){this.variableNames=["A"],this.outputShape=[];const[a,i,l,u]=t;this.outputShape=[a,e,s,u];const c=[r&&e>1?i-1:i,r&&s>1?l-1:l],h=[r&&e>1?e-1:e,r&&s>1?s-1:s];let d;d=o?"(vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC - vec2(0.5)":"vec2(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${c[0]/h[0]},\n          ${c[1]/h[1]});\n      const vec2 inputShapeRC = vec2(${i}.0, ${l}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${d};\n\n        // Compute the four integer indices.\n        ivec2 sourceFloorRC = ivec2(max(sourceFracIndexRC, vec2(0.0)));\n        ivec2 sourceCeilRC = ivec2(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);\n        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);\n        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);\n        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);\n\n        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);\n\n        float top = topLeft + (topRight - topLeft) * fracRC.y;\n        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\n        float newValue = top + (bottom - top) * fracRC.x;\n\n        setOutput(newValue);\n      }\n    `}}class Iq{constructor(t,e,s,r,o){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];const[a,i,l,u]=t;this.outputShape=[a,e,s,u];const c=[r&&e>1?i-1:i,r&&s>1?l-1:l],h=[r&&e>1?e-1:e,r&&s>1?s-1:s];let d;d=o?"(vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC - vec3(0.5)":"vec3(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${c[0]/h[0]},\n          ${c[1]/h[1]},\n          ${c[1]/h[1]});\n      const vec3 inputShapeRC = vec3(${i}.0, ${l}.0,\n                                     ${l}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = ${d};\n\n        // Compute the four integer indices.\n        ivec3 sourceFloorRC = ivec3(max(sourceFracIndexRC, vec3(0.0)));\n        ivec3 sourceCeilRC = ivec3(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${u-1};\n        bool hasNextRow = coords.z < ${s-1};\n\n        // In parallel, construct four corners for all four components in\n        // packed 2x2 cell.\n        vec4 topLeft = vec4(\n          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 bottomLeft = vec4(\n          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 topRight = vec4(\n          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec4 bottomRight = vec4(\n          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);\n\n        vec4 top = mix(topLeft, topRight, fracRC.yyzz);\n        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);\n        vec4 newValue = mix(top, bottom, fracRC.x);\n\n        setOutput(newValue);\n      }\n    `}}const Cq={kernelName:nu,backendName:"webgl",kernelFunc:function Nq(n){const{inputs:t,backend:e,attrs:s}=n,{images:r}=t,{alignCorners:o,halfPixelCenters:a,size:i}=s,[l,u]=i,c=z().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new Iq(r.shape,l,u,o,a):new Sq(r.shape,l,u,o,a);return e.runWebGLProgram(c,[r],"float32")}};class kq{constructor(t,e,s){this.variableNames=["dy"],this.outputShape=[],this.outputShape=e;const[,r,o]=e,[,a,i]=t,l=[s&&a>1?r-1:r,s&&i>1?o-1:o],u=[s&&a>1?a-1:a,s&&i>1?i-1:i],c=l[0]/u[0],h=l[1]/u[1],d=1/c,p=1/h,f=2*Math.ceil(d)+2,g=2*Math.ceil(p)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${c});\n        const float widthScale = float(${h});\n\n        const float invHeightScale = float(${d});\n        const float invWidthScale = float(${p});\n\n        const int winHeight = int(${f});\n        const int winWidth = int(${g});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(startRLerp - float(winHeight / 2));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(startCLerp - float(winWidth / 2));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${a}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${i}) {\n              continue;\n            }\n\n            float dxR = float(dyR) * heightScale;\n            int topDxRIndex = int(floor(dxR));\n            int bottomDxRIndex = int(min(ceil(dxR), ${r-1}.0));\n            float dxRLerp = dxR - float(topDxRIndex);\n            float inverseDxRLerp = 1.0 - dxRLerp;\n\n            float dxC = float(dyC) * widthScale;\n            int leftDxCIndex = int(floor(dxC));\n            int rightDxCIndex = int(min(ceil(dxC), ${o-1}.0));\n            float dxCLerp = dxC - float(leftDxCIndex);\n            float inverseDxCLerp = 1.0 - dxCLerp;\n\n            if (r == topDxRIndex && c == leftDxCIndex) {\n              // topLeft\n              accumulator +=\n                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;\n            }\n\n            if (r == topDxRIndex && c == rightDxCIndex) {\n              // topRight\n              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == leftDxCIndex) {\n              // bottomLeft\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == rightDxCIndex) {\n              // bottomRight\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}const $q={kernelName:rd,backendName:"webgl",kernelFunc:function Tq(n){const{inputs:t,backend:e,attrs:s}=n,{images:r,dy:o}=t,{alignCorners:a}=s,i=new kq(o.shape,r.shape,a);return e.runWebGLProgram(i,[o],o.dtype)}};class _q{constructor(t,e,s,r,o){this.variableNames=["A"],this.outputShape=[];const[a,i,l,u]=t;this.outputShape=[a,e,s,u];const c=[r&&e>1?i-1:i,r&&s>1?l-1:l],h=[r&&e>1?e-1:e,r&&s>1?s-1:s];let p;p=o?"max((vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC, vec2(0.0))":"vec2(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${c[0]/h[0]},\n          ${c[1]/h[1]});\n      const vec2 inputShapeRC = vec2(${i}.0, ${l}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${p};\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec2 sourceNearestRC = ivec2(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${r?"0.5":"0.0"})));\n        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);\n\n        setOutput(newValue);\n      }\n    `}}class Eq{constructor(t,e,s,r,o){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];const[a,i,l,u]=t;this.outputShape=[a,e,s,u];const c=[r&&e>1?i-1:i,r&&s>1?l-1:l],h=[r&&e>1?e-1:e,r&&s>1?s-1:s];let p;p=o?"max((vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC, vec3(0.0))":"vec3(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${c[0]/h[0]},\n          ${c[1]/h[1]},\n          ${c[1]/h[1]});\n      const vec3 inputShapeRC = vec3(${i}.0, ${l}.0,\n                                     ${l}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = ${p};\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec3 sourceNearestRC = ivec3(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${r?"0.5":"0.0"})));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${u-1};\n        bool hasNextRow = coords.z < ${s-1};\n\n        vec4 newValue = vec4(\n          getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d),\n          hasNextCol ? getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d + 1) : 0.0);\n\n        setOutput(newValue);\n      }\n    `}}const Rq={kernelName:tu,backendName:"webgl",kernelFunc:function Aq(n){const{inputs:t,backend:e,attrs:s}=n,{images:r}=t,{alignCorners:o,halfPixelCenters:a,size:i}=s,[l,u]=i,c=z().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new Eq(r.shape,l,u,o,a):new _q(r.shape,l,u,o,a);return e.runWebGLProgram(c,[r],r.dtype)}};class Dq{constructor(t,e,s){this.variableNames=["dy"],this.outputShape=[],this.outputShape=e;const[,r,o]=e,[,a,i]=t,l=[s&&a>1?r-1:r,s&&i>1?o-1:o],u=[s&&a>1?a-1:a,s&&i>1?i-1:i],c=l[0]/u[0],h=l[1]/u[1],d=1/c,p=1/h,f=2*Math.ceil(d)+2,g=2*Math.ceil(p)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${c});\n        const float widthScale = float(${h});\n\n        const float invHeightScale = float(${d});\n        const float invWidthScale = float(${p});\n\n        const int winHeight = int(${f});\n        const int winWidth = int(${g});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(floor(startRLerp - float(winHeight / 2)));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(floor(startCLerp - float(winWidth / 2)));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${a}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${i}) {\n              continue;\n            }\n\n            float sourceFracRow =\n              float(${l[0]}) *\n                (float(dyR) / float(${u[0]}));\n\n            float sourceFracCol =\n                float(${l[1]}) *\n                  (float(dyC) / float(${u[1]}));\n\n            int sourceNearestRow = int(min(\n                float(int(${r}) - 1),\n                ${s} ? float(round(sourceFracRow)) :\n                                  float(floor(sourceFracRow))));\n\n            int sourceNearestCol = int(min(\n                float(int(${o}) - 1),\n                ${s} ? float(round(sourceFracCol)) :\n                                  float(floor(sourceFracCol))));\n\n            if (r == sourceNearestRow && c == sourceNearestCol) {\n              accumulator += getDy(b, dyR, dyC, d);\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}const Oq={kernelName:sd,backendName:"webgl",kernelFunc:function Fq(n){const{inputs:t,backend:e,attrs:s}=n,{images:r,dy:o}=t,{alignCorners:a}=s,i=new Dq(o.shape,r.shape,a);return e.runWebGLProgram(i,[o],o.dtype)}};class Lq{constructor(t,e){this.variableNames=["x"];const s=t.length;if(s>4)throw new Error(`WebGL backend: Reverse of rank-${s} tensor is not yet supported`);if(this.outputShape=t,1===s)return void(this.userCode=`\n        void main() {\n          int coord = getOutputCoords();\n          setOutput(getX(${t[0]} - coord - 1));\n        }\n      `);const o=t.map((i,l)=>(i=>-1!==e.indexOf(i)&&1!==t[i]?`${t[i]} - coords[${i}] - 1`:`coords[${i}]`)(l)).join(","),a=ct(s);this.userCode=`\n      void main() {\n        ${a} coords = getOutputCoords();\n        setOutput(getX(${o}));\n      }\n    `}}class Pq{constructor(t,e){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0;const s=t.length;if(s>4)throw new Error(`WebGL backend: Reverse of rank-${s} tensor is not yet supported`);this.outputShape=t;const r=Cn("rc",s),o=`${r[s-1]} + 1 < ${this.outputShape[s-1]}`,a=`${r[s-2]} + 1 < ${this.outputShape[s-2]}`,i=ct(s);function d(f){const g=t.map((x,b)=>function p(f,g){return-1!==e.indexOf(f)&&1!==t[f]?`${t[f]} - ${g[f]} - 1`:`${g[f]}`}(b,f));return`getChannel(getX(${g.join(",")}), vec2(${g.slice(-2).join(",")}))`}this.userCode=1===s?`\n        void main(){\n          int rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = getChannel(getX(${t[0]} - rc - 1),\n            ${t[0]} - rc - 1);\n          if(${o}){\n              result.g = getChannel(getX(${t[0]} - (rc  + 1) - 1),\n                ${t[0]} - (rc  + 1) - 1);\n          }\n          setOutput(result);\n        }\n      `:`\n        void main() {\n          ${i} rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = ${function l(f){return d(f)}(r.slice())};\n          if(${o}){\n            result.g = ${function u(f){return f[s-1]="("+f[s-1]+" + 1)",d(f)}(r.slice())};\n          }\n          if(${a}) {\n            result.b = ${function c(f){return f[s-2]="("+f[s-2]+" + 1)",d(f)}(r.slice())};\n            if(${o}) {\n              result.a = ${function h(f){return f[s-1]="("+f[s-1]+" + 1)",f[s-2]="("+f[s-2]+" + 1)",d(f)}(r.slice())};\n            }\n          }\n          setOutput(result);\n        }\n    `}}const Mq={kernelName:su,backendName:"webgl",kernelFunc:function zq(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{dims:o}=s,a=r.shape.length,i=Ge(o,r.shape);if(0===a)return Bn({inputs:{x:r},backend:e});const l=z().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new Pq(r.shape,i):new Lq(r.shape,i);return e.runWebGLProgram(l,[r],r.dtype)}};class Bq{constructor(t,e){this.variableNames=["Image"],this.outputShape=[],this.customUniforms=[{name:"params",type:"vec4"}];const s=t[1],r=t[2];this.outputShape=t;let o="";o="number"==typeof e?`float outputValue = ${e.toFixed(2)};`:`\n        vec3 fill = vec3(${e.join(",")});\n        float outputValue = fill[coords[3]];`,this.userCode=`\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n          int y = coords[1];\n          float coordXFloat = (float(x) - params[0]) * params[3] -\n            (float(y) - params[1]) * params[2];\n          float coordYFloat = (float(x) - params[0]) * params[2] +\n            (float(y) - params[1]) * params[3];\n          int coordX = int(round(coordXFloat + params[0]));\n          int coordY = int(round(coordYFloat + params[1]));\n          ${o}\n          if(coordX >= 0 && coordX < ${r} && coordY >= 0 && coordY < ${s}) {\n            outputValue = getImage(coords[0], coordY, coordX, coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `}}const Vq={kernelName:Sd,backendName:"webgl",kernelFunc:({inputs:n,attrs:t,backend:e})=>{const{image:s}=n,{radians:r,fillValue:o,center:a}=t,i=e,l=new Bq(s.shape,o),[u,c]=uf(a,s.shape[1],s.shape[2]),h=[[u,c,Math.sin(r),Math.cos(r)]];return i.runWebGLProgram(l,[s],s.dtype,h)}},Wq=et({opSnippet:"\n  // OpenGL ES does not support round function.\n  // The algorithm is based on banker's rounding.\n  float base = floor(x);\n  if ((x - base) < 0.5) {\n    return floor(x);\n  } else if ((x - base) > 0.5) {\n    return ceil(x);\n  } else {\n    if (mod(base, 2.0) == 0.0) {\n      return base;\n    } else {\n      return base + 1.0;\n    }\n  }\n"}),Uq={kernelName:ei,backendName:"webgl",kernelFunc:Wq},Gq=et({opSnippet:"return inversesqrt(x);",cpuKernelImpl:VW}),Hq={kernelName:ti,backendName:"webgl",kernelFunc:Gq};class hg{constructor(t,e,s,r,o,a,i=!0,l=!1){this.variableNames=["updates","indices","defaultValue"],this.outputShape=a;const u=ct(o.length),c=ct(a.length);let h="";1===s?h="i":2===s&&(h="i, j");let p="";1===r?p="i":2===r&&(p="i, coords[1]");let g="";l&&(g="coords[0], coords[1]"),this.userCode=`\n        ${u} strides = ${u}(${o});\n\n        void main() {\n          ${c} coords = getOutputCoords();\n          float sum = 0.0;\n          bool found = false;\n          for (int i = 0; i < ${t}; i++) {\n            int flattenedIndex = 0;\n            for (int j = 0; j < ${e}; j++) {\n              int index = round(getIndices(${h}));\n              flattenedIndex += index * ${e>1?"strides[j]":"strides"};\n            }\n            if (flattenedIndex == coords[0]) {\n              sum += getUpdates(${p});\n              found = true;\n            }\n          }\n          setOutput(mix(getDefaultValue(${g}), sum, float(found)));\n        }\n      `}}class jq{constructor(t,e,s,r,o,a,i=!0,l=!1){this.variableNames=["updates","indices","defaultValue"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=a;const u=ct(o.length),c=ct(a.length);let h="";1===s?h="i":2===s&&(h="i, j");let p="";1===r?p="i":2===r&&(p="i, coords[1]");let g="";l&&(g="coords[0], coords[1]"),this.userCode=`\n        ${u} strides = ${u}(${o});\n\n        void main() {\n          ${c} coords = getOutputCoords();\n          vec4 sum = vec4(0.);\n          vec4 found = vec4(0.);\n          for (int i = 0; i < ${t}; i+=2) {\n            ivec2 flattenedIndex = ivec2(0);\n            for (int j = 0; j < ${e}; j+=2) {\n              ivec4 index = round(getIndices(${h}));\n              flattenedIndex += index.xz * ${e>1?"strides[j]":"strides"};\n              if (j + 1 < ${e}) {\n                flattenedIndex += index.yw * ${e>1?"strides[j + 1]":"strides"};\n              }\n            }\n            if (flattenedIndex[0] == coords[0] || flattenedIndex[1] == coords[0] ||\n                flattenedIndex[0] == coords[0] + 1 || flattenedIndex[1] == coords[0] + 1) {\n              vec4 updVals = getUpdates(${p});\n              if (flattenedIndex[0] == coords[0]) {\n                sum.xy += updVals.xy;\n                found.xy = vec2(1.);\n              } else if (flattenedIndex[0] == coords[0] + 1) {\n                sum.zw += updVals.xy;\n                found.zw = vec2(1.);\n              }\n              if (flattenedIndex[1] == coords[0]) {\n                sum.xy += updVals.zw;\n                found.xy = vec2(1.);\n              } else if (flattenedIndex[1] == coords[0] + 1) {\n                sum.zw += updVals.zw;\n                found.zw = vec2(1.);\n              }\n            }\n          }\n          setOutput(mix(getDefaultValue(${g}), sum, found));\n        }\n      `}}const qq={kernelName:od,backendName:"webgl",kernelFunc:function Kq(n){const{inputs:t,backend:e,attrs:s}=n,{indices:r,updates:o}=t,{shape:a}=s,{sliceRank:i,numUpdates:l,sliceSize:u,strides:c,outputSize:h}=ro(0,r,a),d=[h/u,u];if(0===h)return e.makeTensorInfo(a,r.dtype);const p=ce({inputs:{x:r},backend:e,attrs:{shape:[l,i]}}),f=ce({inputs:{x:o},backend:e,attrs:{shape:[l,u]}}),g=e.makeTensorInfo([],"float32",new Float32Array([0]));let m;m=z().getBool("WEBGL_PACK")?new jq(l,i,p.shape.length,f.shape.length,c,d):new hg(l,i,p.shape.length,f.shape.length,c,d);const y=e.runWebGLProgram(m,[f,p,g],f.dtype),x=ce({inputs:{x:y},backend:e,attrs:{shape:a}});return e.disposeIntermediateTensorInfo(p),e.disposeIntermediateTensorInfo(f),e.disposeIntermediateTensorInfo(y),e.disposeIntermediateTensorInfo(g),x}};class Xq{constructor(t,e,s,r){this.variableNames=["sortedSequence","values"],this.customUniforms=[{name:"numInputs",type:"int"}],this.outputShape=[t,s];const a=`for (int i = 0; i < ${Math.ceil(Math.log2(e+1))}; ++i) { if (left >= right) break;`,i=2===z().getNumber("WEBGL_VERSION")?"while (left < right) {":a;this.userCode=`\n       int findBound(int batch, float value) {\n         int left = 0;\n         int right = numInputs;\n         int mid;\n         ${i}\n           mid = (left + right) / 2;\n           if (getSortedSequence(batch, mid) ${"left"===r?"<":"<="} value) {\n             left = mid + 1;\n           } else {\n             right = mid;\n           }\n         }\n         return right;\n       }\n\n       void main() {\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int valueIndex = coords[1];\n\n         float value = getValues(batch, valueIndex);\n\n         setOutput(float(findBound(batch, value)));\n       }\n     `}}const Yq={kernelName:id,backendName:"webgl",kernelFunc:function Zq(n){const{inputs:t,backend:e,attrs:s}=n,{sortedSequence:r,values:o}=t,{side:a}=s,i=new Xq(r.shape[0],r.shape[1],o.shape[1],a);return e.runWebGLProgram(i,[r,o],"int32",[[r.shape[1]]])}};class Qq{constructor(t,e,s){let r,o;if(this.variableNames=["c","a","b"],this.outputShape=e,s>4)throw Error(`Where for rank ${s} is not yet supported`);if(1===s)o="resRC",r="resRC";else{const i=["resRC.x","resRC.y","resRC.z","resRC.w"],l=[],u=[];for(let c=0;c<e.length;c++)u.push(`${i[c]}`),c<t&&l.push(`${i[c]}`);r=l.join(),o=u.join()}const a=ct(s);this.userCode=`\n      void main() {\n        ${a} resRC = getOutputCoords();\n        float cVal = getC(${r});\n        if (cVal >= 1.0) {\n          setOutput(getA(${o}));\n        } else {\n          setOutput(getB(${o}));\n        }\n      }\n    `}}const e6={kernelName:ru,backendName:"webgl",kernelFunc:function Jq(n){const{inputs:t,backend:e}=n,{condition:s,t:r,e:o}=t,a=new Qq(s.shape.length,r.shape,r.shape.length);return e.runWebGLProgram(a,[s,r,o],Fn(r.dtype,o.dtype))}},n6=et({opSnippet:`\n  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\n  // see: https://arxiv.org/abs/1706.02515\n  float scaleAlpha = ${Ju};\n  float scale = ${ec};\n  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);\n`}),s6={kernelName:ni,backendName:"webgl",kernelFunc:n6},o6=et({opSnippet:ma+"\n  return 1.0 / (1.0 + exp(-1.0 * x));\n",packedOpSnippet:"\n  vec4 result = 1.0 / (1.0 + exp(-1.0 * x));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",cpuKernelImpl:UW}),a6={kernelName:ai,backendName:"webgl",kernelFunc:o6},i6=et({opSnippet:"\n  if (isnan(x)) { return 0.0; }\n  return sign(x);\n"}),l6={kernelName:oi,backendName:"webgl",kernelFunc:i6},h6=et({opSnippet:ma+"\n  return sin(x);\n",packedOpSnippet:`\n  vec4 result = sin(x);\n  bvec4 isNaN = isnan(x);\n  ${vo}\n  return result;\n`}),d6={kernelName:si,backendName:"webgl",kernelFunc:h6},p6=et({opSnippet:"\n  float e2x = exp(x);\n  return (e2x - 1.0 / e2x) / 2.0;\n"}),f6={kernelName:ri,backendName:"webgl",kernelFunc:p6},m6=et({opSnippet:"\n  float epsilon = 1.1920928955078125e-7;\n  float threshold = log(epsilon) + 2.0;\n\n  bool too_large = x > -threshold;\n  bool too_small = x < threshold;\n\n  float result;\n  float exp_x = exp(x);\n\n  if (too_large){\n    result = x;\n  }\n  else if (too_small){\n    result = exp_x;\n  }\n  else{\n    result = log(exp_x + 1.0);\n  }\n  return result;\n"}),g6={kernelName:ii,backendName:"webgl",kernelFunc:m6},y6={kernelName:iu,backendName:"webgl",kernelFunc:n=>{const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{blockShape:o,paddings:a}=s;I(r.shape.length<=4,()=>"spaceToBatchND for rank > 4 with a WebGL backend not implemented yet");const i=o.reduce((y,x)=>y*x),l=[[0,0]];l.push(...a);for(let y=1+o.length;y<r.shape.length;++y)l.push([0,0]);const u=[],c=Z1({inputs:{x:r},backend:e,attrs:{paddings:l,constantValue:0}}),h=Oi(c.shape,o,i,!1),d=Li(h.length,o.length,!1),p=Pi(c.shape,o,i,!1),f=ce({inputs:{x:c},backend:e,attrs:{shape:h}}),g=kn({inputs:{x:f},backend:e,attrs:{perm:d}}),m=ce({inputs:{x:g},backend:e,attrs:{shape:p}});return u.push(c),u.push(f),u.push(g),u.forEach(y=>e.disposeIntermediateTensorInfo(y)),m}},b6={kernelName:ld,backendName:"webgl",kernelFunc:function x6(n){const{inputs:t,backend:e}=n,{indices:s,values:r,denseShape:o,defaultValue:a}=t;if(1!==o.shape.length)throw new Error(`Dense shape must be a vector, saw:\n         ${o.shape}`);if(2!==s.shape.length)throw new Error(`Indices must be a matrix, saw:\n         ${s.shape}`);if(1!==r.shape.length)throw new Error(`Values must be a vector, saw:\n         ${r.shape}`);if(0!==a.shape.length)throw new Error(`Default value must be a scalar, saw:\n        ${a.shape}`);const i=e.readSync(s.dataId),l=e.readSync(r.dataId),u=e.readSync(o.dataId),c=e.readSync(a.dataId)[0],[h,d,p,f,g]=HW(i,s.shape,s.dtype,l,r.dtype,u,c);return[e.makeTensorInfo(d,s.dtype,h),e.makeTensorInfo([d[0]],r.dtype,p),e.makeTensorInfo([f.length],"bool",new Uint8Array(f.map(m=>Number(m)))),e.makeTensorInfo([g.length],s.dtype,new Int32Array(g))]}},v6={kernelName:ud,backendName:"webgl",kernelFunc:function w6(n){const{inputs:t,backend:e}=n,{inputIndices:s,inputShape:r,newShape:o}=t;if(2!==s.shape.length)throw new Error(`Input indices should be a matrix but received shape ${s.shape}`);if(1!==r.shape.length)throw new Error(`Input shape should be a vector but received shape ${r.shape}`);if(1!==o.shape.length)throw new Error(`Target shape should be a vector but received shape ${o.shape}`);const a=Array.from(e.readSync(r.dataId)),i=e.readSync(s.dataId),l=Array.from(e.readSync(o.dataId)),[u,c,h]=jW(i,s.shape,s.dtype,a,l);return[e.makeTensorInfo(c,s.dtype,u),e.makeTensorInfo([h.length],o.dtype,new Int32Array(h))]}},I6={kernelName:cd,backendName:"webgl",kernelFunc:function S6(n){const{inputs:t,backend:e}=n,{data:s,indices:r,segmentIds:o}=t;if(s.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==r.shape.length)throw new Error(`Indices should be a vector but received shape\n              ${r.shape}`);if(1!==o.shape.length)throw new Error(`Segment ids should be a vector but received shape\n              ${o.shape}`);const a=e.readSync(s.dataId),i=e.readSync(r.dataId),l=e.readSync(o.dataId),[u,c]=n1(a,s.shape,s.dtype,i,l,!0);return e.makeTensorInfo(c,s.dtype,u)}},C6={kernelName:hd,backendName:"webgl",kernelFunc:function N6(n){const{inputs:t,backend:e}=n,{data:s,indices:r,segmentIds:o}=t;if(s.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==r.shape.length)throw new Error(`Indices should be a vector but received shape\n             ${r.shape}`);if(1!==o.shape.length)throw new Error(`Segment ids should be a vector but received shape\n             ${o.shape}`);const a=e.readSync(s.dataId),i=e.readSync(r.dataId),l=e.readSync(o.dataId),[u,c]=n1(a,s.shape,s.dtype,i,l);return e.makeTensorInfo(c,s.dtype,u)}},T6={kernelName:dd,backendName:"webgl",kernelFunc:function k6(n){const{inputs:t,backend:e,attrs:s}=n,{sparseIndices:r,sparseValues:o,defaultValue:a}=t,{outputShape:i}=s,{sliceRank:l,numUpdates:u,sliceSize:c,strides:h,outputSize:d}=ro(0,r,i);if("string"===o.dtype){const y=e.bufferSync(r),x=e.bufferSync(o),b=dr(e.readSync(a.dataId)[0]),w=WW(y,x,i,d,c,u,l,h,b,!1);return e.makeTensorInfo(i,w.dtype,w.values)}const f=new hg(u,l,r.shape.length,o.shape.length,h,[d,1],!1),g=e.runWebGLProgram(f,[o,r,a],o.dtype),m=ce({inputs:{x:g},backend:e,attrs:{shape:i}});return e.disposeIntermediateTensorInfo(g),m}},_6={kernelName:lu,backendName:"webgl",kernelFunc:function $6(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{numOrSizeSplits:o,axis:a}=s,i=Ge(a,r.shape)[0],l=kf(r,o,i),c=new Array(r.shape.length).fill(0),h=r.shape.slice();return l.map(d=>{const p=[...h];p[i]=d;const f=ga({inputs:{x:r},backend:e,attrs:{begin:c,size:p}});return c[i]+=d,f})}},Q1="return sqrt(x);",E6=et({opSnippet:Q1,packedOpSnippet:Q1,cpuKernelImpl:KW}),A6={kernelName:li,backendName:"webgl",kernelFunc:E6},D6={kernelName:pd,backendName:"webgl",kernelFunc:et({opSnippet:"return x * x;"})},J1="return (a - b) * (a - b);",F6=cn({opSnippet:J1,packedOpSnippet:J1}),O6={kernelName:ui,backendName:"webgl",kernelFunc:F6},P6={kernelName:cu,backendName:"webgl",kernelFunc:function L6(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t;if("string"!==r.dtype)throw new Error("Input must be of datatype string");const a=Js(e.readSync(r.dataId)),i=qW(a,"string",s);return e.makeTensorInfo(r.shape,"string",i)}},M6={kernelName:fi,backendName:"webgl",kernelFunc:function z6({inputs:n,attrs:t,backend:e}){const{x:s}=n,o=new js(s.shape,Jn+`\n    return x > 0.0 ? 1.0 : float(${t.alpha});\n  `);return e.runWebGLProgram(o,[s],s.dtype)}};class B6{constructor(t,e,s){this.variableNames=["x"],this.outputShape=s;const r=s.length,o=ct(s.length),a=ct(s.length);let i="";if(1===r)i="coords * strides + begin";else{let l=0;i=s.map((u,c)=>(l++,1===s.length?`coords * strides[${c}] + begin[${c}]`:`coords[${l-1}] * strides[${c}] + begin[${c}]`)).join(",")}this.userCode=`\n      ${o} begin = ${o}(${t});\n      ${o} strides = ${o}(${e});\n\n      void main() {\n        ${a} coords = getOutputCoords();\n        setOutput(getX(${i}));\n      }\n    `}}const W6={kernelName:fd,backendName:"webgl",kernelFunc:function V6(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{begin:o,end:a,strides:i,beginMask:l,endMask:u,ellipsisMask:c,newAxisMask:h,shrinkAxisMask:d}=s,{finalShapeSparse:p,finalShape:f,isIdentity:g,sliceDim0:m,isSimpleSlice:y,begin:x,end:b,strides:w}=cp(r.shape,o,a,i,l,u,c,h,d);let S;if(g)S=ce({inputs:{x:r},backend:e,attrs:{shape:f}});else if(m||y){I(r.shape.length>=1,()=>`Input must have rank at least 1, got: ${r.shape.length}`);const k=ip(x,b,w),T=ga({inputs:{x:r},backend:e,attrs:{begin:x,size:k}});S=ce({inputs:{x:T},backend:e,attrs:{shape:f}}),e.disposeIntermediateTensorInfo(T)}else if(e.shouldExecuteOnCPU([r])){const T=e.readSync(r.dataId),E=Me(r.shape,r.dtype,T),R=XW(p,E,w,x);S=e.makeTensorInfo(f,r.dtype,R.values)}else{const T=new B6(x,w,p);S=e.runWebGLProgram(T,[r],r.dtype)}const C=ce({inputs:{x:S},backend:e,attrs:{shape:f}});return e.disposeIntermediateTensorInfo(S),C}},G6={kernelName:md,backendName:"webgl",kernelFunc:function U6(n){const{inputs:t,backend:e,attrs:s}=n,{separator:r,nGramWidths:o,leftPad:a,rightPad:i,padWidth:l,preserveShortSequences:u}=s,{data:c,dataSplits:h}=t,d=e.readSync(c.dataId),p=e.readSync(h.dataId),[f,g]=ZW(d,p,r,o,a,i,l,u);return[e.makeTensorInfo([f.length],"string",f),e.makeTensorInfo(h.shape,"int32",g)]}},j6={kernelName:gd,backendName:"webgl",kernelFunc:function H6(n){const{inputs:t,backend:e,attrs:s}=n,{skipEmpty:r}=s,{input:o,delimiter:a}=t;if("string"!==o.dtype)throw new Error("Input must be of datatype string");if(1!==o.shape.length)throw new Error(`Input must be a vector, got shape: ${o.shape}`);if(0!==a.shape.length)throw new Error(`Delimiter must be a scalar, got shape: ${a.shape}`);const i=e.readSync(o.dataId),l=e.readSync(a.dataId)[0],[u,c,h]=YW(i,l,r),d=c.length;return[e.makeTensorInfo([d,2],"int32",u),e.makeTensorInfo([d],"string",c),e.makeTensorInfo([2],"int32",new Int32Array(h))]}},q6={kernelName:yd,backendName:"webgl",kernelFunc:function K6(n){const{inputs:t,backend:e,attrs:s}=n,{numBuckets:r}=s,{input:o}=t;if("string"!==o.dtype)throw new Error("Input must be of datatype string");if(r<=0)throw new Error("Number of buckets must be at least 1");const a=e.readSync(o.dataId),i=QW(a,r);return e.makeTensorInfo(o.shape,"int32",i)}},X6=et({opSnippet:"return tan(x);"}),Z6={kernelName:hi,backendName:"webgl",kernelFunc:X6},Y6=et({opSnippet:"\n  float e2x = exp(-2.0 * abs(x));\n  return sign(x) * (1.0 - e2x) / (1.0 + e2x);\n"}),Q6={kernelName:di,backendName:"webgl",kernelFunc:Y6},eX={kernelName:ad,backendName:"webgl",kernelFunc:function J6(n){const{inputs:t,backend:e}=n,{tensor:r,indices:o,updates:a}=t,{sliceRank:i,numUpdates:l,sliceSize:u,strides:c,outputSize:h}=ro(0,o,r.shape),d=[h/u,u];if(0===h)return e.makeTensorInfo(r.shape,o.dtype);const p=ce({inputs:{x:o},backend:e,attrs:{shape:[l,i]}}),f=ce({inputs:{x:a},backend:e,attrs:{shape:[l,u]}}),g=ce({inputs:{x:r},backend:e,attrs:{shape:d}}),m=new hg(l,i,p.shape.length,f.shape.length,c,d,!1,!0),y=e.runWebGLProgram(m,[f,p,g],g.dtype),x=ce({inputs:{x:y},backend:e,attrs:{shape:r.shape}});return e.disposeIntermediateTensorInfo(p),e.disposeIntermediateTensorInfo(f),e.disposeIntermediateTensorInfo(g),e.disposeIntermediateTensorInfo(y),x}};class tX{constructor(t,e){this.variableNames=["A"];const s=new Array(t.length);for(let a=0;a<s.length;a++)s[a]=t[a]*e[a];this.outputShape=s,this.rank=s.length;const r=ct(this.rank),o=function nX(n){const t=n.length;if(t>5)throw Error(`Tile for rank ${t} is not yet supported`);if(1===t)return`imod(resRC, ${n[0]})`;const e=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u"],s=[];for(let r=0;r<n.length;r++)s.push(`imod(${e[r]}, ${n[r]})`);return s.join()}(t);this.userCode=`\n      void main() {\n        ${r} resRC = getOutputCoords();\n        setOutput(getA(${o}));\n      }\n    `}}function eS(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{reps:o}=s;if("string"===r.dtype||r.shape.length>5){const l=e.readSync(r.dataId),u="string"===r.dtype?l.map(d=>dr(d)):l,c=Me(r.shape,r.dtype,u),h=e4(c,o);return e.makeTensorInfo(h.shape,h.dtype,h.values)}const a=new tX(r.shape,o);return e.runWebGLProgram(a,[r],r.dtype)}const sX={kernelName:pi,backendName:"webgl",kernelFunc:eS};class rX{constructor(t){this.variableNames=["x","indices"],this.customUniforms=[{name:"n",type:"int"},{name:"firstPass",type:"int"},{name:"negativeInf",type:"float"},{name:"dir",type:"int"},{name:"inc",type:"int"}],this.outputShape=t,this.userCode="\n       void main() {\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int elemIdx = coords[1];\n\n         // We compare elements pair-wise within a group of size 2 * inc.\n         // The comparing rule for each group alternates between ascending\n         // and descending. Within each group, we compare each pair at\n         // positions i and i+inc. To decide whether an element at position i\n         // is x0 or x1, we mod it by 2 * inc, if the result is smaller than\n         // inc, it is in the first half of the group, we denote it as x0,\n         // otherwise we denote it as x1.\n         // For example, as shown in the Bitonic top K paper referenced above,\n         // Figure5(a) shows that element[1] is in the\n         // second half of the group when group size is 2, but it is in the\n         // first half of the group when group size is 4.\n\n         bool isFirstInPair = imod(elemIdx, 2 * inc) < inc;\n         int i = isFirstInPair ? elemIdx : elemIdx - inc;\n\n         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));\n         int i1 = firstPass == 1 ? i + inc : int(getIndices(batch, i + inc));\n         float x0 = i0 < n ? getX(batch, i0) : negativeInf;\n         float x1 = i1 < n ? getX(batch, i1) : negativeInf;\n\n         // Denotes which direction indices are in (ascending or descending).\n         bool reverse = imod(elemIdx, 2 * dir) >= dir;\n         bool isGreater = x0 > x1 || (x0 == x1 && i1 > i0);\n         if (reverse == isGreater) { // Elements in opposite order of direction\n           int iTemp = i0;\n           i0 = i1;\n           i1 = iTemp;\n         }\n         if (isFirstInPair) {\n            setOutput(float(i0));\n         } else {\n            setOutput(float(i1));\n         }\n       }\n     "}}class oX{constructor(t){this.variableNames=["x","indices"],this.customUniforms=[{name:"n",type:"int"},{name:"firstPass",type:"int"},{name:"k",type:"int"}],this.outputShape=t,this.userCode="\n    void main() {\n         // Takes max of indices (0, k), (1, k + 1), (2, k + 2) ...\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int elemIdx = coords[1];\n\n         // The output size is half of the previous size.\n         // If the previous sequence is | | | | _ _ _ _  | | | |  _ _ _ _ (k=4),\n         // we only need to output the indices at positions |, the indices at\n         // positions _ can be thrown away, see Figure5(b) After Phase 2\n         // (Merge phase) in the Bitonic Top K paper referenced above.\n         // For example, the paper shows we only need to output the orange bars.\n         // The output sequence should look like this | | | | | | | |.\n         // Because the sequence is halved, to map the output index back\n         // to the previous sequence to find the corresponding value,\n         // we need to double the index. When we double the index,\n         // we basically interpolate a position, so 2i looks like\n         // | _ | _ | _ | _ | _ | _ | _. We move the | to the first k position\n         // of each 2k positions by - elemIdx % k. E.g. for output at\n         // index 4,5,6,7, we want to get the corresponding element at\n         // original index 8,9,10,11, for output at index 8,9,10,11,\n         // we want to get the corresponding element at original index\n         // 16,17,18,19, so on and so forth.\n\n         int i = elemIdx < k ? elemIdx : (elemIdx * 2 - imod(elemIdx, k));\n         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));\n         int i1 = firstPass == 1 ? i + k : int(getIndices(batch, i + k));\n\n         float x0 = getX(batch, i0);\n         float x1 = i1 < n ? getX(batch, i1) : x0;\n\n         setOutput(x0 >= x1 ? float(i0) : float(i1));\n       }\n     "}}function Io(n,t){null!==t&&n.disposeIntermediateTensorInfo(t)}function tS(n){let t=1;for(;t<n;)t*=2;return t}const iX={kernelName:xd,backendName:"webgl",kernelFunc:function aX(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{k:o,sorted:a}=s,i=z().getNumber("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD"),l=z().getNumber("TOPK_K_CPU_HANDOFF_THRESHOLD"),u=r.shape,c=u[u.length-1];if(e.shouldExecuteOnCPU([r])||c<i||o>l){const R=e.readSync(r.dataId),[L,B]=t4(R,u,r.dtype,o,a);return[e.makeTensorInfo(L.shape,L.dtype,L.values),e.makeTensorInfo(B.shape,B.dtype,B.values)]}if(0===o)return u[u.length-1]=0,[e.makeTensorInfo(u,r.dtype,[]),e.makeTensorInfo(u,"int32",[])];if(1===c)return[r,ll({attrs:{shape:u,dtype:"int32",value:0},backend:e})];const h=e.texData.get(r.dataId),d=null!==h&&h.isPacked,p=d?e.unpackTensor(r):r,g=G(u)/c,m=ce({inputs:{x:p},attrs:{shape:[g,c]},backend:e});d&&Io(e,p);const y=tS(o),x=tS(c);let b=null;const w=()=>null===b?[m,m]:[m,b],S=(R,L,B)=>{const U=w(),H=new rX(B),Y=b;b=e.runWebGLProgram(H,U,"int32",[[c],[null===b?1:0],[Number.NEGATIVE_INFINITY],[R],[L]]),Io(e,Y)};for(let R=1;R<y;R*=2){const L=2*R;for(let B=R;B>=1;B/=2)S(L,B,[g,x])}for(let R=x;R>y;R/=2){const L=w(),B=new oX([g,R/2]),j=b;b=e.runWebGLProgram(B,L,"int32",[[c],[null===b?1:0],[y]]),Io(e,j);const Z=y/2,Y=2*Z;for(let K=Z;K>=1;K/=2)S(Y,K,b.shape)}let C=b;b=ga({inputs:{x:b},backend:e,attrs:{begin:0,size:[g,o]}}),Io(e,C);let k=U1({inputs:{x:m,indices:b},backend:e,attrs:{axis:1,batchDims:1}});Io(e,m);const T=u.slice(0,-1);T.push(o),C=b,b=ce({inputs:{x:b},attrs:{shape:T},backend:e}),Io(e,C);const E=k;return k=ce({inputs:{x:k},attrs:{shape:T},backend:e}),Io(e,E),[k,b]}};class lX{constructor(t,e,s,r,o,a){this.variableNames=["Image","Transforms"],this.outputShape=a;const i="nearest"===s?1:2;let l;switch(r){case"constant":default:l=1;break;case"reflect":l=2;break;case"wrap":l=3;break;case"nearest":l=4}this.userCode=`\n            float mapCoord(float outCoord, float len) {\n              float inCoord = outCoord;\n              if(${l} == 2) {\n                if (inCoord < 0.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz2 = 2.0 * len;\n                    if (inCoord < sz2) {\n                      inCoord = sz2 * float(int(float(-inCoord / sz2))) +\n                      inCoord;\n                    }\n                    inCoord = inCoord < -len ? inCoord + sz2 : -inCoord - 1.0;\n                  }\n                } else if (inCoord > len - 1.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz2 = 2.0 * len;\n                    inCoord -= sz2 * float(int(float(inCoord / sz2)));\n                    if (inCoord >= len) {\n                      inCoord = sz2 - inCoord - 1.0;\n                    }\n                  }\n                }\n                return clamp(inCoord, 0.0, len - 1.0);\n              } else if (${l} == 3) {\n                if (inCoord < 0.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz = len - 1.0;\n                    inCoord += len * (float(int(float(-inCoord / sz))) + 1.0);\n                  }\n                } else if (inCoord > len - 1.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz = len - 1.0;\n                    inCoord -= len * float(int(float(inCoord / sz)));\n                  }\n                }\n                return clamp(inCoord, 0.0, len - 1.0);\n              } else if (${l} == 4) {\n                return clamp(outCoord, 0.0, len - 1.0);\n              } else {\n                return outCoord;\n              }\n            }\n\n            float readWithFillValue(int batch, int coordY, int coordX,\n              int channel) {\n              float outputValue;\n              if (0 <= coordY && coordY < ${t} && 0 <= coordX && coordX < ${e}) {\n                  outputValue = getImage(batch, coordY, coordX, channel);\n              } else {\n                outputValue = float(${o});\n              }\n              return outputValue;\n            }\n\n            void main() {\n              ivec4 coords = getOutputCoords();\n              float outputValue;\n              int batch = coords[0];\n              int x = coords[2];\n              int y = coords[1];\n              int channel = coords[3];\n              float xf = float(x);\n              float yf = float(y);\n              float a1 = getTransforms(batch, 0);\n              float a2 = getTransforms(batch, 1);\n              float a3 = getTransforms(batch, 2);\n              float b1 = getTransforms(batch, 3);\n              float b2 = getTransforms(batch, 4);\n              float b3 = getTransforms(batch, 5);\n              float c1 = getTransforms(batch, 6);\n              float c2 = getTransforms(batch, 7);\n              float projection = c1 * xf + c2 * yf + 1.0;\n              if (projection == 0.0) {\n                outputValue = float(${o});\n              } else {\n                float inX = (a1 * xf + a2 * yf + a3) / projection;\n                float inY = (b1 * xf + b2 * yf + b3) / projection;\n                float mapX = mapCoord(inX, float(${e}));\n                float mapY = mapCoord(inY, float(${t}));\n\n                if (${i} == 1) {\n                  int coordY = int(round(mapY));\n                  int coordX = int(round(mapX));\n                  outputValue = readWithFillValue(batch, coordY, coordX,\n                    channel);\n                } else {\n                  float yFloor = floor(mapY);\n                  float xFloor = floor(mapX);\n                  float yCeil = yFloor + 1.0;\n                  float xCeil = xFloor + 1.0;\n                  float valueYFloor = (xCeil - mapX) *\n                  readWithFillValue(batch, int(yFloor), int(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, int(yFloor), int(xCeil), channel);\n                  float valueYCeil = (xCeil - mapX) *\n                  readWithFillValue(batch, int(yCeil), int(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, int(yCeil), int(xCeil), channel);\n                  outputValue = (yCeil - mapY) * valueYFloor +\n                  (mapY - yFloor) * valueYCeil;\n                }\n              }\n              setOutput(outputValue);\n            }\n        `}}const cX={kernelName:bd,backendName:"webgl",kernelFunc:function uX(n){const{inputs:t,backend:e,attrs:s}=n,{image:r,transforms:o}=t,{interpolation:a,fillMode:i,fillValue:l,outputShape:u}=s,[c,h,d,p]=r.shape,[f,g]=null!=u?u:[h,d],y=new lX(h,d,a,i,l,[c,f,g,p]);return e.runWebGLProgram(y,[r,o],"float32")}},dX={kernelName:wd,backendName:"webgl",kernelFunc:function hX(n){const{inputs:t,attrs:e,backend:s}=n,{axis:r}=e,{x:o}=t;nl(o,"unique"),console.warn("WARNING: ","UI might be locked temporarily as data is being downloaded");const a=s.readSync(o.dataId),{outputValues:i,outputShape:l,indices:u}=n4(a,r,o.shape,o.dtype);return[s.makeTensorInfo(l,o.dtype,i),s.makeTensorInfo([u.length],"int32",u)]}},fX={kernelName:hu,backendName:"webgl",kernelFunc:function pX(n){const{inputs:t,backend:e,attrs:s}=n,{value:r}=t;let{axis:o}=s;o<0&&(o+=r.shape.length);const a=r,i=a.shape.length,l=r.shape[o],u=new Array(i-1);let c=0;for(let g=0;g<i;g++)g!==o&&(u[c++]=a.shape[g]);const h=[],d=new Array(i).fill(0),p=a.shape.slice();p[o]=1;const f=new Array(l);for(let g=0;g<f.length;g++){d[o]=g;const m=ga({inputs:{x:a},backend:e,attrs:{begin:d,size:p}}),y=ce({inputs:{x:m},backend:e,attrs:{shape:u}});f[g]=y,h.push(m)}return h.forEach(g=>e.disposeIntermediateTensorInfo(g)),f}};class mX{constructor(t,e){this.variableNames=["x","segmentIds"];const s=t.windowSize,r=t.batchSize,o=t.inSize,a=t.numSegments,i=a*Math.ceil(o/s);this.outputShape=[r,i];const c=4*Math.floor(s/4),h=s%4,d="\n        sumValue += dot(values, segFilter);\n    ";let p="";o%s>0&&(p=`\n        if (inIdx < 0 || inIdx >= ${o}) {\n          return initializationValue;\n        }\n      `);let f="";o%s>0&&(f=`\n        if (inIdx < 0 || inIdx >= ${o}) {\n          return -1.0;\n        }\n      `),this.userCode=`\n      const float initializationValue = 0.0;\n\n      float getValue(int batch, int inIdx) {\n        ${p}\n        return getX(batch, inIdx);\n      }\n\n      float getSegmentIdAtIndex(int inIdx) {\n        ${f}\n        return getSegmentIds(inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = int(floor(float(outIdx) / float(\n          ${a})) * float(${s}));\n        int currentSeg = int(mod(float(outIdx), float(${a})));\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${c}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0\n          );\n\n          ${d}\n        }\n\n        int inIdx = inOffset + ${c};\n        if (${1===h}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            0,\n            0,\n            0\n          );\n\n          ${d}\n        } else if (${2===h}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n              0,\n              0\n          );\n\n          ${d}\n        } else if (${3===h}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            0\n          );\n\n          ${d}\n        }\n        setOutput(sumValue);\n      }\n    `}}const xX=[Z4,Q4,tU,rU,aU,uU,hU,pU,yU,bU,SU,CU,$U,RU,OU,PU,MU,UU,HU,KU,ZU,nG,rG,lG,cG,mG,yG,vG,D4,NG,_G,DG,MG,WG,GG,jG,qG,QG,eH,nH,rH,aH,lH,hH,pH,yH,bH,SH,CH,TH,_H,RH,FH,PH,MH,BH,WH,GH,jH,qH,ZH,QH,tj,rj,aj,uj,dj,fj,gj,R4,xj,TG,wj,Sj,Nj,O4,kj,$j,Ej,Dj,Lj,zj,Bj,Wj,Hj,Kj,Xj,Jj,tK,sK,iK,uK,hK,pK,mK,bK,SK,kK,RK,z4,LK,MK,WK,HK,hG,KK,XK,YK,eq,rq,P4,aq,lq,cq,dq,pq,dG,$K,mq,xq,vq,B4,Cq,$q,Rq,Oq,Mq,Vq,Uq,Hq,qq,Yq,e6,s6,a6,l6,d6,f6,tG,EK,g6,y6,b6,v6,I6,C6,T6,_6,A6,D6,O6,P6,M6,W6,G6,j6,q6,_K,K4,Z6,Q6,eX,sX,iX,cX,q4,dX,fX,{kernelName:du,backendName:"webgl",kernelFunc:function gX(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,segmentIds:o}=t,{numSegments:a}=s,i=r.shape.length,l=[];let u=0;const c=kt([u],i);let h=r;null!=c&&(h=kn({inputs:{x:r},backend:e,attrs:{perm:c}}),l.push(h),u=Lt(1,i)[0]);const d=yb(h.shape,u,a),p=G([h.shape[u]]),f=ce({inputs:{x:h},backend:e,attrs:{shape:[-1,p]}});l.push(f);const g=$d(r.dtype),m=(w,S,C,k,T)=>{const E=w.shape[0],R=w.shape[1],L=gb(R,T),U=new mX({windowSize:L,inSize:R,batchSize:E,numSegments:T},S),H=e.compileAndRun(U,[w,C],k);if(l.push(H),H.shape[1]===T)return H;const j=Y1({backend:e,attrs:{start:0,stop:T,step:1,dtype:"float32"}}),Z=eS({inputs:{x:j},backend:e,attrs:{reps:[R/L]}});return l.push(j),l.push(Z),m(H,S,Z,k,T)},x=ce({inputs:{x:m(f,"unsortedSegmentSum",o,g,a)},backend:e,attrs:{shape:d}});let b=x;if(null!=c){l.push(x);const w=Sr(c);b=kn({inputs:{x:b},backend:e,attrs:{perm:w}})}return l.forEach(w=>e.disposeIntermediateTensorInfo(w)),b}},qK];for(const n of xX)Nd(n);var wX=V(8132);class dg{validate(t=null,e){if(t){if(e)return!0;throw console.error("The canvas is or invalid or empty/null"),new Error("The canvas is or invalid or empty/null")}throw console.error("The model is or invalid or empty/null"),new Error("The model is or invalid or empty/null")}predictPrivate(t,e,s,r,o){return(0,W.Z)(function*(){return yield(new dg).predict(t,e,s,r,o)})()}predict(t,e,s,r,o){var a=this;return(0,W.Z)(function*(){if(a.validate(t,e)){const i=s,l=P(()=>$y(e).resizeNearestNeighbor([r,o]).toFloat().expandDims().div(225)),u=null==t?void 0:t.predict(l);let{scores:c,predictions:h}=yield a.getScore(u,i);if(c.shape[0]>0){const p=a.getClassIds(h),f=a.getBoxes(h,e,{width:r,height:o}),g=a.nms(f,c,.3);if(f.shape[0]>0){const m=a.xywh2xyxy(f.arraySync());return a.prepareReturn(m,p,c,g)}return l.dispose(),u.dispose(),p.dispose(),f.dispose(),Be(),jd(),null}return null}return null})()}getScore(t,e){return(0,W.Z)(function*(){let s=t.squeeze().transpose();const r=s.slice([0,4],[-1,-1]);let o=Gn(r,1);const a=_n(o,e);return s=yield Kp(s,a),o=yield Kp(o,a),{scores:o,predictions:s}})()}getClassIds(t){return Qr(t.slice([0,(t.shape[1]||0)-3],[-1,3]),1)}getBoxes(t,e,s={width:640,height:480}){let r=t.slice([0,0],[-1,4]);const o=s.width,a=s.height,i=e.width,l=e.height,u=mn([o,a,o,a],"float32");return r=r.div(u),r=r.mul([i,l,i,l]),r}nms(t,e,s){const r=t.arraySync(),o=e.arraySync();let a=this.argSorf(o);const i=[];for(;a.length>0;){const l=a[0];i.push(l);const u=r[l],h=a.slice(a.length>1?1:0).map(p=>r[p]);this.compute_iou(u,h).reduce((p,f,g)=>(f<s&&p.push(g),p),[]),a=a.slice(1)}return i}compute_iou(t,e){const s=At(e).slice([0,0],[-1,1]).arraySync(),r=At(e).slice([0,1],[-1,1]).arraySync(),o=At(e).slice([0,2],[-1,1]).arraySync(),a=At(e).slice([0,3],[-1,1]).arraySync(),i=t[0],l=t[1],u=t[2],c=t[3],h=At(s.map(S=>Math.max(S,i))),d=At(r.map(S=>Math.max(S,l))),p=At(o.map(S=>Math.min(S,u))),f=At(a.map(S=>Math.min(S,c))),g=xs(0,p.sub(h)).mul(xs(0,f.sub(d))),m=At((u-i)*(c-l)),y=At(o).sub(At(s)).mul(At(a).sub(r)),b=m.add(y).transpose().sub(g);return g.div(b).dataSync()}xywh2xyxy(t){return{boxes:t.map(s=>[s[0]-s[2]/2,s[1]-s[3]/2,s[0]+s[2]/2,s[1]+s[3]/2]).map(s=>({x:s[0],y:s[1],width:s[2],height:s[3]}))}}argSorf(t){return t.map((e,s)=>({value:e,index:s})).sort((e,s)=>e.value-s.value).map(e=>e.index).reverse()}prepareReturn(t,e,s,r){return r.map(o=>({box:t.boxes[o],classeId:e.arraySync()[o],score:100*s.arraySync()[o]}))}getTypePredictedClass(t,e){let s=[];return t.reduce((r,o)=>{const{classeId:a}=o;return r[a]||(r[a]=!0,s.push({classeId:a})),r},{}),s.map(r=>e[r.classeId])}createBoundingBox(t,e=!1,s,r=!1,o,a="red",i=2,l=!1){const u=o.getContext("2d");let c=[];t.reduce((h,d)=>{const{classeId:p}=d;return h[p]||(h[p]=!0,c.push({classeId:p})),h},{}),null!=u&&c.forEach(h=>{const d=h.classeId,p=t.filter(g=>g.classeId===d).reduce((g,m)=>m.score>g?m.score:g,-1/0),f=t.find(g=>g.classeId===d&&g.score===p);f&&(l&&console.log(f,`${s[f.classeId]} ${f.score.toFixed(2)}%`),u.strokeStyle=a,u.lineWidth=i,r&&u.fillText(`${s[f.classeId]} ${f.score.toFixed(2)}%`,f.box.x,f.box.y-5),e&&u.strokeRect(f.box.x,f.box.y,f.box.width-f.box.x,f.box.height-f.box.y))})}}let nS=(()=>{class n extends dg{constructor(){super()}predict(e,s,r,o,a){var i=this;return(0,W.Z)(function*(){return yield i.predictPrivate(e,s,r,o,a)})()}predictObservable(e,s,r,o,a){return new wX.y(i=>{if(this.validate(e,s)){const l=r,u=P(()=>$y(s).resizeNearestNeighbor([o,a]).toFloat().expandDims().div(225)),c=null==e?void 0:e.predict(u);this.getScore(c,l).then(({scores:h,predictions:d})=>{if(h.shape[0]>0){const f=this.getClassIds(d),g=this.getBoxes(d,s,{width:o,height:a}),m=this.nms(g,h,.8);if(g.shape[0]>0){const y=this.xywh2xyxy(g.arraySync()),x=this.prepareReturn(y,f,h,m);i.next(x),i.complete(),i.unsubscribe()}u.dispose(),c.dispose(),f.dispose(),g.dispose(),Be(),jd()}})}})}}return n.\u0275fac=function(e){return new(e||n)},n.\u0275prov=ge.Yz7({token:n,factory:n.\u0275fac,providedIn:"root"}),n})();var vX=V(8748),SX=V(6424),IX=V(1570),NX=V(8004),CX=V(6142),kX=V(134),TX=V(6974),$X=V(6811);const EX=["video"];let AX=(()=>{var n;class t{set autoplay(s){this._autoplay=s}get autoplay(){return this._autoplay}set canvas(s){this._canvas=s}get canvas(){return this._canvas}set interetionPerSec(s){this._interetionPerSec=s}get interetionPerSec(){return this._interetionPerSec}set videoUrl(s){this._videoUrl=s}get videoUrl(){return this._videoUrl}get setIntervalReference(){return this._setIntervalReference}set setIntervalReference(s){this._setIntervalReference=s}get stream(){return this._stream.getValue()}set stream(s){this._stream.getValue()!==s&&this._stream.next(s)}get activateFrame(){return this._activateFrame}set activateFrame(s){this._activateFrame=s}get model(){return this._model}set model(s){this._model!==s&&(this._model=s)}constructor(s,r){this.objectDetect=s,this.loadingCtrl=r,this._destroy$=new vX.x,this.video=null,this.predictionReturn=new ge.vpe,this._autoplay=!1,this._canvas=null,this._interetionPerSec=200,this._videoUrl=null,this._setIntervalReference=null,this._stream=new SX.X(null),this._activateFrame=!1,this._model=null}ngOnInit(){this._stream.pipe((0,IX.b)(s=>{s&&this.setVideoOnCanvas(s)}),(0,NX.x)(),function _X(n){return(0,CX.e)((t,e)=>{(0,TX.Xf)(n).subscribe((0,kX.x)(e,()=>e.complete(),$X.Z)),!e.closed&&t.subscribe(e)})}(this._destroy$)).subscribe(),this.autoplay&&this.startCamera()}ngOnDestroy(){this.stopCamera()}setVideoOnCanvas(s){var r;const o=this.canvas,a=null===(r=this.video)||void 0===r?void 0:r.nativeElement,i=null==o?void 0:o.getContext("2d",{willReadFrequently:!0});o&&a&&i&&(this.videoUrl?(a.muted=!0,a.src=this.videoUrl):a.srcObject=s,a.play(),a.addEventListener("loadedmetadata",()=>{o.width=a.videoWidth,o.height=a.videoHeight;const l=()=>{this.model&&this.objectDetect.predict(this.model,a,.7,224,224).then(u=>{null==i||i.drawImage(a,0,0),this.predictionReturn.emit({boxes:u,canvas:o,videoTime:a.currentTime})})};this.setIntervalReference=setInterval(()=>{this.activateFrame&&l()},this.interetionPerSec)}))}startCamera(){navigator.mediaDevices.getUserMedia({video:!0,audio:!1}).then(s=>{this.activateFrame=!0,this._stream.next(s)})}stopCamera(){this.stream&&this.setIntervalReference&&(this.activateFrame=!1,clearInterval(this.setIntervalReference),this.stream.getTracks().forEach(r=>r.stop()))}}return(n=t).\u0275fac=function(s){return new(s||n)(ge.Y36(nS),ge.Y36(Ee.HT))},n.\u0275cmp=ge.Xpm({type:n,selectors:[["app-canvas-video"]],viewQuery:function(s,r){if(1&s&&ge.Gf(EX,5),2&s){let o;ge.iGM(o=ge.CRH())&&(r.video=o.first)}},inputs:{autoplay:"autoplay",canvas:"canvas",interetionPerSec:"interetionPerSec",videoUrl:"videoUrl",model:"model"},outputs:{predictionReturn:"predictionReturn"},decls:2,vars:0,consts:[["controls","","muted","muted","height","480","width","640","autoplay","true","hidden",""],["video",""]],template:function(s,r){1&s&&ge._UZ(0,"video",0,1)},changeDetection:0}),t})();const RX=["canvasDisplay"];let DX=(()=>{var n;class t{constructor(s){var r=this;this.objectDetect=s,this.canvasDisplay=null,this.model=null,this.msg="",function bF(n){return Am.apply(this,arguments)}("assets/mask_detector/model.json").then(function(){var a=(0,W.Z)(function*(i){r.model=i});return function(i){return a.apply(this,arguments)}}())}ngOnDestroy(){var s,r;null===(s=this.model)||void 0===s||s.dispose(),null===(r=this.model)||void 0===r||r.disposeIntermediateTensors(),jd()}ngOnInit(){}predictionReturn(s){if(s.boxes&&s.canvas){const r=s.canvas.getContext("2d");if(s.boxes&&r){const o=["Without Mask","With Mask","Mask Weared Incorrect"];s.boxes.slice(0,1).forEach(a=>{const i=new Array;i.push(a);let l="";switch(a.classeId){case 0:l="red";break;case 1:l="green";break;case 2:l="blue"}const u=a.score.toFixed(2);this.msg=`${o[a.classeId]} - ${u}%`,this.objectDetect.createBoundingBox(i,!0,o,!1,s.canvas,l,2,!0)})}}}}return(n=t).\u0275fac=function(s){return new(s||n)(ge.Y36(nS))},n.\u0275cmp=ge.Xpm({type:n,selectors:[["app-mask-detect"]],viewQuery:function(s,r){if(1&s&&ge.Gf(RX,7),2&s){let o;ge.iGM(o=ge.CRH())&&(r.canvasDisplay=o.first)}},decls:6,vars:5,consts:[["width","640","height","480"],["canvasDisplay",""],[3,"model","canvas","interetionPerSec","autoplay","predictionReturn"]],template:function(s,r){if(1&s&&(ge.TgZ(0,"div")(1,"h2"),ge._uU(2),ge.qZA(),ge._UZ(3,"canvas",0,1),ge.TgZ(5,"app-canvas-video",2),ge.NdJ("predictionReturn",function(a){return r.predictionReturn(a)}),ge.qZA()()),2&s){const o=ge.MAs(4);ge.xp6(2),ge.hij(" *** ",r.msg," *** "),ge.xp6(3),ge.Q6J("model",r.model)("canvas",o)("interetionPerSec",50)("autoplay",!0)}},dependencies:[AX]}),t})();const FX=[{path:"",component:(()=>{var n;class t{constructor(){}}return(n=t).\u0275fac=function(s){return new(s||n)},n.\u0275cmp=ge.Xpm({type:n,selectors:[["app-home"]],decls:11,vars:2,consts:[[3,"translucent"],[3,"fullscreen"],["collapse","condense"],["size","large"],["id","container"]],template:function(s,r){1&s&&(ge.TgZ(0,"ion-header",0)(1,"ion-toolbar")(2,"ion-title"),ge._uU(3," Victor Barbosa - Mask Detector "),ge.qZA()()(),ge.TgZ(4,"ion-content",1)(5,"ion-header",2)(6,"ion-toolbar")(7,"ion-title",3),ge._uU(8,"Victor Barbosa - Mask Detector"),ge.qZA()()(),ge.TgZ(9,"div",4),ge._UZ(10,"app-mask-detect"),ge.qZA()()),2&s&&(ge.Q6J("translucent",!0),ge.xp6(4),ge.Q6J("fullscreen",!0))},dependencies:[Ee.W2,Ee.Gu,Ee.wd,Ee.sr,DX],styles:["#container[_ngcontent-%COMP%]{text-align:center;position:absolute;left:0;right:0;top:50%;transform:translateY(-50%)}#container[_ngcontent-%COMP%]   strong[_ngcontent-%COMP%]{font-size:20px;line-height:26px}#container[_ngcontent-%COMP%]   p[_ngcontent-%COMP%]{font-size:16px;line-height:22px;color:#8c8c8c;margin:0}#container[_ngcontent-%COMP%]   a[_ngcontent-%COMP%]{text-decoration:none}"]}),t})()}];let OX=(()=>{var n;class t{}return(n=t).\u0275fac=function(s){return new(s||n)},n.\u0275mod=ge.oAB({type:n}),n.\u0275inj=ge.cJS({imports:[je.Bz.forChild(FX),je.Bz]}),t})(),LX=(()=>{var n;class t{}return(n=t).\u0275fac=function(s){return new(s||n)},n.\u0275mod=ge.oAB({type:n}),n.\u0275inj=ge.cJS({imports:[me.ez,tt.u5,Ee.Pc,OX]}),t})()},5410:()=>{},8628:()=>{},1601:()=>{},7792:()=>{},4977:()=>{},5042:()=>{}}]);